#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'base_a_p_i'
require_relative 'airavata_api_types'

module Airavata
  class Client < ::BaseAPI::Client 
    include ::Thrift::Client

    def isUserExists(authzToken, gatewayId, userName)
      send_isUserExists(authzToken, gatewayId, userName)
      return recv_isUserExists()
    end

    def send_isUserExists(authzToken, gatewayId, userName)
      send_message('isUserExists', IsUserExists_args, :authzToken => authzToken, :gatewayId => gatewayId, :userName => userName)
    end

    def recv_isUserExists()
      result = receive_message(IsUserExists_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isUserExists failed: unknown result')
    end

    def addGateway(authzToken, gateway)
      send_addGateway(authzToken, gateway)
      return recv_addGateway()
    end

    def send_addGateway(authzToken, gateway)
      send_message('addGateway', AddGateway_args, :authzToken => authzToken, :gateway => gateway)
    end

    def recv_addGateway()
      result = receive_message(AddGateway_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addGateway failed: unknown result')
    end

    def getAllUsersInGateway(authzToken, gatewayId)
      send_getAllUsersInGateway(authzToken, gatewayId)
      return recv_getAllUsersInGateway()
    end

    def send_getAllUsersInGateway(authzToken, gatewayId)
      send_message('getAllUsersInGateway', GetAllUsersInGateway_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getAllUsersInGateway()
      result = receive_message(GetAllUsersInGateway_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllUsersInGateway failed: unknown result')
    end

    def updateGateway(authzToken, gatewayId, updatedGateway)
      send_updateGateway(authzToken, gatewayId, updatedGateway)
      return recv_updateGateway()
    end

    def send_updateGateway(authzToken, gatewayId, updatedGateway)
      send_message('updateGateway', UpdateGateway_args, :authzToken => authzToken, :gatewayId => gatewayId, :updatedGateway => updatedGateway)
    end

    def recv_updateGateway()
      result = receive_message(UpdateGateway_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateGateway failed: unknown result')
    end

    def getGateway(authzToken, gatewayId)
      send_getGateway(authzToken, gatewayId)
      return recv_getGateway()
    end

    def send_getGateway(authzToken, gatewayId)
      send_message('getGateway', GetGateway_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getGateway()
      result = receive_message(GetGateway_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGateway failed: unknown result')
    end

    def deleteGateway(authzToken, gatewayId)
      send_deleteGateway(authzToken, gatewayId)
      return recv_deleteGateway()
    end

    def send_deleteGateway(authzToken, gatewayId)
      send_message('deleteGateway', DeleteGateway_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_deleteGateway()
      result = receive_message(DeleteGateway_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteGateway failed: unknown result')
    end

    def getAllGateways(authzToken)
      send_getAllGateways(authzToken)
      return recv_getAllGateways()
    end

    def send_getAllGateways(authzToken)
      send_message('getAllGateways', GetAllGateways_args, :authzToken => authzToken)
    end

    def recv_getAllGateways()
      result = receive_message(GetAllGateways_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllGateways failed: unknown result')
    end

    def isGatewayExist(authzToken, gatewayId)
      send_isGatewayExist(authzToken, gatewayId)
      return recv_isGatewayExist()
    end

    def send_isGatewayExist(authzToken, gatewayId)
      send_message('isGatewayExist', IsGatewayExist_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_isGatewayExist()
      result = receive_message(IsGatewayExist_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isGatewayExist failed: unknown result')
    end

    def createNotification(authzToken, notification)
      send_createNotification(authzToken, notification)
      return recv_createNotification()
    end

    def send_createNotification(authzToken, notification)
      send_message('createNotification', CreateNotification_args, :authzToken => authzToken, :notification => notification)
    end

    def recv_createNotification()
      result = receive_message(CreateNotification_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createNotification failed: unknown result')
    end

    def updateNotification(authzToken, notification)
      send_updateNotification(authzToken, notification)
      return recv_updateNotification()
    end

    def send_updateNotification(authzToken, notification)
      send_message('updateNotification', UpdateNotification_args, :authzToken => authzToken, :notification => notification)
    end

    def recv_updateNotification()
      result = receive_message(UpdateNotification_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateNotification failed: unknown result')
    end

    def deleteNotification(authzToken, gatewayId, notificationId)
      send_deleteNotification(authzToken, gatewayId, notificationId)
      return recv_deleteNotification()
    end

    def send_deleteNotification(authzToken, gatewayId, notificationId)
      send_message('deleteNotification', DeleteNotification_args, :authzToken => authzToken, :gatewayId => gatewayId, :notificationId => notificationId)
    end

    def recv_deleteNotification()
      result = receive_message(DeleteNotification_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteNotification failed: unknown result')
    end

    def getNotification(authzToken, gatewayId, notificationId)
      send_getNotification(authzToken, gatewayId, notificationId)
      return recv_getNotification()
    end

    def send_getNotification(authzToken, gatewayId, notificationId)
      send_message('getNotification', GetNotification_args, :authzToken => authzToken, :gatewayId => gatewayId, :notificationId => notificationId)
    end

    def recv_getNotification()
      result = receive_message(GetNotification_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getNotification failed: unknown result')
    end

    def getAllNotifications(authzToken, gatewayId)
      send_getAllNotifications(authzToken, gatewayId)
      return recv_getAllNotifications()
    end

    def send_getAllNotifications(authzToken, gatewayId)
      send_message('getAllNotifications', GetAllNotifications_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getAllNotifications()
      result = receive_message(GetAllNotifications_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllNotifications failed: unknown result')
    end

    def generateAndRegisterSSHKeys(authzToken, description)
      send_generateAndRegisterSSHKeys(authzToken, description)
      return recv_generateAndRegisterSSHKeys()
    end

    def send_generateAndRegisterSSHKeys(authzToken, description)
      send_message('generateAndRegisterSSHKeys', GenerateAndRegisterSSHKeys_args, :authzToken => authzToken, :description => description)
    end

    def recv_generateAndRegisterSSHKeys()
      result = receive_message(GenerateAndRegisterSSHKeys_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generateAndRegisterSSHKeys failed: unknown result')
    end

    def registerPwdCredential(authzToken, loginUserName, password, description)
      send_registerPwdCredential(authzToken, loginUserName, password, description)
      return recv_registerPwdCredential()
    end

    def send_registerPwdCredential(authzToken, loginUserName, password, description)
      send_message('registerPwdCredential', RegisterPwdCredential_args, :authzToken => authzToken, :loginUserName => loginUserName, :password => password, :description => description)
    end

    def recv_registerPwdCredential()
      result = receive_message(RegisterPwdCredential_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerPwdCredential failed: unknown result')
    end

    def getCredentialSummary(authzToken, tokenId)
      send_getCredentialSummary(authzToken, tokenId)
      return recv_getCredentialSummary()
    end

    def send_getCredentialSummary(authzToken, tokenId)
      send_message('getCredentialSummary', GetCredentialSummary_args, :authzToken => authzToken, :tokenId => tokenId)
    end

    def recv_getCredentialSummary()
      result = receive_message(GetCredentialSummary_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCredentialSummary failed: unknown result')
    end

    def getAllCredentialSummaries(authzToken, type)
      send_getAllCredentialSummaries(authzToken, type)
      return recv_getAllCredentialSummaries()
    end

    def send_getAllCredentialSummaries(authzToken, type)
      send_message('getAllCredentialSummaries', GetAllCredentialSummaries_args, :authzToken => authzToken, :type => type)
    end

    def recv_getAllCredentialSummaries()
      result = receive_message(GetAllCredentialSummaries_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllCredentialSummaries failed: unknown result')
    end

    def deleteSSHPubKey(authzToken, airavataCredStoreToken)
      send_deleteSSHPubKey(authzToken, airavataCredStoreToken)
      return recv_deleteSSHPubKey()
    end

    def send_deleteSSHPubKey(authzToken, airavataCredStoreToken)
      send_message('deleteSSHPubKey', DeleteSSHPubKey_args, :authzToken => authzToken, :airavataCredStoreToken => airavataCredStoreToken)
    end

    def recv_deleteSSHPubKey()
      result = receive_message(DeleteSSHPubKey_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteSSHPubKey failed: unknown result')
    end

    def deletePWDCredential(authzToken, airavataCredStoreToken)
      send_deletePWDCredential(authzToken, airavataCredStoreToken)
      return recv_deletePWDCredential()
    end

    def send_deletePWDCredential(authzToken, airavataCredStoreToken)
      send_message('deletePWDCredential', DeletePWDCredential_args, :authzToken => authzToken, :airavataCredStoreToken => airavataCredStoreToken)
    end

    def recv_deletePWDCredential()
      result = receive_message(DeletePWDCredential_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deletePWDCredential failed: unknown result')
    end

    def createProject(authzToken, gatewayId, project)
      send_createProject(authzToken, gatewayId, project)
      return recv_createProject()
    end

    def send_createProject(authzToken, gatewayId, project)
      send_message('createProject', CreateProject_args, :authzToken => authzToken, :gatewayId => gatewayId, :project => project)
    end

    def recv_createProject()
      result = receive_message(CreateProject_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createProject failed: unknown result')
    end

    def updateProject(authzToken, projectId, updatedProject)
      send_updateProject(authzToken, projectId, updatedProject)
      recv_updateProject()
    end

    def send_updateProject(authzToken, projectId, updatedProject)
      send_message('updateProject', UpdateProject_args, :authzToken => authzToken, :projectId => projectId, :updatedProject => updatedProject)
    end

    def recv_updateProject()
      result = receive_message(UpdateProject_result)
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.pnfe unless result.pnfe.nil?
      raise result.ae unless result.ae.nil?
      return
    end

    def getProject(authzToken, projectId)
      send_getProject(authzToken, projectId)
      return recv_getProject()
    end

    def send_getProject(authzToken, projectId)
      send_message('getProject', GetProject_args, :authzToken => authzToken, :projectId => projectId)
    end

    def recv_getProject()
      result = receive_message(GetProject_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.pnfe unless result.pnfe.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProject failed: unknown result')
    end

    def deleteProject(authzToken, projectId)
      send_deleteProject(authzToken, projectId)
      return recv_deleteProject()
    end

    def send_deleteProject(authzToken, projectId)
      send_message('deleteProject', DeleteProject_args, :authzToken => authzToken, :projectId => projectId)
    end

    def recv_deleteProject()
      result = receive_message(DeleteProject_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.pnfe unless result.pnfe.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteProject failed: unknown result')
    end

    def getUserProjects(authzToken, gatewayId, userName, limit, offset)
      send_getUserProjects(authzToken, gatewayId, userName, limit, offset)
      return recv_getUserProjects()
    end

    def send_getUserProjects(authzToken, gatewayId, userName, limit, offset)
      send_message('getUserProjects', GetUserProjects_args, :authzToken => authzToken, :gatewayId => gatewayId, :userName => userName, :limit => limit, :offset => offset)
    end

    def recv_getUserProjects()
      result = receive_message(GetUserProjects_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserProjects failed: unknown result')
    end

    def searchProjects(authzToken, gatewayId, userName, filters, limit, offset)
      send_searchProjects(authzToken, gatewayId, userName, filters, limit, offset)
      return recv_searchProjects()
    end

    def send_searchProjects(authzToken, gatewayId, userName, filters, limit, offset)
      send_message('searchProjects', SearchProjects_args, :authzToken => authzToken, :gatewayId => gatewayId, :userName => userName, :filters => filters, :limit => limit, :offset => offset)
    end

    def recv_searchProjects()
      result = receive_message(SearchProjects_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'searchProjects failed: unknown result')
    end

    def searchExperiments(authzToken, gatewayId, userName, filters, limit, offset)
      send_searchExperiments(authzToken, gatewayId, userName, filters, limit, offset)
      return recv_searchExperiments()
    end

    def send_searchExperiments(authzToken, gatewayId, userName, filters, limit, offset)
      send_message('searchExperiments', SearchExperiments_args, :authzToken => authzToken, :gatewayId => gatewayId, :userName => userName, :filters => filters, :limit => limit, :offset => offset)
    end

    def recv_searchExperiments()
      result = receive_message(SearchExperiments_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'searchExperiments failed: unknown result')
    end

    def getExperimentStatistics(authzToken, gatewayId, fromTime, toTime, userName, applicationName, resourceHostName)
      send_getExperimentStatistics(authzToken, gatewayId, fromTime, toTime, userName, applicationName, resourceHostName)
      return recv_getExperimentStatistics()
    end

    def send_getExperimentStatistics(authzToken, gatewayId, fromTime, toTime, userName, applicationName, resourceHostName)
      send_message('getExperimentStatistics', GetExperimentStatistics_args, :authzToken => authzToken, :gatewayId => gatewayId, :fromTime => fromTime, :toTime => toTime, :userName => userName, :applicationName => applicationName, :resourceHostName => resourceHostName)
    end

    def recv_getExperimentStatistics()
      result = receive_message(GetExperimentStatistics_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getExperimentStatistics failed: unknown result')
    end

    def getExperimentsInProject(authzToken, projectId, limit, offset)
      send_getExperimentsInProject(authzToken, projectId, limit, offset)
      return recv_getExperimentsInProject()
    end

    def send_getExperimentsInProject(authzToken, projectId, limit, offset)
      send_message('getExperimentsInProject', GetExperimentsInProject_args, :authzToken => authzToken, :projectId => projectId, :limit => limit, :offset => offset)
    end

    def recv_getExperimentsInProject()
      result = receive_message(GetExperimentsInProject_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.pnfe unless result.pnfe.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getExperimentsInProject failed: unknown result')
    end

    def getUserExperiments(authzToken, gatewayId, userName, limit, offset)
      send_getUserExperiments(authzToken, gatewayId, userName, limit, offset)
      return recv_getUserExperiments()
    end

    def send_getUserExperiments(authzToken, gatewayId, userName, limit, offset)
      send_message('getUserExperiments', GetUserExperiments_args, :authzToken => authzToken, :gatewayId => gatewayId, :userName => userName, :limit => limit, :offset => offset)
    end

    def recv_getUserExperiments()
      result = receive_message(GetUserExperiments_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserExperiments failed: unknown result')
    end

    def createExperiment(authzToken, gatewayId, experiment)
      send_createExperiment(authzToken, gatewayId, experiment)
      return recv_createExperiment()
    end

    def send_createExperiment(authzToken, gatewayId, experiment)
      send_message('createExperiment', CreateExperiment_args, :authzToken => authzToken, :gatewayId => gatewayId, :experiment => experiment)
    end

    def recv_createExperiment()
      result = receive_message(CreateExperiment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createExperiment failed: unknown result')
    end

    def deleteExperiment(authzToken, experimentId)
      send_deleteExperiment(authzToken, experimentId)
      return recv_deleteExperiment()
    end

    def send_deleteExperiment(authzToken, experimentId)
      send_message('deleteExperiment', DeleteExperiment_args, :authzToken => authzToken, :experimentId => experimentId)
    end

    def recv_deleteExperiment()
      result = receive_message(DeleteExperiment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteExperiment failed: unknown result')
    end

    def getExperiment(authzToken, airavataExperimentId)
      send_getExperiment(authzToken, airavataExperimentId)
      return recv_getExperiment()
    end

    def send_getExperiment(authzToken, airavataExperimentId)
      send_message('getExperiment', GetExperiment_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getExperiment()
      result = receive_message(GetExperiment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getExperiment failed: unknown result')
    end

    def getExperimentByAdmin(authzToken, airavataExperimentId)
      send_getExperimentByAdmin(authzToken, airavataExperimentId)
      return recv_getExperimentByAdmin()
    end

    def send_getExperimentByAdmin(authzToken, airavataExperimentId)
      send_message('getExperimentByAdmin', GetExperimentByAdmin_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getExperimentByAdmin()
      result = receive_message(GetExperimentByAdmin_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getExperimentByAdmin failed: unknown result')
    end

    def getDetailedExperimentTree(authzToken, airavataExperimentId)
      send_getDetailedExperimentTree(authzToken, airavataExperimentId)
      return recv_getDetailedExperimentTree()
    end

    def send_getDetailedExperimentTree(authzToken, airavataExperimentId)
      send_message('getDetailedExperimentTree', GetDetailedExperimentTree_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getDetailedExperimentTree()
      result = receive_message(GetDetailedExperimentTree_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDetailedExperimentTree failed: unknown result')
    end

    def updateExperiment(authzToken, airavataExperimentId, experiment)
      send_updateExperiment(authzToken, airavataExperimentId, experiment)
      recv_updateExperiment()
    end

    def send_updateExperiment(authzToken, airavataExperimentId, experiment)
      send_message('updateExperiment', UpdateExperiment_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId, :experiment => experiment)
    end

    def recv_updateExperiment()
      result = receive_message(UpdateExperiment_result)
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      return
    end

    def updateExperimentConfiguration(authzToken, airavataExperimentId, userConfiguration)
      send_updateExperimentConfiguration(authzToken, airavataExperimentId, userConfiguration)
      recv_updateExperimentConfiguration()
    end

    def send_updateExperimentConfiguration(authzToken, airavataExperimentId, userConfiguration)
      send_message('updateExperimentConfiguration', UpdateExperimentConfiguration_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId, :userConfiguration => userConfiguration)
    end

    def recv_updateExperimentConfiguration()
      result = receive_message(UpdateExperimentConfiguration_result)
      raise result.ae unless result.ae.nil?
      return
    end

    def updateResourceScheduleing(authzToken, airavataExperimentId, resourceScheduling)
      send_updateResourceScheduleing(authzToken, airavataExperimentId, resourceScheduling)
      recv_updateResourceScheduleing()
    end

    def send_updateResourceScheduleing(authzToken, airavataExperimentId, resourceScheduling)
      send_message('updateResourceScheduleing', UpdateResourceScheduleing_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId, :resourceScheduling => resourceScheduling)
    end

    def recv_updateResourceScheduleing()
      result = receive_message(UpdateResourceScheduleing_result)
      raise result.ae unless result.ae.nil?
      return
    end

    def validateExperiment(authzToken, airavataExperimentId)
      send_validateExperiment(authzToken, airavataExperimentId)
      return recv_validateExperiment()
    end

    def send_validateExperiment(authzToken, airavataExperimentId)
      send_message('validateExperiment', ValidateExperiment_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_validateExperiment()
      result = receive_message(ValidateExperiment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'validateExperiment failed: unknown result')
    end

    def launchExperiment(authzToken, airavataExperimentId, gatewayId)
      send_launchExperiment(authzToken, airavataExperimentId, gatewayId)
      recv_launchExperiment()
    end

    def send_launchExperiment(authzToken, airavataExperimentId, gatewayId)
      send_message('launchExperiment', LaunchExperiment_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId, :gatewayId => gatewayId)
    end

    def recv_launchExperiment()
      result = receive_message(LaunchExperiment_result)
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      return
    end

    def getExperimentStatus(authzToken, airavataExperimentId)
      send_getExperimentStatus(authzToken, airavataExperimentId)
      return recv_getExperimentStatus()
    end

    def send_getExperimentStatus(authzToken, airavataExperimentId)
      send_message('getExperimentStatus', GetExperimentStatus_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getExperimentStatus()
      result = receive_message(GetExperimentStatus_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getExperimentStatus failed: unknown result')
    end

    def getExperimentOutputs(authzToken, airavataExperimentId)
      send_getExperimentOutputs(authzToken, airavataExperimentId)
      return recv_getExperimentOutputs()
    end

    def send_getExperimentOutputs(authzToken, airavataExperimentId)
      send_message('getExperimentOutputs', GetExperimentOutputs_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getExperimentOutputs()
      result = receive_message(GetExperimentOutputs_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getExperimentOutputs failed: unknown result')
    end

    def getIntermediateOutputs(authzToken, airavataExperimentId)
      send_getIntermediateOutputs(authzToken, airavataExperimentId)
      return recv_getIntermediateOutputs()
    end

    def send_getIntermediateOutputs(authzToken, airavataExperimentId)
      send_message('getIntermediateOutputs', GetIntermediateOutputs_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getIntermediateOutputs()
      result = receive_message(GetIntermediateOutputs_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getIntermediateOutputs failed: unknown result')
    end

    def getJobStatuses(authzToken, airavataExperimentId)
      send_getJobStatuses(authzToken, airavataExperimentId)
      return recv_getJobStatuses()
    end

    def send_getJobStatuses(authzToken, airavataExperimentId)
      send_message('getJobStatuses', GetJobStatuses_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getJobStatuses()
      result = receive_message(GetJobStatuses_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJobStatuses failed: unknown result')
    end

    def getJobDetails(authzToken, airavataExperimentId)
      send_getJobDetails(authzToken, airavataExperimentId)
      return recv_getJobDetails()
    end

    def send_getJobDetails(authzToken, airavataExperimentId)
      send_message('getJobDetails', GetJobDetails_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId)
    end

    def recv_getJobDetails()
      result = receive_message(GetJobDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getJobDetails failed: unknown result')
    end

    def cloneExperiment(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId)
      send_cloneExperiment(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId)
      return recv_cloneExperiment()
    end

    def send_cloneExperiment(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId)
      send_message('cloneExperiment', CloneExperiment_args, :authzToken => authzToken, :existingExperimentID => existingExperimentID, :newExperimentName => newExperimentName, :newExperimentProjectId => newExperimentProjectId)
    end

    def recv_cloneExperiment()
      result = receive_message(CloneExperiment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise result.pnfe unless result.pnfe.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cloneExperiment failed: unknown result')
    end

    def cloneExperimentByAdmin(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId)
      send_cloneExperimentByAdmin(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId)
      return recv_cloneExperimentByAdmin()
    end

    def send_cloneExperimentByAdmin(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId)
      send_message('cloneExperimentByAdmin', CloneExperimentByAdmin_args, :authzToken => authzToken, :existingExperimentID => existingExperimentID, :newExperimentName => newExperimentName, :newExperimentProjectId => newExperimentProjectId)
    end

    def recv_cloneExperimentByAdmin()
      result = receive_message(CloneExperimentByAdmin_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise result.pnfe unless result.pnfe.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cloneExperimentByAdmin failed: unknown result')
    end

    def terminateExperiment(authzToken, airavataExperimentId, gatewayId)
      send_terminateExperiment(authzToken, airavataExperimentId, gatewayId)
      recv_terminateExperiment()
    end

    def send_terminateExperiment(authzToken, airavataExperimentId, gatewayId)
      send_message('terminateExperiment', TerminateExperiment_args, :authzToken => authzToken, :airavataExperimentId => airavataExperimentId, :gatewayId => gatewayId)
    end

    def recv_terminateExperiment()
      result = receive_message(TerminateExperiment_result)
      raise result.ire unless result.ire.nil?
      raise result.enf unless result.enf.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      return
    end

    def registerApplicationModule(authzToken, gatewayId, applicationModule)
      send_registerApplicationModule(authzToken, gatewayId, applicationModule)
      return recv_registerApplicationModule()
    end

    def send_registerApplicationModule(authzToken, gatewayId, applicationModule)
      send_message('registerApplicationModule', RegisterApplicationModule_args, :authzToken => authzToken, :gatewayId => gatewayId, :applicationModule => applicationModule)
    end

    def recv_registerApplicationModule()
      result = receive_message(RegisterApplicationModule_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerApplicationModule failed: unknown result')
    end

    def getApplicationModule(authzToken, appModuleId)
      send_getApplicationModule(authzToken, appModuleId)
      return recv_getApplicationModule()
    end

    def send_getApplicationModule(authzToken, appModuleId)
      send_message('getApplicationModule', GetApplicationModule_args, :authzToken => authzToken, :appModuleId => appModuleId)
    end

    def recv_getApplicationModule()
      result = receive_message(GetApplicationModule_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getApplicationModule failed: unknown result')
    end

    def updateApplicationModule(authzToken, appModuleId, applicationModule)
      send_updateApplicationModule(authzToken, appModuleId, applicationModule)
      return recv_updateApplicationModule()
    end

    def send_updateApplicationModule(authzToken, appModuleId, applicationModule)
      send_message('updateApplicationModule', UpdateApplicationModule_args, :authzToken => authzToken, :appModuleId => appModuleId, :applicationModule => applicationModule)
    end

    def recv_updateApplicationModule()
      result = receive_message(UpdateApplicationModule_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateApplicationModule failed: unknown result')
    end

    def getAllAppModules(authzToken, gatewayId)
      send_getAllAppModules(authzToken, gatewayId)
      return recv_getAllAppModules()
    end

    def send_getAllAppModules(authzToken, gatewayId)
      send_message('getAllAppModules', GetAllAppModules_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getAllAppModules()
      result = receive_message(GetAllAppModules_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllAppModules failed: unknown result')
    end

    def getAccessibleAppModules(authzToken, gatewayId)
      send_getAccessibleAppModules(authzToken, gatewayId)
      return recv_getAccessibleAppModules()
    end

    def send_getAccessibleAppModules(authzToken, gatewayId)
      send_message('getAccessibleAppModules', GetAccessibleAppModules_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getAccessibleAppModules()
      result = receive_message(GetAccessibleAppModules_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAccessibleAppModules failed: unknown result')
    end

    def deleteApplicationModule(authzToken, appModuleId)
      send_deleteApplicationModule(authzToken, appModuleId)
      return recv_deleteApplicationModule()
    end

    def send_deleteApplicationModule(authzToken, appModuleId)
      send_message('deleteApplicationModule', DeleteApplicationModule_args, :authzToken => authzToken, :appModuleId => appModuleId)
    end

    def recv_deleteApplicationModule()
      result = receive_message(DeleteApplicationModule_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteApplicationModule failed: unknown result')
    end

    def registerApplicationDeployment(authzToken, gatewayId, applicationDeployment)
      send_registerApplicationDeployment(authzToken, gatewayId, applicationDeployment)
      return recv_registerApplicationDeployment()
    end

    def send_registerApplicationDeployment(authzToken, gatewayId, applicationDeployment)
      send_message('registerApplicationDeployment', RegisterApplicationDeployment_args, :authzToken => authzToken, :gatewayId => gatewayId, :applicationDeployment => applicationDeployment)
    end

    def recv_registerApplicationDeployment()
      result = receive_message(RegisterApplicationDeployment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerApplicationDeployment failed: unknown result')
    end

    def getApplicationDeployment(authzToken, appDeploymentId)
      send_getApplicationDeployment(authzToken, appDeploymentId)
      return recv_getApplicationDeployment()
    end

    def send_getApplicationDeployment(authzToken, appDeploymentId)
      send_message('getApplicationDeployment', GetApplicationDeployment_args, :authzToken => authzToken, :appDeploymentId => appDeploymentId)
    end

    def recv_getApplicationDeployment()
      result = receive_message(GetApplicationDeployment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getApplicationDeployment failed: unknown result')
    end

    def updateApplicationDeployment(authzToken, appDeploymentId, applicationDeployment)
      send_updateApplicationDeployment(authzToken, appDeploymentId, applicationDeployment)
      return recv_updateApplicationDeployment()
    end

    def send_updateApplicationDeployment(authzToken, appDeploymentId, applicationDeployment)
      send_message('updateApplicationDeployment', UpdateApplicationDeployment_args, :authzToken => authzToken, :appDeploymentId => appDeploymentId, :applicationDeployment => applicationDeployment)
    end

    def recv_updateApplicationDeployment()
      result = receive_message(UpdateApplicationDeployment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateApplicationDeployment failed: unknown result')
    end

    def deleteApplicationDeployment(authzToken, appDeploymentId)
      send_deleteApplicationDeployment(authzToken, appDeploymentId)
      return recv_deleteApplicationDeployment()
    end

    def send_deleteApplicationDeployment(authzToken, appDeploymentId)
      send_message('deleteApplicationDeployment', DeleteApplicationDeployment_args, :authzToken => authzToken, :appDeploymentId => appDeploymentId)
    end

    def recv_deleteApplicationDeployment()
      result = receive_message(DeleteApplicationDeployment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteApplicationDeployment failed: unknown result')
    end

    def getAllApplicationDeployments(authzToken, gatewayId)
      send_getAllApplicationDeployments(authzToken, gatewayId)
      return recv_getAllApplicationDeployments()
    end

    def send_getAllApplicationDeployments(authzToken, gatewayId)
      send_message('getAllApplicationDeployments', GetAllApplicationDeployments_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getAllApplicationDeployments()
      result = receive_message(GetAllApplicationDeployments_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllApplicationDeployments failed: unknown result')
    end

    def getAccessibleApplicationDeployments(authzToken, gatewayId, permissionType)
      send_getAccessibleApplicationDeployments(authzToken, gatewayId, permissionType)
      return recv_getAccessibleApplicationDeployments()
    end

    def send_getAccessibleApplicationDeployments(authzToken, gatewayId, permissionType)
      send_message('getAccessibleApplicationDeployments', GetAccessibleApplicationDeployments_args, :authzToken => authzToken, :gatewayId => gatewayId, :permissionType => permissionType)
    end

    def recv_getAccessibleApplicationDeployments()
      result = receive_message(GetAccessibleApplicationDeployments_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAccessibleApplicationDeployments failed: unknown result')
    end

    def getAppModuleDeployedResources(authzToken, appModuleId)
      send_getAppModuleDeployedResources(authzToken, appModuleId)
      return recv_getAppModuleDeployedResources()
    end

    def send_getAppModuleDeployedResources(authzToken, appModuleId)
      send_message('getAppModuleDeployedResources', GetAppModuleDeployedResources_args, :authzToken => authzToken, :appModuleId => appModuleId)
    end

    def recv_getAppModuleDeployedResources()
      result = receive_message(GetAppModuleDeployedResources_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAppModuleDeployedResources failed: unknown result')
    end

    def getApplicationDeploymentsForAppModuleAndGroupResourceProfile(authzToken, appModuleId, groupResourceProfileId)
      send_getApplicationDeploymentsForAppModuleAndGroupResourceProfile(authzToken, appModuleId, groupResourceProfileId)
      return recv_getApplicationDeploymentsForAppModuleAndGroupResourceProfile()
    end

    def send_getApplicationDeploymentsForAppModuleAndGroupResourceProfile(authzToken, appModuleId, groupResourceProfileId)
      send_message('getApplicationDeploymentsForAppModuleAndGroupResourceProfile', GetApplicationDeploymentsForAppModuleAndGroupResourceProfile_args, :authzToken => authzToken, :appModuleId => appModuleId, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_getApplicationDeploymentsForAppModuleAndGroupResourceProfile()
      result = receive_message(GetApplicationDeploymentsForAppModuleAndGroupResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getApplicationDeploymentsForAppModuleAndGroupResourceProfile failed: unknown result')
    end

    def registerApplicationInterface(authzToken, gatewayId, applicationInterface)
      send_registerApplicationInterface(authzToken, gatewayId, applicationInterface)
      return recv_registerApplicationInterface()
    end

    def send_registerApplicationInterface(authzToken, gatewayId, applicationInterface)
      send_message('registerApplicationInterface', RegisterApplicationInterface_args, :authzToken => authzToken, :gatewayId => gatewayId, :applicationInterface => applicationInterface)
    end

    def recv_registerApplicationInterface()
      result = receive_message(RegisterApplicationInterface_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerApplicationInterface failed: unknown result')
    end

    def cloneApplicationInterface(authzToken, existingAppInterfaceID, newApplicationName, gatewayId)
      send_cloneApplicationInterface(authzToken, existingAppInterfaceID, newApplicationName, gatewayId)
      return recv_cloneApplicationInterface()
    end

    def send_cloneApplicationInterface(authzToken, existingAppInterfaceID, newApplicationName, gatewayId)
      send_message('cloneApplicationInterface', CloneApplicationInterface_args, :authzToken => authzToken, :existingAppInterfaceID => existingAppInterfaceID, :newApplicationName => newApplicationName, :gatewayId => gatewayId)
    end

    def recv_cloneApplicationInterface()
      result = receive_message(CloneApplicationInterface_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cloneApplicationInterface failed: unknown result')
    end

    def getApplicationInterface(authzToken, appInterfaceId)
      send_getApplicationInterface(authzToken, appInterfaceId)
      return recv_getApplicationInterface()
    end

    def send_getApplicationInterface(authzToken, appInterfaceId)
      send_message('getApplicationInterface', GetApplicationInterface_args, :authzToken => authzToken, :appInterfaceId => appInterfaceId)
    end

    def recv_getApplicationInterface()
      result = receive_message(GetApplicationInterface_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getApplicationInterface failed: unknown result')
    end

    def updateApplicationInterface(authzToken, appInterfaceId, applicationInterface)
      send_updateApplicationInterface(authzToken, appInterfaceId, applicationInterface)
      return recv_updateApplicationInterface()
    end

    def send_updateApplicationInterface(authzToken, appInterfaceId, applicationInterface)
      send_message('updateApplicationInterface', UpdateApplicationInterface_args, :authzToken => authzToken, :appInterfaceId => appInterfaceId, :applicationInterface => applicationInterface)
    end

    def recv_updateApplicationInterface()
      result = receive_message(UpdateApplicationInterface_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateApplicationInterface failed: unknown result')
    end

    def deleteApplicationInterface(authzToken, appInterfaceId)
      send_deleteApplicationInterface(authzToken, appInterfaceId)
      return recv_deleteApplicationInterface()
    end

    def send_deleteApplicationInterface(authzToken, appInterfaceId)
      send_message('deleteApplicationInterface', DeleteApplicationInterface_args, :authzToken => authzToken, :appInterfaceId => appInterfaceId)
    end

    def recv_deleteApplicationInterface()
      result = receive_message(DeleteApplicationInterface_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteApplicationInterface failed: unknown result')
    end

    def getAllApplicationInterfaceNames(authzToken, gatewayId)
      send_getAllApplicationInterfaceNames(authzToken, gatewayId)
      return recv_getAllApplicationInterfaceNames()
    end

    def send_getAllApplicationInterfaceNames(authzToken, gatewayId)
      send_message('getAllApplicationInterfaceNames', GetAllApplicationInterfaceNames_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getAllApplicationInterfaceNames()
      result = receive_message(GetAllApplicationInterfaceNames_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllApplicationInterfaceNames failed: unknown result')
    end

    def getAllApplicationInterfaces(authzToken, gatewayId)
      send_getAllApplicationInterfaces(authzToken, gatewayId)
      return recv_getAllApplicationInterfaces()
    end

    def send_getAllApplicationInterfaces(authzToken, gatewayId)
      send_message('getAllApplicationInterfaces', GetAllApplicationInterfaces_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getAllApplicationInterfaces()
      result = receive_message(GetAllApplicationInterfaces_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllApplicationInterfaces failed: unknown result')
    end

    def getApplicationInputs(authzToken, appInterfaceId)
      send_getApplicationInputs(authzToken, appInterfaceId)
      return recv_getApplicationInputs()
    end

    def send_getApplicationInputs(authzToken, appInterfaceId)
      send_message('getApplicationInputs', GetApplicationInputs_args, :authzToken => authzToken, :appInterfaceId => appInterfaceId)
    end

    def recv_getApplicationInputs()
      result = receive_message(GetApplicationInputs_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getApplicationInputs failed: unknown result')
    end

    def getApplicationOutputs(authzToken, appInterfaceId)
      send_getApplicationOutputs(authzToken, appInterfaceId)
      return recv_getApplicationOutputs()
    end

    def send_getApplicationOutputs(authzToken, appInterfaceId)
      send_message('getApplicationOutputs', GetApplicationOutputs_args, :authzToken => authzToken, :appInterfaceId => appInterfaceId)
    end

    def recv_getApplicationOutputs()
      result = receive_message(GetApplicationOutputs_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getApplicationOutputs failed: unknown result')
    end

    def getAvailableAppInterfaceComputeResources(authzToken, appInterfaceId)
      send_getAvailableAppInterfaceComputeResources(authzToken, appInterfaceId)
      return recv_getAvailableAppInterfaceComputeResources()
    end

    def send_getAvailableAppInterfaceComputeResources(authzToken, appInterfaceId)
      send_message('getAvailableAppInterfaceComputeResources', GetAvailableAppInterfaceComputeResources_args, :authzToken => authzToken, :appInterfaceId => appInterfaceId)
    end

    def recv_getAvailableAppInterfaceComputeResources()
      result = receive_message(GetAvailableAppInterfaceComputeResources_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAvailableAppInterfaceComputeResources failed: unknown result')
    end

    def registerComputeResource(authzToken, computeResourceDescription)
      send_registerComputeResource(authzToken, computeResourceDescription)
      return recv_registerComputeResource()
    end

    def send_registerComputeResource(authzToken, computeResourceDescription)
      send_message('registerComputeResource', RegisterComputeResource_args, :authzToken => authzToken, :computeResourceDescription => computeResourceDescription)
    end

    def recv_registerComputeResource()
      result = receive_message(RegisterComputeResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerComputeResource failed: unknown result')
    end

    def getComputeResource(authzToken, computeResourceId)
      send_getComputeResource(authzToken, computeResourceId)
      return recv_getComputeResource()
    end

    def send_getComputeResource(authzToken, computeResourceId)
      send_message('getComputeResource', GetComputeResource_args, :authzToken => authzToken, :computeResourceId => computeResourceId)
    end

    def recv_getComputeResource()
      result = receive_message(GetComputeResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getComputeResource failed: unknown result')
    end

    def getAllComputeResourceNames(authzToken)
      send_getAllComputeResourceNames(authzToken)
      return recv_getAllComputeResourceNames()
    end

    def send_getAllComputeResourceNames(authzToken)
      send_message('getAllComputeResourceNames', GetAllComputeResourceNames_args, :authzToken => authzToken)
    end

    def recv_getAllComputeResourceNames()
      result = receive_message(GetAllComputeResourceNames_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllComputeResourceNames failed: unknown result')
    end

    def updateComputeResource(authzToken, computeResourceId, computeResourceDescription)
      send_updateComputeResource(authzToken, computeResourceId, computeResourceDescription)
      return recv_updateComputeResource()
    end

    def send_updateComputeResource(authzToken, computeResourceId, computeResourceDescription)
      send_message('updateComputeResource', UpdateComputeResource_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :computeResourceDescription => computeResourceDescription)
    end

    def recv_updateComputeResource()
      result = receive_message(UpdateComputeResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateComputeResource failed: unknown result')
    end

    def deleteComputeResource(authzToken, computeResourceId)
      send_deleteComputeResource(authzToken, computeResourceId)
      return recv_deleteComputeResource()
    end

    def send_deleteComputeResource(authzToken, computeResourceId)
      send_message('deleteComputeResource', DeleteComputeResource_args, :authzToken => authzToken, :computeResourceId => computeResourceId)
    end

    def recv_deleteComputeResource()
      result = receive_message(DeleteComputeResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteComputeResource failed: unknown result')
    end

    def registerStorageResource(authzToken, storageResourceDescription)
      send_registerStorageResource(authzToken, storageResourceDescription)
      return recv_registerStorageResource()
    end

    def send_registerStorageResource(authzToken, storageResourceDescription)
      send_message('registerStorageResource', RegisterStorageResource_args, :authzToken => authzToken, :storageResourceDescription => storageResourceDescription)
    end

    def recv_registerStorageResource()
      result = receive_message(RegisterStorageResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerStorageResource failed: unknown result')
    end

    def getStorageResource(authzToken, storageResourceId)
      send_getStorageResource(authzToken, storageResourceId)
      return recv_getStorageResource()
    end

    def send_getStorageResource(authzToken, storageResourceId)
      send_message('getStorageResource', GetStorageResource_args, :authzToken => authzToken, :storageResourceId => storageResourceId)
    end

    def recv_getStorageResource()
      result = receive_message(GetStorageResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getStorageResource failed: unknown result')
    end

    def getAllStorageResourceNames(authzToken)
      send_getAllStorageResourceNames(authzToken)
      return recv_getAllStorageResourceNames()
    end

    def send_getAllStorageResourceNames(authzToken)
      send_message('getAllStorageResourceNames', GetAllStorageResourceNames_args, :authzToken => authzToken)
    end

    def recv_getAllStorageResourceNames()
      result = receive_message(GetAllStorageResourceNames_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllStorageResourceNames failed: unknown result')
    end

    def updateStorageResource(authzToken, storageResourceId, storageResourceDescription)
      send_updateStorageResource(authzToken, storageResourceId, storageResourceDescription)
      return recv_updateStorageResource()
    end

    def send_updateStorageResource(authzToken, storageResourceId, storageResourceDescription)
      send_message('updateStorageResource', UpdateStorageResource_args, :authzToken => authzToken, :storageResourceId => storageResourceId, :storageResourceDescription => storageResourceDescription)
    end

    def recv_updateStorageResource()
      result = receive_message(UpdateStorageResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateStorageResource failed: unknown result')
    end

    def deleteStorageResource(authzToken, storageResourceId)
      send_deleteStorageResource(authzToken, storageResourceId)
      return recv_deleteStorageResource()
    end

    def send_deleteStorageResource(authzToken, storageResourceId)
      send_message('deleteStorageResource', DeleteStorageResource_args, :authzToken => authzToken, :storageResourceId => storageResourceId)
    end

    def recv_deleteStorageResource()
      result = receive_message(DeleteStorageResource_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteStorageResource failed: unknown result')
    end

    def addLocalSubmissionDetails(authzToken, computeResourceId, priorityOrder, localSubmission)
      send_addLocalSubmissionDetails(authzToken, computeResourceId, priorityOrder, localSubmission)
      return recv_addLocalSubmissionDetails()
    end

    def send_addLocalSubmissionDetails(authzToken, computeResourceId, priorityOrder, localSubmission)
      send_message('addLocalSubmissionDetails', AddLocalSubmissionDetails_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :priorityOrder => priorityOrder, :localSubmission => localSubmission)
    end

    def recv_addLocalSubmissionDetails()
      result = receive_message(AddLocalSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addLocalSubmissionDetails failed: unknown result')
    end

    def updateLocalSubmissionDetails(authzToken, jobSubmissionInterfaceId, localSubmission)
      send_updateLocalSubmissionDetails(authzToken, jobSubmissionInterfaceId, localSubmission)
      return recv_updateLocalSubmissionDetails()
    end

    def send_updateLocalSubmissionDetails(authzToken, jobSubmissionInterfaceId, localSubmission)
      send_message('updateLocalSubmissionDetails', UpdateLocalSubmissionDetails_args, :authzToken => authzToken, :jobSubmissionInterfaceId => jobSubmissionInterfaceId, :localSubmission => localSubmission)
    end

    def recv_updateLocalSubmissionDetails()
      result = receive_message(UpdateLocalSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateLocalSubmissionDetails failed: unknown result')
    end

    def getLocalJobSubmission(authzToken, jobSubmissionId)
      send_getLocalJobSubmission(authzToken, jobSubmissionId)
      return recv_getLocalJobSubmission()
    end

    def send_getLocalJobSubmission(authzToken, jobSubmissionId)
      send_message('getLocalJobSubmission', GetLocalJobSubmission_args, :authzToken => authzToken, :jobSubmissionId => jobSubmissionId)
    end

    def recv_getLocalJobSubmission()
      result = receive_message(GetLocalJobSubmission_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLocalJobSubmission failed: unknown result')
    end

    def addSSHJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission)
      send_addSSHJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission)
      return recv_addSSHJobSubmissionDetails()
    end

    def send_addSSHJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission)
      send_message('addSSHJobSubmissionDetails', AddSSHJobSubmissionDetails_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :priorityOrder => priorityOrder, :sshJobSubmission => sshJobSubmission)
    end

    def recv_addSSHJobSubmissionDetails()
      result = receive_message(AddSSHJobSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addSSHJobSubmissionDetails failed: unknown result')
    end

    def addSSHForkJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission)
      send_addSSHForkJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission)
      return recv_addSSHForkJobSubmissionDetails()
    end

    def send_addSSHForkJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission)
      send_message('addSSHForkJobSubmissionDetails', AddSSHForkJobSubmissionDetails_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :priorityOrder => priorityOrder, :sshJobSubmission => sshJobSubmission)
    end

    def recv_addSSHForkJobSubmissionDetails()
      result = receive_message(AddSSHForkJobSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addSSHForkJobSubmissionDetails failed: unknown result')
    end

    def getSSHJobSubmission(authzToken, jobSubmissionId)
      send_getSSHJobSubmission(authzToken, jobSubmissionId)
      return recv_getSSHJobSubmission()
    end

    def send_getSSHJobSubmission(authzToken, jobSubmissionId)
      send_message('getSSHJobSubmission', GetSSHJobSubmission_args, :authzToken => authzToken, :jobSubmissionId => jobSubmissionId)
    end

    def recv_getSSHJobSubmission()
      result = receive_message(GetSSHJobSubmission_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSSHJobSubmission failed: unknown result')
    end

    def addUNICOREJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, unicoreJobSubmission)
      send_addUNICOREJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, unicoreJobSubmission)
      return recv_addUNICOREJobSubmissionDetails()
    end

    def send_addUNICOREJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, unicoreJobSubmission)
      send_message('addUNICOREJobSubmissionDetails', AddUNICOREJobSubmissionDetails_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :priorityOrder => priorityOrder, :unicoreJobSubmission => unicoreJobSubmission)
    end

    def recv_addUNICOREJobSubmissionDetails()
      result = receive_message(AddUNICOREJobSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addUNICOREJobSubmissionDetails failed: unknown result')
    end

    def getUnicoreJobSubmission(authzToken, jobSubmissionId)
      send_getUnicoreJobSubmission(authzToken, jobSubmissionId)
      return recv_getUnicoreJobSubmission()
    end

    def send_getUnicoreJobSubmission(authzToken, jobSubmissionId)
      send_message('getUnicoreJobSubmission', GetUnicoreJobSubmission_args, :authzToken => authzToken, :jobSubmissionId => jobSubmissionId)
    end

    def recv_getUnicoreJobSubmission()
      result = receive_message(GetUnicoreJobSubmission_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUnicoreJobSubmission failed: unknown result')
    end

    def addCloudJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, cloudSubmission)
      send_addCloudJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, cloudSubmission)
      return recv_addCloudJobSubmissionDetails()
    end

    def send_addCloudJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, cloudSubmission)
      send_message('addCloudJobSubmissionDetails', AddCloudJobSubmissionDetails_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :priorityOrder => priorityOrder, :cloudSubmission => cloudSubmission)
    end

    def recv_addCloudJobSubmissionDetails()
      result = receive_message(AddCloudJobSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addCloudJobSubmissionDetails failed: unknown result')
    end

    def getCloudJobSubmission(authzToken, jobSubmissionId)
      send_getCloudJobSubmission(authzToken, jobSubmissionId)
      return recv_getCloudJobSubmission()
    end

    def send_getCloudJobSubmission(authzToken, jobSubmissionId)
      send_message('getCloudJobSubmission', GetCloudJobSubmission_args, :authzToken => authzToken, :jobSubmissionId => jobSubmissionId)
    end

    def recv_getCloudJobSubmission()
      result = receive_message(GetCloudJobSubmission_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCloudJobSubmission failed: unknown result')
    end

    def updateSSHJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission)
      send_updateSSHJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission)
      return recv_updateSSHJobSubmissionDetails()
    end

    def send_updateSSHJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission)
      send_message('updateSSHJobSubmissionDetails', UpdateSSHJobSubmissionDetails_args, :authzToken => authzToken, :jobSubmissionInterfaceId => jobSubmissionInterfaceId, :sshJobSubmission => sshJobSubmission)
    end

    def recv_updateSSHJobSubmissionDetails()
      result = receive_message(UpdateSSHJobSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSSHJobSubmissionDetails failed: unknown result')
    end

    def updateCloudJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission)
      send_updateCloudJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission)
      return recv_updateCloudJobSubmissionDetails()
    end

    def send_updateCloudJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission)
      send_message('updateCloudJobSubmissionDetails', UpdateCloudJobSubmissionDetails_args, :authzToken => authzToken, :jobSubmissionInterfaceId => jobSubmissionInterfaceId, :sshJobSubmission => sshJobSubmission)
    end

    def recv_updateCloudJobSubmissionDetails()
      result = receive_message(UpdateCloudJobSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateCloudJobSubmissionDetails failed: unknown result')
    end

    def updateUnicoreJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, unicoreJobSubmission)
      send_updateUnicoreJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, unicoreJobSubmission)
      return recv_updateUnicoreJobSubmissionDetails()
    end

    def send_updateUnicoreJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, unicoreJobSubmission)
      send_message('updateUnicoreJobSubmissionDetails', UpdateUnicoreJobSubmissionDetails_args, :authzToken => authzToken, :jobSubmissionInterfaceId => jobSubmissionInterfaceId, :unicoreJobSubmission => unicoreJobSubmission)
    end

    def recv_updateUnicoreJobSubmissionDetails()
      result = receive_message(UpdateUnicoreJobSubmissionDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateUnicoreJobSubmissionDetails failed: unknown result')
    end

    def addLocalDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, localDataMovement)
      send_addLocalDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, localDataMovement)
      return recv_addLocalDataMovementDetails()
    end

    def send_addLocalDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, localDataMovement)
      send_message('addLocalDataMovementDetails', AddLocalDataMovementDetails_args, :authzToken => authzToken, :productUri => productUri, :dataMoveType => dataMoveType, :priorityOrder => priorityOrder, :localDataMovement => localDataMovement)
    end

    def recv_addLocalDataMovementDetails()
      result = receive_message(AddLocalDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addLocalDataMovementDetails failed: unknown result')
    end

    def updateLocalDataMovementDetails(authzToken, dataMovementInterfaceId, localDataMovement)
      send_updateLocalDataMovementDetails(authzToken, dataMovementInterfaceId, localDataMovement)
      return recv_updateLocalDataMovementDetails()
    end

    def send_updateLocalDataMovementDetails(authzToken, dataMovementInterfaceId, localDataMovement)
      send_message('updateLocalDataMovementDetails', UpdateLocalDataMovementDetails_args, :authzToken => authzToken, :dataMovementInterfaceId => dataMovementInterfaceId, :localDataMovement => localDataMovement)
    end

    def recv_updateLocalDataMovementDetails()
      result = receive_message(UpdateLocalDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateLocalDataMovementDetails failed: unknown result')
    end

    def getLocalDataMovement(authzToken, dataMovementId)
      send_getLocalDataMovement(authzToken, dataMovementId)
      return recv_getLocalDataMovement()
    end

    def send_getLocalDataMovement(authzToken, dataMovementId)
      send_message('getLocalDataMovement', GetLocalDataMovement_args, :authzToken => authzToken, :dataMovementId => dataMovementId)
    end

    def recv_getLocalDataMovement()
      result = receive_message(GetLocalDataMovement_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLocalDataMovement failed: unknown result')
    end

    def addSCPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, scpDataMovement)
      send_addSCPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, scpDataMovement)
      return recv_addSCPDataMovementDetails()
    end

    def send_addSCPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, scpDataMovement)
      send_message('addSCPDataMovementDetails', AddSCPDataMovementDetails_args, :authzToken => authzToken, :productUri => productUri, :dataMoveType => dataMoveType, :priorityOrder => priorityOrder, :scpDataMovement => scpDataMovement)
    end

    def recv_addSCPDataMovementDetails()
      result = receive_message(AddSCPDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addSCPDataMovementDetails failed: unknown result')
    end

    def updateSCPDataMovementDetails(authzToken, dataMovementInterfaceId, scpDataMovement)
      send_updateSCPDataMovementDetails(authzToken, dataMovementInterfaceId, scpDataMovement)
      return recv_updateSCPDataMovementDetails()
    end

    def send_updateSCPDataMovementDetails(authzToken, dataMovementInterfaceId, scpDataMovement)
      send_message('updateSCPDataMovementDetails', UpdateSCPDataMovementDetails_args, :authzToken => authzToken, :dataMovementInterfaceId => dataMovementInterfaceId, :scpDataMovement => scpDataMovement)
    end

    def recv_updateSCPDataMovementDetails()
      result = receive_message(UpdateSCPDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSCPDataMovementDetails failed: unknown result')
    end

    def getSCPDataMovement(authzToken, dataMovementId)
      send_getSCPDataMovement(authzToken, dataMovementId)
      return recv_getSCPDataMovement()
    end

    def send_getSCPDataMovement(authzToken, dataMovementId)
      send_message('getSCPDataMovement', GetSCPDataMovement_args, :authzToken => authzToken, :dataMovementId => dataMovementId)
    end

    def recv_getSCPDataMovement()
      result = receive_message(GetSCPDataMovement_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSCPDataMovement failed: unknown result')
    end

    def addUnicoreDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, unicoreDataMovement)
      send_addUnicoreDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, unicoreDataMovement)
      return recv_addUnicoreDataMovementDetails()
    end

    def send_addUnicoreDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, unicoreDataMovement)
      send_message('addUnicoreDataMovementDetails', AddUnicoreDataMovementDetails_args, :authzToken => authzToken, :productUri => productUri, :dataMoveType => dataMoveType, :priorityOrder => priorityOrder, :unicoreDataMovement => unicoreDataMovement)
    end

    def recv_addUnicoreDataMovementDetails()
      result = receive_message(AddUnicoreDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addUnicoreDataMovementDetails failed: unknown result')
    end

    def updateUnicoreDataMovementDetails(authzToken, dataMovementInterfaceId, unicoreDataMovement)
      send_updateUnicoreDataMovementDetails(authzToken, dataMovementInterfaceId, unicoreDataMovement)
      return recv_updateUnicoreDataMovementDetails()
    end

    def send_updateUnicoreDataMovementDetails(authzToken, dataMovementInterfaceId, unicoreDataMovement)
      send_message('updateUnicoreDataMovementDetails', UpdateUnicoreDataMovementDetails_args, :authzToken => authzToken, :dataMovementInterfaceId => dataMovementInterfaceId, :unicoreDataMovement => unicoreDataMovement)
    end

    def recv_updateUnicoreDataMovementDetails()
      result = receive_message(UpdateUnicoreDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateUnicoreDataMovementDetails failed: unknown result')
    end

    def getUnicoreDataMovement(authzToken, dataMovementId)
      send_getUnicoreDataMovement(authzToken, dataMovementId)
      return recv_getUnicoreDataMovement()
    end

    def send_getUnicoreDataMovement(authzToken, dataMovementId)
      send_message('getUnicoreDataMovement', GetUnicoreDataMovement_args, :authzToken => authzToken, :dataMovementId => dataMovementId)
    end

    def recv_getUnicoreDataMovement()
      result = receive_message(GetUnicoreDataMovement_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUnicoreDataMovement failed: unknown result')
    end

    def addGridFTPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, gridFTPDataMovement)
      send_addGridFTPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, gridFTPDataMovement)
      return recv_addGridFTPDataMovementDetails()
    end

    def send_addGridFTPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, gridFTPDataMovement)
      send_message('addGridFTPDataMovementDetails', AddGridFTPDataMovementDetails_args, :authzToken => authzToken, :productUri => productUri, :dataMoveType => dataMoveType, :priorityOrder => priorityOrder, :gridFTPDataMovement => gridFTPDataMovement)
    end

    def recv_addGridFTPDataMovementDetails()
      result = receive_message(AddGridFTPDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addGridFTPDataMovementDetails failed: unknown result')
    end

    def updateGridFTPDataMovementDetails(authzToken, dataMovementInterfaceId, gridFTPDataMovement)
      send_updateGridFTPDataMovementDetails(authzToken, dataMovementInterfaceId, gridFTPDataMovement)
      return recv_updateGridFTPDataMovementDetails()
    end

    def send_updateGridFTPDataMovementDetails(authzToken, dataMovementInterfaceId, gridFTPDataMovement)
      send_message('updateGridFTPDataMovementDetails', UpdateGridFTPDataMovementDetails_args, :authzToken => authzToken, :dataMovementInterfaceId => dataMovementInterfaceId, :gridFTPDataMovement => gridFTPDataMovement)
    end

    def recv_updateGridFTPDataMovementDetails()
      result = receive_message(UpdateGridFTPDataMovementDetails_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateGridFTPDataMovementDetails failed: unknown result')
    end

    def getGridFTPDataMovement(authzToken, dataMovementId)
      send_getGridFTPDataMovement(authzToken, dataMovementId)
      return recv_getGridFTPDataMovement()
    end

    def send_getGridFTPDataMovement(authzToken, dataMovementId)
      send_message('getGridFTPDataMovement', GetGridFTPDataMovement_args, :authzToken => authzToken, :dataMovementId => dataMovementId)
    end

    def recv_getGridFTPDataMovement()
      result = receive_message(GetGridFTPDataMovement_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGridFTPDataMovement failed: unknown result')
    end

    def changeJobSubmissionPriority(authzToken, jobSubmissionInterfaceId, newPriorityOrder)
      send_changeJobSubmissionPriority(authzToken, jobSubmissionInterfaceId, newPriorityOrder)
      return recv_changeJobSubmissionPriority()
    end

    def send_changeJobSubmissionPriority(authzToken, jobSubmissionInterfaceId, newPriorityOrder)
      send_message('changeJobSubmissionPriority', ChangeJobSubmissionPriority_args, :authzToken => authzToken, :jobSubmissionInterfaceId => jobSubmissionInterfaceId, :newPriorityOrder => newPriorityOrder)
    end

    def recv_changeJobSubmissionPriority()
      result = receive_message(ChangeJobSubmissionPriority_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'changeJobSubmissionPriority failed: unknown result')
    end

    def changeDataMovementPriority(authzToken, dataMovementInterfaceId, newPriorityOrder)
      send_changeDataMovementPriority(authzToken, dataMovementInterfaceId, newPriorityOrder)
      return recv_changeDataMovementPriority()
    end

    def send_changeDataMovementPriority(authzToken, dataMovementInterfaceId, newPriorityOrder)
      send_message('changeDataMovementPriority', ChangeDataMovementPriority_args, :authzToken => authzToken, :dataMovementInterfaceId => dataMovementInterfaceId, :newPriorityOrder => newPriorityOrder)
    end

    def recv_changeDataMovementPriority()
      result = receive_message(ChangeDataMovementPriority_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'changeDataMovementPriority failed: unknown result')
    end

    def changeJobSubmissionPriorities(authzToken, jobSubmissionPriorityMap)
      send_changeJobSubmissionPriorities(authzToken, jobSubmissionPriorityMap)
      return recv_changeJobSubmissionPriorities()
    end

    def send_changeJobSubmissionPriorities(authzToken, jobSubmissionPriorityMap)
      send_message('changeJobSubmissionPriorities', ChangeJobSubmissionPriorities_args, :authzToken => authzToken, :jobSubmissionPriorityMap => jobSubmissionPriorityMap)
    end

    def recv_changeJobSubmissionPriorities()
      result = receive_message(ChangeJobSubmissionPriorities_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'changeJobSubmissionPriorities failed: unknown result')
    end

    def changeDataMovementPriorities(authzToken, dataMovementPriorityMap)
      send_changeDataMovementPriorities(authzToken, dataMovementPriorityMap)
      return recv_changeDataMovementPriorities()
    end

    def send_changeDataMovementPriorities(authzToken, dataMovementPriorityMap)
      send_message('changeDataMovementPriorities', ChangeDataMovementPriorities_args, :authzToken => authzToken, :dataMovementPriorityMap => dataMovementPriorityMap)
    end

    def recv_changeDataMovementPriorities()
      result = receive_message(ChangeDataMovementPriorities_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'changeDataMovementPriorities failed: unknown result')
    end

    def deleteJobSubmissionInterface(authzToken, computeResourceId, jobSubmissionInterfaceId)
      send_deleteJobSubmissionInterface(authzToken, computeResourceId, jobSubmissionInterfaceId)
      return recv_deleteJobSubmissionInterface()
    end

    def send_deleteJobSubmissionInterface(authzToken, computeResourceId, jobSubmissionInterfaceId)
      send_message('deleteJobSubmissionInterface', DeleteJobSubmissionInterface_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :jobSubmissionInterfaceId => jobSubmissionInterfaceId)
    end

    def recv_deleteJobSubmissionInterface()
      result = receive_message(DeleteJobSubmissionInterface_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteJobSubmissionInterface failed: unknown result')
    end

    def deleteDataMovementInterface(authzToken, productUri, dataMovementInterfaceId, dataMoveType)
      send_deleteDataMovementInterface(authzToken, productUri, dataMovementInterfaceId, dataMoveType)
      return recv_deleteDataMovementInterface()
    end

    def send_deleteDataMovementInterface(authzToken, productUri, dataMovementInterfaceId, dataMoveType)
      send_message('deleteDataMovementInterface', DeleteDataMovementInterface_args, :authzToken => authzToken, :productUri => productUri, :dataMovementInterfaceId => dataMovementInterfaceId, :dataMoveType => dataMoveType)
    end

    def recv_deleteDataMovementInterface()
      result = receive_message(DeleteDataMovementInterface_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteDataMovementInterface failed: unknown result')
    end

    def registerResourceJobManager(authzToken, resourceJobManager)
      send_registerResourceJobManager(authzToken, resourceJobManager)
      return recv_registerResourceJobManager()
    end

    def send_registerResourceJobManager(authzToken, resourceJobManager)
      send_message('registerResourceJobManager', RegisterResourceJobManager_args, :authzToken => authzToken, :resourceJobManager => resourceJobManager)
    end

    def recv_registerResourceJobManager()
      result = receive_message(RegisterResourceJobManager_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerResourceJobManager failed: unknown result')
    end

    def updateResourceJobManager(authzToken, resourceJobManagerId, updatedResourceJobManager)
      send_updateResourceJobManager(authzToken, resourceJobManagerId, updatedResourceJobManager)
      return recv_updateResourceJobManager()
    end

    def send_updateResourceJobManager(authzToken, resourceJobManagerId, updatedResourceJobManager)
      send_message('updateResourceJobManager', UpdateResourceJobManager_args, :authzToken => authzToken, :resourceJobManagerId => resourceJobManagerId, :updatedResourceJobManager => updatedResourceJobManager)
    end

    def recv_updateResourceJobManager()
      result = receive_message(UpdateResourceJobManager_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateResourceJobManager failed: unknown result')
    end

    def getResourceJobManager(authzToken, resourceJobManagerId)
      send_getResourceJobManager(authzToken, resourceJobManagerId)
      return recv_getResourceJobManager()
    end

    def send_getResourceJobManager(authzToken, resourceJobManagerId)
      send_message('getResourceJobManager', GetResourceJobManager_args, :authzToken => authzToken, :resourceJobManagerId => resourceJobManagerId)
    end

    def recv_getResourceJobManager()
      result = receive_message(GetResourceJobManager_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getResourceJobManager failed: unknown result')
    end

    def deleteResourceJobManager(authzToken, resourceJobManagerId)
      send_deleteResourceJobManager(authzToken, resourceJobManagerId)
      return recv_deleteResourceJobManager()
    end

    def send_deleteResourceJobManager(authzToken, resourceJobManagerId)
      send_message('deleteResourceJobManager', DeleteResourceJobManager_args, :authzToken => authzToken, :resourceJobManagerId => resourceJobManagerId)
    end

    def recv_deleteResourceJobManager()
      result = receive_message(DeleteResourceJobManager_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteResourceJobManager failed: unknown result')
    end

    def deleteBatchQueue(authzToken, computeResourceId, queueName)
      send_deleteBatchQueue(authzToken, computeResourceId, queueName)
      return recv_deleteBatchQueue()
    end

    def send_deleteBatchQueue(authzToken, computeResourceId, queueName)
      send_message('deleteBatchQueue', DeleteBatchQueue_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :queueName => queueName)
    end

    def recv_deleteBatchQueue()
      result = receive_message(DeleteBatchQueue_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteBatchQueue failed: unknown result')
    end

    def registerGatewayResourceProfile(authzToken, gatewayResourceProfile)
      send_registerGatewayResourceProfile(authzToken, gatewayResourceProfile)
      return recv_registerGatewayResourceProfile()
    end

    def send_registerGatewayResourceProfile(authzToken, gatewayResourceProfile)
      send_message('registerGatewayResourceProfile', RegisterGatewayResourceProfile_args, :authzToken => authzToken, :gatewayResourceProfile => gatewayResourceProfile)
    end

    def recv_registerGatewayResourceProfile()
      result = receive_message(RegisterGatewayResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerGatewayResourceProfile failed: unknown result')
    end

    def getGatewayResourceProfile(authzToken, gatewayID)
      send_getGatewayResourceProfile(authzToken, gatewayID)
      return recv_getGatewayResourceProfile()
    end

    def send_getGatewayResourceProfile(authzToken, gatewayID)
      send_message('getGatewayResourceProfile', GetGatewayResourceProfile_args, :authzToken => authzToken, :gatewayID => gatewayID)
    end

    def recv_getGatewayResourceProfile()
      result = receive_message(GetGatewayResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGatewayResourceProfile failed: unknown result')
    end

    def updateGatewayResourceProfile(authzToken, gatewayID, gatewayResourceProfile)
      send_updateGatewayResourceProfile(authzToken, gatewayID, gatewayResourceProfile)
      return recv_updateGatewayResourceProfile()
    end

    def send_updateGatewayResourceProfile(authzToken, gatewayID, gatewayResourceProfile)
      send_message('updateGatewayResourceProfile', UpdateGatewayResourceProfile_args, :authzToken => authzToken, :gatewayID => gatewayID, :gatewayResourceProfile => gatewayResourceProfile)
    end

    def recv_updateGatewayResourceProfile()
      result = receive_message(UpdateGatewayResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateGatewayResourceProfile failed: unknown result')
    end

    def deleteGatewayResourceProfile(authzToken, gatewayID)
      send_deleteGatewayResourceProfile(authzToken, gatewayID)
      return recv_deleteGatewayResourceProfile()
    end

    def send_deleteGatewayResourceProfile(authzToken, gatewayID)
      send_message('deleteGatewayResourceProfile', DeleteGatewayResourceProfile_args, :authzToken => authzToken, :gatewayID => gatewayID)
    end

    def recv_deleteGatewayResourceProfile()
      result = receive_message(DeleteGatewayResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteGatewayResourceProfile failed: unknown result')
    end

    def addGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference)
      send_addGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference)
      return recv_addGatewayComputeResourcePreference()
    end

    def send_addGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference)
      send_message('addGatewayComputeResourcePreference', AddGatewayComputeResourcePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :computeResourceId => computeResourceId, :computeResourcePreference => computeResourcePreference)
    end

    def recv_addGatewayComputeResourcePreference()
      result = receive_message(AddGatewayComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addGatewayComputeResourcePreference failed: unknown result')
    end

    def addGatewayStoragePreference(authzToken, gatewayID, storageResourceId, storagePreference)
      send_addGatewayStoragePreference(authzToken, gatewayID, storageResourceId, storagePreference)
      return recv_addGatewayStoragePreference()
    end

    def send_addGatewayStoragePreference(authzToken, gatewayID, storageResourceId, storagePreference)
      send_message('addGatewayStoragePreference', AddGatewayStoragePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :storageResourceId => storageResourceId, :storagePreference => storagePreference)
    end

    def recv_addGatewayStoragePreference()
      result = receive_message(AddGatewayStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addGatewayStoragePreference failed: unknown result')
    end

    def getGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId)
      send_getGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId)
      return recv_getGatewayComputeResourcePreference()
    end

    def send_getGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId)
      send_message('getGatewayComputeResourcePreference', GetGatewayComputeResourcePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :computeResourceId => computeResourceId)
    end

    def recv_getGatewayComputeResourcePreference()
      result = receive_message(GetGatewayComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGatewayComputeResourcePreference failed: unknown result')
    end

    def getGatewayStoragePreference(authzToken, gatewayID, storageResourceId)
      send_getGatewayStoragePreference(authzToken, gatewayID, storageResourceId)
      return recv_getGatewayStoragePreference()
    end

    def send_getGatewayStoragePreference(authzToken, gatewayID, storageResourceId)
      send_message('getGatewayStoragePreference', GetGatewayStoragePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :storageResourceId => storageResourceId)
    end

    def recv_getGatewayStoragePreference()
      result = receive_message(GetGatewayStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGatewayStoragePreference failed: unknown result')
    end

    def getAllGatewayComputeResourcePreferences(authzToken, gatewayID)
      send_getAllGatewayComputeResourcePreferences(authzToken, gatewayID)
      return recv_getAllGatewayComputeResourcePreferences()
    end

    def send_getAllGatewayComputeResourcePreferences(authzToken, gatewayID)
      send_message('getAllGatewayComputeResourcePreferences', GetAllGatewayComputeResourcePreferences_args, :authzToken => authzToken, :gatewayID => gatewayID)
    end

    def recv_getAllGatewayComputeResourcePreferences()
      result = receive_message(GetAllGatewayComputeResourcePreferences_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllGatewayComputeResourcePreferences failed: unknown result')
    end

    def getAllGatewayStoragePreferences(authzToken, gatewayID)
      send_getAllGatewayStoragePreferences(authzToken, gatewayID)
      return recv_getAllGatewayStoragePreferences()
    end

    def send_getAllGatewayStoragePreferences(authzToken, gatewayID)
      send_message('getAllGatewayStoragePreferences', GetAllGatewayStoragePreferences_args, :authzToken => authzToken, :gatewayID => gatewayID)
    end

    def recv_getAllGatewayStoragePreferences()
      result = receive_message(GetAllGatewayStoragePreferences_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllGatewayStoragePreferences failed: unknown result')
    end

    def getAllGatewayResourceProfiles(authzToken)
      send_getAllGatewayResourceProfiles(authzToken)
      return recv_getAllGatewayResourceProfiles()
    end

    def send_getAllGatewayResourceProfiles(authzToken)
      send_message('getAllGatewayResourceProfiles', GetAllGatewayResourceProfiles_args, :authzToken => authzToken)
    end

    def recv_getAllGatewayResourceProfiles()
      result = receive_message(GetAllGatewayResourceProfiles_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllGatewayResourceProfiles failed: unknown result')
    end

    def updateGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference)
      send_updateGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference)
      return recv_updateGatewayComputeResourcePreference()
    end

    def send_updateGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference)
      send_message('updateGatewayComputeResourcePreference', UpdateGatewayComputeResourcePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :computeResourceId => computeResourceId, :computeResourcePreference => computeResourcePreference)
    end

    def recv_updateGatewayComputeResourcePreference()
      result = receive_message(UpdateGatewayComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateGatewayComputeResourcePreference failed: unknown result')
    end

    def updateGatewayStoragePreference(authzToken, gatewayID, storageId, storagePreference)
      send_updateGatewayStoragePreference(authzToken, gatewayID, storageId, storagePreference)
      return recv_updateGatewayStoragePreference()
    end

    def send_updateGatewayStoragePreference(authzToken, gatewayID, storageId, storagePreference)
      send_message('updateGatewayStoragePreference', UpdateGatewayStoragePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :storageId => storageId, :storagePreference => storagePreference)
    end

    def recv_updateGatewayStoragePreference()
      result = receive_message(UpdateGatewayStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateGatewayStoragePreference failed: unknown result')
    end

    def deleteGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId)
      send_deleteGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId)
      return recv_deleteGatewayComputeResourcePreference()
    end

    def send_deleteGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId)
      send_message('deleteGatewayComputeResourcePreference', DeleteGatewayComputeResourcePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :computeResourceId => computeResourceId)
    end

    def recv_deleteGatewayComputeResourcePreference()
      result = receive_message(DeleteGatewayComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteGatewayComputeResourcePreference failed: unknown result')
    end

    def deleteGatewayStoragePreference(authzToken, gatewayID, storageId)
      send_deleteGatewayStoragePreference(authzToken, gatewayID, storageId)
      return recv_deleteGatewayStoragePreference()
    end

    def send_deleteGatewayStoragePreference(authzToken, gatewayID, storageId)
      send_message('deleteGatewayStoragePreference', DeleteGatewayStoragePreference_args, :authzToken => authzToken, :gatewayID => gatewayID, :storageId => storageId)
    end

    def recv_deleteGatewayStoragePreference()
      result = receive_message(DeleteGatewayStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteGatewayStoragePreference failed: unknown result')
    end

    def getSSHAccountProvisioners(authzToken)
      send_getSSHAccountProvisioners(authzToken)
      return recv_getSSHAccountProvisioners()
    end

    def send_getSSHAccountProvisioners(authzToken)
      send_message('getSSHAccountProvisioners', GetSSHAccountProvisioners_args, :authzToken => authzToken)
    end

    def recv_getSSHAccountProvisioners()
      result = receive_message(GetSSHAccountProvisioners_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSSHAccountProvisioners failed: unknown result')
    end

    def doesUserHaveSSHAccount(authzToken, computeResourceId, userId)
      send_doesUserHaveSSHAccount(authzToken, computeResourceId, userId)
      return recv_doesUserHaveSSHAccount()
    end

    def send_doesUserHaveSSHAccount(authzToken, computeResourceId, userId)
      send_message('doesUserHaveSSHAccount', DoesUserHaveSSHAccount_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :userId => userId)
    end

    def recv_doesUserHaveSSHAccount()
      result = receive_message(DoesUserHaveSSHAccount_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'doesUserHaveSSHAccount failed: unknown result')
    end

    def isSSHSetupCompleteForUserComputeResourcePreference(authzToken, computeResourceId, airavataCredStoreToken)
      send_isSSHSetupCompleteForUserComputeResourcePreference(authzToken, computeResourceId, airavataCredStoreToken)
      return recv_isSSHSetupCompleteForUserComputeResourcePreference()
    end

    def send_isSSHSetupCompleteForUserComputeResourcePreference(authzToken, computeResourceId, airavataCredStoreToken)
      send_message('isSSHSetupCompleteForUserComputeResourcePreference', IsSSHSetupCompleteForUserComputeResourcePreference_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :airavataCredStoreToken => airavataCredStoreToken)
    end

    def recv_isSSHSetupCompleteForUserComputeResourcePreference()
      result = receive_message(IsSSHSetupCompleteForUserComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isSSHSetupCompleteForUserComputeResourcePreference failed: unknown result')
    end

    def setupUserComputeResourcePreferencesForSSH(authzToken, computeResourceId, userId, airavataCredStoreToken)
      send_setupUserComputeResourcePreferencesForSSH(authzToken, computeResourceId, userId, airavataCredStoreToken)
      return recv_setupUserComputeResourcePreferencesForSSH()
    end

    def send_setupUserComputeResourcePreferencesForSSH(authzToken, computeResourceId, userId, airavataCredStoreToken)
      send_message('setupUserComputeResourcePreferencesForSSH', SetupUserComputeResourcePreferencesForSSH_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :userId => userId, :airavataCredStoreToken => airavataCredStoreToken)
    end

    def recv_setupUserComputeResourcePreferencesForSSH()
      result = receive_message(SetupUserComputeResourcePreferencesForSSH_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setupUserComputeResourcePreferencesForSSH failed: unknown result')
    end

    def registerUserResourceProfile(authzToken, userResourceProfile)
      send_registerUserResourceProfile(authzToken, userResourceProfile)
      return recv_registerUserResourceProfile()
    end

    def send_registerUserResourceProfile(authzToken, userResourceProfile)
      send_message('registerUserResourceProfile', RegisterUserResourceProfile_args, :authzToken => authzToken, :userResourceProfile => userResourceProfile)
    end

    def recv_registerUserResourceProfile()
      result = receive_message(RegisterUserResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerUserResourceProfile failed: unknown result')
    end

    def isUserResourceProfileExists(authzToken, userId, gatewayID)
      send_isUserResourceProfileExists(authzToken, userId, gatewayID)
      return recv_isUserResourceProfileExists()
    end

    def send_isUserResourceProfileExists(authzToken, userId, gatewayID)
      send_message('isUserResourceProfileExists', IsUserResourceProfileExists_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID)
    end

    def recv_isUserResourceProfileExists()
      result = receive_message(IsUserResourceProfileExists_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isUserResourceProfileExists failed: unknown result')
    end

    def getUserResourceProfile(authzToken, userId, gatewayID)
      send_getUserResourceProfile(authzToken, userId, gatewayID)
      return recv_getUserResourceProfile()
    end

    def send_getUserResourceProfile(authzToken, userId, gatewayID)
      send_message('getUserResourceProfile', GetUserResourceProfile_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID)
    end

    def recv_getUserResourceProfile()
      result = receive_message(GetUserResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserResourceProfile failed: unknown result')
    end

    def updateUserResourceProfile(authzToken, userId, gatewayID, userResourceProfile)
      send_updateUserResourceProfile(authzToken, userId, gatewayID, userResourceProfile)
      return recv_updateUserResourceProfile()
    end

    def send_updateUserResourceProfile(authzToken, userId, gatewayID, userResourceProfile)
      send_message('updateUserResourceProfile', UpdateUserResourceProfile_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userResourceProfile => userResourceProfile)
    end

    def recv_updateUserResourceProfile()
      result = receive_message(UpdateUserResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateUserResourceProfile failed: unknown result')
    end

    def deleteUserResourceProfile(authzToken, userId, gatewayID)
      send_deleteUserResourceProfile(authzToken, userId, gatewayID)
      return recv_deleteUserResourceProfile()
    end

    def send_deleteUserResourceProfile(authzToken, userId, gatewayID)
      send_message('deleteUserResourceProfile', DeleteUserResourceProfile_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID)
    end

    def recv_deleteUserResourceProfile()
      result = receive_message(DeleteUserResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteUserResourceProfile failed: unknown result')
    end

    def addUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference)
      send_addUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference)
      return recv_addUserComputeResourcePreference()
    end

    def send_addUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference)
      send_message('addUserComputeResourcePreference', AddUserComputeResourcePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userComputeResourceId => userComputeResourceId, :userComputeResourcePreference => userComputeResourcePreference)
    end

    def recv_addUserComputeResourcePreference()
      result = receive_message(AddUserComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addUserComputeResourcePreference failed: unknown result')
    end

    def addUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId, userStoragePreference)
      send_addUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId, userStoragePreference)
      return recv_addUserStoragePreference()
    end

    def send_addUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId, userStoragePreference)
      send_message('addUserStoragePreference', AddUserStoragePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userStorageResourceId => userStorageResourceId, :userStoragePreference => userStoragePreference)
    end

    def recv_addUserStoragePreference()
      result = receive_message(AddUserStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'addUserStoragePreference failed: unknown result')
    end

    def getUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId)
      send_getUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId)
      return recv_getUserComputeResourcePreference()
    end

    def send_getUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId)
      send_message('getUserComputeResourcePreference', GetUserComputeResourcePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userComputeResourceId => userComputeResourceId)
    end

    def recv_getUserComputeResourcePreference()
      result = receive_message(GetUserComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserComputeResourcePreference failed: unknown result')
    end

    def getUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId)
      send_getUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId)
      return recv_getUserStoragePreference()
    end

    def send_getUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId)
      send_message('getUserStoragePreference', GetUserStoragePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userStorageResourceId => userStorageResourceId)
    end

    def recv_getUserStoragePreference()
      result = receive_message(GetUserStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserStoragePreference failed: unknown result')
    end

    def getAllUserComputeResourcePreferences(authzToken, userId, gatewayID)
      send_getAllUserComputeResourcePreferences(authzToken, userId, gatewayID)
      return recv_getAllUserComputeResourcePreferences()
    end

    def send_getAllUserComputeResourcePreferences(authzToken, userId, gatewayID)
      send_message('getAllUserComputeResourcePreferences', GetAllUserComputeResourcePreferences_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID)
    end

    def recv_getAllUserComputeResourcePreferences()
      result = receive_message(GetAllUserComputeResourcePreferences_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllUserComputeResourcePreferences failed: unknown result')
    end

    def getAllUserStoragePreferences(authzToken, userId, gatewayID)
      send_getAllUserStoragePreferences(authzToken, userId, gatewayID)
      return recv_getAllUserStoragePreferences()
    end

    def send_getAllUserStoragePreferences(authzToken, userId, gatewayID)
      send_message('getAllUserStoragePreferences', GetAllUserStoragePreferences_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID)
    end

    def recv_getAllUserStoragePreferences()
      result = receive_message(GetAllUserStoragePreferences_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllUserStoragePreferences failed: unknown result')
    end

    def getAllUserResourceProfiles(authzToken)
      send_getAllUserResourceProfiles(authzToken)
      return recv_getAllUserResourceProfiles()
    end

    def send_getAllUserResourceProfiles(authzToken)
      send_message('getAllUserResourceProfiles', GetAllUserResourceProfiles_args, :authzToken => authzToken)
    end

    def recv_getAllUserResourceProfiles()
      result = receive_message(GetAllUserResourceProfiles_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllUserResourceProfiles failed: unknown result')
    end

    def updateUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference)
      send_updateUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference)
      return recv_updateUserComputeResourcePreference()
    end

    def send_updateUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference)
      send_message('updateUserComputeResourcePreference', UpdateUserComputeResourcePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userComputeResourceId => userComputeResourceId, :userComputeResourcePreference => userComputeResourcePreference)
    end

    def recv_updateUserComputeResourcePreference()
      result = receive_message(UpdateUserComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateUserComputeResourcePreference failed: unknown result')
    end

    def updateUserStoragePreference(authzToken, userId, gatewayID, userStorageId, userStoragePreference)
      send_updateUserStoragePreference(authzToken, userId, gatewayID, userStorageId, userStoragePreference)
      return recv_updateUserStoragePreference()
    end

    def send_updateUserStoragePreference(authzToken, userId, gatewayID, userStorageId, userStoragePreference)
      send_message('updateUserStoragePreference', UpdateUserStoragePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userStorageId => userStorageId, :userStoragePreference => userStoragePreference)
    end

    def recv_updateUserStoragePreference()
      result = receive_message(UpdateUserStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateUserStoragePreference failed: unknown result')
    end

    def deleteUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId)
      send_deleteUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId)
      return recv_deleteUserComputeResourcePreference()
    end

    def send_deleteUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId)
      send_message('deleteUserComputeResourcePreference', DeleteUserComputeResourcePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userComputeResourceId => userComputeResourceId)
    end

    def recv_deleteUserComputeResourcePreference()
      result = receive_message(DeleteUserComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteUserComputeResourcePreference failed: unknown result')
    end

    def deleteUserStoragePreference(authzToken, userId, gatewayID, userStorageId)
      send_deleteUserStoragePreference(authzToken, userId, gatewayID, userStorageId)
      return recv_deleteUserStoragePreference()
    end

    def send_deleteUserStoragePreference(authzToken, userId, gatewayID, userStorageId)
      send_message('deleteUserStoragePreference', DeleteUserStoragePreference_args, :authzToken => authzToken, :userId => userId, :gatewayID => gatewayID, :userStorageId => userStorageId)
    end

    def recv_deleteUserStoragePreference()
      result = receive_message(DeleteUserStoragePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'deleteUserStoragePreference failed: unknown result')
    end

    def getLatestQueueStatuses(authzToken)
      send_getLatestQueueStatuses(authzToken)
      return recv_getLatestQueueStatuses()
    end

    def send_getLatestQueueStatuses(authzToken)
      send_message('getLatestQueueStatuses', GetLatestQueueStatuses_args, :authzToken => authzToken)
    end

    def recv_getLatestQueueStatuses()
      result = receive_message(GetLatestQueueStatuses_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLatestQueueStatuses failed: unknown result')
    end

    def registerDataProduct(authzToken, dataProductModel)
      send_registerDataProduct(authzToken, dataProductModel)
      return recv_registerDataProduct()
    end

    def send_registerDataProduct(authzToken, dataProductModel)
      send_message('registerDataProduct', RegisterDataProduct_args, :authzToken => authzToken, :dataProductModel => dataProductModel)
    end

    def recv_registerDataProduct()
      result = receive_message(RegisterDataProduct_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerDataProduct failed: unknown result')
    end

    def getDataProduct(authzToken, dataProductUri)
      send_getDataProduct(authzToken, dataProductUri)
      return recv_getDataProduct()
    end

    def send_getDataProduct(authzToken, dataProductUri)
      send_message('getDataProduct', GetDataProduct_args, :authzToken => authzToken, :dataProductUri => dataProductUri)
    end

    def recv_getDataProduct()
      result = receive_message(GetDataProduct_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDataProduct failed: unknown result')
    end

    def registerReplicaLocation(authzToken, replicaLocationModel)
      send_registerReplicaLocation(authzToken, replicaLocationModel)
      return recv_registerReplicaLocation()
    end

    def send_registerReplicaLocation(authzToken, replicaLocationModel)
      send_message('registerReplicaLocation', RegisterReplicaLocation_args, :authzToken => authzToken, :replicaLocationModel => replicaLocationModel)
    end

    def recv_registerReplicaLocation()
      result = receive_message(RegisterReplicaLocation_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registerReplicaLocation failed: unknown result')
    end

    def getParentDataProduct(authzToken, productUri)
      send_getParentDataProduct(authzToken, productUri)
      return recv_getParentDataProduct()
    end

    def send_getParentDataProduct(authzToken, productUri)
      send_message('getParentDataProduct', GetParentDataProduct_args, :authzToken => authzToken, :productUri => productUri)
    end

    def recv_getParentDataProduct()
      result = receive_message(GetParentDataProduct_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getParentDataProduct failed: unknown result')
    end

    def getChildDataProducts(authzToken, productUri)
      send_getChildDataProducts(authzToken, productUri)
      return recv_getChildDataProducts()
    end

    def send_getChildDataProducts(authzToken, productUri)
      send_message('getChildDataProducts', GetChildDataProducts_args, :authzToken => authzToken, :productUri => productUri)
    end

    def recv_getChildDataProducts()
      result = receive_message(GetChildDataProducts_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChildDataProducts failed: unknown result')
    end

    def shareResourceWithUsers(authzToken, resourceId, userPermissionList)
      send_shareResourceWithUsers(authzToken, resourceId, userPermissionList)
      return recv_shareResourceWithUsers()
    end

    def send_shareResourceWithUsers(authzToken, resourceId, userPermissionList)
      send_message('shareResourceWithUsers', ShareResourceWithUsers_args, :authzToken => authzToken, :resourceId => resourceId, :userPermissionList => userPermissionList)
    end

    def recv_shareResourceWithUsers()
      result = receive_message(ShareResourceWithUsers_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'shareResourceWithUsers failed: unknown result')
    end

    def shareResourceWithGroups(authzToken, resourceId, groupPermissionList)
      send_shareResourceWithGroups(authzToken, resourceId, groupPermissionList)
      return recv_shareResourceWithGroups()
    end

    def send_shareResourceWithGroups(authzToken, resourceId, groupPermissionList)
      send_message('shareResourceWithGroups', ShareResourceWithGroups_args, :authzToken => authzToken, :resourceId => resourceId, :groupPermissionList => groupPermissionList)
    end

    def recv_shareResourceWithGroups()
      result = receive_message(ShareResourceWithGroups_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'shareResourceWithGroups failed: unknown result')
    end

    def revokeSharingOfResourceFromUsers(authzToken, resourceId, userPermissionList)
      send_revokeSharingOfResourceFromUsers(authzToken, resourceId, userPermissionList)
      return recv_revokeSharingOfResourceFromUsers()
    end

    def send_revokeSharingOfResourceFromUsers(authzToken, resourceId, userPermissionList)
      send_message('revokeSharingOfResourceFromUsers', RevokeSharingOfResourceFromUsers_args, :authzToken => authzToken, :resourceId => resourceId, :userPermissionList => userPermissionList)
    end

    def recv_revokeSharingOfResourceFromUsers()
      result = receive_message(RevokeSharingOfResourceFromUsers_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'revokeSharingOfResourceFromUsers failed: unknown result')
    end

    def revokeSharingOfResourceFromGroups(authzToken, resourceId, groupPermissionList)
      send_revokeSharingOfResourceFromGroups(authzToken, resourceId, groupPermissionList)
      return recv_revokeSharingOfResourceFromGroups()
    end

    def send_revokeSharingOfResourceFromGroups(authzToken, resourceId, groupPermissionList)
      send_message('revokeSharingOfResourceFromGroups', RevokeSharingOfResourceFromGroups_args, :authzToken => authzToken, :resourceId => resourceId, :groupPermissionList => groupPermissionList)
    end

    def recv_revokeSharingOfResourceFromGroups()
      result = receive_message(RevokeSharingOfResourceFromGroups_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'revokeSharingOfResourceFromGroups failed: unknown result')
    end

    def getAllAccessibleUsers(authzToken, resourceId, permissionType)
      send_getAllAccessibleUsers(authzToken, resourceId, permissionType)
      return recv_getAllAccessibleUsers()
    end

    def send_getAllAccessibleUsers(authzToken, resourceId, permissionType)
      send_message('getAllAccessibleUsers', GetAllAccessibleUsers_args, :authzToken => authzToken, :resourceId => resourceId, :permissionType => permissionType)
    end

    def recv_getAllAccessibleUsers()
      result = receive_message(GetAllAccessibleUsers_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllAccessibleUsers failed: unknown result')
    end

    def getAllAccessibleGroups(authzToken, resourceId, permissionType)
      send_getAllAccessibleGroups(authzToken, resourceId, permissionType)
      return recv_getAllAccessibleGroups()
    end

    def send_getAllAccessibleGroups(authzToken, resourceId, permissionType)
      send_message('getAllAccessibleGroups', GetAllAccessibleGroups_args, :authzToken => authzToken, :resourceId => resourceId, :permissionType => permissionType)
    end

    def recv_getAllAccessibleGroups()
      result = receive_message(GetAllAccessibleGroups_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllAccessibleGroups failed: unknown result')
    end

    def getAllDirectlyAccessibleUsers(authzToken, resourceId, permissionType)
      send_getAllDirectlyAccessibleUsers(authzToken, resourceId, permissionType)
      return recv_getAllDirectlyAccessibleUsers()
    end

    def send_getAllDirectlyAccessibleUsers(authzToken, resourceId, permissionType)
      send_message('getAllDirectlyAccessibleUsers', GetAllDirectlyAccessibleUsers_args, :authzToken => authzToken, :resourceId => resourceId, :permissionType => permissionType)
    end

    def recv_getAllDirectlyAccessibleUsers()
      result = receive_message(GetAllDirectlyAccessibleUsers_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllDirectlyAccessibleUsers failed: unknown result')
    end

    def getAllDirectlyAccessibleGroups(authzToken, resourceId, permissionType)
      send_getAllDirectlyAccessibleGroups(authzToken, resourceId, permissionType)
      return recv_getAllDirectlyAccessibleGroups()
    end

    def send_getAllDirectlyAccessibleGroups(authzToken, resourceId, permissionType)
      send_message('getAllDirectlyAccessibleGroups', GetAllDirectlyAccessibleGroups_args, :authzToken => authzToken, :resourceId => resourceId, :permissionType => permissionType)
    end

    def recv_getAllDirectlyAccessibleGroups()
      result = receive_message(GetAllDirectlyAccessibleGroups_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllDirectlyAccessibleGroups failed: unknown result')
    end

    def userHasAccess(authzToken, resourceId, permissionType)
      send_userHasAccess(authzToken, resourceId, permissionType)
      return recv_userHasAccess()
    end

    def send_userHasAccess(authzToken, resourceId, permissionType)
      send_message('userHasAccess', UserHasAccess_args, :authzToken => authzToken, :resourceId => resourceId, :permissionType => permissionType)
    end

    def recv_userHasAccess()
      result = receive_message(UserHasAccess_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'userHasAccess failed: unknown result')
    end

    def createGroupResourceProfile(authzToken, groupResourceProfile)
      send_createGroupResourceProfile(authzToken, groupResourceProfile)
      return recv_createGroupResourceProfile()
    end

    def send_createGroupResourceProfile(authzToken, groupResourceProfile)
      send_message('createGroupResourceProfile', CreateGroupResourceProfile_args, :authzToken => authzToken, :groupResourceProfile => groupResourceProfile)
    end

    def recv_createGroupResourceProfile()
      result = receive_message(CreateGroupResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createGroupResourceProfile failed: unknown result')
    end

    def updateGroupResourceProfile(authzToken, groupResourceProfile)
      send_updateGroupResourceProfile(authzToken, groupResourceProfile)
      recv_updateGroupResourceProfile()
    end

    def send_updateGroupResourceProfile(authzToken, groupResourceProfile)
      send_message('updateGroupResourceProfile', UpdateGroupResourceProfile_args, :authzToken => authzToken, :groupResourceProfile => groupResourceProfile)
    end

    def recv_updateGroupResourceProfile()
      result = receive_message(UpdateGroupResourceProfile_result)
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      return
    end

    def getGroupResourceProfile(authzToken, groupResourceProfileId)
      send_getGroupResourceProfile(authzToken, groupResourceProfileId)
      return recv_getGroupResourceProfile()
    end

    def send_getGroupResourceProfile(authzToken, groupResourceProfileId)
      send_message('getGroupResourceProfile', GetGroupResourceProfile_args, :authzToken => authzToken, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_getGroupResourceProfile()
      result = receive_message(GetGroupResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupResourceProfile failed: unknown result')
    end

    def removeGroupResourceProfile(authzToken, groupResourceProfileId)
      send_removeGroupResourceProfile(authzToken, groupResourceProfileId)
      return recv_removeGroupResourceProfile()
    end

    def send_removeGroupResourceProfile(authzToken, groupResourceProfileId)
      send_message('removeGroupResourceProfile', RemoveGroupResourceProfile_args, :authzToken => authzToken, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_removeGroupResourceProfile()
      result = receive_message(RemoveGroupResourceProfile_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeGroupResourceProfile failed: unknown result')
    end

    def getGroupResourceList(authzToken, gatewayId)
      send_getGroupResourceList(authzToken, gatewayId)
      return recv_getGroupResourceList()
    end

    def send_getGroupResourceList(authzToken, gatewayId)
      send_message('getGroupResourceList', GetGroupResourceList_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_getGroupResourceList()
      result = receive_message(GetGroupResourceList_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupResourceList failed: unknown result')
    end

    def removeGroupComputePrefs(authzToken, computeResourceId, groupResourceProfileId)
      send_removeGroupComputePrefs(authzToken, computeResourceId, groupResourceProfileId)
      return recv_removeGroupComputePrefs()
    end

    def send_removeGroupComputePrefs(authzToken, computeResourceId, groupResourceProfileId)
      send_message('removeGroupComputePrefs', RemoveGroupComputePrefs_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_removeGroupComputePrefs()
      result = receive_message(RemoveGroupComputePrefs_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeGroupComputePrefs failed: unknown result')
    end

    def removeGroupComputeResourcePolicy(authzToken, resourcePolicyId)
      send_removeGroupComputeResourcePolicy(authzToken, resourcePolicyId)
      return recv_removeGroupComputeResourcePolicy()
    end

    def send_removeGroupComputeResourcePolicy(authzToken, resourcePolicyId)
      send_message('removeGroupComputeResourcePolicy', RemoveGroupComputeResourcePolicy_args, :authzToken => authzToken, :resourcePolicyId => resourcePolicyId)
    end

    def recv_removeGroupComputeResourcePolicy()
      result = receive_message(RemoveGroupComputeResourcePolicy_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeGroupComputeResourcePolicy failed: unknown result')
    end

    def removeGroupBatchQueueResourcePolicy(authzToken, resourcePolicyId)
      send_removeGroupBatchQueueResourcePolicy(authzToken, resourcePolicyId)
      return recv_removeGroupBatchQueueResourcePolicy()
    end

    def send_removeGroupBatchQueueResourcePolicy(authzToken, resourcePolicyId)
      send_message('removeGroupBatchQueueResourcePolicy', RemoveGroupBatchQueueResourcePolicy_args, :authzToken => authzToken, :resourcePolicyId => resourcePolicyId)
    end

    def recv_removeGroupBatchQueueResourcePolicy()
      result = receive_message(RemoveGroupBatchQueueResourcePolicy_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeGroupBatchQueueResourcePolicy failed: unknown result')
    end

    def getGroupComputeResourcePreference(authzToken, computeResourceId, groupResourceProfileId)
      send_getGroupComputeResourcePreference(authzToken, computeResourceId, groupResourceProfileId)
      return recv_getGroupComputeResourcePreference()
    end

    def send_getGroupComputeResourcePreference(authzToken, computeResourceId, groupResourceProfileId)
      send_message('getGroupComputeResourcePreference', GetGroupComputeResourcePreference_args, :authzToken => authzToken, :computeResourceId => computeResourceId, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_getGroupComputeResourcePreference()
      result = receive_message(GetGroupComputeResourcePreference_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupComputeResourcePreference failed: unknown result')
    end

    def getGroupComputeResourcePolicy(authzToken, resourcePolicyId)
      send_getGroupComputeResourcePolicy(authzToken, resourcePolicyId)
      return recv_getGroupComputeResourcePolicy()
    end

    def send_getGroupComputeResourcePolicy(authzToken, resourcePolicyId)
      send_message('getGroupComputeResourcePolicy', GetGroupComputeResourcePolicy_args, :authzToken => authzToken, :resourcePolicyId => resourcePolicyId)
    end

    def recv_getGroupComputeResourcePolicy()
      result = receive_message(GetGroupComputeResourcePolicy_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupComputeResourcePolicy failed: unknown result')
    end

    def getBatchQueueResourcePolicy(authzToken, resourcePolicyId)
      send_getBatchQueueResourcePolicy(authzToken, resourcePolicyId)
      return recv_getBatchQueueResourcePolicy()
    end

    def send_getBatchQueueResourcePolicy(authzToken, resourcePolicyId)
      send_message('getBatchQueueResourcePolicy', GetBatchQueueResourcePolicy_args, :authzToken => authzToken, :resourcePolicyId => resourcePolicyId)
    end

    def recv_getBatchQueueResourcePolicy()
      result = receive_message(GetBatchQueueResourcePolicy_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBatchQueueResourcePolicy failed: unknown result')
    end

    def getGroupComputeResourcePrefList(authzToken, groupResourceProfileId)
      send_getGroupComputeResourcePrefList(authzToken, groupResourceProfileId)
      return recv_getGroupComputeResourcePrefList()
    end

    def send_getGroupComputeResourcePrefList(authzToken, groupResourceProfileId)
      send_message('getGroupComputeResourcePrefList', GetGroupComputeResourcePrefList_args, :authzToken => authzToken, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_getGroupComputeResourcePrefList()
      result = receive_message(GetGroupComputeResourcePrefList_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupComputeResourcePrefList failed: unknown result')
    end

    def getGroupBatchQueueResourcePolicyList(authzToken, groupResourceProfileId)
      send_getGroupBatchQueueResourcePolicyList(authzToken, groupResourceProfileId)
      return recv_getGroupBatchQueueResourcePolicyList()
    end

    def send_getGroupBatchQueueResourcePolicyList(authzToken, groupResourceProfileId)
      send_message('getGroupBatchQueueResourcePolicyList', GetGroupBatchQueueResourcePolicyList_args, :authzToken => authzToken, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_getGroupBatchQueueResourcePolicyList()
      result = receive_message(GetGroupBatchQueueResourcePolicyList_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupBatchQueueResourcePolicyList failed: unknown result')
    end

    def getGroupComputeResourcePolicyList(authzToken, groupResourceProfileId)
      send_getGroupComputeResourcePolicyList(authzToken, groupResourceProfileId)
      return recv_getGroupComputeResourcePolicyList()
    end

    def send_getGroupComputeResourcePolicyList(authzToken, groupResourceProfileId)
      send_message('getGroupComputeResourcePolicyList', GetGroupComputeResourcePolicyList_args, :authzToken => authzToken, :groupResourceProfileId => groupResourceProfileId)
    end

    def recv_getGroupComputeResourcePolicyList()
      result = receive_message(GetGroupComputeResourcePolicyList_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupComputeResourcePolicyList failed: unknown result')
    end

    def getGatewayGroups(authzToken)
      send_getGatewayGroups(authzToken)
      return recv_getGatewayGroups()
    end

    def send_getGatewayGroups(authzToken)
      send_message('getGatewayGroups', GetGatewayGroups_args, :authzToken => authzToken)
    end

    def recv_getGatewayGroups()
      result = receive_message(GetGatewayGroups_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGatewayGroups failed: unknown result')
    end

    def getParser(authzToken, parserId, gatewayId)
      send_getParser(authzToken, parserId, gatewayId)
      return recv_getParser()
    end

    def send_getParser(authzToken, parserId, gatewayId)
      send_message('getParser', GetParser_args, :authzToken => authzToken, :parserId => parserId, :gatewayId => gatewayId)
    end

    def recv_getParser()
      result = receive_message(GetParser_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getParser failed: unknown result')
    end

    def saveParser(authzToken, parser)
      send_saveParser(authzToken, parser)
      return recv_saveParser()
    end

    def send_saveParser(authzToken, parser)
      send_message('saveParser', SaveParser_args, :authzToken => authzToken, :parser => parser)
    end

    def recv_saveParser()
      result = receive_message(SaveParser_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'saveParser failed: unknown result')
    end

    def listAllParsers(authzToken, gatewayId)
      send_listAllParsers(authzToken, gatewayId)
      return recv_listAllParsers()
    end

    def send_listAllParsers(authzToken, gatewayId)
      send_message('listAllParsers', ListAllParsers_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_listAllParsers()
      result = receive_message(ListAllParsers_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listAllParsers failed: unknown result')
    end

    def removeParser(authzToken, parserId, gatewayId)
      send_removeParser(authzToken, parserId, gatewayId)
      return recv_removeParser()
    end

    def send_removeParser(authzToken, parserId, gatewayId)
      send_message('removeParser', RemoveParser_args, :authzToken => authzToken, :parserId => parserId, :gatewayId => gatewayId)
    end

    def recv_removeParser()
      result = receive_message(RemoveParser_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeParser failed: unknown result')
    end

    def getParsingTemplate(authzToken, templateId, gatewayId)
      send_getParsingTemplate(authzToken, templateId, gatewayId)
      return recv_getParsingTemplate()
    end

    def send_getParsingTemplate(authzToken, templateId, gatewayId)
      send_message('getParsingTemplate', GetParsingTemplate_args, :authzToken => authzToken, :templateId => templateId, :gatewayId => gatewayId)
    end

    def recv_getParsingTemplate()
      result = receive_message(GetParsingTemplate_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getParsingTemplate failed: unknown result')
    end

    def getParsingTemplatesForExperiment(authzToken, experimentId, gatewayId)
      send_getParsingTemplatesForExperiment(authzToken, experimentId, gatewayId)
      return recv_getParsingTemplatesForExperiment()
    end

    def send_getParsingTemplatesForExperiment(authzToken, experimentId, gatewayId)
      send_message('getParsingTemplatesForExperiment', GetParsingTemplatesForExperiment_args, :authzToken => authzToken, :experimentId => experimentId, :gatewayId => gatewayId)
    end

    def recv_getParsingTemplatesForExperiment()
      result = receive_message(GetParsingTemplatesForExperiment_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getParsingTemplatesForExperiment failed: unknown result')
    end

    def saveParsingTemplate(authzToken, parsingTemplate)
      send_saveParsingTemplate(authzToken, parsingTemplate)
      return recv_saveParsingTemplate()
    end

    def send_saveParsingTemplate(authzToken, parsingTemplate)
      send_message('saveParsingTemplate', SaveParsingTemplate_args, :authzToken => authzToken, :parsingTemplate => parsingTemplate)
    end

    def recv_saveParsingTemplate()
      result = receive_message(SaveParsingTemplate_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'saveParsingTemplate failed: unknown result')
    end

    def removeParsingTemplate(authzToken, templateId, gatewayId)
      send_removeParsingTemplate(authzToken, templateId, gatewayId)
      return recv_removeParsingTemplate()
    end

    def send_removeParsingTemplate(authzToken, templateId, gatewayId)
      send_message('removeParsingTemplate', RemoveParsingTemplate_args, :authzToken => authzToken, :templateId => templateId, :gatewayId => gatewayId)
    end

    def recv_removeParsingTemplate()
      result = receive_message(RemoveParsingTemplate_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeParsingTemplate failed: unknown result')
    end

    def listAllParsingTemplates(authzToken, gatewayId)
      send_listAllParsingTemplates(authzToken, gatewayId)
      return recv_listAllParsingTemplates()
    end

    def send_listAllParsingTemplates(authzToken, gatewayId)
      send_message('listAllParsingTemplates', ListAllParsingTemplates_args, :authzToken => authzToken, :gatewayId => gatewayId)
    end

    def recv_listAllParsingTemplates()
      result = receive_message(ListAllParsingTemplates_result)
      return result.success unless result.success.nil?
      raise result.ire unless result.ire.nil?
      raise result.ace unless result.ace.nil?
      raise result.ase unless result.ase.nil?
      raise result.ae unless result.ae.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listAllParsingTemplates failed: unknown result')
    end

  end

  class Processor < ::BaseAPI::Processor 
    include ::Thrift::Processor

    def process_isUserExists(seqid, iprot, oprot)
      args = read_args(iprot, IsUserExists_args)
      result = IsUserExists_result.new()
      begin
        result.success = @handler.isUserExists(args.authzToken, args.gatewayId, args.userName)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'isUserExists', seqid)
    end

    def process_addGateway(seqid, iprot, oprot)
      args = read_args(iprot, AddGateway_args)
      result = AddGateway_result.new()
      begin
        result.success = @handler.addGateway(args.authzToken, args.gateway)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addGateway', seqid)
    end

    def process_getAllUsersInGateway(seqid, iprot, oprot)
      args = read_args(iprot, GetAllUsersInGateway_args)
      result = GetAllUsersInGateway_result.new()
      begin
        result.success = @handler.getAllUsersInGateway(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllUsersInGateway', seqid)
    end

    def process_updateGateway(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGateway_args)
      result = UpdateGateway_result.new()
      begin
        result.success = @handler.updateGateway(args.authzToken, args.gatewayId, args.updatedGateway)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateGateway', seqid)
    end

    def process_getGateway(seqid, iprot, oprot)
      args = read_args(iprot, GetGateway_args)
      result = GetGateway_result.new()
      begin
        result.success = @handler.getGateway(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGateway', seqid)
    end

    def process_deleteGateway(seqid, iprot, oprot)
      args = read_args(iprot, DeleteGateway_args)
      result = DeleteGateway_result.new()
      begin
        result.success = @handler.deleteGateway(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteGateway', seqid)
    end

    def process_getAllGateways(seqid, iprot, oprot)
      args = read_args(iprot, GetAllGateways_args)
      result = GetAllGateways_result.new()
      begin
        result.success = @handler.getAllGateways(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllGateways', seqid)
    end

    def process_isGatewayExist(seqid, iprot, oprot)
      args = read_args(iprot, IsGatewayExist_args)
      result = IsGatewayExist_result.new()
      begin
        result.success = @handler.isGatewayExist(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'isGatewayExist', seqid)
    end

    def process_createNotification(seqid, iprot, oprot)
      args = read_args(iprot, CreateNotification_args)
      result = CreateNotification_result.new()
      begin
        result.success = @handler.createNotification(args.authzToken, args.notification)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'createNotification', seqid)
    end

    def process_updateNotification(seqid, iprot, oprot)
      args = read_args(iprot, UpdateNotification_args)
      result = UpdateNotification_result.new()
      begin
        result.success = @handler.updateNotification(args.authzToken, args.notification)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateNotification', seqid)
    end

    def process_deleteNotification(seqid, iprot, oprot)
      args = read_args(iprot, DeleteNotification_args)
      result = DeleteNotification_result.new()
      begin
        result.success = @handler.deleteNotification(args.authzToken, args.gatewayId, args.notificationId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteNotification', seqid)
    end

    def process_getNotification(seqid, iprot, oprot)
      args = read_args(iprot, GetNotification_args)
      result = GetNotification_result.new()
      begin
        result.success = @handler.getNotification(args.authzToken, args.gatewayId, args.notificationId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getNotification', seqid)
    end

    def process_getAllNotifications(seqid, iprot, oprot)
      args = read_args(iprot, GetAllNotifications_args)
      result = GetAllNotifications_result.new()
      begin
        result.success = @handler.getAllNotifications(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllNotifications', seqid)
    end

    def process_generateAndRegisterSSHKeys(seqid, iprot, oprot)
      args = read_args(iprot, GenerateAndRegisterSSHKeys_args)
      result = GenerateAndRegisterSSHKeys_result.new()
      begin
        result.success = @handler.generateAndRegisterSSHKeys(args.authzToken, args.description)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      end
      write_result(result, oprot, 'generateAndRegisterSSHKeys', seqid)
    end

    def process_registerPwdCredential(seqid, iprot, oprot)
      args = read_args(iprot, RegisterPwdCredential_args)
      result = RegisterPwdCredential_result.new()
      begin
        result.success = @handler.registerPwdCredential(args.authzToken, args.loginUserName, args.password, args.description)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      end
      write_result(result, oprot, 'registerPwdCredential', seqid)
    end

    def process_getCredentialSummary(seqid, iprot, oprot)
      args = read_args(iprot, GetCredentialSummary_args)
      result = GetCredentialSummary_result.new()
      begin
        result.success = @handler.getCredentialSummary(args.authzToken, args.tokenId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getCredentialSummary', seqid)
    end

    def process_getAllCredentialSummaries(seqid, iprot, oprot)
      args = read_args(iprot, GetAllCredentialSummaries_args)
      result = GetAllCredentialSummaries_result.new()
      begin
        result.success = @handler.getAllCredentialSummaries(args.authzToken, args.type)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      end
      write_result(result, oprot, 'getAllCredentialSummaries', seqid)
    end

    def process_deleteSSHPubKey(seqid, iprot, oprot)
      args = read_args(iprot, DeleteSSHPubKey_args)
      result = DeleteSSHPubKey_result.new()
      begin
        result.success = @handler.deleteSSHPubKey(args.authzToken, args.airavataCredStoreToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteSSHPubKey', seqid)
    end

    def process_deletePWDCredential(seqid, iprot, oprot)
      args = read_args(iprot, DeletePWDCredential_args)
      result = DeletePWDCredential_result.new()
      begin
        result.success = @handler.deletePWDCredential(args.authzToken, args.airavataCredStoreToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deletePWDCredential', seqid)
    end

    def process_createProject(seqid, iprot, oprot)
      args = read_args(iprot, CreateProject_args)
      result = CreateProject_result.new()
      begin
        result.success = @handler.createProject(args.authzToken, args.gatewayId, args.project)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'createProject', seqid)
    end

    def process_updateProject(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProject_args)
      result = UpdateProject_result.new()
      begin
        @handler.updateProject(args.authzToken, args.projectId, args.updatedProject)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::ProjectNotFoundException => pnfe
        result.pnfe = pnfe
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateProject', seqid)
    end

    def process_getProject(seqid, iprot, oprot)
      args = read_args(iprot, GetProject_args)
      result = GetProject_result.new()
      begin
        result.success = @handler.getProject(args.authzToken, args.projectId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::ProjectNotFoundException => pnfe
        result.pnfe = pnfe
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getProject', seqid)
    end

    def process_deleteProject(seqid, iprot, oprot)
      args = read_args(iprot, DeleteProject_args)
      result = DeleteProject_result.new()
      begin
        result.success = @handler.deleteProject(args.authzToken, args.projectId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::ProjectNotFoundException => pnfe
        result.pnfe = pnfe
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteProject', seqid)
    end

    def process_getUserProjects(seqid, iprot, oprot)
      args = read_args(iprot, GetUserProjects_args)
      result = GetUserProjects_result.new()
      begin
        result.success = @handler.getUserProjects(args.authzToken, args.gatewayId, args.userName, args.limit, args.offset)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getUserProjects', seqid)
    end

    def process_searchProjects(seqid, iprot, oprot)
      args = read_args(iprot, SearchProjects_args)
      result = SearchProjects_result.new()
      begin
        result.success = @handler.searchProjects(args.authzToken, args.gatewayId, args.userName, args.filters, args.limit, args.offset)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'searchProjects', seqid)
    end

    def process_searchExperiments(seqid, iprot, oprot)
      args = read_args(iprot, SearchExperiments_args)
      result = SearchExperiments_result.new()
      begin
        result.success = @handler.searchExperiments(args.authzToken, args.gatewayId, args.userName, args.filters, args.limit, args.offset)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'searchExperiments', seqid)
    end

    def process_getExperimentStatistics(seqid, iprot, oprot)
      args = read_args(iprot, GetExperimentStatistics_args)
      result = GetExperimentStatistics_result.new()
      begin
        result.success = @handler.getExperimentStatistics(args.authzToken, args.gatewayId, args.fromTime, args.toTime, args.userName, args.applicationName, args.resourceHostName)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getExperimentStatistics', seqid)
    end

    def process_getExperimentsInProject(seqid, iprot, oprot)
      args = read_args(iprot, GetExperimentsInProject_args)
      result = GetExperimentsInProject_result.new()
      begin
        result.success = @handler.getExperimentsInProject(args.authzToken, args.projectId, args.limit, args.offset)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::ProjectNotFoundException => pnfe
        result.pnfe = pnfe
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getExperimentsInProject', seqid)
    end

    def process_getUserExperiments(seqid, iprot, oprot)
      args = read_args(iprot, GetUserExperiments_args)
      result = GetUserExperiments_result.new()
      begin
        result.success = @handler.getUserExperiments(args.authzToken, args.gatewayId, args.userName, args.limit, args.offset)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getUserExperiments', seqid)
    end

    def process_createExperiment(seqid, iprot, oprot)
      args = read_args(iprot, CreateExperiment_args)
      result = CreateExperiment_result.new()
      begin
        result.success = @handler.createExperiment(args.authzToken, args.gatewayId, args.experiment)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'createExperiment', seqid)
    end

    def process_deleteExperiment(seqid, iprot, oprot)
      args = read_args(iprot, DeleteExperiment_args)
      result = DeleteExperiment_result.new()
      begin
        result.success = @handler.deleteExperiment(args.authzToken, args.experimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteExperiment', seqid)
    end

    def process_getExperiment(seqid, iprot, oprot)
      args = read_args(iprot, GetExperiment_args)
      result = GetExperiment_result.new()
      begin
        result.success = @handler.getExperiment(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getExperiment', seqid)
    end

    def process_getExperimentByAdmin(seqid, iprot, oprot)
      args = read_args(iprot, GetExperimentByAdmin_args)
      result = GetExperimentByAdmin_result.new()
      begin
        result.success = @handler.getExperimentByAdmin(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getExperimentByAdmin', seqid)
    end

    def process_getDetailedExperimentTree(seqid, iprot, oprot)
      args = read_args(iprot, GetDetailedExperimentTree_args)
      result = GetDetailedExperimentTree_result.new()
      begin
        result.success = @handler.getDetailedExperimentTree(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getDetailedExperimentTree', seqid)
    end

    def process_updateExperiment(seqid, iprot, oprot)
      args = read_args(iprot, UpdateExperiment_args)
      result = UpdateExperiment_result.new()
      begin
        @handler.updateExperiment(args.authzToken, args.airavataExperimentId, args.experiment)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateExperiment', seqid)
    end

    def process_updateExperimentConfiguration(seqid, iprot, oprot)
      args = read_args(iprot, UpdateExperimentConfiguration_args)
      result = UpdateExperimentConfiguration_result.new()
      begin
        @handler.updateExperimentConfiguration(args.authzToken, args.airavataExperimentId, args.userConfiguration)
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateExperimentConfiguration', seqid)
    end

    def process_updateResourceScheduleing(seqid, iprot, oprot)
      args = read_args(iprot, UpdateResourceScheduleing_args)
      result = UpdateResourceScheduleing_result.new()
      begin
        @handler.updateResourceScheduleing(args.authzToken, args.airavataExperimentId, args.resourceScheduling)
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateResourceScheduleing', seqid)
    end

    def process_validateExperiment(seqid, iprot, oprot)
      args = read_args(iprot, ValidateExperiment_args)
      result = ValidateExperiment_result.new()
      begin
        result.success = @handler.validateExperiment(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'validateExperiment', seqid)
    end

    def process_launchExperiment(seqid, iprot, oprot)
      args = read_args(iprot, LaunchExperiment_args)
      result = LaunchExperiment_result.new()
      begin
        @handler.launchExperiment(args.authzToken, args.airavataExperimentId, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'launchExperiment', seqid)
    end

    def process_getExperimentStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetExperimentStatus_args)
      result = GetExperimentStatus_result.new()
      begin
        result.success = @handler.getExperimentStatus(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getExperimentStatus', seqid)
    end

    def process_getExperimentOutputs(seqid, iprot, oprot)
      args = read_args(iprot, GetExperimentOutputs_args)
      result = GetExperimentOutputs_result.new()
      begin
        result.success = @handler.getExperimentOutputs(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getExperimentOutputs', seqid)
    end

    def process_getIntermediateOutputs(seqid, iprot, oprot)
      args = read_args(iprot, GetIntermediateOutputs_args)
      result = GetIntermediateOutputs_result.new()
      begin
        result.success = @handler.getIntermediateOutputs(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getIntermediateOutputs', seqid)
    end

    def process_getJobStatuses(seqid, iprot, oprot)
      args = read_args(iprot, GetJobStatuses_args)
      result = GetJobStatuses_result.new()
      begin
        result.success = @handler.getJobStatuses(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getJobStatuses', seqid)
    end

    def process_getJobDetails(seqid, iprot, oprot)
      args = read_args(iprot, GetJobDetails_args)
      result = GetJobDetails_result.new()
      begin
        result.success = @handler.getJobDetails(args.authzToken, args.airavataExperimentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getJobDetails', seqid)
    end

    def process_cloneExperiment(seqid, iprot, oprot)
      args = read_args(iprot, CloneExperiment_args)
      result = CloneExperiment_result.new()
      begin
        result.success = @handler.cloneExperiment(args.authzToken, args.existingExperimentID, args.newExperimentName, args.newExperimentProjectId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      rescue ::ProjectNotFoundException => pnfe
        result.pnfe = pnfe
      end
      write_result(result, oprot, 'cloneExperiment', seqid)
    end

    def process_cloneExperimentByAdmin(seqid, iprot, oprot)
      args = read_args(iprot, CloneExperimentByAdmin_args)
      result = CloneExperimentByAdmin_result.new()
      begin
        result.success = @handler.cloneExperimentByAdmin(args.authzToken, args.existingExperimentID, args.newExperimentName, args.newExperimentProjectId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      rescue ::ProjectNotFoundException => pnfe
        result.pnfe = pnfe
      end
      write_result(result, oprot, 'cloneExperimentByAdmin', seqid)
    end

    def process_terminateExperiment(seqid, iprot, oprot)
      args = read_args(iprot, TerminateExperiment_args)
      result = TerminateExperiment_result.new()
      begin
        @handler.terminateExperiment(args.authzToken, args.airavataExperimentId, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::ExperimentNotFoundException => enf
        result.enf = enf
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'terminateExperiment', seqid)
    end

    def process_registerApplicationModule(seqid, iprot, oprot)
      args = read_args(iprot, RegisterApplicationModule_args)
      result = RegisterApplicationModule_result.new()
      begin
        result.success = @handler.registerApplicationModule(args.authzToken, args.gatewayId, args.applicationModule)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerApplicationModule', seqid)
    end

    def process_getApplicationModule(seqid, iprot, oprot)
      args = read_args(iprot, GetApplicationModule_args)
      result = GetApplicationModule_result.new()
      begin
        result.success = @handler.getApplicationModule(args.authzToken, args.appModuleId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getApplicationModule', seqid)
    end

    def process_updateApplicationModule(seqid, iprot, oprot)
      args = read_args(iprot, UpdateApplicationModule_args)
      result = UpdateApplicationModule_result.new()
      begin
        result.success = @handler.updateApplicationModule(args.authzToken, args.appModuleId, args.applicationModule)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateApplicationModule', seqid)
    end

    def process_getAllAppModules(seqid, iprot, oprot)
      args = read_args(iprot, GetAllAppModules_args)
      result = GetAllAppModules_result.new()
      begin
        result.success = @handler.getAllAppModules(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllAppModules', seqid)
    end

    def process_getAccessibleAppModules(seqid, iprot, oprot)
      args = read_args(iprot, GetAccessibleAppModules_args)
      result = GetAccessibleAppModules_result.new()
      begin
        result.success = @handler.getAccessibleAppModules(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAccessibleAppModules', seqid)
    end

    def process_deleteApplicationModule(seqid, iprot, oprot)
      args = read_args(iprot, DeleteApplicationModule_args)
      result = DeleteApplicationModule_result.new()
      begin
        result.success = @handler.deleteApplicationModule(args.authzToken, args.appModuleId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteApplicationModule', seqid)
    end

    def process_registerApplicationDeployment(seqid, iprot, oprot)
      args = read_args(iprot, RegisterApplicationDeployment_args)
      result = RegisterApplicationDeployment_result.new()
      begin
        result.success = @handler.registerApplicationDeployment(args.authzToken, args.gatewayId, args.applicationDeployment)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerApplicationDeployment', seqid)
    end

    def process_getApplicationDeployment(seqid, iprot, oprot)
      args = read_args(iprot, GetApplicationDeployment_args)
      result = GetApplicationDeployment_result.new()
      begin
        result.success = @handler.getApplicationDeployment(args.authzToken, args.appDeploymentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getApplicationDeployment', seqid)
    end

    def process_updateApplicationDeployment(seqid, iprot, oprot)
      args = read_args(iprot, UpdateApplicationDeployment_args)
      result = UpdateApplicationDeployment_result.new()
      begin
        result.success = @handler.updateApplicationDeployment(args.authzToken, args.appDeploymentId, args.applicationDeployment)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateApplicationDeployment', seqid)
    end

    def process_deleteApplicationDeployment(seqid, iprot, oprot)
      args = read_args(iprot, DeleteApplicationDeployment_args)
      result = DeleteApplicationDeployment_result.new()
      begin
        result.success = @handler.deleteApplicationDeployment(args.authzToken, args.appDeploymentId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteApplicationDeployment', seqid)
    end

    def process_getAllApplicationDeployments(seqid, iprot, oprot)
      args = read_args(iprot, GetAllApplicationDeployments_args)
      result = GetAllApplicationDeployments_result.new()
      begin
        result.success = @handler.getAllApplicationDeployments(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllApplicationDeployments', seqid)
    end

    def process_getAccessibleApplicationDeployments(seqid, iprot, oprot)
      args = read_args(iprot, GetAccessibleApplicationDeployments_args)
      result = GetAccessibleApplicationDeployments_result.new()
      begin
        result.success = @handler.getAccessibleApplicationDeployments(args.authzToken, args.gatewayId, args.permissionType)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAccessibleApplicationDeployments', seqid)
    end

    def process_getAppModuleDeployedResources(seqid, iprot, oprot)
      args = read_args(iprot, GetAppModuleDeployedResources_args)
      result = GetAppModuleDeployedResources_result.new()
      begin
        result.success = @handler.getAppModuleDeployedResources(args.authzToken, args.appModuleId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAppModuleDeployedResources', seqid)
    end

    def process_getApplicationDeploymentsForAppModuleAndGroupResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetApplicationDeploymentsForAppModuleAndGroupResourceProfile_args)
      result = GetApplicationDeploymentsForAppModuleAndGroupResourceProfile_result.new()
      begin
        result.success = @handler.getApplicationDeploymentsForAppModuleAndGroupResourceProfile(args.authzToken, args.appModuleId, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getApplicationDeploymentsForAppModuleAndGroupResourceProfile', seqid)
    end

    def process_registerApplicationInterface(seqid, iprot, oprot)
      args = read_args(iprot, RegisterApplicationInterface_args)
      result = RegisterApplicationInterface_result.new()
      begin
        result.success = @handler.registerApplicationInterface(args.authzToken, args.gatewayId, args.applicationInterface)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerApplicationInterface', seqid)
    end

    def process_cloneApplicationInterface(seqid, iprot, oprot)
      args = read_args(iprot, CloneApplicationInterface_args)
      result = CloneApplicationInterface_result.new()
      begin
        result.success = @handler.cloneApplicationInterface(args.authzToken, args.existingAppInterfaceID, args.newApplicationName, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'cloneApplicationInterface', seqid)
    end

    def process_getApplicationInterface(seqid, iprot, oprot)
      args = read_args(iprot, GetApplicationInterface_args)
      result = GetApplicationInterface_result.new()
      begin
        result.success = @handler.getApplicationInterface(args.authzToken, args.appInterfaceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getApplicationInterface', seqid)
    end

    def process_updateApplicationInterface(seqid, iprot, oprot)
      args = read_args(iprot, UpdateApplicationInterface_args)
      result = UpdateApplicationInterface_result.new()
      begin
        result.success = @handler.updateApplicationInterface(args.authzToken, args.appInterfaceId, args.applicationInterface)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateApplicationInterface', seqid)
    end

    def process_deleteApplicationInterface(seqid, iprot, oprot)
      args = read_args(iprot, DeleteApplicationInterface_args)
      result = DeleteApplicationInterface_result.new()
      begin
        result.success = @handler.deleteApplicationInterface(args.authzToken, args.appInterfaceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteApplicationInterface', seqid)
    end

    def process_getAllApplicationInterfaceNames(seqid, iprot, oprot)
      args = read_args(iprot, GetAllApplicationInterfaceNames_args)
      result = GetAllApplicationInterfaceNames_result.new()
      begin
        result.success = @handler.getAllApplicationInterfaceNames(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllApplicationInterfaceNames', seqid)
    end

    def process_getAllApplicationInterfaces(seqid, iprot, oprot)
      args = read_args(iprot, GetAllApplicationInterfaces_args)
      result = GetAllApplicationInterfaces_result.new()
      begin
        result.success = @handler.getAllApplicationInterfaces(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllApplicationInterfaces', seqid)
    end

    def process_getApplicationInputs(seqid, iprot, oprot)
      args = read_args(iprot, GetApplicationInputs_args)
      result = GetApplicationInputs_result.new()
      begin
        result.success = @handler.getApplicationInputs(args.authzToken, args.appInterfaceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getApplicationInputs', seqid)
    end

    def process_getApplicationOutputs(seqid, iprot, oprot)
      args = read_args(iprot, GetApplicationOutputs_args)
      result = GetApplicationOutputs_result.new()
      begin
        result.success = @handler.getApplicationOutputs(args.authzToken, args.appInterfaceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getApplicationOutputs', seqid)
    end

    def process_getAvailableAppInterfaceComputeResources(seqid, iprot, oprot)
      args = read_args(iprot, GetAvailableAppInterfaceComputeResources_args)
      result = GetAvailableAppInterfaceComputeResources_result.new()
      begin
        result.success = @handler.getAvailableAppInterfaceComputeResources(args.authzToken, args.appInterfaceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAvailableAppInterfaceComputeResources', seqid)
    end

    def process_registerComputeResource(seqid, iprot, oprot)
      args = read_args(iprot, RegisterComputeResource_args)
      result = RegisterComputeResource_result.new()
      begin
        result.success = @handler.registerComputeResource(args.authzToken, args.computeResourceDescription)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerComputeResource', seqid)
    end

    def process_getComputeResource(seqid, iprot, oprot)
      args = read_args(iprot, GetComputeResource_args)
      result = GetComputeResource_result.new()
      begin
        result.success = @handler.getComputeResource(args.authzToken, args.computeResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getComputeResource', seqid)
    end

    def process_getAllComputeResourceNames(seqid, iprot, oprot)
      args = read_args(iprot, GetAllComputeResourceNames_args)
      result = GetAllComputeResourceNames_result.new()
      begin
        result.success = @handler.getAllComputeResourceNames(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllComputeResourceNames', seqid)
    end

    def process_updateComputeResource(seqid, iprot, oprot)
      args = read_args(iprot, UpdateComputeResource_args)
      result = UpdateComputeResource_result.new()
      begin
        result.success = @handler.updateComputeResource(args.authzToken, args.computeResourceId, args.computeResourceDescription)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateComputeResource', seqid)
    end

    def process_deleteComputeResource(seqid, iprot, oprot)
      args = read_args(iprot, DeleteComputeResource_args)
      result = DeleteComputeResource_result.new()
      begin
        result.success = @handler.deleteComputeResource(args.authzToken, args.computeResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteComputeResource', seqid)
    end

    def process_registerStorageResource(seqid, iprot, oprot)
      args = read_args(iprot, RegisterStorageResource_args)
      result = RegisterStorageResource_result.new()
      begin
        result.success = @handler.registerStorageResource(args.authzToken, args.storageResourceDescription)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerStorageResource', seqid)
    end

    def process_getStorageResource(seqid, iprot, oprot)
      args = read_args(iprot, GetStorageResource_args)
      result = GetStorageResource_result.new()
      begin
        result.success = @handler.getStorageResource(args.authzToken, args.storageResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getStorageResource', seqid)
    end

    def process_getAllStorageResourceNames(seqid, iprot, oprot)
      args = read_args(iprot, GetAllStorageResourceNames_args)
      result = GetAllStorageResourceNames_result.new()
      begin
        result.success = @handler.getAllStorageResourceNames(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllStorageResourceNames', seqid)
    end

    def process_updateStorageResource(seqid, iprot, oprot)
      args = read_args(iprot, UpdateStorageResource_args)
      result = UpdateStorageResource_result.new()
      begin
        result.success = @handler.updateStorageResource(args.authzToken, args.storageResourceId, args.storageResourceDescription)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateStorageResource', seqid)
    end

    def process_deleteStorageResource(seqid, iprot, oprot)
      args = read_args(iprot, DeleteStorageResource_args)
      result = DeleteStorageResource_result.new()
      begin
        result.success = @handler.deleteStorageResource(args.authzToken, args.storageResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteStorageResource', seqid)
    end

    def process_addLocalSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddLocalSubmissionDetails_args)
      result = AddLocalSubmissionDetails_result.new()
      begin
        result.success = @handler.addLocalSubmissionDetails(args.authzToken, args.computeResourceId, args.priorityOrder, args.localSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addLocalSubmissionDetails', seqid)
    end

    def process_updateLocalSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateLocalSubmissionDetails_args)
      result = UpdateLocalSubmissionDetails_result.new()
      begin
        result.success = @handler.updateLocalSubmissionDetails(args.authzToken, args.jobSubmissionInterfaceId, args.localSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateLocalSubmissionDetails', seqid)
    end

    def process_getLocalJobSubmission(seqid, iprot, oprot)
      args = read_args(iprot, GetLocalJobSubmission_args)
      result = GetLocalJobSubmission_result.new()
      begin
        result.success = @handler.getLocalJobSubmission(args.authzToken, args.jobSubmissionId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getLocalJobSubmission', seqid)
    end

    def process_addSSHJobSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddSSHJobSubmissionDetails_args)
      result = AddSSHJobSubmissionDetails_result.new()
      begin
        result.success = @handler.addSSHJobSubmissionDetails(args.authzToken, args.computeResourceId, args.priorityOrder, args.sshJobSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addSSHJobSubmissionDetails', seqid)
    end

    def process_addSSHForkJobSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddSSHForkJobSubmissionDetails_args)
      result = AddSSHForkJobSubmissionDetails_result.new()
      begin
        result.success = @handler.addSSHForkJobSubmissionDetails(args.authzToken, args.computeResourceId, args.priorityOrder, args.sshJobSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addSSHForkJobSubmissionDetails', seqid)
    end

    def process_getSSHJobSubmission(seqid, iprot, oprot)
      args = read_args(iprot, GetSSHJobSubmission_args)
      result = GetSSHJobSubmission_result.new()
      begin
        result.success = @handler.getSSHJobSubmission(args.authzToken, args.jobSubmissionId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getSSHJobSubmission', seqid)
    end

    def process_addUNICOREJobSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddUNICOREJobSubmissionDetails_args)
      result = AddUNICOREJobSubmissionDetails_result.new()
      begin
        result.success = @handler.addUNICOREJobSubmissionDetails(args.authzToken, args.computeResourceId, args.priorityOrder, args.unicoreJobSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addUNICOREJobSubmissionDetails', seqid)
    end

    def process_getUnicoreJobSubmission(seqid, iprot, oprot)
      args = read_args(iprot, GetUnicoreJobSubmission_args)
      result = GetUnicoreJobSubmission_result.new()
      begin
        result.success = @handler.getUnicoreJobSubmission(args.authzToken, args.jobSubmissionId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getUnicoreJobSubmission', seqid)
    end

    def process_addCloudJobSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddCloudJobSubmissionDetails_args)
      result = AddCloudJobSubmissionDetails_result.new()
      begin
        result.success = @handler.addCloudJobSubmissionDetails(args.authzToken, args.computeResourceId, args.priorityOrder, args.cloudSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addCloudJobSubmissionDetails', seqid)
    end

    def process_getCloudJobSubmission(seqid, iprot, oprot)
      args = read_args(iprot, GetCloudJobSubmission_args)
      result = GetCloudJobSubmission_result.new()
      begin
        result.success = @handler.getCloudJobSubmission(args.authzToken, args.jobSubmissionId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getCloudJobSubmission', seqid)
    end

    def process_updateSSHJobSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSSHJobSubmissionDetails_args)
      result = UpdateSSHJobSubmissionDetails_result.new()
      begin
        result.success = @handler.updateSSHJobSubmissionDetails(args.authzToken, args.jobSubmissionInterfaceId, args.sshJobSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateSSHJobSubmissionDetails', seqid)
    end

    def process_updateCloudJobSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateCloudJobSubmissionDetails_args)
      result = UpdateCloudJobSubmissionDetails_result.new()
      begin
        result.success = @handler.updateCloudJobSubmissionDetails(args.authzToken, args.jobSubmissionInterfaceId, args.sshJobSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateCloudJobSubmissionDetails', seqid)
    end

    def process_updateUnicoreJobSubmissionDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateUnicoreJobSubmissionDetails_args)
      result = UpdateUnicoreJobSubmissionDetails_result.new()
      begin
        result.success = @handler.updateUnicoreJobSubmissionDetails(args.authzToken, args.jobSubmissionInterfaceId, args.unicoreJobSubmission)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateUnicoreJobSubmissionDetails', seqid)
    end

    def process_addLocalDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddLocalDataMovementDetails_args)
      result = AddLocalDataMovementDetails_result.new()
      begin
        result.success = @handler.addLocalDataMovementDetails(args.authzToken, args.productUri, args.dataMoveType, args.priorityOrder, args.localDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addLocalDataMovementDetails', seqid)
    end

    def process_updateLocalDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateLocalDataMovementDetails_args)
      result = UpdateLocalDataMovementDetails_result.new()
      begin
        result.success = @handler.updateLocalDataMovementDetails(args.authzToken, args.dataMovementInterfaceId, args.localDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateLocalDataMovementDetails', seqid)
    end

    def process_getLocalDataMovement(seqid, iprot, oprot)
      args = read_args(iprot, GetLocalDataMovement_args)
      result = GetLocalDataMovement_result.new()
      begin
        result.success = @handler.getLocalDataMovement(args.authzToken, args.dataMovementId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getLocalDataMovement', seqid)
    end

    def process_addSCPDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddSCPDataMovementDetails_args)
      result = AddSCPDataMovementDetails_result.new()
      begin
        result.success = @handler.addSCPDataMovementDetails(args.authzToken, args.productUri, args.dataMoveType, args.priorityOrder, args.scpDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addSCPDataMovementDetails', seqid)
    end

    def process_updateSCPDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSCPDataMovementDetails_args)
      result = UpdateSCPDataMovementDetails_result.new()
      begin
        result.success = @handler.updateSCPDataMovementDetails(args.authzToken, args.dataMovementInterfaceId, args.scpDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateSCPDataMovementDetails', seqid)
    end

    def process_getSCPDataMovement(seqid, iprot, oprot)
      args = read_args(iprot, GetSCPDataMovement_args)
      result = GetSCPDataMovement_result.new()
      begin
        result.success = @handler.getSCPDataMovement(args.authzToken, args.dataMovementId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getSCPDataMovement', seqid)
    end

    def process_addUnicoreDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddUnicoreDataMovementDetails_args)
      result = AddUnicoreDataMovementDetails_result.new()
      begin
        result.success = @handler.addUnicoreDataMovementDetails(args.authzToken, args.productUri, args.dataMoveType, args.priorityOrder, args.unicoreDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addUnicoreDataMovementDetails', seqid)
    end

    def process_updateUnicoreDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateUnicoreDataMovementDetails_args)
      result = UpdateUnicoreDataMovementDetails_result.new()
      begin
        result.success = @handler.updateUnicoreDataMovementDetails(args.authzToken, args.dataMovementInterfaceId, args.unicoreDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateUnicoreDataMovementDetails', seqid)
    end

    def process_getUnicoreDataMovement(seqid, iprot, oprot)
      args = read_args(iprot, GetUnicoreDataMovement_args)
      result = GetUnicoreDataMovement_result.new()
      begin
        result.success = @handler.getUnicoreDataMovement(args.authzToken, args.dataMovementId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getUnicoreDataMovement', seqid)
    end

    def process_addGridFTPDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, AddGridFTPDataMovementDetails_args)
      result = AddGridFTPDataMovementDetails_result.new()
      begin
        result.success = @handler.addGridFTPDataMovementDetails(args.authzToken, args.productUri, args.dataMoveType, args.priorityOrder, args.gridFTPDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addGridFTPDataMovementDetails', seqid)
    end

    def process_updateGridFTPDataMovementDetails(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGridFTPDataMovementDetails_args)
      result = UpdateGridFTPDataMovementDetails_result.new()
      begin
        result.success = @handler.updateGridFTPDataMovementDetails(args.authzToken, args.dataMovementInterfaceId, args.gridFTPDataMovement)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateGridFTPDataMovementDetails', seqid)
    end

    def process_getGridFTPDataMovement(seqid, iprot, oprot)
      args = read_args(iprot, GetGridFTPDataMovement_args)
      result = GetGridFTPDataMovement_result.new()
      begin
        result.success = @handler.getGridFTPDataMovement(args.authzToken, args.dataMovementId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGridFTPDataMovement', seqid)
    end

    def process_changeJobSubmissionPriority(seqid, iprot, oprot)
      args = read_args(iprot, ChangeJobSubmissionPriority_args)
      result = ChangeJobSubmissionPriority_result.new()
      begin
        result.success = @handler.changeJobSubmissionPriority(args.authzToken, args.jobSubmissionInterfaceId, args.newPriorityOrder)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'changeJobSubmissionPriority', seqid)
    end

    def process_changeDataMovementPriority(seqid, iprot, oprot)
      args = read_args(iprot, ChangeDataMovementPriority_args)
      result = ChangeDataMovementPriority_result.new()
      begin
        result.success = @handler.changeDataMovementPriority(args.authzToken, args.dataMovementInterfaceId, args.newPriorityOrder)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'changeDataMovementPriority', seqid)
    end

    def process_changeJobSubmissionPriorities(seqid, iprot, oprot)
      args = read_args(iprot, ChangeJobSubmissionPriorities_args)
      result = ChangeJobSubmissionPriorities_result.new()
      begin
        result.success = @handler.changeJobSubmissionPriorities(args.authzToken, args.jobSubmissionPriorityMap)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'changeJobSubmissionPriorities', seqid)
    end

    def process_changeDataMovementPriorities(seqid, iprot, oprot)
      args = read_args(iprot, ChangeDataMovementPriorities_args)
      result = ChangeDataMovementPriorities_result.new()
      begin
        result.success = @handler.changeDataMovementPriorities(args.authzToken, args.dataMovementPriorityMap)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'changeDataMovementPriorities', seqid)
    end

    def process_deleteJobSubmissionInterface(seqid, iprot, oprot)
      args = read_args(iprot, DeleteJobSubmissionInterface_args)
      result = DeleteJobSubmissionInterface_result.new()
      begin
        result.success = @handler.deleteJobSubmissionInterface(args.authzToken, args.computeResourceId, args.jobSubmissionInterfaceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteJobSubmissionInterface', seqid)
    end

    def process_deleteDataMovementInterface(seqid, iprot, oprot)
      args = read_args(iprot, DeleteDataMovementInterface_args)
      result = DeleteDataMovementInterface_result.new()
      begin
        result.success = @handler.deleteDataMovementInterface(args.authzToken, args.productUri, args.dataMovementInterfaceId, args.dataMoveType)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteDataMovementInterface', seqid)
    end

    def process_registerResourceJobManager(seqid, iprot, oprot)
      args = read_args(iprot, RegisterResourceJobManager_args)
      result = RegisterResourceJobManager_result.new()
      begin
        result.success = @handler.registerResourceJobManager(args.authzToken, args.resourceJobManager)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerResourceJobManager', seqid)
    end

    def process_updateResourceJobManager(seqid, iprot, oprot)
      args = read_args(iprot, UpdateResourceJobManager_args)
      result = UpdateResourceJobManager_result.new()
      begin
        result.success = @handler.updateResourceJobManager(args.authzToken, args.resourceJobManagerId, args.updatedResourceJobManager)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateResourceJobManager', seqid)
    end

    def process_getResourceJobManager(seqid, iprot, oprot)
      args = read_args(iprot, GetResourceJobManager_args)
      result = GetResourceJobManager_result.new()
      begin
        result.success = @handler.getResourceJobManager(args.authzToken, args.resourceJobManagerId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getResourceJobManager', seqid)
    end

    def process_deleteResourceJobManager(seqid, iprot, oprot)
      args = read_args(iprot, DeleteResourceJobManager_args)
      result = DeleteResourceJobManager_result.new()
      begin
        result.success = @handler.deleteResourceJobManager(args.authzToken, args.resourceJobManagerId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteResourceJobManager', seqid)
    end

    def process_deleteBatchQueue(seqid, iprot, oprot)
      args = read_args(iprot, DeleteBatchQueue_args)
      result = DeleteBatchQueue_result.new()
      begin
        result.success = @handler.deleteBatchQueue(args.authzToken, args.computeResourceId, args.queueName)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteBatchQueue', seqid)
    end

    def process_registerGatewayResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, RegisterGatewayResourceProfile_args)
      result = RegisterGatewayResourceProfile_result.new()
      begin
        result.success = @handler.registerGatewayResourceProfile(args.authzToken, args.gatewayResourceProfile)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerGatewayResourceProfile', seqid)
    end

    def process_getGatewayResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetGatewayResourceProfile_args)
      result = GetGatewayResourceProfile_result.new()
      begin
        result.success = @handler.getGatewayResourceProfile(args.authzToken, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGatewayResourceProfile', seqid)
    end

    def process_updateGatewayResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGatewayResourceProfile_args)
      result = UpdateGatewayResourceProfile_result.new()
      begin
        result.success = @handler.updateGatewayResourceProfile(args.authzToken, args.gatewayID, args.gatewayResourceProfile)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateGatewayResourceProfile', seqid)
    end

    def process_deleteGatewayResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, DeleteGatewayResourceProfile_args)
      result = DeleteGatewayResourceProfile_result.new()
      begin
        result.success = @handler.deleteGatewayResourceProfile(args.authzToken, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteGatewayResourceProfile', seqid)
    end

    def process_addGatewayComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, AddGatewayComputeResourcePreference_args)
      result = AddGatewayComputeResourcePreference_result.new()
      begin
        result.success = @handler.addGatewayComputeResourcePreference(args.authzToken, args.gatewayID, args.computeResourceId, args.computeResourcePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addGatewayComputeResourcePreference', seqid)
    end

    def process_addGatewayStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, AddGatewayStoragePreference_args)
      result = AddGatewayStoragePreference_result.new()
      begin
        result.success = @handler.addGatewayStoragePreference(args.authzToken, args.gatewayID, args.storageResourceId, args.storagePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addGatewayStoragePreference', seqid)
    end

    def process_getGatewayComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, GetGatewayComputeResourcePreference_args)
      result = GetGatewayComputeResourcePreference_result.new()
      begin
        result.success = @handler.getGatewayComputeResourcePreference(args.authzToken, args.gatewayID, args.computeResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGatewayComputeResourcePreference', seqid)
    end

    def process_getGatewayStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, GetGatewayStoragePreference_args)
      result = GetGatewayStoragePreference_result.new()
      begin
        result.success = @handler.getGatewayStoragePreference(args.authzToken, args.gatewayID, args.storageResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGatewayStoragePreference', seqid)
    end

    def process_getAllGatewayComputeResourcePreferences(seqid, iprot, oprot)
      args = read_args(iprot, GetAllGatewayComputeResourcePreferences_args)
      result = GetAllGatewayComputeResourcePreferences_result.new()
      begin
        result.success = @handler.getAllGatewayComputeResourcePreferences(args.authzToken, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllGatewayComputeResourcePreferences', seqid)
    end

    def process_getAllGatewayStoragePreferences(seqid, iprot, oprot)
      args = read_args(iprot, GetAllGatewayStoragePreferences_args)
      result = GetAllGatewayStoragePreferences_result.new()
      begin
        result.success = @handler.getAllGatewayStoragePreferences(args.authzToken, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllGatewayStoragePreferences', seqid)
    end

    def process_getAllGatewayResourceProfiles(seqid, iprot, oprot)
      args = read_args(iprot, GetAllGatewayResourceProfiles_args)
      result = GetAllGatewayResourceProfiles_result.new()
      begin
        result.success = @handler.getAllGatewayResourceProfiles(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllGatewayResourceProfiles', seqid)
    end

    def process_updateGatewayComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGatewayComputeResourcePreference_args)
      result = UpdateGatewayComputeResourcePreference_result.new()
      begin
        result.success = @handler.updateGatewayComputeResourcePreference(args.authzToken, args.gatewayID, args.computeResourceId, args.computeResourcePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateGatewayComputeResourcePreference', seqid)
    end

    def process_updateGatewayStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGatewayStoragePreference_args)
      result = UpdateGatewayStoragePreference_result.new()
      begin
        result.success = @handler.updateGatewayStoragePreference(args.authzToken, args.gatewayID, args.storageId, args.storagePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateGatewayStoragePreference', seqid)
    end

    def process_deleteGatewayComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, DeleteGatewayComputeResourcePreference_args)
      result = DeleteGatewayComputeResourcePreference_result.new()
      begin
        result.success = @handler.deleteGatewayComputeResourcePreference(args.authzToken, args.gatewayID, args.computeResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteGatewayComputeResourcePreference', seqid)
    end

    def process_deleteGatewayStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, DeleteGatewayStoragePreference_args)
      result = DeleteGatewayStoragePreference_result.new()
      begin
        result.success = @handler.deleteGatewayStoragePreference(args.authzToken, args.gatewayID, args.storageId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteGatewayStoragePreference', seqid)
    end

    def process_getSSHAccountProvisioners(seqid, iprot, oprot)
      args = read_args(iprot, GetSSHAccountProvisioners_args)
      result = GetSSHAccountProvisioners_result.new()
      begin
        result.success = @handler.getSSHAccountProvisioners(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getSSHAccountProvisioners', seqid)
    end

    def process_doesUserHaveSSHAccount(seqid, iprot, oprot)
      args = read_args(iprot, DoesUserHaveSSHAccount_args)
      result = DoesUserHaveSSHAccount_result.new()
      begin
        result.success = @handler.doesUserHaveSSHAccount(args.authzToken, args.computeResourceId, args.userId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'doesUserHaveSSHAccount', seqid)
    end

    def process_isSSHSetupCompleteForUserComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, IsSSHSetupCompleteForUserComputeResourcePreference_args)
      result = IsSSHSetupCompleteForUserComputeResourcePreference_result.new()
      begin
        result.success = @handler.isSSHSetupCompleteForUserComputeResourcePreference(args.authzToken, args.computeResourceId, args.airavataCredStoreToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'isSSHSetupCompleteForUserComputeResourcePreference', seqid)
    end

    def process_setupUserComputeResourcePreferencesForSSH(seqid, iprot, oprot)
      args = read_args(iprot, SetupUserComputeResourcePreferencesForSSH_args)
      result = SetupUserComputeResourcePreferencesForSSH_result.new()
      begin
        result.success = @handler.setupUserComputeResourcePreferencesForSSH(args.authzToken, args.computeResourceId, args.userId, args.airavataCredStoreToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'setupUserComputeResourcePreferencesForSSH', seqid)
    end

    def process_registerUserResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, RegisterUserResourceProfile_args)
      result = RegisterUserResourceProfile_result.new()
      begin
        result.success = @handler.registerUserResourceProfile(args.authzToken, args.userResourceProfile)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerUserResourceProfile', seqid)
    end

    def process_isUserResourceProfileExists(seqid, iprot, oprot)
      args = read_args(iprot, IsUserResourceProfileExists_args)
      result = IsUserResourceProfileExists_result.new()
      begin
        result.success = @handler.isUserResourceProfileExists(args.authzToken, args.userId, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'isUserResourceProfileExists', seqid)
    end

    def process_getUserResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetUserResourceProfile_args)
      result = GetUserResourceProfile_result.new()
      begin
        result.success = @handler.getUserResourceProfile(args.authzToken, args.userId, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getUserResourceProfile', seqid)
    end

    def process_updateUserResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, UpdateUserResourceProfile_args)
      result = UpdateUserResourceProfile_result.new()
      begin
        result.success = @handler.updateUserResourceProfile(args.authzToken, args.userId, args.gatewayID, args.userResourceProfile)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateUserResourceProfile', seqid)
    end

    def process_deleteUserResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, DeleteUserResourceProfile_args)
      result = DeleteUserResourceProfile_result.new()
      begin
        result.success = @handler.deleteUserResourceProfile(args.authzToken, args.userId, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteUserResourceProfile', seqid)
    end

    def process_addUserComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, AddUserComputeResourcePreference_args)
      result = AddUserComputeResourcePreference_result.new()
      begin
        result.success = @handler.addUserComputeResourcePreference(args.authzToken, args.userId, args.gatewayID, args.userComputeResourceId, args.userComputeResourcePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addUserComputeResourcePreference', seqid)
    end

    def process_addUserStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, AddUserStoragePreference_args)
      result = AddUserStoragePreference_result.new()
      begin
        result.success = @handler.addUserStoragePreference(args.authzToken, args.userId, args.gatewayID, args.userStorageResourceId, args.userStoragePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'addUserStoragePreference', seqid)
    end

    def process_getUserComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, GetUserComputeResourcePreference_args)
      result = GetUserComputeResourcePreference_result.new()
      begin
        result.success = @handler.getUserComputeResourcePreference(args.authzToken, args.userId, args.gatewayID, args.userComputeResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getUserComputeResourcePreference', seqid)
    end

    def process_getUserStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, GetUserStoragePreference_args)
      result = GetUserStoragePreference_result.new()
      begin
        result.success = @handler.getUserStoragePreference(args.authzToken, args.userId, args.gatewayID, args.userStorageResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getUserStoragePreference', seqid)
    end

    def process_getAllUserComputeResourcePreferences(seqid, iprot, oprot)
      args = read_args(iprot, GetAllUserComputeResourcePreferences_args)
      result = GetAllUserComputeResourcePreferences_result.new()
      begin
        result.success = @handler.getAllUserComputeResourcePreferences(args.authzToken, args.userId, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllUserComputeResourcePreferences', seqid)
    end

    def process_getAllUserStoragePreferences(seqid, iprot, oprot)
      args = read_args(iprot, GetAllUserStoragePreferences_args)
      result = GetAllUserStoragePreferences_result.new()
      begin
        result.success = @handler.getAllUserStoragePreferences(args.authzToken, args.userId, args.gatewayID)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllUserStoragePreferences', seqid)
    end

    def process_getAllUserResourceProfiles(seqid, iprot, oprot)
      args = read_args(iprot, GetAllUserResourceProfiles_args)
      result = GetAllUserResourceProfiles_result.new()
      begin
        result.success = @handler.getAllUserResourceProfiles(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllUserResourceProfiles', seqid)
    end

    def process_updateUserComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, UpdateUserComputeResourcePreference_args)
      result = UpdateUserComputeResourcePreference_result.new()
      begin
        result.success = @handler.updateUserComputeResourcePreference(args.authzToken, args.userId, args.gatewayID, args.userComputeResourceId, args.userComputeResourcePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateUserComputeResourcePreference', seqid)
    end

    def process_updateUserStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, UpdateUserStoragePreference_args)
      result = UpdateUserStoragePreference_result.new()
      begin
        result.success = @handler.updateUserStoragePreference(args.authzToken, args.userId, args.gatewayID, args.userStorageId, args.userStoragePreference)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateUserStoragePreference', seqid)
    end

    def process_deleteUserComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, DeleteUserComputeResourcePreference_args)
      result = DeleteUserComputeResourcePreference_result.new()
      begin
        result.success = @handler.deleteUserComputeResourcePreference(args.authzToken, args.userId, args.gatewayID, args.userComputeResourceId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteUserComputeResourcePreference', seqid)
    end

    def process_deleteUserStoragePreference(seqid, iprot, oprot)
      args = read_args(iprot, DeleteUserStoragePreference_args)
      result = DeleteUserStoragePreference_result.new()
      begin
        result.success = @handler.deleteUserStoragePreference(args.authzToken, args.userId, args.gatewayID, args.userStorageId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'deleteUserStoragePreference', seqid)
    end

    def process_getLatestQueueStatuses(seqid, iprot, oprot)
      args = read_args(iprot, GetLatestQueueStatuses_args)
      result = GetLatestQueueStatuses_result.new()
      begin
        result.success = @handler.getLatestQueueStatuses(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getLatestQueueStatuses', seqid)
    end

    def process_registerDataProduct(seqid, iprot, oprot)
      args = read_args(iprot, RegisterDataProduct_args)
      result = RegisterDataProduct_result.new()
      begin
        result.success = @handler.registerDataProduct(args.authzToken, args.dataProductModel)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerDataProduct', seqid)
    end

    def process_getDataProduct(seqid, iprot, oprot)
      args = read_args(iprot, GetDataProduct_args)
      result = GetDataProduct_result.new()
      begin
        result.success = @handler.getDataProduct(args.authzToken, args.dataProductUri)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getDataProduct', seqid)
    end

    def process_registerReplicaLocation(seqid, iprot, oprot)
      args = read_args(iprot, RegisterReplicaLocation_args)
      result = RegisterReplicaLocation_result.new()
      begin
        result.success = @handler.registerReplicaLocation(args.authzToken, args.replicaLocationModel)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'registerReplicaLocation', seqid)
    end

    def process_getParentDataProduct(seqid, iprot, oprot)
      args = read_args(iprot, GetParentDataProduct_args)
      result = GetParentDataProduct_result.new()
      begin
        result.success = @handler.getParentDataProduct(args.authzToken, args.productUri)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getParentDataProduct', seqid)
    end

    def process_getChildDataProducts(seqid, iprot, oprot)
      args = read_args(iprot, GetChildDataProducts_args)
      result = GetChildDataProducts_result.new()
      begin
        result.success = @handler.getChildDataProducts(args.authzToken, args.productUri)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getChildDataProducts', seqid)
    end

    def process_shareResourceWithUsers(seqid, iprot, oprot)
      args = read_args(iprot, ShareResourceWithUsers_args)
      result = ShareResourceWithUsers_result.new()
      begin
        result.success = @handler.shareResourceWithUsers(args.authzToken, args.resourceId, args.userPermissionList)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'shareResourceWithUsers', seqid)
    end

    def process_shareResourceWithGroups(seqid, iprot, oprot)
      args = read_args(iprot, ShareResourceWithGroups_args)
      result = ShareResourceWithGroups_result.new()
      begin
        result.success = @handler.shareResourceWithGroups(args.authzToken, args.resourceId, args.groupPermissionList)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'shareResourceWithGroups', seqid)
    end

    def process_revokeSharingOfResourceFromUsers(seqid, iprot, oprot)
      args = read_args(iprot, RevokeSharingOfResourceFromUsers_args)
      result = RevokeSharingOfResourceFromUsers_result.new()
      begin
        result.success = @handler.revokeSharingOfResourceFromUsers(args.authzToken, args.resourceId, args.userPermissionList)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'revokeSharingOfResourceFromUsers', seqid)
    end

    def process_revokeSharingOfResourceFromGroups(seqid, iprot, oprot)
      args = read_args(iprot, RevokeSharingOfResourceFromGroups_args)
      result = RevokeSharingOfResourceFromGroups_result.new()
      begin
        result.success = @handler.revokeSharingOfResourceFromGroups(args.authzToken, args.resourceId, args.groupPermissionList)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'revokeSharingOfResourceFromGroups', seqid)
    end

    def process_getAllAccessibleUsers(seqid, iprot, oprot)
      args = read_args(iprot, GetAllAccessibleUsers_args)
      result = GetAllAccessibleUsers_result.new()
      begin
        result.success = @handler.getAllAccessibleUsers(args.authzToken, args.resourceId, args.permissionType)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllAccessibleUsers', seqid)
    end

    def process_getAllAccessibleGroups(seqid, iprot, oprot)
      args = read_args(iprot, GetAllAccessibleGroups_args)
      result = GetAllAccessibleGroups_result.new()
      begin
        result.success = @handler.getAllAccessibleGroups(args.authzToken, args.resourceId, args.permissionType)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllAccessibleGroups', seqid)
    end

    def process_getAllDirectlyAccessibleUsers(seqid, iprot, oprot)
      args = read_args(iprot, GetAllDirectlyAccessibleUsers_args)
      result = GetAllDirectlyAccessibleUsers_result.new()
      begin
        result.success = @handler.getAllDirectlyAccessibleUsers(args.authzToken, args.resourceId, args.permissionType)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllDirectlyAccessibleUsers', seqid)
    end

    def process_getAllDirectlyAccessibleGroups(seqid, iprot, oprot)
      args = read_args(iprot, GetAllDirectlyAccessibleGroups_args)
      result = GetAllDirectlyAccessibleGroups_result.new()
      begin
        result.success = @handler.getAllDirectlyAccessibleGroups(args.authzToken, args.resourceId, args.permissionType)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getAllDirectlyAccessibleGroups', seqid)
    end

    def process_userHasAccess(seqid, iprot, oprot)
      args = read_args(iprot, UserHasAccess_args)
      result = UserHasAccess_result.new()
      begin
        result.success = @handler.userHasAccess(args.authzToken, args.resourceId, args.permissionType)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'userHasAccess', seqid)
    end

    def process_createGroupResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, CreateGroupResourceProfile_args)
      result = CreateGroupResourceProfile_result.new()
      begin
        result.success = @handler.createGroupResourceProfile(args.authzToken, args.groupResourceProfile)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'createGroupResourceProfile', seqid)
    end

    def process_updateGroupResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGroupResourceProfile_args)
      result = UpdateGroupResourceProfile_result.new()
      begin
        @handler.updateGroupResourceProfile(args.authzToken, args.groupResourceProfile)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'updateGroupResourceProfile', seqid)
    end

    def process_getGroupResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupResourceProfile_args)
      result = GetGroupResourceProfile_result.new()
      begin
        result.success = @handler.getGroupResourceProfile(args.authzToken, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGroupResourceProfile', seqid)
    end

    def process_removeGroupResourceProfile(seqid, iprot, oprot)
      args = read_args(iprot, RemoveGroupResourceProfile_args)
      result = RemoveGroupResourceProfile_result.new()
      begin
        result.success = @handler.removeGroupResourceProfile(args.authzToken, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'removeGroupResourceProfile', seqid)
    end

    def process_getGroupResourceList(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupResourceList_args)
      result = GetGroupResourceList_result.new()
      begin
        result.success = @handler.getGroupResourceList(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGroupResourceList', seqid)
    end

    def process_removeGroupComputePrefs(seqid, iprot, oprot)
      args = read_args(iprot, RemoveGroupComputePrefs_args)
      result = RemoveGroupComputePrefs_result.new()
      begin
        result.success = @handler.removeGroupComputePrefs(args.authzToken, args.computeResourceId, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'removeGroupComputePrefs', seqid)
    end

    def process_removeGroupComputeResourcePolicy(seqid, iprot, oprot)
      args = read_args(iprot, RemoveGroupComputeResourcePolicy_args)
      result = RemoveGroupComputeResourcePolicy_result.new()
      begin
        result.success = @handler.removeGroupComputeResourcePolicy(args.authzToken, args.resourcePolicyId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'removeGroupComputeResourcePolicy', seqid)
    end

    def process_removeGroupBatchQueueResourcePolicy(seqid, iprot, oprot)
      args = read_args(iprot, RemoveGroupBatchQueueResourcePolicy_args)
      result = RemoveGroupBatchQueueResourcePolicy_result.new()
      begin
        result.success = @handler.removeGroupBatchQueueResourcePolicy(args.authzToken, args.resourcePolicyId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'removeGroupBatchQueueResourcePolicy', seqid)
    end

    def process_getGroupComputeResourcePreference(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupComputeResourcePreference_args)
      result = GetGroupComputeResourcePreference_result.new()
      begin
        result.success = @handler.getGroupComputeResourcePreference(args.authzToken, args.computeResourceId, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGroupComputeResourcePreference', seqid)
    end

    def process_getGroupComputeResourcePolicy(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupComputeResourcePolicy_args)
      result = GetGroupComputeResourcePolicy_result.new()
      begin
        result.success = @handler.getGroupComputeResourcePolicy(args.authzToken, args.resourcePolicyId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGroupComputeResourcePolicy', seqid)
    end

    def process_getBatchQueueResourcePolicy(seqid, iprot, oprot)
      args = read_args(iprot, GetBatchQueueResourcePolicy_args)
      result = GetBatchQueueResourcePolicy_result.new()
      begin
        result.success = @handler.getBatchQueueResourcePolicy(args.authzToken, args.resourcePolicyId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getBatchQueueResourcePolicy', seqid)
    end

    def process_getGroupComputeResourcePrefList(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupComputeResourcePrefList_args)
      result = GetGroupComputeResourcePrefList_result.new()
      begin
        result.success = @handler.getGroupComputeResourcePrefList(args.authzToken, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGroupComputeResourcePrefList', seqid)
    end

    def process_getGroupBatchQueueResourcePolicyList(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupBatchQueueResourcePolicyList_args)
      result = GetGroupBatchQueueResourcePolicyList_result.new()
      begin
        result.success = @handler.getGroupBatchQueueResourcePolicyList(args.authzToken, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGroupBatchQueueResourcePolicyList', seqid)
    end

    def process_getGroupComputeResourcePolicyList(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupComputeResourcePolicyList_args)
      result = GetGroupComputeResourcePolicyList_result.new()
      begin
        result.success = @handler.getGroupComputeResourcePolicyList(args.authzToken, args.groupResourceProfileId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGroupComputeResourcePolicyList', seqid)
    end

    def process_getGatewayGroups(seqid, iprot, oprot)
      args = read_args(iprot, GetGatewayGroups_args)
      result = GetGatewayGroups_result.new()
      begin
        result.success = @handler.getGatewayGroups(args.authzToken)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getGatewayGroups', seqid)
    end

    def process_getParser(seqid, iprot, oprot)
      args = read_args(iprot, GetParser_args)
      result = GetParser_result.new()
      begin
        result.success = @handler.getParser(args.authzToken, args.parserId, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getParser', seqid)
    end

    def process_saveParser(seqid, iprot, oprot)
      args = read_args(iprot, SaveParser_args)
      result = SaveParser_result.new()
      begin
        result.success = @handler.saveParser(args.authzToken, args.parser)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'saveParser', seqid)
    end

    def process_listAllParsers(seqid, iprot, oprot)
      args = read_args(iprot, ListAllParsers_args)
      result = ListAllParsers_result.new()
      begin
        result.success = @handler.listAllParsers(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'listAllParsers', seqid)
    end

    def process_removeParser(seqid, iprot, oprot)
      args = read_args(iprot, RemoveParser_args)
      result = RemoveParser_result.new()
      begin
        result.success = @handler.removeParser(args.authzToken, args.parserId, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'removeParser', seqid)
    end

    def process_getParsingTemplate(seqid, iprot, oprot)
      args = read_args(iprot, GetParsingTemplate_args)
      result = GetParsingTemplate_result.new()
      begin
        result.success = @handler.getParsingTemplate(args.authzToken, args.templateId, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getParsingTemplate', seqid)
    end

    def process_getParsingTemplatesForExperiment(seqid, iprot, oprot)
      args = read_args(iprot, GetParsingTemplatesForExperiment_args)
      result = GetParsingTemplatesForExperiment_result.new()
      begin
        result.success = @handler.getParsingTemplatesForExperiment(args.authzToken, args.experimentId, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'getParsingTemplatesForExperiment', seqid)
    end

    def process_saveParsingTemplate(seqid, iprot, oprot)
      args = read_args(iprot, SaveParsingTemplate_args)
      result = SaveParsingTemplate_result.new()
      begin
        result.success = @handler.saveParsingTemplate(args.authzToken, args.parsingTemplate)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'saveParsingTemplate', seqid)
    end

    def process_removeParsingTemplate(seqid, iprot, oprot)
      args = read_args(iprot, RemoveParsingTemplate_args)
      result = RemoveParsingTemplate_result.new()
      begin
        result.success = @handler.removeParsingTemplate(args.authzToken, args.templateId, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'removeParsingTemplate', seqid)
    end

    def process_listAllParsingTemplates(seqid, iprot, oprot)
      args = read_args(iprot, ListAllParsingTemplates_args)
      result = ListAllParsingTemplates_result.new()
      begin
        result.success = @handler.listAllParsingTemplates(args.authzToken, args.gatewayId)
      rescue ::InvalidRequestException => ire
        result.ire = ire
      rescue ::AiravataClientException => ace
        result.ace = ace
      rescue ::AiravataSystemException => ase
        result.ase = ase
      rescue ::AuthorizationException => ae
        result.ae = ae
      end
      write_result(result, oprot, 'listAllParsingTemplates', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class IsUserExists_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    USERNAME = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userName is unset!') unless @userName
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsUserExists_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGateway_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAY = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAY => {:type => ::Thrift::Types::STRUCT, :name => 'gateway', :class => ::Gateway}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gateway is unset!') unless @gateway
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGateway_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUsersInGateway_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUsersInGateway_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGateway_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    UPDATEDGATEWAY = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      UPDATEDGATEWAY => {:type => ::Thrift::Types::STRUCT, :name => 'updatedGateway', :class => ::Gateway}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field updatedGateway is unset!') unless @updatedGateway
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGateway_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGateway_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGateway_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Gateway},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGateway_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGateway_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGateways_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGateways_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Gateway}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsGatewayExist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsGatewayExist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateNotification_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    NOTIFICATION = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      NOTIFICATION => {:type => ::Thrift::Types::STRUCT, :name => 'notification', :class => ::Notification}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field notification is unset!') unless @notification
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateNotification_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateNotification_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    NOTIFICATION = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      NOTIFICATION => {:type => ::Thrift::Types::STRUCT, :name => 'notification', :class => ::Notification}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field notification is unset!') unless @notification
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateNotification_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteNotification_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    NOTIFICATIONID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      NOTIFICATIONID => {:type => ::Thrift::Types::STRING, :name => 'notificationId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field notificationId is unset!') unless @notificationId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteNotification_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNotification_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    NOTIFICATIONID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      NOTIFICATIONID => {:type => ::Thrift::Types::STRING, :name => 'notificationId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field notificationId is unset!') unless @notificationId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetNotification_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Notification},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllNotifications_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllNotifications_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Notification}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerateAndRegisterSSHKeys_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DESCRIPTION = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerateAndRegisterSSHKeys_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterPwdCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    LOGINUSERNAME = 4
    PASSWORD = 5
    DESCRIPTION = 6

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      LOGINUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'loginUserName'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
      DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field loginUserName is unset!') unless @loginUserName
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field password is unset!') unless @password
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field description is unset!') unless @description
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterPwdCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCredentialSummary_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    TOKENID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      TOKENID => {:type => ::Thrift::Types::STRING, :name => 'tokenId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tokenId is unset!') unless @tokenId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCredentialSummary_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CredentialSummary},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllCredentialSummaries_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    TYPE = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::SummaryType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field type is unset!') unless @type
      unless @type.nil? || ::SummaryType::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllCredentialSummaries_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CredentialSummary}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSSHPubKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATACREDSTORETOKEN = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATACREDSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'airavataCredStoreToken'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataCredStoreToken is unset!') unless @airavataCredStoreToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteSSHPubKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeletePWDCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATACREDSTORETOKEN = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATACREDSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'airavataCredStoreToken'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataCredStoreToken is unset!') unless @airavataCredStoreToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeletePWDCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateProject_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    PROJECT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      PROJECT => {:type => ::Thrift::Types::STRUCT, :name => 'project', :class => ::Project}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field project is unset!') unless @project
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateProject_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProject_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PROJECTID = 2
    UPDATEDPROJECT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PROJECTID => {:type => ::Thrift::Types::STRING, :name => 'projectId'},
      UPDATEDPROJECT => {:type => ::Thrift::Types::STRUCT, :name => 'updatedProject', :class => ::Project}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field projectId is unset!') unless @projectId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field updatedProject is unset!') unless @updatedProject
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProject_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IRE = 1
    ACE = 2
    ASE = 3
    PNFE = 4
    AE = 5

    FIELDS = {
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      PNFE => {:type => ::Thrift::Types::STRUCT, :name => 'pnfe', :class => ::ProjectNotFoundException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProject_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PROJECTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PROJECTID => {:type => ::Thrift::Types::STRING, :name => 'projectId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field projectId is unset!') unless @projectId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProject_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    PNFE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Project},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      PNFE => {:type => ::Thrift::Types::STRUCT, :name => 'pnfe', :class => ::ProjectNotFoundException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteProject_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PROJECTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PROJECTID => {:type => ::Thrift::Types::STRING, :name => 'projectId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field projectId is unset!') unless @projectId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteProject_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    PNFE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      PNFE => {:type => ::Thrift::Types::STRUCT, :name => 'pnfe', :class => ::ProjectNotFoundException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserProjects_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    USERNAME = 3
    LIMIT = 4
    OFFSET = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userName is unset!') unless @userName
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field offset is unset!') unless @offset
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserProjects_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Project}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchProjects_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    USERNAME = 3
    FILTERS = 4
    LIMIT = 5
    OFFSET = 6

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
      FILTERS => {:type => ::Thrift::Types::MAP, :name => 'filters', :key => {:type => ::Thrift::Types::I32, :enum_class => ::ProjectSearchFields}, :value => {:type => ::Thrift::Types::STRING}},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userName is unset!') unless @userName
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field offset is unset!') unless @offset
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchProjects_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Project}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchExperiments_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    USERNAME = 3
    FILTERS = 4
    LIMIT = 5
    OFFSET = 6

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
      FILTERS => {:type => ::Thrift::Types::MAP, :name => 'filters', :key => {:type => ::Thrift::Types::I32, :enum_class => ::ExperimentSearchFields}, :value => {:type => ::Thrift::Types::STRING}},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userName is unset!') unless @userName
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field offset is unset!') unless @offset
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchExperiments_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentSummaryModel}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentStatistics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    FROMTIME = 3
    TOTIME = 4
    USERNAME = 5
    APPLICATIONNAME = 6
    RESOURCEHOSTNAME = 7

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      FROMTIME => {:type => ::Thrift::Types::I64, :name => 'fromTime'},
      TOTIME => {:type => ::Thrift::Types::I64, :name => 'toTime'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
      APPLICATIONNAME => {:type => ::Thrift::Types::STRING, :name => 'applicationName'},
      RESOURCEHOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'resourceHostName'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fromTime is unset!') unless @fromTime
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field toTime is unset!') unless @toTime
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentStatistics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExperimentStatistics},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentsInProject_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PROJECTID = 2
    LIMIT = 3
    OFFSET = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PROJECTID => {:type => ::Thrift::Types::STRING, :name => 'projectId'},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field projectId is unset!') unless @projectId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field offset is unset!') unless @offset
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentsInProject_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    PNFE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentModel}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      PNFE => {:type => ::Thrift::Types::STRUCT, :name => 'pnfe', :class => ::ProjectNotFoundException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserExperiments_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    USERNAME = 3
    LIMIT = 4
    OFFSET = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
      LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
      OFFSET => {:type => ::Thrift::Types::I32, :name => 'offset'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userName is unset!') unless @userName
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field limit is unset!') unless @limit
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field offset is unset!') unless @offset
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserExperiments_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentModel}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    EXPERIMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      EXPERIMENT => {:type => ::Thrift::Types::STRUCT, :name => 'experiment', :class => ::ExperimentModel}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experiment is unset!') unless @experiment
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    EXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      EXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'experimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experimentId is unset!') unless @experimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExperimentModel},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentByAdmin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentByAdmin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExperimentModel},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDetailedExperimentTree_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDetailedExperimentTree_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExperimentModel},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2
    EXPERIMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'},
      EXPERIMENT => {:type => ::Thrift::Types::STRUCT, :name => 'experiment', :class => ::ExperimentModel}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experiment is unset!') unless @experiment
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateExperimentConfiguration_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2
    USERCONFIGURATION = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'},
      USERCONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'userConfiguration', :class => ::UserConfigurationDataModel}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userConfiguration is unset!') unless @userConfiguration
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateExperimentConfiguration_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AE = 1

    FIELDS = {
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateResourceScheduleing_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2
    RESOURCESCHEDULING = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'},
      RESOURCESCHEDULING => {:type => ::Thrift::Types::STRUCT, :name => 'resourceScheduling', :class => ::ComputationalResourceSchedulingModel}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceScheduling is unset!') unless @resourceScheduling
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateResourceScheduleing_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AE = 1

    FIELDS = {
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ValidateExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ValidateExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LaunchExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LaunchExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ExperimentStatus},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentOutputs_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetExperimentOutputs_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::OutputDataObjectType}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIntermediateOutputs_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetIntermediateOutputs_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::OutputDataObjectType}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJobStatuses_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJobStatuses_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::JobStatus}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJobDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataExperimentId is unset!') unless @airavataExperimentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetJobDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::JobModel}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    EXISTINGEXPERIMENTID = 2
    NEWEXPERIMENTNAME = 3
    NEWEXPERIMENTPROJECTID = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      EXISTINGEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'existingExperimentID'},
      NEWEXPERIMENTNAME => {:type => ::Thrift::Types::STRING, :name => 'newExperimentName'},
      NEWEXPERIMENTPROJECTID => {:type => ::Thrift::Types::STRING, :name => 'newExperimentProjectId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5
    PNFE = 6

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException},
      PNFE => {:type => ::Thrift::Types::STRUCT, :name => 'pnfe', :class => ::ProjectNotFoundException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneExperimentByAdmin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    EXISTINGEXPERIMENTID = 2
    NEWEXPERIMENTNAME = 3
    NEWEXPERIMENTPROJECTID = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      EXISTINGEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'existingExperimentID'},
      NEWEXPERIMENTNAME => {:type => ::Thrift::Types::STRING, :name => 'newExperimentName'},
      NEWEXPERIMENTPROJECTID => {:type => ::Thrift::Types::STRING, :name => 'newExperimentProjectId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneExperimentByAdmin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5
    PNFE = 6

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException},
      PNFE => {:type => ::Thrift::Types::STRUCT, :name => 'pnfe', :class => ::ProjectNotFoundException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TerminateExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    AIRAVATAEXPERIMENTID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      AIRAVATAEXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'airavataExperimentId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TerminateExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IRE = 1
    ENF = 2
    ACE = 3
    ASE = 4
    AE = 5

    FIELDS = {
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ENF => {:type => ::Thrift::Types::STRUCT, :name => 'enf', :class => ::ExperimentNotFoundException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterApplicationModule_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    APPLICATIONMODULE = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      APPLICATIONMODULE => {:type => ::Thrift::Types::STRUCT, :name => 'applicationModule', :class => ::ApplicationModule}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field applicationModule is unset!') unless @applicationModule
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterApplicationModule_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationModule_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPMODULEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPMODULEID => {:type => ::Thrift::Types::STRING, :name => 'appModuleId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appModuleId is unset!') unless @appModuleId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationModule_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ApplicationModule},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApplicationModule_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPMODULEID = 2
    APPLICATIONMODULE = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPMODULEID => {:type => ::Thrift::Types::STRING, :name => 'appModuleId'},
      APPLICATIONMODULE => {:type => ::Thrift::Types::STRUCT, :name => 'applicationModule', :class => ::ApplicationModule}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appModuleId is unset!') unless @appModuleId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field applicationModule is unset!') unless @applicationModule
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApplicationModule_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllAppModules_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllAppModules_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApplicationModule}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAccessibleAppModules_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAccessibleAppModules_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApplicationModule}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteApplicationModule_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPMODULEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPMODULEID => {:type => ::Thrift::Types::STRING, :name => 'appModuleId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appModuleId is unset!') unless @appModuleId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteApplicationModule_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterApplicationDeployment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    APPLICATIONDEPLOYMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      APPLICATIONDEPLOYMENT => {:type => ::Thrift::Types::STRUCT, :name => 'applicationDeployment', :class => ::ApplicationDeploymentDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field applicationDeployment is unset!') unless @applicationDeployment
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterApplicationDeployment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationDeployment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPDEPLOYMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPDEPLOYMENTID => {:type => ::Thrift::Types::STRING, :name => 'appDeploymentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appDeploymentId is unset!') unless @appDeploymentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationDeployment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ApplicationDeploymentDescription},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApplicationDeployment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPDEPLOYMENTID = 2
    APPLICATIONDEPLOYMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPDEPLOYMENTID => {:type => ::Thrift::Types::STRING, :name => 'appDeploymentId'},
      APPLICATIONDEPLOYMENT => {:type => ::Thrift::Types::STRUCT, :name => 'applicationDeployment', :class => ::ApplicationDeploymentDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appDeploymentId is unset!') unless @appDeploymentId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field applicationDeployment is unset!') unless @applicationDeployment
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApplicationDeployment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteApplicationDeployment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPDEPLOYMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPDEPLOYMENTID => {:type => ::Thrift::Types::STRING, :name => 'appDeploymentId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appDeploymentId is unset!') unless @appDeploymentId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteApplicationDeployment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllApplicationDeployments_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllApplicationDeployments_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApplicationDeploymentDescription}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAccessibleApplicationDeployments_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    PERMISSIONTYPE = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      PERMISSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'permissionType', :enum_class => ::ResourcePermissionType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field permissionType is unset!') unless @permissionType
      unless @permissionType.nil? || ::ResourcePermissionType::VALID_VALUES.include?(@permissionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field permissionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAccessibleApplicationDeployments_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApplicationDeploymentDescription}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAppModuleDeployedResources_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPMODULEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPMODULEID => {:type => ::Thrift::Types::STRING, :name => 'appModuleId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appModuleId is unset!') unless @appModuleId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAppModuleDeployedResources_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationDeploymentsForAppModuleAndGroupResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPMODULEID = 2
    GROUPRESOURCEPROFILEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPMODULEID => {:type => ::Thrift::Types::STRING, :name => 'appModuleId'},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appModuleId is unset!') unless @appModuleId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationDeploymentsForAppModuleAndGroupResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApplicationDeploymentDescription}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterApplicationInterface_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    APPLICATIONINTERFACE = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
      APPLICATIONINTERFACE => {:type => ::Thrift::Types::STRUCT, :name => 'applicationInterface', :class => ::ApplicationInterfaceDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field applicationInterface is unset!') unless @applicationInterface
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterApplicationInterface_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneApplicationInterface_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    EXISTINGAPPINTERFACEID = 2
    NEWAPPLICATIONNAME = 3
    GATEWAYID = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      EXISTINGAPPINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'existingAppInterfaceID'},
      NEWAPPLICATIONNAME => {:type => ::Thrift::Types::STRING, :name => 'newApplicationName'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneApplicationInterface_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationInterface_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPINTERFACEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'appInterfaceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appInterfaceId is unset!') unless @appInterfaceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationInterface_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ApplicationInterfaceDescription},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApplicationInterface_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPINTERFACEID = 2
    APPLICATIONINTERFACE = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'appInterfaceId'},
      APPLICATIONINTERFACE => {:type => ::Thrift::Types::STRUCT, :name => 'applicationInterface', :class => ::ApplicationInterfaceDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appInterfaceId is unset!') unless @appInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field applicationInterface is unset!') unless @applicationInterface
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateApplicationInterface_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteApplicationInterface_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPINTERFACEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'appInterfaceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appInterfaceId is unset!') unless @appInterfaceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteApplicationInterface_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllApplicationInterfaceNames_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllApplicationInterfaceNames_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllApplicationInterfaces_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllApplicationInterfaces_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApplicationInterfaceDescription}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationInputs_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPINTERFACEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'appInterfaceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appInterfaceId is unset!') unless @appInterfaceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationInputs_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::InputDataObjectType}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationOutputs_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPINTERFACEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'appInterfaceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appInterfaceId is unset!') unless @appInterfaceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetApplicationOutputs_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::OutputDataObjectType}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAvailableAppInterfaceComputeResources_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    APPINTERFACEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      APPINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'appInterfaceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field appInterfaceId is unset!') unless @appInterfaceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAvailableAppInterfaceComputeResources_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterComputeResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEDESCRIPTION = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEDESCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'computeResourceDescription', :class => ::ComputeResourceDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceDescription is unset!') unless @computeResourceDescription
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterComputeResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetComputeResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetComputeResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ComputeResourceDescription},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllComputeResourceNames_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllComputeResourceNames_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateComputeResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    COMPUTERESOURCEDESCRIPTION = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      COMPUTERESOURCEDESCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'computeResourceDescription', :class => ::ComputeResourceDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceDescription is unset!') unless @computeResourceDescription
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateComputeResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteComputeResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteComputeResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterStorageResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    STORAGERESOURCEDESCRIPTION = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      STORAGERESOURCEDESCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'storageResourceDescription', :class => ::StorageResourceDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceDescription is unset!') unless @storageResourceDescription
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterStorageResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetStorageResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    STORAGERESOURCEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceId is unset!') unless @storageResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetStorageResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::StorageResourceDescription},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllStorageResourceNames_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllStorageResourceNames_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateStorageResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    STORAGERESOURCEID = 2
    STORAGERESOURCEDESCRIPTION = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId'},
      STORAGERESOURCEDESCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'storageResourceDescription', :class => ::StorageResourceDescription}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceId is unset!') unless @storageResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceDescription is unset!') unless @storageResourceDescription
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateStorageResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteStorageResource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    STORAGERESOURCEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceId is unset!') unless @storageResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteStorageResource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddLocalSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    PRIORITYORDER = 3
    LOCALSUBMISSION = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      LOCALSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'localSubmission', :class => ::LOCALSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field localSubmission is unset!') unless @localSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddLocalSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateLocalSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONINTERFACEID = 2
    LOCALSUBMISSION = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId'},
      LOCALSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'localSubmission', :class => ::LOCALSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field localSubmission is unset!') unless @localSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateLocalSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLocalJobSubmission_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionId is unset!') unless @jobSubmissionId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLocalJobSubmission_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LOCALSubmission},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSSHJobSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    PRIORITYORDER = 3
    SSHJOBSUBMISSION = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      SSHJOBSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'sshJobSubmission', :class => ::SSHJobSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field sshJobSubmission is unset!') unless @sshJobSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSSHJobSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSSHForkJobSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    PRIORITYORDER = 3
    SSHJOBSUBMISSION = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      SSHJOBSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'sshJobSubmission', :class => ::SSHJobSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field sshJobSubmission is unset!') unless @sshJobSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSSHForkJobSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSSHJobSubmission_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionId is unset!') unless @jobSubmissionId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSSHJobSubmission_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SSHJobSubmission},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUNICOREJobSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    PRIORITYORDER = 3
    UNICOREJOBSUBMISSION = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      UNICOREJOBSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'unicoreJobSubmission', :class => ::UnicoreJobSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field unicoreJobSubmission is unset!') unless @unicoreJobSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUNICOREJobSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUnicoreJobSubmission_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionId is unset!') unless @jobSubmissionId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUnicoreJobSubmission_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UnicoreJobSubmission},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddCloudJobSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    PRIORITYORDER = 3
    CLOUDSUBMISSION = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      CLOUDSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'cloudSubmission', :class => ::CloudJobSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cloudSubmission is unset!') unless @cloudSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddCloudJobSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCloudJobSubmission_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionId is unset!') unless @jobSubmissionId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCloudJobSubmission_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CloudJobSubmission},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSSHJobSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONINTERFACEID = 2
    SSHJOBSUBMISSION = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId'},
      SSHJOBSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'sshJobSubmission', :class => ::SSHJobSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field sshJobSubmission is unset!') unless @sshJobSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSSHJobSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateCloudJobSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONINTERFACEID = 2
    SSHJOBSUBMISSION = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId'},
      SSHJOBSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'sshJobSubmission', :class => ::CloudJobSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field sshJobSubmission is unset!') unless @sshJobSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateCloudJobSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUnicoreJobSubmissionDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONINTERFACEID = 2
    UNICOREJOBSUBMISSION = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId'},
      UNICOREJOBSUBMISSION => {:type => ::Thrift::Types::STRUCT, :name => 'unicoreJobSubmission', :class => ::UnicoreJobSubmission}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field unicoreJobSubmission is unset!') unless @unicoreJobSubmission
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUnicoreJobSubmissionDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddLocalDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PRODUCTURI = 2
    DATAMOVETYPE = 3
    PRIORITYORDER = 4
    LOCALDATAMOVEMENT = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri'},
      DATAMOVETYPE => {:type => ::Thrift::Types::I32, :name => 'dataMoveType', :enum_class => ::DMType},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      LOCALDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'localDataMovement', :class => ::LOCALDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field productUri is unset!') unless @productUri
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMoveType is unset!') unless @dataMoveType
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field localDataMovement is unset!') unless @localDataMovement
      unless @dataMoveType.nil? || ::DMType::VALID_VALUES.include?(@dataMoveType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dataMoveType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddLocalDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateLocalDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTINTERFACEID = 2
    LOCALDATAMOVEMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId'},
      LOCALDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'localDataMovement', :class => ::LOCALDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field localDataMovement is unset!') unless @localDataMovement
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateLocalDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLocalDataMovement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementId is unset!') unless @dataMovementId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLocalDataMovement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LOCALDataMovement},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSCPDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PRODUCTURI = 2
    DATAMOVETYPE = 3
    PRIORITYORDER = 4
    SCPDATAMOVEMENT = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri'},
      DATAMOVETYPE => {:type => ::Thrift::Types::I32, :name => 'dataMoveType', :enum_class => ::DMType},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      SCPDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'scpDataMovement', :class => ::SCPDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field productUri is unset!') unless @productUri
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMoveType is unset!') unless @dataMoveType
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field scpDataMovement is unset!') unless @scpDataMovement
      unless @dataMoveType.nil? || ::DMType::VALID_VALUES.include?(@dataMoveType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dataMoveType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddSCPDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSCPDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTINTERFACEID = 2
    SCPDATAMOVEMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId'},
      SCPDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'scpDataMovement', :class => ::SCPDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field scpDataMovement is unset!') unless @scpDataMovement
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSCPDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSCPDataMovement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementId is unset!') unless @dataMovementId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSCPDataMovement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SCPDataMovement},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUnicoreDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PRODUCTURI = 2
    DATAMOVETYPE = 3
    PRIORITYORDER = 4
    UNICOREDATAMOVEMENT = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri'},
      DATAMOVETYPE => {:type => ::Thrift::Types::I32, :name => 'dataMoveType', :enum_class => ::DMType},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      UNICOREDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'unicoreDataMovement', :class => ::UnicoreDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field productUri is unset!') unless @productUri
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMoveType is unset!') unless @dataMoveType
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field unicoreDataMovement is unset!') unless @unicoreDataMovement
      unless @dataMoveType.nil? || ::DMType::VALID_VALUES.include?(@dataMoveType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dataMoveType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUnicoreDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUnicoreDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTINTERFACEID = 2
    UNICOREDATAMOVEMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId'},
      UNICOREDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'unicoreDataMovement', :class => ::UnicoreDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field unicoreDataMovement is unset!') unless @unicoreDataMovement
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUnicoreDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUnicoreDataMovement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementId is unset!') unless @dataMovementId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUnicoreDataMovement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UnicoreDataMovement},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGridFTPDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PRODUCTURI = 2
    DATAMOVETYPE = 3
    PRIORITYORDER = 4
    GRIDFTPDATAMOVEMENT = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri'},
      DATAMOVETYPE => {:type => ::Thrift::Types::I32, :name => 'dataMoveType', :enum_class => ::DMType},
      PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder'},
      GRIDFTPDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'gridFTPDataMovement', :class => ::GridFTPDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field productUri is unset!') unless @productUri
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMoveType is unset!') unless @dataMoveType
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gridFTPDataMovement is unset!') unless @gridFTPDataMovement
      unless @dataMoveType.nil? || ::DMType::VALID_VALUES.include?(@dataMoveType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dataMoveType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGridFTPDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGridFTPDataMovementDetails_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTINTERFACEID = 2
    GRIDFTPDATAMOVEMENT = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId'},
      GRIDFTPDATAMOVEMENT => {:type => ::Thrift::Types::STRUCT, :name => 'gridFTPDataMovement', :class => ::GridFTPDataMovement}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gridFTPDataMovement is unset!') unless @gridFTPDataMovement
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGridFTPDataMovementDetails_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGridFTPDataMovement_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementId is unset!') unless @dataMovementId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGridFTPDataMovement_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GridFTPDataMovement},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeJobSubmissionPriority_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONINTERFACEID = 2
    NEWPRIORITYORDER = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId'},
      NEWPRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'newPriorityOrder'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field newPriorityOrder is unset!') unless @newPriorityOrder
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeJobSubmissionPriority_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeDataMovementPriority_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTINTERFACEID = 2
    NEWPRIORITYORDER = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId'},
      NEWPRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'newPriorityOrder'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field newPriorityOrder is unset!') unless @newPriorityOrder
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeDataMovementPriority_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeJobSubmissionPriorities_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    JOBSUBMISSIONPRIORITYMAP = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      JOBSUBMISSIONPRIORITYMAP => {:type => ::Thrift::Types::MAP, :name => 'jobSubmissionPriorityMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionPriorityMap is unset!') unless @jobSubmissionPriorityMap
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeJobSubmissionPriorities_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeDataMovementPriorities_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAMOVEMENTPRIORITYMAP = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAMOVEMENTPRIORITYMAP => {:type => ::Thrift::Types::MAP, :name => 'dataMovementPriorityMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementPriorityMap is unset!') unless @dataMovementPriorityMap
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ChangeDataMovementPriorities_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteJobSubmissionInterface_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    JOBSUBMISSIONINTERFACEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteJobSubmissionInterface_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteDataMovementInterface_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PRODUCTURI = 2
    DATAMOVEMENTINTERFACEID = 3
    DATAMOVETYPE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri'},
      DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId'},
      DATAMOVETYPE => {:type => ::Thrift::Types::I32, :name => 'dataMoveType', :enum_class => ::DMType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field productUri is unset!') unless @productUri
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMoveType is unset!') unless @dataMoveType
      unless @dataMoveType.nil? || ::DMType::VALID_VALUES.include?(@dataMoveType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dataMoveType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteDataMovementInterface_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterResourceJobManager_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEJOBMANAGER = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEJOBMANAGER => {:type => ::Thrift::Types::STRUCT, :name => 'resourceJobManager', :class => ::ResourceJobManager}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManager is unset!') unless @resourceJobManager
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterResourceJobManager_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateResourceJobManager_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEJOBMANAGERID = 2
    UPDATEDRESOURCEJOBMANAGER = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEJOBMANAGERID => {:type => ::Thrift::Types::STRING, :name => 'resourceJobManagerId'},
      UPDATEDRESOURCEJOBMANAGER => {:type => ::Thrift::Types::STRUCT, :name => 'updatedResourceJobManager', :class => ::ResourceJobManager}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManagerId is unset!') unless @resourceJobManagerId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field updatedResourceJobManager is unset!') unless @updatedResourceJobManager
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateResourceJobManager_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetResourceJobManager_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEJOBMANAGERID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEJOBMANAGERID => {:type => ::Thrift::Types::STRING, :name => 'resourceJobManagerId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManagerId is unset!') unless @resourceJobManagerId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetResourceJobManager_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ResourceJobManager},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteResourceJobManager_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEJOBMANAGERID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEJOBMANAGERID => {:type => ::Thrift::Types::STRING, :name => 'resourceJobManagerId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManagerId is unset!') unless @resourceJobManagerId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteResourceJobManager_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteBatchQueue_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    QUEUENAME = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      QUEUENAME => {:type => ::Thrift::Types::STRING, :name => 'queueName'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field queueName is unset!') unless @queueName
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteBatchQueue_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterGatewayResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYRESOURCEPROFILE = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYRESOURCEPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'gatewayResourceProfile', :class => ::GatewayResourceProfile}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayResourceProfile is unset!') unless @gatewayResourceProfile
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterGatewayResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GatewayResourceProfile},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGatewayResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    GATEWAYRESOURCEPROFILE = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      GATEWAYRESOURCEPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'gatewayResourceProfile', :class => ::GatewayResourceProfile}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayResourceProfile is unset!') unless @gatewayResourceProfile
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGatewayResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGatewayResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGatewayResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGatewayComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    COMPUTERESOURCEID = 3
    COMPUTERESOURCEPREFERENCE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      COMPUTERESOURCEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'computeResourcePreference', :class => ::ComputeResourcePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourcePreference is unset!') unless @computeResourcePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGatewayComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGatewayStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    STORAGERESOURCEID = 3
    STORAGEPREFERENCE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId'},
      STORAGEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'storagePreference', :class => ::StoragePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceId is unset!') unless @storageResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storagePreference is unset!') unless @storagePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddGatewayStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    COMPUTERESOURCEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ComputeResourcePreference},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    STORAGERESOURCEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceId is unset!') unless @storageResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::StoragePreference},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGatewayComputeResourcePreferences_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGatewayComputeResourcePreferences_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ComputeResourcePreference}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGatewayStoragePreferences_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGatewayStoragePreferences_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::StoragePreference}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGatewayResourceProfiles_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllGatewayResourceProfiles_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::GatewayResourceProfile}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGatewayComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    COMPUTERESOURCEID = 3
    COMPUTERESOURCEPREFERENCE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      COMPUTERESOURCEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'computeResourcePreference', :class => ::ComputeResourcePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourcePreference is unset!') unless @computeResourcePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGatewayComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGatewayStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    STORAGEID = 3
    STORAGEPREFERENCE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      STORAGEID => {:type => ::Thrift::Types::STRING, :name => 'storageId'},
      STORAGEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'storagePreference', :class => ::StoragePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageId is unset!') unless @storageId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storagePreference is unset!') unless @storagePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGatewayStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGatewayComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    COMPUTERESOURCEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGatewayComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGatewayStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2
    STORAGEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      STORAGEID => {:type => ::Thrift::Types::STRING, :name => 'storageId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageId is unset!') unless @storageId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGatewayStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSSHAccountProvisioners_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSSHAccountProvisioners_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SSHAccountProvisioner}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DoesUserHaveSSHAccount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    USERID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DoesUserHaveSSHAccount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsSSHSetupCompleteForUserComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    AIRAVATACREDSTORETOKEN = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      AIRAVATACREDSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'airavataCredStoreToken'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataCredStoreToken is unset!') unless @airavataCredStoreToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsSSHSetupCompleteForUserComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetupUserComputeResourcePreferencesForSSH_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    USERID = 3
    AIRAVATACREDSTORETOKEN = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      AIRAVATACREDSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'airavataCredStoreToken'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataCredStoreToken is unset!') unless @airavataCredStoreToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetupUserComputeResourcePreferencesForSSH_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UserComputeResourcePreference},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterUserResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERRESOURCEPROFILE = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERRESOURCEPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'userResourceProfile', :class => ::UserResourceProfile}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userResourceProfile is unset!') unless @userResourceProfile
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterUserResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsUserResourceProfileExists_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IsUserResourceProfileExists_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UserResourceProfile},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUserResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERRESOURCEPROFILE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERRESOURCEPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'userResourceProfile', :class => ::UserResourceProfile}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userResourceProfile is unset!') unless @userResourceProfile
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUserResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteUserResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteUserResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUserComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERCOMPUTERESOURCEID = 4
    USERCOMPUTERESOURCEPREFERENCE = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERCOMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'userComputeResourceId'},
      USERCOMPUTERESOURCEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'userComputeResourcePreference', :class => ::UserComputeResourcePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userComputeResourceId is unset!') unless @userComputeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userComputeResourcePreference is unset!') unless @userComputeResourcePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUserComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUserStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERSTORAGERESOURCEID = 4
    USERSTORAGEPREFERENCE = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERSTORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'userStorageResourceId'},
      USERSTORAGEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'userStoragePreference', :class => ::UserStoragePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userStorageResourceId is unset!') unless @userStorageResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userStoragePreference is unset!') unless @userStoragePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AddUserStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERCOMPUTERESOURCEID = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERCOMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'userComputeResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userComputeResourceId is unset!') unless @userComputeResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UserComputeResourcePreference},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERSTORAGERESOURCEID = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERSTORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'userStorageResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userStorageResourceId is unset!') unless @userStorageResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UserStoragePreference},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUserComputeResourcePreferences_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUserComputeResourcePreferences_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::UserComputeResourcePreference}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUserStoragePreferences_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUserStoragePreferences_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::UserStoragePreference}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUserResourceProfiles_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUserResourceProfiles_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::UserResourceProfile}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUserComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERCOMPUTERESOURCEID = 4
    USERCOMPUTERESOURCEPREFERENCE = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERCOMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'userComputeResourceId'},
      USERCOMPUTERESOURCEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'userComputeResourcePreference', :class => ::UserComputeResourcePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userComputeResourceId is unset!') unless @userComputeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userComputeResourcePreference is unset!') unless @userComputeResourcePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUserComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUserStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERSTORAGEID = 4
    USERSTORAGEPREFERENCE = 5

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERSTORAGEID => {:type => ::Thrift::Types::STRING, :name => 'userStorageId'},
      USERSTORAGEPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'userStoragePreference', :class => ::UserStoragePreference}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userStorageId is unset!') unless @userStorageId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userStoragePreference is unset!') unless @userStoragePreference
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateUserStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteUserComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERCOMPUTERESOURCEID = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERCOMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'userComputeResourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userComputeResourceId is unset!') unless @userComputeResourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteUserComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteUserStoragePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    USERID = 2
    GATEWAYID = 3
    USERSTORAGEID = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
      USERSTORAGEID => {:type => ::Thrift::Types::STRING, :name => 'userStorageId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userStorageId is unset!') unless @userStorageId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteUserStoragePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestQueueStatuses_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestQueueStatuses_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::QueueStatusModel}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDataProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAPRODUCTMODEL = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAPRODUCTMODEL => {:type => ::Thrift::Types::STRUCT, :name => 'dataProductModel', :class => ::DataProductModel}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataProductModel is unset!') unless @dataProductModel
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDataProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDataProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    DATAPRODUCTURI = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      DATAPRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'dataProductUri'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataProductUri is unset!') unless @dataProductUri
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDataProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DataProductModel},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterReplicaLocation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    REPLICALOCATIONMODEL = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      REPLICALOCATIONMODEL => {:type => ::Thrift::Types::STRUCT, :name => 'replicaLocationModel', :class => ::DataReplicaLocationModel}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field replicaLocationModel is unset!') unless @replicaLocationModel
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterReplicaLocation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParentDataProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PRODUCTURI = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field productUri is unset!') unless @productUri
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParentDataProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::DataProductModel},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChildDataProducts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PRODUCTURI = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field productUri is unset!') unless @productUri
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChildDataProducts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::DataProductModel}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ShareResourceWithUsers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    USERPERMISSIONLIST = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      USERPERMISSIONLIST => {:type => ::Thrift::Types::MAP, :name => 'userPermissionList', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32, :enum_class => ::ResourcePermissionType}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ShareResourceWithUsers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ShareResourceWithGroups_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    GROUPPERMISSIONLIST = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      GROUPPERMISSIONLIST => {:type => ::Thrift::Types::MAP, :name => 'groupPermissionList', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32, :enum_class => ::ResourcePermissionType}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ShareResourceWithGroups_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevokeSharingOfResourceFromUsers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    USERPERMISSIONLIST = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      USERPERMISSIONLIST => {:type => ::Thrift::Types::MAP, :name => 'userPermissionList', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32, :enum_class => ::ResourcePermissionType}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevokeSharingOfResourceFromUsers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevokeSharingOfResourceFromGroups_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    GROUPPERMISSIONLIST = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      GROUPPERMISSIONLIST => {:type => ::Thrift::Types::MAP, :name => 'groupPermissionList', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32, :enum_class => ::ResourcePermissionType}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RevokeSharingOfResourceFromGroups_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllAccessibleUsers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    PERMISSIONTYPE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      PERMISSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'permissionType', :enum_class => ::ResourcePermissionType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field permissionType is unset!') unless @permissionType
      unless @permissionType.nil? || ::ResourcePermissionType::VALID_VALUES.include?(@permissionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field permissionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllAccessibleUsers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllAccessibleGroups_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    PERMISSIONTYPE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      PERMISSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'permissionType', :enum_class => ::ResourcePermissionType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field permissionType is unset!') unless @permissionType
      unless @permissionType.nil? || ::ResourcePermissionType::VALID_VALUES.include?(@permissionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field permissionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllAccessibleGroups_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllDirectlyAccessibleUsers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    PERMISSIONTYPE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      PERMISSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'permissionType', :enum_class => ::ResourcePermissionType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field permissionType is unset!') unless @permissionType
      unless @permissionType.nil? || ::ResourcePermissionType::VALID_VALUES.include?(@permissionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field permissionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllDirectlyAccessibleUsers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllDirectlyAccessibleGroups_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    PERMISSIONTYPE = 4

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      PERMISSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'permissionType', :enum_class => ::ResourcePermissionType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field permissionType is unset!') unless @permissionType
      unless @permissionType.nil? || ::ResourcePermissionType::VALID_VALUES.include?(@permissionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field permissionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllDirectlyAccessibleGroups_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UserHasAccess_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEID = 2
    PERMISSIONTYPE = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
      PERMISSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'permissionType', :enum_class => ::ResourcePermissionType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field permissionType is unset!') unless @permissionType
      unless @permissionType.nil? || ::ResourcePermissionType::VALID_VALUES.include?(@permissionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field permissionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UserHasAccess_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroupResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GROUPRESOURCEPROFILE = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GROUPRESOURCEPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'groupResourceProfile', :class => ::GroupResourceProfile}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfile is unset!') unless @groupResourceProfile
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroupResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GROUPRESOURCEPROFILE = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GROUPRESOURCEPROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'groupResourceProfile', :class => ::GroupResourceProfile}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfile is unset!') unless @groupResourceProfile
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GROUPRESOURCEPROFILEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupResourceProfile},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupResourceProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GROUPRESOURCEPROFILEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupResourceProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupResourceList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupResourceList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::GroupResourceProfile}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupComputePrefs_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    GROUPRESOURCEPROFILEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupComputePrefs_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupComputeResourcePolicy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEPOLICYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEPOLICYID => {:type => ::Thrift::Types::STRING, :name => 'resourcePolicyId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourcePolicyId is unset!') unless @resourcePolicyId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupComputeResourcePolicy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupBatchQueueResourcePolicy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEPOLICYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEPOLICYID => {:type => ::Thrift::Types::STRING, :name => 'resourcePolicyId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourcePolicyId is unset!') unless @resourcePolicyId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveGroupBatchQueueResourcePolicy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePreference_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    COMPUTERESOURCEID = 2
    GROUPRESOURCEPROFILEID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePreference_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupComputeResourcePreference},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePolicy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEPOLICYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEPOLICYID => {:type => ::Thrift::Types::STRING, :name => 'resourcePolicyId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourcePolicyId is unset!') unless @resourcePolicyId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePolicy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ComputeResourcePolicy},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBatchQueueResourcePolicy_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    RESOURCEPOLICYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      RESOURCEPOLICYID => {:type => ::Thrift::Types::STRING, :name => 'resourcePolicyId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourcePolicyId is unset!') unless @resourcePolicyId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBatchQueueResourcePolicy_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::BatchQueueResourcePolicy},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePrefList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GROUPRESOURCEPROFILEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePrefList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::GroupComputeResourcePreference}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupBatchQueueResourcePolicyList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GROUPRESOURCEPROFILEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupBatchQueueResourcePolicyList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::BatchQueueResourcePolicy}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePolicyList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GROUPRESOURCEPROFILEID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupComputeResourcePolicyList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ComputeResourcePolicy}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayGroups_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGatewayGroups_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GatewayGroups},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PARSERID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PARSERID => {:type => ::Thrift::Types::STRING, :name => 'parserId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parserId is unset!') unless @parserId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Parser},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveParser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PARSER = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PARSER => {:type => ::Thrift::Types::STRUCT, :name => 'parser', :class => ::Parser}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parser is unset!') unless @parser
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveParser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListAllParsers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListAllParsers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Parser}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveParser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PARSERID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PARSERID => {:type => ::Thrift::Types::STRING, :name => 'parserId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parserId is unset!') unless @parserId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveParser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParsingTemplate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    TEMPLATEID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      TEMPLATEID => {:type => ::Thrift::Types::STRING, :name => 'templateId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field templateId is unset!') unless @templateId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParsingTemplate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ParsingTemplate},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParsingTemplatesForExperiment_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    EXPERIMENTID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      EXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'experimentId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experimentId is unset!') unless @experimentId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetParsingTemplatesForExperiment_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ParsingTemplate}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveParsingTemplate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    PARSINGTEMPLATE = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      PARSINGTEMPLATE => {:type => ::Thrift::Types::STRUCT, :name => 'parsingTemplate', :class => ::ParsingTemplate}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parsingTemplate is unset!') unless @parsingTemplate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SaveParsingTemplate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveParsingTemplate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    TEMPLATEID = 2
    GATEWAYID = 3

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      TEMPLATEID => {:type => ::Thrift::Types::STRING, :name => 'templateId'},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field templateId is unset!') unless @templateId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveParsingTemplate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListAllParsingTemplates_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHZTOKEN = 1
    GATEWAYID = 2

    FIELDS = {
      AUTHZTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'authzToken', :class => ::AuthzToken},
      GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field authzToken is unset!') unless @authzToken
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListAllParsingTemplates_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    IRE = 1
    ACE = 2
    ASE = 3
    AE = 4

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ParsingTemplate}},
      IRE => {:type => ::Thrift::Types::STRUCT, :name => 'ire', :class => ::InvalidRequestException},
      ACE => {:type => ::Thrift::Types::STRUCT, :name => 'ace', :class => ::AiravataClientException},
      ASE => {:type => ::Thrift::Types::STRUCT, :name => 'ase', :class => ::AiravataSystemException},
      AE => {:type => ::Thrift::Types::STRUCT, :name => 'ae', :class => ::AuthorizationException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

