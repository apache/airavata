#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module IOType
  FILE = 0
  PROPERTY = 1
  VALUE_MAP = {0 => "FILE", 1 => "PROPERTY"}
  VALID_VALUES = Set.new([FILE, PROPERTY]).freeze
end

class ParserInput
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  NAME = 2
  REQUIREDINPUT = 3
  PARSERID = 4
  TYPE = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    REQUIREDINPUT => {:type => ::Thrift::Types::BOOL, :name => 'requiredInput'},
    PARSERID => {:type => ::Thrift::Types::STRING, :name => 'parserId'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::IOType}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field requiredInput is unset!') if @requiredInput.nil?
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parserId is unset!') unless @parserId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field type is unset!') unless @type
    unless @type.nil? || ::IOType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ParserOutput
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  NAME = 2
  REQUIREDOUTPUT = 3
  PARSERID = 4
  TYPE = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    REQUIREDOUTPUT => {:type => ::Thrift::Types::BOOL, :name => 'requiredOutput'},
    PARSERID => {:type => ::Thrift::Types::STRING, :name => 'parserId'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::IOType}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field requiredOutput is unset!') if @requiredOutput.nil?
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parserId is unset!') unless @parserId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field type is unset!') unless @type
    unless @type.nil? || ::IOType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class Parser
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  IMAGENAME = 2
  OUTPUTDIRPATH = 3
  INPUTDIRPATH = 4
  EXECUTIONCOMMAND = 5
  INPUTFILES = 6
  OUTPUTFILES = 7
  GATEWAYID = 8

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    IMAGENAME => {:type => ::Thrift::Types::STRING, :name => 'imageName'},
    OUTPUTDIRPATH => {:type => ::Thrift::Types::STRING, :name => 'outputDirPath'},
    INPUTDIRPATH => {:type => ::Thrift::Types::STRING, :name => 'inputDirPath'},
    EXECUTIONCOMMAND => {:type => ::Thrift::Types::STRING, :name => 'executionCommand'},
    INPUTFILES => {:type => ::Thrift::Types::LIST, :name => 'inputFiles', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ParserInput}},
    OUTPUTFILES => {:type => ::Thrift::Types::LIST, :name => 'outputFiles', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ParserOutput}},
    GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field imageName is unset!') unless @imageName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field outputDirPath is unset!') unless @outputDirPath
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field inputDirPath is unset!') unless @inputDirPath
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field executionCommand is unset!') unless @executionCommand
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field inputFiles is unset!') unless @inputFiles
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field outputFiles is unset!') unless @outputFiles
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
  end

  ::Thrift::Struct.generate_accessors self
end

class ParserConnectorInput
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  INPUTID = 2
  PARENTOUTPUTID = 3
  VALUE = 4
  PARSERCONNECTORID = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    INPUTID => {:type => ::Thrift::Types::STRING, :name => 'inputId'},
    PARENTOUTPUTID => {:type => ::Thrift::Types::STRING, :name => 'parentOutputId'},
    VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
    PARSERCONNECTORID => {:type => ::Thrift::Types::STRING, :name => 'parserConnectorId'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field inputId is unset!') unless @inputId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parserConnectorId is unset!') unless @parserConnectorId
  end

  ::Thrift::Struct.generate_accessors self
end

class ParserConnector
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  PARENTPARSERID = 2
  CHILDPARSERID = 3
  CONNECTORINPUTS = 4
  PARSINGTEMPLATEID = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    PARENTPARSERID => {:type => ::Thrift::Types::STRING, :name => 'parentParserId'},
    CHILDPARSERID => {:type => ::Thrift::Types::STRING, :name => 'childParserId'},
    CONNECTORINPUTS => {:type => ::Thrift::Types::LIST, :name => 'connectorInputs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ParserConnectorInput}},
    PARSINGTEMPLATEID => {:type => ::Thrift::Types::STRING, :name => 'parsingTemplateId'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parentParserId is unset!') unless @parentParserId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field childParserId is unset!') unless @childParserId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field connectorInputs is unset!') unless @connectorInputs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parsingTemplateId is unset!') unless @parsingTemplateId
  end

  ::Thrift::Struct.generate_accessors self
end

class ParsingTemplateInput
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  TARGETINPUTID = 2
  APPLICATIONOUTPUTNAME = 3
  VALUE = 4
  PARSINGTEMPLATEID = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    TARGETINPUTID => {:type => ::Thrift::Types::STRING, :name => 'targetInputId'},
    APPLICATIONOUTPUTNAME => {:type => ::Thrift::Types::STRING, :name => 'applicationOutputName'},
    VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
    PARSINGTEMPLATEID => {:type => ::Thrift::Types::STRING, :name => 'parsingTemplateId'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field targetInputId is unset!') unless @targetInputId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parsingTemplateId is unset!') unless @parsingTemplateId
  end

  ::Thrift::Struct.generate_accessors self
end

class ParsingTemplate
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  APPLICATIONINTERFACE = 2
  INITIALINPUTS = 3
  PARSERCONNECTIONS = 4
  GATEWAYID = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    APPLICATIONINTERFACE => {:type => ::Thrift::Types::STRING, :name => 'applicationInterface'},
    INITIALINPUTS => {:type => ::Thrift::Types::LIST, :name => 'initialInputs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ParsingTemplateInput}},
    PARSERCONNECTIONS => {:type => ::Thrift::Types::LIST, :name => 'parserConnections', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ParserConnector}},
    GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field applicationInterface is unset!') unless @applicationInterface
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field initialInputs is unset!') unless @initialInputs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parserConnections is unset!') unless @parserConnections
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
  end

  ::Thrift::Struct.generate_accessors self
end

