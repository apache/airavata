#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'airavata_commons_types'


module DMType
  COMPUTE_RESOURCE = 0
  STORAGE_RESOURCE = 1
  VALUE_MAP = {0 => "COMPUTE_RESOURCE", 1 => "STORAGE_RESOURCE"}
  VALID_VALUES = Set.new([COMPUTE_RESOURCE, STORAGE_RESOURCE]).freeze
end

module SecurityProtocol
  USERNAME_PASSWORD = 0
  SSH_KEYS = 1
  GSI = 2
  KERBEROS = 3
  OAUTH = 4
  LOCAL = 5
  VALUE_MAP = {0 => "USERNAME_PASSWORD", 1 => "SSH_KEYS", 2 => "GSI", 3 => "KERBEROS", 4 => "OAUTH", 5 => "LOCAL"}
  VALID_VALUES = Set.new([USERNAME_PASSWORD, SSH_KEYS, GSI, KERBEROS, OAUTH, LOCAL]).freeze
end

module DataMovementProtocol
  LOCAL = 0
  SCP = 1
  SFTP = 2
  GridFTP = 3
  UNICORE_STORAGE_SERVICE = 4
  VALUE_MAP = {0 => "LOCAL", 1 => "SCP", 2 => "SFTP", 3 => "GridFTP", 4 => "UNICORE_STORAGE_SERVICE"}
  VALID_VALUES = Set.new([LOCAL, SCP, SFTP, GridFTP, UNICORE_STORAGE_SERVICE]).freeze
end

# Data Movement through Secured Copy
# 
# alternativeSCPHostName:
#  If the login to scp is different than the hostname itself, specify it here
# 
# sshPort:
#  If a non-default port needs to used, specify it.
class SCPDataMovement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DATAMOVEMENTINTERFACEID = 1
  SECURITYPROTOCOL = 2
  ALTERNATIVESCPHOSTNAME = 3
  SSHPORT = 4

  FIELDS = {
    DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol},
    ALTERNATIVESCPHOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'alternativeSCPHostName', :optional => true},
    SSHPORT => {:type => ::Thrift::Types::I32, :name => 'sshPort', :default => 22, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Data Movement through GridFTP
# 
# alternativeSCPHostName:
#  If the login to scp is different than the hostname itself, specify it here
# 
# sshPort:
#  If a non-default port needs to used, specify it.
class GridFTPDataMovement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DATAMOVEMENTINTERFACEID = 1
  SECURITYPROTOCOL = 2
  GRIDFTPENDPOINTS = 3

  FIELDS = {
    DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol},
    GRIDFTPENDPOINTS => {:type => ::Thrift::Types::LIST, :name => 'gridFTPEndPoints', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gridFTPEndPoints is unset!') unless @gridFTPEndPoints
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Data Movement through UnicoreStorage
# 
# unicoreEndPointURL:
#  unicoreGateway End Point. The provider will query this service to fetch required service end points.
class UnicoreDataMovement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DATAMOVEMENTINTERFACEID = 1
  SECURITYPROTOCOL = 2
  UNICOREENDPOINTURL = 3

  FIELDS = {
    DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol},
    UNICOREENDPOINTURL => {:type => ::Thrift::Types::STRING, :name => 'unicoreEndPointURL'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field unicoreEndPointURL is unset!') unless @unicoreEndPointURL
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# LOCAL
# 
# alternativeSCPHostName:
#  If the login to scp is different than the hostname itself, specify it here
# 
# sshPort:
#  If a non-defualt port needs to used, specify it.
class LOCALDataMovement
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DATAMOVEMENTINTERFACEID = 1

  FIELDS = {
    DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
  end

  ::Thrift::Struct.generate_accessors self
end

# Data Movement Interfaces
# 
# dataMovementInterfaceId: The Data Movement Interface has to be previously registered and referenced here.
# 
# priorityOrder:
#  For resources with multiple interfaces, the priority order should be selected.
#   Lower the numerical number, higher the priority
# 
class DataMovementInterface
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DATAMOVEMENTINTERFACEID = 1
  DATAMOVEMENTPROTOCOL = 2
  PRIORITYORDER = 3
  CREATIONTIME = 4
  UPDATETIME = 5
  STORAGERESOURCEID = 6

  FIELDS = {
    DATAMOVEMENTINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'dataMovementInterfaceId'},
    DATAMOVEMENTPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'dataMovementProtocol', :enum_class => ::DataMovementProtocol},
    PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder', :default => 0},
    CREATIONTIME => {:type => ::Thrift::Types::I64, :name => 'creationTime', :optional => true},
    UPDATETIME => {:type => ::Thrift::Types::I64, :name => 'updateTime', :optional => true},
    STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementInterfaceId is unset!') unless @dataMovementInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dataMovementProtocol is unset!') unless @dataMovementProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
    unless @dataMovementProtocol.nil? || ::DataMovementProtocol::VALID_VALUES.include?(@dataMovementProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dataMovementProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

