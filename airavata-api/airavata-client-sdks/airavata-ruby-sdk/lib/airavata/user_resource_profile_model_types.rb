#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'compute_resource_model_types'
require_relative 'data_movement_models_types'
require_relative 'user_profile_model_types'


# User specific preferences for a Computer Resource
# 
# computeResourceId:
#   Corelate the preference to a compute resource.
# 
# 
# loginUserName:
#   If turned true, Airavata will override the preferences of better alternatives exist.
# 
# 
# preferredBatchQueue:
#  Gateways can choose a defualt batch queue based on average job dimention, reservations or other metrics.
# 
# scratchLocation:
#  Path to the local scratch space on a HPC cluster. Typically used to create working directory for job execution.
# 
# allocationProjectNumber:
#  Typically used on HPC machines to charge computing usage to a account number. For instance, on XSEDE once an
#    allocation is approved, an allocation number is assigned. Before passing this number with job submittions, the
#    account to be used has to be added to the allocation.
# 
# resourceSpecificCredentialStoreToken:
#  Resource specific credential store token. If this token is specified, then it is superceeded by the gateway's
#   default credential store.
# 
# validated:
#  If true the the configuration has been validated in the sense that the username and credential can be used to
#  login to the remote host and the scratchLocation is a valid location that the user has permission to write to.
#  Should be treated as read-only and only mutated by Airavata middleware.
# 
class UserComputeResourcePreference
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COMPUTERESOURCEID = 1
  LOGINUSERNAME = 2
  PREFERREDBATCHQUEUE = 3
  SCRATCHLOCATION = 4
  ALLOCATIONPROJECTNUMBER = 5
  RESOURCESPECIFICCREDENTIALSTORETOKEN = 6
  QUALITYOFSERVICE = 7
  RESERVATION = 8
  RESERVATIONSTARTTIME = 9
  RESERVATIONENDTIME = 10
  VALIDATED = 11

  FIELDS = {
    COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
    LOGINUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'loginUserName', :optional => true},
    PREFERREDBATCHQUEUE => {:type => ::Thrift::Types::STRING, :name => 'preferredBatchQueue', :optional => true},
    SCRATCHLOCATION => {:type => ::Thrift::Types::STRING, :name => 'scratchLocation', :optional => true},
    ALLOCATIONPROJECTNUMBER => {:type => ::Thrift::Types::STRING, :name => 'allocationProjectNumber', :optional => true},
    RESOURCESPECIFICCREDENTIALSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'resourceSpecificCredentialStoreToken', :optional => true},
    QUALITYOFSERVICE => {:type => ::Thrift::Types::STRING, :name => 'qualityOfService', :optional => true},
    RESERVATION => {:type => ::Thrift::Types::STRING, :name => 'reservation', :optional => true},
    RESERVATIONSTARTTIME => {:type => ::Thrift::Types::I64, :name => 'reservationStartTime', :optional => true},
    RESERVATIONENDTIME => {:type => ::Thrift::Types::I64, :name => 'reservationEndTime', :optional => true},
    VALIDATED => {:type => ::Thrift::Types::BOOL, :name => 'validated', :default => false, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
  end

  ::Thrift::Struct.generate_accessors self
end

class UserStoragePreference
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STORAGERESOURCEID = 1
  LOGINUSERNAME = 2
  FILESYSTEMROOTLOCATION = 3
  RESOURCESPECIFICCREDENTIALSTORETOKEN = 4

  FIELDS = {
    STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId'},
    LOGINUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'loginUserName', :optional => true},
    FILESYSTEMROOTLOCATION => {:type => ::Thrift::Types::STRING, :name => 'fileSystemRootLocation', :optional => true},
    RESOURCESPECIFICCREDENTIALSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'resourceSpecificCredentialStoreToken', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field storageResourceId is unset!') unless @storageResourceId
  end

  ::Thrift::Struct.generate_accessors self
end

# User Resource Profile
# 
# userId:
# Unique identifier used to link user to corresponding user data model
# 
# gatewayID:
#  Unique identifier for the gateway assigned by Airavata. Corelate this to Airavata Admin API Gateway Registration.
# 
# credentialStoreToken:
#  Gateway's defualt credential store token.
# 
# computeResourcePreferences:
#  List of resource preferences for each of the registered compute resources.
# 
#  identityServerTenant:
# 
#  identityServerPwdCredToken:
# 
class UserResourceProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  USERID = 1
  GATEWAYID = 2
  CREDENTIALSTORETOKEN = 3
  USERCOMPUTERESOURCEPREFERENCES = 4
  USERSTORAGEPREFERENCES = 5
  IDENTITYSERVERTENANT = 6
  IDENTITYSERVERPWDCREDTOKEN = 7

  FIELDS = {
    USERID => {:type => ::Thrift::Types::STRING, :name => 'userId'},
    GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayID'},
    CREDENTIALSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'credentialStoreToken', :optional => true},
    USERCOMPUTERESOURCEPREFERENCES => {:type => ::Thrift::Types::LIST, :name => 'userComputeResourcePreferences', :element => {:type => ::Thrift::Types::STRUCT, :class => ::UserComputeResourcePreference}, :optional => true},
    USERSTORAGEPREFERENCES => {:type => ::Thrift::Types::LIST, :name => 'userStoragePreferences', :element => {:type => ::Thrift::Types::STRUCT, :class => ::UserStoragePreference}, :optional => true},
    IDENTITYSERVERTENANT => {:type => ::Thrift::Types::STRING, :name => 'identityServerTenant', :optional => true},
    IDENTITYSERVERPWDCREDTOKEN => {:type => ::Thrift::Types::STRING, :name => 'identityServerPwdCredToken', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userId is unset!') unless @userId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayID is unset!') unless @gatewayID
  end

  ::Thrift::Struct.generate_accessors self
end

