#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ReplicaLocationCategory
  GATEWAY_DATA_STORE = 0
  COMPUTE_RESOURCE = 1
  LONG_TERM_STORAGE_RESOURCE = 2
  OTHER = 3
  VALUE_MAP = {0 => "GATEWAY_DATA_STORE", 1 => "COMPUTE_RESOURCE", 2 => "LONG_TERM_STORAGE_RESOURCE", 3 => "OTHER"}
  VALID_VALUES = Set.new([GATEWAY_DATA_STORE, COMPUTE_RESOURCE, LONG_TERM_STORAGE_RESOURCE, OTHER]).freeze
end

module ReplicaPersistentType
  TRANSIENT = 0
  PERSISTENT = 1
  VALUE_MAP = {0 => "TRANSIENT", 1 => "PERSISTENT"}
  VALID_VALUES = Set.new([TRANSIENT, PERSISTENT]).freeze
end

module DataProductType
  FILE = 0
  COLLECTION = 1
  VALUE_MAP = {0 => "FILE", 1 => "COLLECTION"}
  VALID_VALUES = Set.new([FILE, COLLECTION]).freeze
end

class DataReplicaLocationModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REPLICAID = 1
  PRODUCTURI = 2
  REPLICANAME = 3
  REPLICADESCRIPTION = 4
  CREATIONTIME = 5
  LASTMODIFIEDTIME = 6
  VALIDUNTILTIME = 7
  REPLICALOCATIONCATEGORY = 8
  REPLICAPERSISTENTTYPE = 9
  STORAGERESOURCEID = 10
  FILEPATH = 11
  REPLICAMETADATA = 12

  FIELDS = {
    REPLICAID => {:type => ::Thrift::Types::STRING, :name => 'replicaId', :optional => true},
    PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri', :optional => true},
    REPLICANAME => {:type => ::Thrift::Types::STRING, :name => 'replicaName', :optional => true},
    REPLICADESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'replicaDescription', :optional => true},
    CREATIONTIME => {:type => ::Thrift::Types::I64, :name => 'creationTime', :optional => true},
    LASTMODIFIEDTIME => {:type => ::Thrift::Types::I64, :name => 'lastModifiedTime', :optional => true},
    VALIDUNTILTIME => {:type => ::Thrift::Types::I64, :name => 'validUntilTime', :optional => true},
    REPLICALOCATIONCATEGORY => {:type => ::Thrift::Types::I32, :name => 'replicaLocationCategory', :optional => true, :enum_class => ::ReplicaLocationCategory},
    REPLICAPERSISTENTTYPE => {:type => ::Thrift::Types::I32, :name => 'replicaPersistentType', :optional => true, :enum_class => ::ReplicaPersistentType},
    STORAGERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'storageResourceId', :optional => true},
    FILEPATH => {:type => ::Thrift::Types::STRING, :name => 'filePath', :optional => true},
    REPLICAMETADATA => {:type => ::Thrift::Types::MAP, :name => 'replicaMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @replicaLocationCategory.nil? || ::ReplicaLocationCategory::VALID_VALUES.include?(@replicaLocationCategory)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field replicaLocationCategory!')
    end
    unless @replicaPersistentType.nil? || ::ReplicaPersistentType::VALID_VALUES.include?(@replicaPersistentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field replicaPersistentType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class DataProductModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTURI = 1
  GATEWAYID = 2
  PARENTPRODUCTURI = 3
  PRODUCTNAME = 4
  PRODUCTDESCRIPTION = 5
  OWNERNAME = 6
  DATAPRODUCTTYPE = 7
  PRODUCTSIZE = 8
  CREATIONTIME = 9
  LASTMODIFIEDTIME = 10
  PRODUCTMETADATA = 11
  REPLICALOCATIONS = 12

  FIELDS = {
    PRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'productUri', :optional => true},
    GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId', :optional => true},
    PARENTPRODUCTURI => {:type => ::Thrift::Types::STRING, :name => 'parentProductUri', :optional => true},
    PRODUCTNAME => {:type => ::Thrift::Types::STRING, :name => 'productName', :optional => true},
    PRODUCTDESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'productDescription', :optional => true},
    OWNERNAME => {:type => ::Thrift::Types::STRING, :name => 'ownerName', :optional => true},
    DATAPRODUCTTYPE => {:type => ::Thrift::Types::I32, :name => 'dataProductType', :optional => true, :enum_class => ::DataProductType},
    PRODUCTSIZE => {:type => ::Thrift::Types::I32, :name => 'productSize', :optional => true},
    CREATIONTIME => {:type => ::Thrift::Types::I64, :name => 'creationTime', :optional => true},
    LASTMODIFIEDTIME => {:type => ::Thrift::Types::I64, :name => 'lastModifiedTime', :optional => true},
    PRODUCTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'productMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true},
    REPLICALOCATIONS => {:type => ::Thrift::Types::LIST, :name => 'replicaLocations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::DataReplicaLocationModel}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @dataProductType.nil? || ::DataProductType::VALID_VALUES.include?(@dataProductType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dataProductType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

