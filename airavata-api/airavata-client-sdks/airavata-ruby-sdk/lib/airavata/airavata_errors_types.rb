#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'experiment_model_types'


module AiravataErrorType
  UNKNOWN = 0
  PERMISSION_DENIED = 1
  INTERNAL_ERROR = 2
  AUTHENTICATION_FAILURE = 3
  INVALID_AUTHORIZATION = 4
  AUTHORIZATION_EXPIRED = 5
  UNKNOWN_GATEWAY_ID = 6
  UNSUPPORTED_OPERATION = 7
  VALUE_MAP = {0 => "UNKNOWN", 1 => "PERMISSION_DENIED", 2 => "INTERNAL_ERROR", 3 => "AUTHENTICATION_FAILURE", 4 => "INVALID_AUTHORIZATION", 5 => "AUTHORIZATION_EXPIRED", 6 => "UNKNOWN_GATEWAY_ID", 7 => "UNSUPPORTED_OPERATION"}
  VALID_VALUES = Set.new([UNKNOWN, PERMISSION_DENIED, INTERNAL_ERROR, AUTHENTICATION_FAILURE, INVALID_AUTHORIZATION, AUTHORIZATION_EXPIRED, UNKNOWN_GATEWAY_ID, UNSUPPORTED_OPERATION]).freeze
end

# This exception is thrown when a client asks to perform an operation on an experiment that does not exist.
# 
# identifier:  A description of the experiment that was not found on the server.
# 
# key:  The value passed from the client in the identifier, which was not found.
class ExperimentNotFoundException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field message is unset!') unless @message
  end

  ::Thrift::Struct.generate_accessors self
end

# 1:  optional  string identifier,
# 2:  optional  string key
# 
class ProjectNotFoundException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field message is unset!') unless @message
  end

  ::Thrift::Struct.generate_accessors self
end

# This exception is thrown for invalid requests that occur from any reasons like required input parameters are missing,
#  or a parameter is malformed.
# 
#  message: contains the associated error message.
class InvalidRequestException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field message is unset!') unless @message
  end

  ::Thrift::Struct.generate_accessors self
end

# This exception is thrown when RPC timeout gets exceeded.
class TimedOutException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union

  FIELDS = {

  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

# This exception is thrown for invalid sshKeyAuthentication requests.
# 
#  message: contains the cause of the authorization failure.
class AuthenticationException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field message is unset!') unless @message
  end

  ::Thrift::Struct.generate_accessors self
end

# This exception is thrown for invalid authorization requests such user does not have acces to an aplication or resource.
# 
#  message: contains the authorization failure message
class AuthorizationException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field message is unset!') unless @message
  end

  ::Thrift::Struct.generate_accessors self
end

# This exception is thrown when you try to save a duplicate entity that already exists
#   in the database.
# 
#   message: contains the associated error message
# 
class DuplicateEntryException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  def initialize(message=nil)
    super()
    self.message = message
  end

  MESSAGE = 1

  FIELDS = {
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field message is unset!') unless @message
  end

  ::Thrift::Struct.generate_accessors self
end

# This exception is thrown by Airavata Services when a call fails as a result of
# a problem that a client may be able to resolve.  For example, if the user
# attempts to execute an application on a resource gateway does not have access to.
# 
# This exception would not be used for internal system errors that do not
# reflect user actions, but rather reflect a problem within the service that
# the client cannot resolve.
# 
# airavataErrorType:  The message type indicating the error that occurred.
#   must be one of the values of AiravataErrorType.
# 
# parameter:  If the error applied to a particular input parameter, this will
#   indicate which parameter.
class AiravataClientException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AIRAVATAERRORTYPE = 1
  PARAMETER = 2

  FIELDS = {
    AIRAVATAERRORTYPE => {:type => ::Thrift::Types::I32, :name => 'airavataErrorType', :enum_class => ::AiravataErrorType},
    PARAMETER => {:type => ::Thrift::Types::STRING, :name => 'parameter', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataErrorType is unset!') unless @airavataErrorType
    unless @airavataErrorType.nil? || ::AiravataErrorType::VALID_VALUES.include?(@airavataErrorType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field airavataErrorType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ValidatorResult
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RESULT = 1
  ERRORDETAILS = 2

  FIELDS = {
    RESULT => {:type => ::Thrift::Types::BOOL, :name => 'result'},
    ERRORDETAILS => {:type => ::Thrift::Types::STRING, :name => 'errorDetails', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field result is unset!') if @result.nil?
  end

  ::Thrift::Struct.generate_accessors self
end

class ValidationResults
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VALIDATIONSTATE = 1
  VALIDATIONRESULTLIST = 2

  FIELDS = {
    VALIDATIONSTATE => {:type => ::Thrift::Types::BOOL, :name => 'validationState'},
    VALIDATIONRESULTLIST => {:type => ::Thrift::Types::LIST, :name => 'validationResultList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ValidatorResult}}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field validationState is unset!') if @validationState.nil?
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field validationResultList is unset!') unless @validationResultList
  end

  ::Thrift::Struct.generate_accessors self
end

class LaunchValidationException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  VALIDATIONRESULT = 1
  ERRORMESSAGE = 2

  FIELDS = {
    VALIDATIONRESULT => {:type => ::Thrift::Types::STRUCT, :name => 'validationResult', :class => ::ValidationResults},
    ERRORMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'errorMessage', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field validationResult is unset!') unless @validationResult
  end

  ::Thrift::Struct.generate_accessors self
end

# This exception is thrown by Airavata Services when a call fails as a result of
# a problem in the service that could not be changed through client's action.
# 
# airavataErrorType:  The message type indicating the error that occurred.
#   must be one of the values of AiravataErrorType.
# 
# message:  This may contain additional information about the error
# 
class AiravataSystemException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AIRAVATAERRORTYPE = 1
  MESSAGE = 2

  FIELDS = {
    AIRAVATAERRORTYPE => {:type => ::Thrift::Types::I32, :name => 'airavataErrorType', :enum_class => ::AiravataErrorType},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataErrorType is unset!') unless @airavataErrorType
    unless @airavataErrorType.nil? || ::AiravataErrorType::VALID_VALUES.include?(@airavataErrorType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field airavataErrorType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

