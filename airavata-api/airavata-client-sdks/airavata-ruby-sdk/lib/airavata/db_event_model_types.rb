#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module CrudType
  CREATE = 0
  READ = 1
  UPDATE = 2
  DELETE = 3
  VALUE_MAP = {0 => "CREATE", 1 => "READ", 2 => "UPDATE", 3 => "DELETE"}
  VALID_VALUES = Set.new([CREATE, READ, UPDATE, DELETE]).freeze
end

module EntityType
  USER_PROFILE = 0
  TENANT = 1
  GROUP = 2
  PROJECT = 3
  EXPERIMENT = 4
  APPLICATION = 5
  SHARING = 6
  REGISTRY = 7
  VALUE_MAP = {0 => "USER_PROFILE", 1 => "TENANT", 2 => "GROUP", 3 => "PROJECT", 4 => "EXPERIMENT", 5 => "APPLICATION", 6 => "SHARING", 7 => "REGISTRY"}
  VALID_VALUES = Set.new([USER_PROFILE, TENANT, GROUP, PROJECT, EXPERIMENT, APPLICATION, SHARING, REGISTRY]).freeze
end

module DBEventType
  PUBLISHER = 0
  SUBSCRIBER = 1
  VALUE_MAP = {0 => "PUBLISHER", 1 => "SUBSCRIBER"}
  VALID_VALUES = Set.new([PUBLISHER, SUBSCRIBER]).freeze
end

class DBEventPublisherContext
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CRUDTYPE = 1
  ENTITYTYPE = 2
  ENTITYDATAMODEL = 3

  FIELDS = {
    CRUDTYPE => {:type => ::Thrift::Types::I32, :name => 'crudType', :enum_class => ::CrudType},
    ENTITYTYPE => {:type => ::Thrift::Types::I32, :name => 'entityType', :enum_class => ::EntityType},
    ENTITYDATAMODEL => {:type => ::Thrift::Types::STRING, :name => 'entityDataModel', :binary => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field crudType is unset!') unless @crudType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field entityType is unset!') unless @entityType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field entityDataModel is unset!') unless @entityDataModel
    unless @crudType.nil? || ::CrudType::VALID_VALUES.include?(@crudType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field crudType!')
    end
    unless @entityType.nil? || ::EntityType::VALID_VALUES.include?(@entityType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field entityType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class DBEventPublisher
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PUBLISHERCONTEXT = 1

  FIELDS = {
    PUBLISHERCONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'publisherContext', :class => ::DBEventPublisherContext}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field publisherContext is unset!') unless @publisherContext
  end

  ::Thrift::Struct.generate_accessors self
end

class DBEventSubscriber
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SUBSCRIBERSERVICE = 1

  FIELDS = {
    SUBSCRIBERSERVICE => {:type => ::Thrift::Types::STRING, :name => 'subscriberService'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field subscriberService is unset!') unless @subscriberService
  end

  ::Thrift::Struct.generate_accessors self
end

class DBEventMessageContext < ::Thrift::Union
  include ::Thrift::Struct_Union
  class << self
    def publisher(val)
      DBEventMessageContext.new(:publisher, val)
    end

    def subscriber(val)
      DBEventMessageContext.new(:subscriber, val)
    end
  end

  PUBLISHER = 1
  SUBSCRIBER = 2

  FIELDS = {
    PUBLISHER => {:type => ::Thrift::Types::STRUCT, :name => 'publisher', :class => ::DBEventPublisher, :optional => true},
    SUBSCRIBER => {:type => ::Thrift::Types::STRUCT, :name => 'subscriber', :class => ::DBEventSubscriber, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
  end

  ::Thrift::Union.generate_accessors self
end

class DBEventMessage
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DBEVENTTYPE = 1
  MESSAGECONTEXT = 2
  PUBLISHERSERVICE = 3

  FIELDS = {
    DBEVENTTYPE => {:type => ::Thrift::Types::I32, :name => 'dbEventType', :enum_class => ::DBEventType},
    MESSAGECONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'messageContext', :class => ::DBEventMessageContext},
    PUBLISHERSERVICE => {:type => ::Thrift::Types::STRING, :name => 'publisherService'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dbEventType is unset!') unless @dbEventType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field messageContext is unset!') unless @messageContext
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field publisherService is unset!') unless @publisherService
    unless @dbEventType.nil? || ::DBEventType::VALID_VALUES.include?(@dbEventType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field dbEventType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

