#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ExperimentState
  CREATED = 0
  VALIDATED = 1
  SCHEDULED = 2
  LAUNCHED = 3
  EXECUTING = 4
  CANCELING = 5
  CANCELED = 6
  COMPLETED = 7
  FAILED = 8
  VALUE_MAP = {0 => "CREATED", 1 => "VALIDATED", 2 => "SCHEDULED", 3 => "LAUNCHED", 4 => "EXECUTING", 5 => "CANCELING", 6 => "CANCELED", 7 => "COMPLETED", 8 => "FAILED"}
  VALID_VALUES = Set.new([CREATED, VALIDATED, SCHEDULED, LAUNCHED, EXECUTING, CANCELING, CANCELED, COMPLETED, FAILED]).freeze
end

module TaskState
  CREATED = 0
  EXECUTING = 1
  COMPLETED = 2
  FAILED = 3
  CANCELED = 4
  VALUE_MAP = {0 => "CREATED", 1 => "EXECUTING", 2 => "COMPLETED", 3 => "FAILED", 4 => "CANCELED"}
  VALID_VALUES = Set.new([CREATED, EXECUTING, COMPLETED, FAILED, CANCELED]).freeze
end

module ProcessState
  CREATED = 0
  VALIDATED = 1
  STARTED = 2
  PRE_PROCESSING = 3
  CONFIGURING_WORKSPACE = 4
  INPUT_DATA_STAGING = 5
  EXECUTING = 6
  MONITORING = 7
  OUTPUT_DATA_STAGING = 8
  POST_PROCESSING = 9
  COMPLETED = 10
  FAILED = 11
  CANCELLING = 12
  CANCELED = 13
  VALUE_MAP = {0 => "CREATED", 1 => "VALIDATED", 2 => "STARTED", 3 => "PRE_PROCESSING", 4 => "CONFIGURING_WORKSPACE", 5 => "INPUT_DATA_STAGING", 6 => "EXECUTING", 7 => "MONITORING", 8 => "OUTPUT_DATA_STAGING", 9 => "POST_PROCESSING", 10 => "COMPLETED", 11 => "FAILED", 12 => "CANCELLING", 13 => "CANCELED"}
  VALID_VALUES = Set.new([CREATED, VALIDATED, STARTED, PRE_PROCESSING, CONFIGURING_WORKSPACE, INPUT_DATA_STAGING, EXECUTING, MONITORING, OUTPUT_DATA_STAGING, POST_PROCESSING, COMPLETED, FAILED, CANCELLING, CANCELED]).freeze
end

module JobState
  SUBMITTED = 0
  QUEUED = 1
  ACTIVE = 2
  COMPLETE = 3
  CANCELED = 4
  FAILED = 5
  SUSPENDED = 6
  UNKNOWN = 7
  NON_CRITICAL_FAIL = 8
  VALUE_MAP = {0 => "SUBMITTED", 1 => "QUEUED", 2 => "ACTIVE", 3 => "COMPLETE", 4 => "CANCELED", 5 => "FAILED", 6 => "SUSPENDED", 7 => "UNKNOWN", 8 => "NON_CRITICAL_FAIL"}
  VALID_VALUES = Set.new([SUBMITTED, QUEUED, ACTIVE, COMPLETE, CANCELED, FAILED, SUSPENDED, UNKNOWN, NON_CRITICAL_FAIL]).freeze
end

# Status: A generic status object.
# 
# state:
#   State .
# 
# timeOfStateChange:
#   time the status was last updated.
# 
# reason:
#   User friendly reason on how the state is inferred.
# 
class ExperimentStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATE = 1
  TIMEOFSTATECHANGE = 2
  REASON = 3
  STATUSID = 4

  FIELDS = {
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::ExperimentState},
    TIMEOFSTATECHANGE => {:type => ::Thrift::Types::I64, :name => 'timeOfStateChange', :optional => true},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason', :optional => true},
    STATUSID => {:type => ::Thrift::Types::STRING, :name => 'statusId', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state is unset!') unless @state
    unless @state.nil? || ::ExperimentState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ProcessStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATE = 1
  TIMEOFSTATECHANGE = 2
  REASON = 3
  STATUSID = 4

  FIELDS = {
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::ProcessState},
    TIMEOFSTATECHANGE => {:type => ::Thrift::Types::I64, :name => 'timeOfStateChange', :optional => true},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason', :optional => true},
    STATUSID => {:type => ::Thrift::Types::STRING, :name => 'statusId', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state is unset!') unless @state
    unless @state.nil? || ::ProcessState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class TaskStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATE = 1
  TIMEOFSTATECHANGE = 2
  REASON = 3
  STATUSID = 4

  FIELDS = {
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::TaskState},
    TIMEOFSTATECHANGE => {:type => ::Thrift::Types::I64, :name => 'timeOfStateChange', :optional => true},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason', :optional => true},
    STATUSID => {:type => ::Thrift::Types::STRING, :name => 'statusId', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state is unset!') unless @state
    unless @state.nil? || ::TaskState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class JobStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSTATE = 1
  TIMEOFSTATECHANGE = 2
  REASON = 3
  STATUSID = 4

  FIELDS = {
    JOBSTATE => {:type => ::Thrift::Types::I32, :name => 'jobState', :enum_class => ::JobState},
    TIMEOFSTATECHANGE => {:type => ::Thrift::Types::I64, :name => 'timeOfStateChange', :optional => true},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason', :optional => true},
    STATUSID => {:type => ::Thrift::Types::STRING, :name => 'statusId', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobState is unset!') unless @jobState
    unless @jobState.nil? || ::JobState::VALID_VALUES.include?(@jobState)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field jobState!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class QueueStatusModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOSTNAME = 1
  QUEUENAME = 2
  QUEUEUP = 3
  RUNNINGJOBS = 4
  QUEUEDJOBS = 5
  TIME = 6

  FIELDS = {
    HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostName'},
    QUEUENAME => {:type => ::Thrift::Types::STRING, :name => 'queueName'},
    QUEUEUP => {:type => ::Thrift::Types::BOOL, :name => 'queueUp'},
    RUNNINGJOBS => {:type => ::Thrift::Types::I32, :name => 'runningJobs'},
    QUEUEDJOBS => {:type => ::Thrift::Types::I32, :name => 'queuedJobs'},
    TIME => {:type => ::Thrift::Types::I64, :name => 'time'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field hostName is unset!') unless @hostName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field queueName is unset!') unless @queueName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field queueUp is unset!') if @queueUp.nil?
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field runningJobs is unset!') unless @runningJobs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field queuedJobs is unset!') unless @queuedJobs
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field time is unset!') unless @time
  end

  ::Thrift::Struct.generate_accessors self
end

