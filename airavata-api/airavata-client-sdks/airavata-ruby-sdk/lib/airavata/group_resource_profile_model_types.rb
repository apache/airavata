#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'airavata_commons_types'
require_relative 'compute_resource_model_types'
require_relative 'data_movement_models_types'


class GroupAccountSSHProvisionerConfig
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RESOURCEID = 1
  GROUPRESOURCEPROFILEID = 2
  CONFIGNAME = 3
  CONFIGVALUE = 4

  FIELDS = {
    RESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'resourceId'},
    GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    CONFIGNAME => {:type => ::Thrift::Types::STRING, :name => 'configName'},
    CONFIGVALUE => {:type => ::Thrift::Types::STRING, :name => 'configValue', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceId is unset!') unless @resourceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field configName is unset!') unless @configName
  end

  ::Thrift::Struct.generate_accessors self
end

class ComputeResourceReservation
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RESERVATIONID = 1
  RESERVATIONNAME = 2
  QUEUENAMES = 3
  STARTTIME = 4
  ENDTIME = 5

  FIELDS = {
    RESERVATIONID => {:type => ::Thrift::Types::STRING, :name => 'reservationId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    RESERVATIONNAME => {:type => ::Thrift::Types::STRING, :name => 'reservationName'},
    QUEUENAMES => {:type => ::Thrift::Types::LIST, :name => 'queueNames', :element => {:type => ::Thrift::Types::STRING}},
    STARTTIME => {:type => ::Thrift::Types::I64, :name => 'startTime'},
    ENDTIME => {:type => ::Thrift::Types::I64, :name => 'endTime'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reservationId is unset!') unless @reservationId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reservationName is unset!') unless @reservationName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field queueNames is unset!') unless @queueNames
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field startTime is unset!') unless @startTime
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field endTime is unset!') unless @endTime
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupComputeResourcePreference
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COMPUTERESOURCEID = 1
  GROUPRESOURCEPROFILEID = 2
  OVERRIDEBYAIRAVATA = 3
  LOGINUSERNAME = 4
  PREFERREDJOBSUBMISSIONPROTOCOL = 5
  PREFERREDDATAMOVEMENTPROTOCOL = 6
  PREFERREDBATCHQUEUE = 7
  SCRATCHLOCATION = 8
  ALLOCATIONPROJECTNUMBER = 9
  RESOURCESPECIFICCREDENTIALSTORETOKEN = 10
  USAGEREPORTINGGATEWAYID = 11
  QUALITYOFSERVICE = 12
  SSHACCOUNTPROVISIONER = 16
  GROUPSSHACCOUNTPROVISIONERCONFIGS = 17
  SSHACCOUNTPROVISIONERADDITIONALINFO = 18
  RESERVATIONS = 19

  FIELDS = {
    COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
    GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    OVERRIDEBYAIRAVATA => {:type => ::Thrift::Types::BOOL, :name => 'overridebyAiravata', :default => true},
    LOGINUSERNAME => {:type => ::Thrift::Types::STRING, :name => 'loginUserName', :optional => true},
    PREFERREDJOBSUBMISSIONPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'preferredJobSubmissionProtocol', :optional => true, :enum_class => ::JobSubmissionProtocol},
    PREFERREDDATAMOVEMENTPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'preferredDataMovementProtocol', :optional => true, :enum_class => ::DataMovementProtocol},
    PREFERREDBATCHQUEUE => {:type => ::Thrift::Types::STRING, :name => 'preferredBatchQueue', :optional => true},
    SCRATCHLOCATION => {:type => ::Thrift::Types::STRING, :name => 'scratchLocation', :optional => true},
    ALLOCATIONPROJECTNUMBER => {:type => ::Thrift::Types::STRING, :name => 'allocationProjectNumber', :optional => true},
    RESOURCESPECIFICCREDENTIALSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'resourceSpecificCredentialStoreToken', :optional => true},
    USAGEREPORTINGGATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'usageReportingGatewayId', :optional => true},
    QUALITYOFSERVICE => {:type => ::Thrift::Types::STRING, :name => 'qualityOfService', :optional => true},
    SSHACCOUNTPROVISIONER => {:type => ::Thrift::Types::STRING, :name => 'sshAccountProvisioner', :optional => true},
    GROUPSSHACCOUNTPROVISIONERCONFIGS => {:type => ::Thrift::Types::LIST, :name => 'groupSSHAccountProvisionerConfigs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::GroupAccountSSHProvisionerConfig}, :optional => true},
    SSHACCOUNTPROVISIONERADDITIONALINFO => {:type => ::Thrift::Types::STRING, :name => 'sshAccountProvisionerAdditionalInfo', :optional => true},
    RESERVATIONS => {:type => ::Thrift::Types::LIST, :name => 'reservations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ComputeResourceReservation}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field overridebyAiravata is unset!') if @overridebyAiravata.nil?
    unless @preferredJobSubmissionProtocol.nil? || ::JobSubmissionProtocol::VALID_VALUES.include?(@preferredJobSubmissionProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field preferredJobSubmissionProtocol!')
    end
    unless @preferredDataMovementProtocol.nil? || ::DataMovementProtocol::VALID_VALUES.include?(@preferredDataMovementProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field preferredDataMovementProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ComputeResourcePolicy
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RESOURCEPOLICYID = 1
  COMPUTERESOURCEID = 2
  GROUPRESOURCEPROFILEID = 3
  ALLOWEDBATCHQUEUES = 4

  FIELDS = {
    RESOURCEPOLICYID => {:type => ::Thrift::Types::STRING, :name => 'resourcePolicyId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
    GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    ALLOWEDBATCHQUEUES => {:type => ::Thrift::Types::LIST, :name => 'allowedBatchQueues', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourcePolicyId is unset!') unless @resourcePolicyId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
  end

  ::Thrift::Struct.generate_accessors self
end

class BatchQueueResourcePolicy
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RESOURCEPOLICYID = 1
  COMPUTERESOURCEID = 2
  GROUPRESOURCEPROFILEID = 3
  QUEUENAME = 4
  MAXALLOWEDNODES = 5
  MAXALLOWEDCORES = 6
  MAXALLOWEDWALLTIME = 7

  FIELDS = {
    RESOURCEPOLICYID => {:type => ::Thrift::Types::STRING, :name => 'resourcePolicyId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId'},
    GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    QUEUENAME => {:type => ::Thrift::Types::STRING, :name => 'queuename', :optional => true},
    MAXALLOWEDNODES => {:type => ::Thrift::Types::I32, :name => 'maxAllowedNodes', :optional => true},
    MAXALLOWEDCORES => {:type => ::Thrift::Types::I32, :name => 'maxAllowedCores', :optional => true},
    MAXALLOWEDWALLTIME => {:type => ::Thrift::Types::I32, :name => 'maxAllowedWalltime', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourcePolicyId is unset!') unless @resourcePolicyId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
  end

  ::Thrift::Struct.generate_accessors self
end

# Group Resource Profile
# 
# gatewayID:
#  Unique identifier for the gateway assigned by Airavata. Corelate this to Airavata Admin API Gateway Registration.
# 
# groupResourceProfileId:
# 
# computeResourcePreferences:
#  List of resource preferences for each of the registered compute resources.
# 
# computeResourcePolicies:
#  List of enforced policies for each of the registered compute resources.
# 
# batchQueueResourcePolicies:
#  List of enforced policies on registered batch queues
# 
# defaultCredentialStoreToken:
#  The default credential store token to use for compute resources that don't specify a resource specific credential store token.
# 
class GroupResourceProfile
  include ::Thrift::Struct, ::Thrift::Struct_Union
  GATEWAYID = 1
  GROUPRESOURCEPROFILEID = 2
  GROUPRESOURCEPROFILENAME = 3
  COMPUTEPREFERENCES = 4
  COMPUTERESOURCEPOLICIES = 5
  BATCHQUEUERESOURCEPOLICIES = 6
  CREATIONTIME = 7
  UPDATEDTIME = 8
  DEFAULTCREDENTIALSTORETOKEN = 9

  FIELDS = {
    GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
    GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    GROUPRESOURCEPROFILENAME => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileName', :optional => true},
    COMPUTEPREFERENCES => {:type => ::Thrift::Types::LIST, :name => 'computePreferences', :element => {:type => ::Thrift::Types::STRUCT, :class => ::GroupComputeResourcePreference}, :optional => true},
    COMPUTERESOURCEPOLICIES => {:type => ::Thrift::Types::LIST, :name => 'computeResourcePolicies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ComputeResourcePolicy}, :optional => true},
    BATCHQUEUERESOURCEPOLICIES => {:type => ::Thrift::Types::LIST, :name => 'batchQueueResourcePolicies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::BatchQueueResourcePolicy}, :optional => true},
    CREATIONTIME => {:type => ::Thrift::Types::I64, :name => 'creationTime', :optional => true},
    UPDATEDTIME => {:type => ::Thrift::Types::I64, :name => 'updatedTime', :optional => true},
    DEFAULTCREDENTIALSTORETOKEN => {:type => ::Thrift::Types::STRING, :name => 'defaultCredentialStoreToken', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field groupResourceProfileId is unset!') unless @groupResourceProfileId
  end

  ::Thrift::Struct.generate_accessors self
end

