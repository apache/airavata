#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'airavata_commons_types'
require_relative 'application_io_models_types'


module ApplicationState
  CREATED = 0
  VALIDATED = 1
  SCHEDULED = 2
  LAUNCHED = 3
  EXECUTING = 4
  CANCELING = 5
  CANCELED = 6
  COMPLETED = 7
  FAILED = 8
  VALUE_MAP = {0 => "CREATED", 1 => "VALIDATED", 2 => "SCHEDULED", 3 => "LAUNCHED", 4 => "EXECUTING", 5 => "CANCELING", 6 => "CANCELED", 7 => "COMPLETED", 8 => "FAILED"}
  VALID_VALUES = Set.new([CREATED, VALIDATED, SCHEDULED, LAUNCHED, EXECUTING, CANCELING, CANCELED, COMPLETED, FAILED]).freeze
end

module ComponentType
  APPLICATION = 0
  HANDLER = 1
  VALUE_MAP = {0 => "APPLICATION", 1 => "HANDLER"}
  VALID_VALUES = Set.new([APPLICATION, HANDLER]).freeze
end

module HandlerType
  FLOW_STARTER = 0
  FLOW_TERMINATOR = 1
  VALUE_MAP = {0 => "FLOW_STARTER", 1 => "FLOW_TERMINATOR"}
  VALID_VALUES = Set.new([FLOW_STARTER, FLOW_TERMINATOR]).freeze
end

module HandlerState
  CREATED = 0
  VALIDATED = 1
  SCHEDULED = 2
  LAUNCHED = 3
  EXECUTING = 4
  CANCELING = 5
  CANCELED = 6
  COMPLETED = 7
  FAILED = 8
  VALUE_MAP = {0 => "CREATED", 1 => "VALIDATED", 2 => "SCHEDULED", 3 => "LAUNCHED", 4 => "EXECUTING", 5 => "CANCELING", 6 => "CANCELED", 7 => "COMPLETED", 8 => "FAILED"}
  VALID_VALUES = Set.new([CREATED, VALIDATED, SCHEDULED, LAUNCHED, EXECUTING, CANCELING, CANCELED, COMPLETED, FAILED]).freeze
end

module WorkflowState
  CREATED = 0
  VALIDATED = 1
  SCHEDULED = 2
  LAUNCHED = 3
  EXECUTING = 4
  PAUSING = 5
  PAUSED = 6
  RESTARTING = 7
  CANCELING = 8
  CANCELED = 9
  COMPLETED = 10
  FAILED = 11
  VALUE_MAP = {0 => "CREATED", 1 => "VALIDATED", 2 => "SCHEDULED", 3 => "LAUNCHED", 4 => "EXECUTING", 5 => "PAUSING", 6 => "PAUSED", 7 => "RESTARTING", 8 => "CANCELING", 9 => "CANCELED", 10 => "COMPLETED", 11 => "FAILED"}
  VALID_VALUES = Set.new([CREATED, VALIDATED, SCHEDULED, LAUNCHED, EXECUTING, PAUSING, PAUSED, RESTARTING, CANCELING, CANCELED, COMPLETED, FAILED]).freeze
end

class ApplicationStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  STATE = 2
  DESCRIPTION = 3
  UPDATEDAT = 4

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id', :optional => true},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::ApplicationState},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state is unset!') unless @state
    unless @state.nil? || ::ApplicationState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class WorkflowApplication
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  PROCESSID = 2
  APPLICATIONINTERFACEID = 3
  COMPUTERESOURCEID = 4
  QUEUENAME = 5
  NODECOUNT = 6
  CORECOUNT = 7
  WALLTIMELIMIT = 8
  PHYSICALMEMORY = 9
  STATUSES = 10
  ERRORS = 11
  CREATEDAT = 12
  UPDATEDAT = 13

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    PROCESSID => {:type => ::Thrift::Types::STRING, :name => 'processId', :optional => true},
    APPLICATIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'applicationInterfaceId', :optional => true},
    COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId', :optional => true},
    QUEUENAME => {:type => ::Thrift::Types::STRING, :name => 'queueName', :optional => true},
    NODECOUNT => {:type => ::Thrift::Types::I32, :name => 'nodeCount', :optional => true},
    CORECOUNT => {:type => ::Thrift::Types::I32, :name => 'coreCount', :optional => true},
    WALLTIMELIMIT => {:type => ::Thrift::Types::I32, :name => 'wallTimeLimit', :optional => true},
    PHYSICALMEMORY => {:type => ::Thrift::Types::I32, :name => 'physicalMemory', :optional => true},
    STATUSES => {:type => ::Thrift::Types::LIST, :name => 'statuses', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ApplicationStatus}, :optional => true},
    ERRORS => {:type => ::Thrift::Types::LIST, :name => 'errors', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ErrorModel}, :optional => true},
    CREATEDAT => {:type => ::Thrift::Types::I64, :name => 'createdAt', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
  end

  ::Thrift::Struct.generate_accessors self
end

class DataBlock
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  VALUE = 2
  TYPE = 3
  CREATEDAT = 4
  UPDATEDAT = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    VALUE => {:type => ::Thrift::Types::STRING, :name => 'value', :optional => true},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :optional => true, :enum_class => ::DataType},
    CREATEDAT => {:type => ::Thrift::Types::I64, :name => 'createdAt', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    unless @type.nil? || ::DataType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class WorkflowConnection
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  DATABLOCK = 2
  FROMTYPE = 3
  FROMID = 4
  FROMOUTPUTNAME = 5
  TOTYPE = 6
  TOID = 7
  TOINPUTNAME = 8
  CREATEDAT = 9
  UPDATEDAT = 10

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    DATABLOCK => {:type => ::Thrift::Types::STRUCT, :name => 'dataBlock', :class => ::DataBlock, :optional => true},
    FROMTYPE => {:type => ::Thrift::Types::I32, :name => 'fromType', :enum_class => ::ComponentType},
    FROMID => {:type => ::Thrift::Types::STRING, :name => 'fromId'},
    FROMOUTPUTNAME => {:type => ::Thrift::Types::STRING, :name => 'fromOutputName'},
    TOTYPE => {:type => ::Thrift::Types::I32, :name => 'toType', :enum_class => ::ComponentType},
    TOID => {:type => ::Thrift::Types::STRING, :name => 'toId'},
    TOINPUTNAME => {:type => ::Thrift::Types::STRING, :name => 'toInputName'},
    CREATEDAT => {:type => ::Thrift::Types::I64, :name => 'createdAt', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fromType is unset!') unless @fromType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fromId is unset!') unless @fromId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fromOutputName is unset!') unless @fromOutputName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field toType is unset!') unless @toType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field toId is unset!') unless @toId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field toInputName is unset!') unless @toInputName
    unless @fromType.nil? || ::ComponentType::VALID_VALUES.include?(@fromType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field fromType!')
    end
    unless @toType.nil? || ::ComponentType::VALID_VALUES.include?(@toType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field toType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class HandlerStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  STATE = 2
  DESCRIPTION = 3
  UPDATEDAT = 4

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id', :optional => true},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::HandlerState},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state is unset!') unless @state
    unless @state.nil? || ::HandlerState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class WorkflowHandler
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  TYPE = 2
  INPUTS = 3
  OUTPUTS = 4
  STATUSES = 5
  ERRORS = 6
  CREATEDAT = 7
  UPDATEDAT = 8

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::HandlerType},
    INPUTS => {:type => ::Thrift::Types::LIST, :name => 'inputs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::InputDataObjectType}, :optional => true},
    OUTPUTS => {:type => ::Thrift::Types::LIST, :name => 'outputs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::OutputDataObjectType}, :optional => true},
    STATUSES => {:type => ::Thrift::Types::LIST, :name => 'statuses', :element => {:type => ::Thrift::Types::STRUCT, :class => ::HandlerStatus}, :optional => true},
    ERRORS => {:type => ::Thrift::Types::LIST, :name => 'errors', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ErrorModel}, :optional => true},
    CREATEDAT => {:type => ::Thrift::Types::I64, :name => 'createdAt', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field type is unset!') unless @type
    unless @type.nil? || ::HandlerType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class WorkflowStatus
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  STATE = 2
  DESCRIPTION = 3
  UPDATEDAT = 4

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id', :optional => true},
    STATE => {:type => ::Thrift::Types::I32, :name => 'state', :enum_class => ::WorkflowState},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state is unset!') unless @state
    unless @state.nil? || ::WorkflowState::VALID_VALUES.include?(@state)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class AiravataWorkflow
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  EXPERIMENTID = 2
  DESCRIPTION = 3
  APPLICATIONS = 4
  HANDLERS = 5
  CONNECTIONS = 6
  STATUSES = 7
  ERRORS = 8
  CREATEDAT = 9
  UPDATEDAT = 10

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    EXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'experimentId'},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
    APPLICATIONS => {:type => ::Thrift::Types::LIST, :name => 'applications', :element => {:type => ::Thrift::Types::STRUCT, :class => ::WorkflowApplication}, :optional => true},
    HANDLERS => {:type => ::Thrift::Types::LIST, :name => 'handlers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::WorkflowHandler}, :optional => true},
    CONNECTIONS => {:type => ::Thrift::Types::LIST, :name => 'connections', :element => {:type => ::Thrift::Types::STRUCT, :class => ::WorkflowConnection}, :optional => true},
    STATUSES => {:type => ::Thrift::Types::LIST, :name => 'statuses', :element => {:type => ::Thrift::Types::STRUCT, :class => ::WorkflowStatus}, :optional => true},
    ERRORS => {:type => ::Thrift::Types::LIST, :name => 'errors', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ErrorModel}, :optional => true},
    CREATEDAT => {:type => ::Thrift::Types::I64, :name => 'createdAt', :optional => true},
    UPDATEDAT => {:type => ::Thrift::Types::I64, :name => 'updatedAt', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experimentId is unset!') unless @experimentId
  end

  ::Thrift::Struct.generate_accessors self
end

