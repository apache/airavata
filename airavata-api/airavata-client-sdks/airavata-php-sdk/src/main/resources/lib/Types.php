<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ResourceJobManager {
  const FORK = 0;
  const PBS = 1;
  const UGE = 2;
  const SLURM = 3;
  static public $__names = array(
    0 => 'FORK',
    1 => 'PBS',
    2 => 'UGE',
    3 => 'SLURM',
  );
}

final class JobSubmissionProtocol {
  const SSH = 0;
  const GSISSH = 1;
  const GRAM = 2;
  const UNICORE = 3;
  static public $__names = array(
    0 => 'SSH',
    1 => 'GSISSH',
    2 => 'GRAM',
    3 => 'UNICORE',
  );
}

final class DataMovementProtocol {
  const SCP = 0;
  const SFTP = 1;
  const GridFTP = 2;
  const UNICORE_STORAGE_SERVICE = 3;
  static public $__names = array(
    0 => 'SCP',
    1 => 'SFTP',
    2 => 'GridFTP',
    3 => 'UNICORE_STORAGE_SERVICE',
  );
}

final class SecurityProtocol {
  const USERNAME_PASSWORD = 0;
  const SSH_KEYS = 1;
  const GSI = 2;
  const KERBEROS = 3;
  const OAUTH = 4;
  static public $__names = array(
    0 => 'USERNAME_PASSWORD',
    1 => 'SSH_KEYS',
    2 => 'GSI',
    3 => 'KERBEROS',
    4 => 'OAUTH',
  );
}

class SCPDataMovement {
  static $_TSPEC;

  public $dataSubmissionDataID = "DO_NOT_SET_AT_CLIENTS";
  public $securityProtocol = null;
  public $sshPort = 22;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dataSubmissionDataID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'securityProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sshPort',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dataSubmissionDataID'])) {
        $this->dataSubmissionDataID = $vals['dataSubmissionDataID'];
      }
      if (isset($vals['securityProtocol'])) {
        $this->securityProtocol = $vals['securityProtocol'];
      }
      if (isset($vals['sshPort'])) {
        $this->sshPort = $vals['sshPort'];
      }
    }
  }

  public function getName() {
    return 'SCPDataMovement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataSubmissionDataID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->securityProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sshPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SCPDataMovement');
    if ($this->dataSubmissionDataID !== null) {
      $xfer += $output->writeFieldBegin('dataSubmissionDataID', TType::STRING, 1);
      $xfer += $output->writeString($this->dataSubmissionDataID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->securityProtocol !== null) {
      $xfer += $output->writeFieldBegin('securityProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->securityProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sshPort !== null) {
      $xfer += $output->writeFieldBegin('sshPort', TType::I32, 3);
      $xfer += $output->writeI32($this->sshPort);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SSHJobSubmission {
  static $_TSPEC;

  public $jobSubmissionDataID = "DO_NOT_SET_AT_CLIENTS";
  public $resourceJobManager = null;
  public $sshPort = 22;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobSubmissionDataID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'resourceJobManager',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sshPort',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobSubmissionDataID'])) {
        $this->jobSubmissionDataID = $vals['jobSubmissionDataID'];
      }
      if (isset($vals['resourceJobManager'])) {
        $this->resourceJobManager = $vals['resourceJobManager'];
      }
      if (isset($vals['sshPort'])) {
        $this->sshPort = $vals['sshPort'];
      }
    }
  }

  public function getName() {
    return 'SSHJobSubmission';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobSubmissionDataID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resourceJobManager);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sshPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SSHJobSubmission');
    if ($this->jobSubmissionDataID !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionDataID', TType::STRING, 1);
      $xfer += $output->writeString($this->jobSubmissionDataID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceJobManager !== null) {
      $xfer += $output->writeFieldBegin('resourceJobManager', TType::I32, 2);
      $xfer += $output->writeI32($this->resourceJobManager);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sshPort !== null) {
      $xfer += $output->writeFieldBegin('sshPort', TType::I32, 3);
      $xfer += $output->writeI32($this->sshPort);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GlobusJobSubmission {
  static $_TSPEC;

  public $jobSubmissionDataID = "DO_NOT_SET_AT_CLIENTS";
  public $securityProtocol = null;
  public $resourceJobManager = null;
  public $globusGateKeeperEndPoint = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobSubmissionDataID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'securityProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'resourceJobManager',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'globusGateKeeperEndPoint',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobSubmissionDataID'])) {
        $this->jobSubmissionDataID = $vals['jobSubmissionDataID'];
      }
      if (isset($vals['securityProtocol'])) {
        $this->securityProtocol = $vals['securityProtocol'];
      }
      if (isset($vals['resourceJobManager'])) {
        $this->resourceJobManager = $vals['resourceJobManager'];
      }
      if (isset($vals['globusGateKeeperEndPoint'])) {
        $this->globusGateKeeperEndPoint = $vals['globusGateKeeperEndPoint'];
      }
    }
  }

  public function getName() {
    return 'GlobusJobSubmission';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobSubmissionDataID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->securityProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resourceJobManager);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->globusGateKeeperEndPoint = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->globusGateKeeperEndPoint []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GlobusJobSubmission');
    if ($this->jobSubmissionDataID !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionDataID', TType::STRING, 1);
      $xfer += $output->writeString($this->jobSubmissionDataID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->securityProtocol !== null) {
      $xfer += $output->writeFieldBegin('securityProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->securityProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceJobManager !== null) {
      $xfer += $output->writeFieldBegin('resourceJobManager', TType::I32, 3);
      $xfer += $output->writeI32($this->resourceJobManager);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->globusGateKeeperEndPoint !== null) {
      if (!is_array($this->globusGateKeeperEndPoint)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('globusGateKeeperEndPoint', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->globusGateKeeperEndPoint));
        {
          foreach ($this->globusGateKeeperEndPoint as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GSISSHJobSubmission {
  static $_TSPEC;

  public $jobSubmissionDataID = "DO_NOT_SET_AT_CLIENTS";
  public $resourceJobManager = null;
  public $sshPort = 22;
  public $exports = null;
  public $preJobCommands = null;
  public $postJobCommands = null;
  public $installedPath = null;
  public $monitorMode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobSubmissionDataID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'resourceJobManager',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sshPort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'exports',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'preJobCommands',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'postJobCommands',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'installedPath',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'monitorMode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobSubmissionDataID'])) {
        $this->jobSubmissionDataID = $vals['jobSubmissionDataID'];
      }
      if (isset($vals['resourceJobManager'])) {
        $this->resourceJobManager = $vals['resourceJobManager'];
      }
      if (isset($vals['sshPort'])) {
        $this->sshPort = $vals['sshPort'];
      }
      if (isset($vals['exports'])) {
        $this->exports = $vals['exports'];
      }
      if (isset($vals['preJobCommands'])) {
        $this->preJobCommands = $vals['preJobCommands'];
      }
      if (isset($vals['postJobCommands'])) {
        $this->postJobCommands = $vals['postJobCommands'];
      }
      if (isset($vals['installedPath'])) {
        $this->installedPath = $vals['installedPath'];
      }
      if (isset($vals['monitorMode'])) {
        $this->monitorMode = $vals['monitorMode'];
      }
    }
  }

  public function getName() {
    return 'GSISSHJobSubmission';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobSubmissionDataID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resourceJobManager);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sshPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->exports = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readSetBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              if (is_scalar($elem12)) {
                $this->exports[$elem12] = true;
              } else {
                $this->exports []= $elem12;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->preJobCommands = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $xfer += $input->readString($elem18);
              $this->preJobCommands []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->postJobCommands = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $xfer += $input->readString($elem24);
              $this->postJobCommands []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->installedPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->monitorMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GSISSHJobSubmission');
    if ($this->jobSubmissionDataID !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionDataID', TType::STRING, 1);
      $xfer += $output->writeString($this->jobSubmissionDataID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceJobManager !== null) {
      $xfer += $output->writeFieldBegin('resourceJobManager', TType::I32, 2);
      $xfer += $output->writeI32($this->resourceJobManager);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sshPort !== null) {
      $xfer += $output->writeFieldBegin('sshPort', TType::I32, 3);
      $xfer += $output->writeI32($this->sshPort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exports !== null) {
      if (!is_array($this->exports)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exports', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->exports));
        {
          foreach ($this->exports as $iter25 => $iter26)
          {
            if (is_scalar($iter26)) {
            $xfer += $output->writeString($iter25);
            } else {
            $xfer += $output->writeString($iter26);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preJobCommands !== null) {
      if (!is_array($this->preJobCommands)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('preJobCommands', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->preJobCommands));
        {
          foreach ($this->preJobCommands as $iter27)
          {
            $xfer += $output->writeString($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postJobCommands !== null) {
      if (!is_array($this->postJobCommands)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('postJobCommands', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->postJobCommands));
        {
          foreach ($this->postJobCommands as $iter28)
          {
            $xfer += $output->writeString($iter28);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->installedPath !== null) {
      $xfer += $output->writeFieldBegin('installedPath', TType::STRING, 7);
      $xfer += $output->writeString($this->installedPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->monitorMode !== null) {
      $xfer += $output->writeFieldBegin('monitorMode', TType::STRING, 8);
      $xfer += $output->writeString($this->monitorMode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ComputeResourceDescription {
  static $_TSPEC;

  public $isEmpty = false;
  public $resourceId = "DO_NOT_SET_AT_CLIENTS";
  public $hostName = null;
  public $hostAliases = null;
  public $ipAddresses = null;
  public $resourceDescription = null;
  public $scratchLocation = null;
  public $preferredJobSubmissionProtocol = null;
  public $jobSubmissionProtocols = null;
  public $dataMovementProtocols = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isEmpty',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'resourceId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'hostName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'hostAliases',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'ipAddresses',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'resourceDescription',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'scratchLocation',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'preferredJobSubmissionProtocol',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'jobSubmissionProtocols',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        10 => array(
          'var' => 'dataMovementProtocols',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isEmpty'])) {
        $this->isEmpty = $vals['isEmpty'];
      }
      if (isset($vals['resourceId'])) {
        $this->resourceId = $vals['resourceId'];
      }
      if (isset($vals['hostName'])) {
        $this->hostName = $vals['hostName'];
      }
      if (isset($vals['hostAliases'])) {
        $this->hostAliases = $vals['hostAliases'];
      }
      if (isset($vals['ipAddresses'])) {
        $this->ipAddresses = $vals['ipAddresses'];
      }
      if (isset($vals['resourceDescription'])) {
        $this->resourceDescription = $vals['resourceDescription'];
      }
      if (isset($vals['scratchLocation'])) {
        $this->scratchLocation = $vals['scratchLocation'];
      }
      if (isset($vals['preferredJobSubmissionProtocol'])) {
        $this->preferredJobSubmissionProtocol = $vals['preferredJobSubmissionProtocol'];
      }
      if (isset($vals['jobSubmissionProtocols'])) {
        $this->jobSubmissionProtocols = $vals['jobSubmissionProtocols'];
      }
      if (isset($vals['dataMovementProtocols'])) {
        $this->dataMovementProtocols = $vals['dataMovementProtocols'];
      }
    }
  }

  public function getName() {
    return 'ComputeResourceDescription';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isEmpty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->hostAliases = array();
            $_size29 = 0;
            $_etype32 = 0;
            $xfer += $input->readSetBegin($_etype32, $_size29);
            for ($_i33 = 0; $_i33 < $_size29; ++$_i33)
            {
              $elem34 = null;
              $xfer += $input->readString($elem34);
              if (is_scalar($elem34)) {
                $this->hostAliases[$elem34] = true;
              } else {
                $this->hostAliases []= $elem34;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::SET) {
            $this->ipAddresses = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readSetBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $xfer += $input->readString($elem40);
              if (is_scalar($elem40)) {
                $this->ipAddresses[$elem40] = true;
              } else {
                $this->ipAddresses []= $elem40;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resourceDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scratchLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preferredJobSubmissionProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->jobSubmissionProtocols = array();
            $_size41 = 0;
            $_ktype42 = 0;
            $_vtype43 = 0;
            $xfer += $input->readMapBegin($_ktype42, $_vtype43, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $key46 = '';
              $val47 = 0;
              $xfer += $input->readString($key46);
              $xfer += $input->readI32($val47);
              $this->jobSubmissionProtocols[$key46] = $val47;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->dataMovementProtocols = array();
            $_size48 = 0;
            $_ktype49 = 0;
            $_vtype50 = 0;
            $xfer += $input->readMapBegin($_ktype49, $_vtype50, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $key53 = '';
              $val54 = 0;
              $xfer += $input->readString($key53);
              $xfer += $input->readI32($val54);
              $this->dataMovementProtocols[$key53] = $val54;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ComputeResourceDescription');
    if ($this->isEmpty !== null) {
      $xfer += $output->writeFieldBegin('isEmpty', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isEmpty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceId !== null) {
      $xfer += $output->writeFieldBegin('resourceId', TType::STRING, 2);
      $xfer += $output->writeString($this->resourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostName !== null) {
      $xfer += $output->writeFieldBegin('hostName', TType::STRING, 3);
      $xfer += $output->writeString($this->hostName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostAliases !== null) {
      if (!is_array($this->hostAliases)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hostAliases', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->hostAliases));
        {
          foreach ($this->hostAliases as $iter55 => $iter56)
          {
            if (is_scalar($iter56)) {
            $xfer += $output->writeString($iter55);
            } else {
            $xfer += $output->writeString($iter56);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipAddresses !== null) {
      if (!is_array($this->ipAddresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ipAddresses', TType::SET, 5);
      {
        $output->writeSetBegin(TType::STRING, count($this->ipAddresses));
        {
          foreach ($this->ipAddresses as $iter57 => $iter58)
          {
            if (is_scalar($iter58)) {
            $xfer += $output->writeString($iter57);
            } else {
            $xfer += $output->writeString($iter58);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceDescription !== null) {
      $xfer += $output->writeFieldBegin('resourceDescription', TType::STRING, 6);
      $xfer += $output->writeString($this->resourceDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scratchLocation !== null) {
      $xfer += $output->writeFieldBegin('scratchLocation', TType::STRING, 7);
      $xfer += $output->writeString($this->scratchLocation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferredJobSubmissionProtocol !== null) {
      $xfer += $output->writeFieldBegin('preferredJobSubmissionProtocol', TType::STRING, 8);
      $xfer += $output->writeString($this->preferredJobSubmissionProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobSubmissionProtocols !== null) {
      if (!is_array($this->jobSubmissionProtocols)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jobSubmissionProtocols', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->jobSubmissionProtocols));
        {
          foreach ($this->jobSubmissionProtocols as $kiter59 => $viter60)
          {
            $xfer += $output->writeString($kiter59);
            $xfer += $output->writeI32($viter60);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataMovementProtocols !== null) {
      if (!is_array($this->dataMovementProtocols)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dataMovementProtocols', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->dataMovementProtocols));
        {
          foreach ($this->dataMovementProtocols as $kiter61 => $viter62)
          {
            $xfer += $output->writeString($kiter61);
            $xfer += $output->writeI32($viter62);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplicationDescriptor {
  static $_TSPEC;

  public $applicationDescriptorId = "DO_NOT_SET_AT_CLIENTS";
  public $applicationDescriptorData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationDescriptorId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'applicationDescriptorData',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationDescriptorId'])) {
        $this->applicationDescriptorId = $vals['applicationDescriptorId'];
      }
      if (isset($vals['applicationDescriptorData'])) {
        $this->applicationDescriptorData = $vals['applicationDescriptorData'];
      }
    }
  }

  public function getName() {
    return 'ApplicationDescriptor';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationDescriptorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationDescriptorData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationDescriptor');
    if ($this->applicationDescriptorId !== null) {
      $xfer += $output->writeFieldBegin('applicationDescriptorId', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationDescriptorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationDescriptorData !== null) {
      $xfer += $output->writeFieldBegin('applicationDescriptorData', TType::STRING, 2);
      $xfer += $output->writeString($this->applicationDescriptorData);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplicationDeployment {
  static $_TSPEC;

  public $deploymentId = "DO_NOT_SET_AT_CLIENTS";
  public $computeResourceDescription = null;
  public $applicationDescriptor = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deploymentId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'computeResourceDescription',
          'type' => TType::STRUCT,
          'class' => '\ComputeResourceDescription',
          ),
        3 => array(
          'var' => 'applicationDescriptor',
          'type' => TType::STRUCT,
          'class' => '\ApplicationDescriptor',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deploymentId'])) {
        $this->deploymentId = $vals['deploymentId'];
      }
      if (isset($vals['computeResourceDescription'])) {
        $this->computeResourceDescription = $vals['computeResourceDescription'];
      }
      if (isset($vals['applicationDescriptor'])) {
        $this->applicationDescriptor = $vals['applicationDescriptor'];
      }
    }
  }

  public function getName() {
    return 'ApplicationDeployment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deploymentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->computeResourceDescription = new \ComputeResourceDescription();
            $xfer += $this->computeResourceDescription->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->applicationDescriptor = new \ApplicationDescriptor();
            $xfer += $this->applicationDescriptor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationDeployment');
    if ($this->deploymentId !== null) {
      $xfer += $output->writeFieldBegin('deploymentId', TType::STRING, 1);
      $xfer += $output->writeString($this->deploymentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->computeResourceDescription !== null) {
      if (!is_object($this->computeResourceDescription)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('computeResourceDescription', TType::STRUCT, 2);
      $xfer += $this->computeResourceDescription->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationDescriptor !== null) {
      if (!is_object($this->applicationDescriptor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationDescriptor', TType::STRUCT, 3);
      $xfer += $this->applicationDescriptor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplicationInterface {
  static $_TSPEC;

  public $applicationInterfaceId = "DO_NOT_SET_AT_CLIENTS";
  public $applicationInterfaceData = null;
  public $applicationDeployments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationInterfaceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'applicationInterfaceData',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'applicationDeployments',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ApplicationDeployment',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationInterfaceId'])) {
        $this->applicationInterfaceId = $vals['applicationInterfaceId'];
      }
      if (isset($vals['applicationInterfaceData'])) {
        $this->applicationInterfaceData = $vals['applicationInterfaceData'];
      }
      if (isset($vals['applicationDeployments'])) {
        $this->applicationDeployments = $vals['applicationDeployments'];
      }
    }
  }

  public function getName() {
    return 'ApplicationInterface';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationInterfaceData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->applicationDeployments = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \ApplicationDeployment();
              $xfer += $elem68->read($input);
              $this->applicationDeployments []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationInterface');
    if ($this->applicationInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('applicationInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationInterfaceData !== null) {
      $xfer += $output->writeFieldBegin('applicationInterfaceData', TType::STRING, 2);
      $xfer += $output->writeString($this->applicationInterfaceData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationDeployments !== null) {
      if (!is_array($this->applicationDeployments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationDeployments', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->applicationDeployments));
        {
          foreach ($this->applicationDeployments as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

$GLOBALS['applicationCatalogDataModel_CONSTANTS']['DEFAULT_ID'] = "DO_NOT_SET_AT_CLIENTS";


