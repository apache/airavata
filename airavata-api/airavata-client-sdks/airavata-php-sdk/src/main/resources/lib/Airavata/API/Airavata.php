<?php
namespace Airavata\API;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface AiravataIf {
  public function GetAPIVersion();
  public function createProject(\Airavata\Model\Workspace\Project $project);
  public function updateProject(\Airavata\Model\Workspace\Project $project);
  public function getProject($projectId);
  public function getAllUserProjects($userName);
  public function getAllExperimentsInProject($projectId);
  public function getAllUserExperiments($userName);
  public function createExperiment(\Airavata\Model\Workspace\Experiment\Experiment $experiment);
  public function getExperiment($airavataExperimentId);
  public function updateExperiment($airavataExperimentId, \Airavata\Model\Workspace\Experiment\Experiment $experiment);
  public function updateExperimentConfiguration($airavataExperimentId, \Airavata\Model\Workspace\Experiment\UserConfigurationData $userConfiguration);
  public function updateResourceScheduleing($airavataExperimentId, \Airavata\Model\Workspace\Experiment\ComputationalResourceScheduling $resourceScheduling);
  public function validateExperiment($airavataExperimentId);
  public function launchExperiment($airavataExperimentId, $airavataCredStoreToken);
  public function getExperimentStatus($airavataExperimentId);
  public function getExperimentOutputs($airavataExperimentId);
  public function getJobStatuses($airavataExperimentId);
  public function cloneExperiment($existingExperimentID, $newExperiementName);
  public function terminateExperiment($airavataExperimentId);
}

class AiravataClient implements \Airavata\API\AiravataIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function GetAPIVersion()
  {
    $this->send_GetAPIVersion();
    return $this->recv_GetAPIVersion();
  }

  public function send_GetAPIVersion()
  {
    $args = new \Airavata\API\Airavata_GetAPIVersion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetAPIVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetAPIVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetAPIVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_GetAPIVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_GetAPIVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetAPIVersion failed: unknown result");
  }

  public function createProject(\Airavata\Model\Workspace\Project $project)
  {
    $this->send_createProject($project);
    return $this->recv_createProject();
  }

  public function send_createProject(\Airavata\Model\Workspace\Project $project)
  {
    $args = new \Airavata\API\Airavata_createProject_args();
    $args->project = $project;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createProject', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createProject', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createProject()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_createProject_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_createProject_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("createProject failed: unknown result");
  }

  public function updateProject(\Airavata\Model\Workspace\Project $project)
  {
    $this->send_updateProject($project);
    $this->recv_updateProject();
  }

  public function send_updateProject(\Airavata\Model\Workspace\Project $project)
  {
    $args = new \Airavata\API\Airavata_updateProject_args();
    $args->project = $project;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateProject', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateProject', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateProject()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_updateProject_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_updateProject_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    return;
  }

  public function getProject($projectId)
  {
    $this->send_getProject($projectId);
    return $this->recv_getProject();
  }

  public function send_getProject($projectId)
  {
    $args = new \Airavata\API\Airavata_getProject_args();
    $args->projectId = $projectId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getProject', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getProject', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getProject()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getProject_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getProject_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("getProject failed: unknown result");
  }

  public function getAllUserProjects($userName)
  {
    $this->send_getAllUserProjects($userName);
    return $this->recv_getAllUserProjects();
  }

  public function send_getAllUserProjects($userName)
  {
    $args = new \Airavata\API\Airavata_getAllUserProjects_args();
    $args->userName = $userName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllUserProjects', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllUserProjects', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllUserProjects()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getAllUserProjects_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getAllUserProjects_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("getAllUserProjects failed: unknown result");
  }

  public function getAllExperimentsInProject($projectId)
  {
    $this->send_getAllExperimentsInProject($projectId);
    return $this->recv_getAllExperimentsInProject();
  }

  public function send_getAllExperimentsInProject($projectId)
  {
    $args = new \Airavata\API\Airavata_getAllExperimentsInProject_args();
    $args->projectId = $projectId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllExperimentsInProject', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllExperimentsInProject', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllExperimentsInProject()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getAllExperimentsInProject_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getAllExperimentsInProject_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("getAllExperimentsInProject failed: unknown result");
  }

  public function getAllUserExperiments($userName)
  {
    $this->send_getAllUserExperiments($userName);
    return $this->recv_getAllUserExperiments();
  }

  public function send_getAllUserExperiments($userName)
  {
    $args = new \Airavata\API\Airavata_getAllUserExperiments_args();
    $args->userName = $userName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllUserExperiments', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllUserExperiments', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllUserExperiments()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getAllUserExperiments_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getAllUserExperiments_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("getAllUserExperiments failed: unknown result");
  }

  public function createExperiment(\Airavata\Model\Workspace\Experiment\Experiment $experiment)
  {
    $this->send_createExperiment($experiment);
    return $this->recv_createExperiment();
  }

  public function send_createExperiment(\Airavata\Model\Workspace\Experiment\Experiment $experiment)
  {
    $args = new \Airavata\API\Airavata_createExperiment_args();
    $args->experiment = $experiment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createExperiment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createExperiment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createExperiment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_createExperiment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_createExperiment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("createExperiment failed: unknown result");
  }

  public function getExperiment($airavataExperimentId)
  {
    $this->send_getExperiment($airavataExperimentId);
    return $this->recv_getExperiment();
  }

  public function send_getExperiment($airavataExperimentId)
  {
    $args = new \Airavata\API\Airavata_getExperiment_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getExperiment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getExperiment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getExperiment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getExperiment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getExperiment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->enf !== null) {
      throw $result->enf;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("getExperiment failed: unknown result");
  }

  public function updateExperiment($airavataExperimentId, \Airavata\Model\Workspace\Experiment\Experiment $experiment)
  {
    $this->send_updateExperiment($airavataExperimentId, $experiment);
    $this->recv_updateExperiment();
  }

  public function send_updateExperiment($airavataExperimentId, \Airavata\Model\Workspace\Experiment\Experiment $experiment)
  {
    $args = new \Airavata\API\Airavata_updateExperiment_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $args->experiment = $experiment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateExperiment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateExperiment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateExperiment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_updateExperiment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_updateExperiment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->enf !== null) {
      throw $result->enf;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    return;
  }

  public function updateExperimentConfiguration($airavataExperimentId, \Airavata\Model\Workspace\Experiment\UserConfigurationData $userConfiguration)
  {
    $this->send_updateExperimentConfiguration($airavataExperimentId, $userConfiguration);
    $this->recv_updateExperimentConfiguration();
  }

  public function send_updateExperimentConfiguration($airavataExperimentId, \Airavata\Model\Workspace\Experiment\UserConfigurationData $userConfiguration)
  {
    $args = new \Airavata\API\Airavata_updateExperimentConfiguration_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $args->userConfiguration = $userConfiguration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateExperimentConfiguration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateExperimentConfiguration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateExperimentConfiguration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_updateExperimentConfiguration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_updateExperimentConfiguration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function updateResourceScheduleing($airavataExperimentId, \Airavata\Model\Workspace\Experiment\ComputationalResourceScheduling $resourceScheduling)
  {
    $this->send_updateResourceScheduleing($airavataExperimentId, $resourceScheduling);
    $this->recv_updateResourceScheduleing();
  }

  public function send_updateResourceScheduleing($airavataExperimentId, \Airavata\Model\Workspace\Experiment\ComputationalResourceScheduling $resourceScheduling)
  {
    $args = new \Airavata\API\Airavata_updateResourceScheduleing_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $args->resourceScheduling = $resourceScheduling;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateResourceScheduleing', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateResourceScheduleing', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateResourceScheduleing()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_updateResourceScheduleing_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_updateResourceScheduleing_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function validateExperiment($airavataExperimentId)
  {
    $this->send_validateExperiment($airavataExperimentId);
    return $this->recv_validateExperiment();
  }

  public function send_validateExperiment($airavataExperimentId)
  {
    $args = new \Airavata\API\Airavata_validateExperiment_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validateExperiment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validateExperiment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validateExperiment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_validateExperiment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_validateExperiment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->enf !== null) {
      throw $result->enf;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("validateExperiment failed: unknown result");
  }

  public function launchExperiment($airavataExperimentId, $airavataCredStoreToken)
  {
    $this->send_launchExperiment($airavataExperimentId, $airavataCredStoreToken);
    $this->recv_launchExperiment();
  }

  public function send_launchExperiment($airavataExperimentId, $airavataCredStoreToken)
  {
    $args = new \Airavata\API\Airavata_launchExperiment_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $args->airavataCredStoreToken = $airavataCredStoreToken;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'launchExperiment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('launchExperiment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_launchExperiment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_launchExperiment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_launchExperiment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->enf !== null) {
      throw $result->enf;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    if ($result->lve !== null) {
      throw $result->lve;
    }
    return;
  }

  public function getExperimentStatus($airavataExperimentId)
  {
    $this->send_getExperimentStatus($airavataExperimentId);
    return $this->recv_getExperimentStatus();
  }

  public function send_getExperimentStatus($airavataExperimentId)
  {
    $args = new \Airavata\API\Airavata_getExperimentStatus_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getExperimentStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getExperimentStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getExperimentStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getExperimentStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getExperimentStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->enf !== null) {
      throw $result->enf;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("getExperimentStatus failed: unknown result");
  }

  public function getExperimentOutputs($airavataExperimentId)
  {
    $this->send_getExperimentOutputs($airavataExperimentId);
    return $this->recv_getExperimentOutputs();
  }

  public function send_getExperimentOutputs($airavataExperimentId)
  {
    $args = new \Airavata\API\Airavata_getExperimentOutputs_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getExperimentOutputs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getExperimentOutputs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getExperimentOutputs()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getExperimentOutputs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getExperimentOutputs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getExperimentOutputs failed: unknown result");
  }

  public function getJobStatuses($airavataExperimentId)
  {
    $this->send_getJobStatuses($airavataExperimentId);
    return $this->recv_getJobStatuses();
  }

  public function send_getJobStatuses($airavataExperimentId)
  {
    $args = new \Airavata\API\Airavata_getJobStatuses_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getJobStatuses', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getJobStatuses', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getJobStatuses()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_getJobStatuses_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_getJobStatuses_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getJobStatuses failed: unknown result");
  }

  public function cloneExperiment($existingExperimentID, $newExperiementName)
  {
    $this->send_cloneExperiment($existingExperimentID, $newExperiementName);
    return $this->recv_cloneExperiment();
  }

  public function send_cloneExperiment($existingExperimentID, $newExperiementName)
  {
    $args = new \Airavata\API\Airavata_cloneExperiment_args();
    $args->existingExperimentID = $existingExperimentID;
    $args->newExperiementName = $newExperiementName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cloneExperiment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cloneExperiment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cloneExperiment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_cloneExperiment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_cloneExperiment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->enf !== null) {
      throw $result->enf;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    throw new \Exception("cloneExperiment failed: unknown result");
  }

  public function terminateExperiment($airavataExperimentId)
  {
    $this->send_terminateExperiment($airavataExperimentId);
    $this->recv_terminateExperiment();
  }

  public function send_terminateExperiment($airavataExperimentId)
  {
    $args = new \Airavata\API\Airavata_terminateExperiment_args();
    $args->airavataExperimentId = $airavataExperimentId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'terminateExperiment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('terminateExperiment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_terminateExperiment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Airavata\API\Airavata_terminateExperiment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Airavata\API\Airavata_terminateExperiment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ire !== null) {
      throw $result->ire;
    }
    if ($result->enf !== null) {
      throw $result->enf;
    }
    if ($result->ace !== null) {
      throw $result->ace;
    }
    if ($result->ase !== null) {
      throw $result->ase;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Airavata_GetAPIVersion_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Airavata_GetAPIVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_GetAPIVersion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_GetAPIVersion_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Airavata_GetAPIVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_GetAPIVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_createProject_args {
  static $_TSPEC;

  public $project = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'project',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Project',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['project'])) {
        $this->project = $vals['project'];
      }
    }
  }

  public function getName() {
    return 'Airavata_createProject_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->project = new \Airavata\Model\Workspace\Project();
            $xfer += $this->project->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_createProject_args');
    if ($this->project !== null) {
      if (!is_object($this->project)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('project', TType::STRUCT, 1);
      $xfer += $this->project->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_createProject_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        3 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_createProject_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_createProject_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 2);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 3);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateProject_args {
  static $_TSPEC;

  public $project = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'project',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Project',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['project'])) {
        $this->project = $vals['project'];
      }
    }
  }

  public function getName() {
    return 'Airavata_updateProject_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->project = new \Airavata\Model\Workspace\Project();
            $xfer += $this->project->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateProject_args');
    if ($this->project !== null) {
      if (!is_object($this->project)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('project', TType::STRUCT, 1);
      $xfer += $this->project->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateProject_result {
  static $_TSPEC;

  public $ire = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        3 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_updateProject_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateProject_result');
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 2);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 3);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getProject_args {
  static $_TSPEC;

  public $projectId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projectId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projectId'])) {
        $this->projectId = $vals['projectId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getProject_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->projectId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getProject_args');
    if ($this->projectId !== null) {
      $xfer += $output->writeFieldBegin('projectId', TType::STRING, 1);
      $xfer += $output->writeString($this->projectId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getProject_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Project',
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        3 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getProject_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Airavata\Model\Workspace\Project();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getProject_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 2);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 3);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getAllUserProjects_args {
  static $_TSPEC;

  public $userName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getAllUserProjects_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getAllUserProjects_args');
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 1);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getAllUserProjects_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\Workspace\Project',
            ),
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        3 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getAllUserProjects_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Airavata\Model\Workspace\Project();
              $xfer += $elem5->read($input);
              $this->success []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getAllUserProjects_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 2);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 3);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getAllExperimentsInProject_args {
  static $_TSPEC;

  public $projectId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projectId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projectId'])) {
        $this->projectId = $vals['projectId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getAllExperimentsInProject_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->projectId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getAllExperimentsInProject_args');
    if ($this->projectId !== null) {
      $xfer += $output->writeFieldBegin('projectId', TType::STRING, 1);
      $xfer += $output->writeString($this->projectId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getAllExperimentsInProject_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\Workspace\Experiment\Experiment',
            ),
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        3 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getAllExperimentsInProject_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Airavata\Model\Workspace\Experiment\Experiment();
              $xfer += $elem12->read($input);
              $this->success []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getAllExperimentsInProject_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 2);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 3);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getAllUserExperiments_args {
  static $_TSPEC;

  public $userName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getAllUserExperiments_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getAllUserExperiments_args');
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 1);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getAllUserExperiments_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\Workspace\Experiment\Experiment',
            ),
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        3 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getAllUserExperiments_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \Airavata\Model\Workspace\Experiment\Experiment();
              $xfer += $elem19->read($input);
              $this->success []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getAllUserExperiments_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 2);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 3);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_createExperiment_args {
  static $_TSPEC;

  public $experiment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'experiment',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Experiment\Experiment',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['experiment'])) {
        $this->experiment = $vals['experiment'];
      }
    }
  }

  public function getName() {
    return 'Airavata_createExperiment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->experiment = new \Airavata\Model\Workspace\Experiment\Experiment();
            $xfer += $this->experiment->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_createExperiment_args');
    if ($this->experiment !== null) {
      if (!is_object($this->experiment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('experiment', TType::STRUCT, 1);
      $xfer += $this->experiment->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_createExperiment_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        3 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_createExperiment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_createExperiment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 2);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 3);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getExperiment_args {
  static $_TSPEC;

  public $airavataExperimentId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getExperiment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getExperiment_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getExperiment_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $enf = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Experiment\Experiment',
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'enf',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\ExperimentNotFoundException',
          ),
        3 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        4 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['enf'])) {
        $this->enf = $vals['enf'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getExperiment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Airavata\Model\Workspace\Experiment\Experiment();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->enf = new \Airavata\API\Error\ExperimentNotFoundException();
            $xfer += $this->enf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getExperiment_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enf !== null) {
      $xfer += $output->writeFieldBegin('enf', TType::STRUCT, 2);
      $xfer += $this->enf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 3);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 4);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateExperiment_args {
  static $_TSPEC;

  public $airavataExperimentId = null;
  public $experiment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'experiment',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Experiment\Experiment',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
      if (isset($vals['experiment'])) {
        $this->experiment = $vals['experiment'];
      }
    }
  }

  public function getName() {
    return 'Airavata_updateExperiment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->experiment = new \Airavata\Model\Workspace\Experiment\Experiment();
            $xfer += $this->experiment->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateExperiment_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->experiment !== null) {
      if (!is_object($this->experiment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('experiment', TType::STRUCT, 2);
      $xfer += $this->experiment->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateExperiment_result {
  static $_TSPEC;

  public $ire = null;
  public $enf = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'enf',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\ExperimentNotFoundException',
          ),
        3 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        4 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['enf'])) {
        $this->enf = $vals['enf'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_updateExperiment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->enf = new \Airavata\API\Error\ExperimentNotFoundException();
            $xfer += $this->enf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateExperiment_result');
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enf !== null) {
      $xfer += $output->writeFieldBegin('enf', TType::STRUCT, 2);
      $xfer += $this->enf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 3);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 4);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateExperimentConfiguration_args {
  static $_TSPEC;

  public $airavataExperimentId = null;
  public $userConfiguration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userConfiguration',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Experiment\UserConfigurationData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
      if (isset($vals['userConfiguration'])) {
        $this->userConfiguration = $vals['userConfiguration'];
      }
    }
  }

  public function getName() {
    return 'Airavata_updateExperimentConfiguration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->userConfiguration = new \Airavata\Model\Workspace\Experiment\UserConfigurationData();
            $xfer += $this->userConfiguration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateExperimentConfiguration_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userConfiguration !== null) {
      if (!is_object($this->userConfiguration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userConfiguration', TType::STRUCT, 2);
      $xfer += $this->userConfiguration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateExperimentConfiguration_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Airavata_updateExperimentConfiguration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateExperimentConfiguration_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateResourceScheduleing_args {
  static $_TSPEC;

  public $airavataExperimentId = null;
  public $resourceScheduling = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'resourceScheduling',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Experiment\ComputationalResourceScheduling',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
      if (isset($vals['resourceScheduling'])) {
        $this->resourceScheduling = $vals['resourceScheduling'];
      }
    }
  }

  public function getName() {
    return 'Airavata_updateResourceScheduleing_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->resourceScheduling = new \Airavata\Model\Workspace\Experiment\ComputationalResourceScheduling();
            $xfer += $this->resourceScheduling->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateResourceScheduleing_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceScheduling !== null) {
      if (!is_object($this->resourceScheduling)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('resourceScheduling', TType::STRUCT, 2);
      $xfer += $this->resourceScheduling->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_updateResourceScheduleing_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Airavata_updateResourceScheduleing_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_updateResourceScheduleing_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_validateExperiment_args {
  static $_TSPEC;

  public $airavataExperimentId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_validateExperiment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_validateExperiment_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_validateExperiment_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $enf = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'enf',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\ExperimentNotFoundException',
          ),
        3 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        4 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['enf'])) {
        $this->enf = $vals['enf'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_validateExperiment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->enf = new \Airavata\API\Error\ExperimentNotFoundException();
            $xfer += $this->enf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_validateExperiment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enf !== null) {
      $xfer += $output->writeFieldBegin('enf', TType::STRUCT, 2);
      $xfer += $this->enf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 3);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 4);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_launchExperiment_args {
  static $_TSPEC;

  public $airavataExperimentId = null;
  public $airavataCredStoreToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'airavataCredStoreToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
      if (isset($vals['airavataCredStoreToken'])) {
        $this->airavataCredStoreToken = $vals['airavataCredStoreToken'];
      }
    }
  }

  public function getName() {
    return 'Airavata_launchExperiment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataCredStoreToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_launchExperiment_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->airavataCredStoreToken !== null) {
      $xfer += $output->writeFieldBegin('airavataCredStoreToken', TType::STRING, 2);
      $xfer += $output->writeString($this->airavataCredStoreToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_launchExperiment_result {
  static $_TSPEC;

  public $ire = null;
  public $enf = null;
  public $ace = null;
  public $ase = null;
  public $lve = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'enf',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\ExperimentNotFoundException',
          ),
        3 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        4 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        5 => array(
          'var' => 'lve',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\LaunchValidationException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['enf'])) {
        $this->enf = $vals['enf'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
      if (isset($vals['lve'])) {
        $this->lve = $vals['lve'];
      }
    }
  }

  public function getName() {
    return 'Airavata_launchExperiment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->enf = new \Airavata\API\Error\ExperimentNotFoundException();
            $xfer += $this->enf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->lve = new \Airavata\API\Error\LaunchValidationException();
            $xfer += $this->lve->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_launchExperiment_result');
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enf !== null) {
      $xfer += $output->writeFieldBegin('enf', TType::STRUCT, 2);
      $xfer += $this->enf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 3);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 4);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lve !== null) {
      $xfer += $output->writeFieldBegin('lve', TType::STRUCT, 5);
      $xfer += $this->lve->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getExperimentStatus_args {
  static $_TSPEC;

  public $airavataExperimentId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getExperimentStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getExperimentStatus_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getExperimentStatus_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $enf = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Airavata\Model\Workspace\Experiment\ExperimentStatus',
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'enf',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\ExperimentNotFoundException',
          ),
        3 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        4 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['enf'])) {
        $this->enf = $vals['enf'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getExperimentStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Airavata\Model\Workspace\Experiment\ExperimentStatus();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->enf = new \Airavata\API\Error\ExperimentNotFoundException();
            $xfer += $this->enf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getExperimentStatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enf !== null) {
      $xfer += $output->writeFieldBegin('enf', TType::STRUCT, 2);
      $xfer += $this->enf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 3);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 4);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getExperimentOutputs_args {
  static $_TSPEC;

  public $airavataExperimentId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getExperimentOutputs_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getExperimentOutputs_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getExperimentOutputs_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\Workspace\Experiment\DataObjectType',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getExperimentOutputs_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Airavata\Model\Workspace\Experiment\DataObjectType();
              $xfer += $elem26->read($input);
              $this->success []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getExperimentOutputs_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getJobStatuses_args {
  static $_TSPEC;

  public $airavataExperimentId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getJobStatuses_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getJobStatuses_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_getJobStatuses_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\Workspace\Experiment\JobStatus',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Airavata_getJobStatuses_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size28 = 0;
            $_ktype29 = 0;
            $_vtype30 = 0;
            $xfer += $input->readMapBegin($_ktype29, $_vtype30, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $key33 = '';
              $val34 = new \Airavata\Model\Workspace\Experiment\JobStatus();
              $xfer += $input->readString($key33);
              $val34 = new \Airavata\Model\Workspace\Experiment\JobStatus();
              $xfer += $val34->read($input);
              $this->success[$key33] = $val34;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_getJobStatuses_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter35 => $viter36)
          {
            $xfer += $output->writeString($kiter35);
            $xfer += $viter36->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_cloneExperiment_args {
  static $_TSPEC;

  public $existingExperimentID = null;
  public $newExperiementName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'existingExperimentID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'newExperiementName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['existingExperimentID'])) {
        $this->existingExperimentID = $vals['existingExperimentID'];
      }
      if (isset($vals['newExperiementName'])) {
        $this->newExperiementName = $vals['newExperiementName'];
      }
    }
  }

  public function getName() {
    return 'Airavata_cloneExperiment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->existingExperimentID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->newExperiementName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_cloneExperiment_args');
    if ($this->existingExperimentID !== null) {
      $xfer += $output->writeFieldBegin('existingExperimentID', TType::STRING, 1);
      $xfer += $output->writeString($this->existingExperimentID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newExperiementName !== null) {
      $xfer += $output->writeFieldBegin('newExperiementName', TType::STRING, 2);
      $xfer += $output->writeString($this->newExperiementName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_cloneExperiment_result {
  static $_TSPEC;

  public $success = null;
  public $ire = null;
  public $enf = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'enf',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\ExperimentNotFoundException',
          ),
        3 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        4 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['enf'])) {
        $this->enf = $vals['enf'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_cloneExperiment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->enf = new \Airavata\API\Error\ExperimentNotFoundException();
            $xfer += $this->enf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_cloneExperiment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enf !== null) {
      $xfer += $output->writeFieldBegin('enf', TType::STRUCT, 2);
      $xfer += $this->enf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 3);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 4);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_terminateExperiment_args {
  static $_TSPEC;

  public $airavataExperimentId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'airavataExperimentId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['airavataExperimentId'])) {
        $this->airavataExperimentId = $vals['airavataExperimentId'];
      }
    }
  }

  public function getName() {
    return 'Airavata_terminateExperiment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->airavataExperimentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_terminateExperiment_args');
    if ($this->airavataExperimentId !== null) {
      $xfer += $output->writeFieldBegin('airavataExperimentId', TType::STRING, 1);
      $xfer += $output->writeString($this->airavataExperimentId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Airavata_terminateExperiment_result {
  static $_TSPEC;

  public $ire = null;
  public $enf = null;
  public $ace = null;
  public $ase = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ire',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\InvalidRequestException',
          ),
        2 => array(
          'var' => 'enf',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\ExperimentNotFoundException',
          ),
        3 => array(
          'var' => 'ace',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataClientException',
          ),
        4 => array(
          'var' => 'ase',
          'type' => TType::STRUCT,
          'class' => '\Airavata\API\Error\AiravataSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ire'])) {
        $this->ire = $vals['ire'];
      }
      if (isset($vals['enf'])) {
        $this->enf = $vals['enf'];
      }
      if (isset($vals['ace'])) {
        $this->ace = $vals['ace'];
      }
      if (isset($vals['ase'])) {
        $this->ase = $vals['ase'];
      }
    }
  }

  public function getName() {
    return 'Airavata_terminateExperiment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ire = new \Airavata\API\Error\InvalidRequestException();
            $xfer += $this->ire->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->enf = new \Airavata\API\Error\ExperimentNotFoundException();
            $xfer += $this->enf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ace = new \Airavata\API\Error\AiravataClientException();
            $xfer += $this->ace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ase = new \Airavata\API\Error\AiravataSystemException();
            $xfer += $this->ase->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Airavata_terminateExperiment_result');
    if ($this->ire !== null) {
      $xfer += $output->writeFieldBegin('ire', TType::STRUCT, 1);
      $xfer += $this->ire->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enf !== null) {
      $xfer += $output->writeFieldBegin('enf', TType::STRUCT, 2);
      $xfer += $this->enf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ace !== null) {
      $xfer += $output->writeFieldBegin('ace', TType::STRUCT, 3);
      $xfer += $this->ace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ase !== null) {
      $xfer += $output->writeFieldBegin('ase', TType::STRUCT, 4);
      $xfer += $this->ase->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


