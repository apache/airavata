<?php
namespace Airavata\Model\AppCatalog\ComputeResource;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ResourceJobManager {
  const FORK = 0;
  const PBS = 1;
  const UGE = 2;
  const SLURM = 3;
  static public $__names = array(
    0 => 'FORK',
    1 => 'PBS',
    2 => 'UGE',
    3 => 'SLURM',
  );
}

final class FileSystems {
  const HOME = 0;
  const WORK = 1;
  const LOCALTMP = 2;
  const SCRATCH = 3;
  const ARCHIVE = 4;
  static public $__names = array(
    0 => 'HOME',
    1 => 'WORK',
    2 => 'LOCALTMP',
    3 => 'SCRATCH',
    4 => 'ARCHIVE',
  );
}

final class SecurityProtocol {
  const USERNAME_PASSWORD = 0;
  const SSH_KEYS = 1;
  const GSI = 2;
  const KERBEROS = 3;
  const OAUTH = 4;
  static public $__names = array(
    0 => 'USERNAME_PASSWORD',
    1 => 'SSH_KEYS',
    2 => 'GSI',
    3 => 'KERBEROS',
    4 => 'OAUTH',
  );
}

final class JobSubmissionProtocol {
  const LOCAL = 0;
  const SSH = 1;
  const GSISSH = 2;
  const GRAM = 3;
  const UNICORE = 4;
  static public $__names = array(
    0 => 'LOCAL',
    1 => 'SSH',
    2 => 'GSISSH',
    3 => 'GRAM',
    4 => 'UNICORE',
  );
}

final class DataMovementProtocol {
  const LOCAL = 0;
  const SCP = 1;
  const SFTP = 2;
  const GridFTP = 3;
  const UNICORE_STORAGE_SERVICE = 4;
  static public $__names = array(
    0 => 'LOCAL',
    1 => 'SCP',
    2 => 'SFTP',
    3 => 'GridFTP',
    4 => 'UNICORE_STORAGE_SERVICE',
  );
}

class BatchQueue {
  static $_TSPEC;

  public $queueName = null;
  public $queueDescription = null;
  public $maxRunTime = null;
  public $maxNodes = null;
  public $maxProcessors = null;
  public $maxJobsInQueue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'queueDescription',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'maxRunTime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'maxNodes',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'maxProcessors',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'maxJobsInQueue',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['queueDescription'])) {
        $this->queueDescription = $vals['queueDescription'];
      }
      if (isset($vals['maxRunTime'])) {
        $this->maxRunTime = $vals['maxRunTime'];
      }
      if (isset($vals['maxNodes'])) {
        $this->maxNodes = $vals['maxNodes'];
      }
      if (isset($vals['maxProcessors'])) {
        $this->maxProcessors = $vals['maxProcessors'];
      }
      if (isset($vals['maxJobsInQueue'])) {
        $this->maxJobsInQueue = $vals['maxJobsInQueue'];
      }
    }
  }

  public function getName() {
    return 'BatchQueue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxRunTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxNodes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxProcessors);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxJobsInQueue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchQueue');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queueDescription !== null) {
      $xfer += $output->writeFieldBegin('queueDescription', TType::STRING, 2);
      $xfer += $output->writeString($this->queueDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxRunTime !== null) {
      $xfer += $output->writeFieldBegin('maxRunTime', TType::I32, 3);
      $xfer += $output->writeI32($this->maxRunTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxNodes !== null) {
      $xfer += $output->writeFieldBegin('maxNodes', TType::I32, 4);
      $xfer += $output->writeI32($this->maxNodes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxProcessors !== null) {
      $xfer += $output->writeFieldBegin('maxProcessors', TType::I32, 5);
      $xfer += $output->writeI32($this->maxProcessors);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxJobsInQueue !== null) {
      $xfer += $output->writeFieldBegin('maxJobsInQueue', TType::I32, 6);
      $xfer += $output->writeI32($this->maxJobsInQueue);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SCPDataMovement {
  static $_TSPEC;

  public $dataMovementInterfaceId = "DO_NOT_SET_AT_CLIENTS";
  public $securityProtocol = null;
  public $alternativeSCPHostName = null;
  public $sshPort = 22;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dataMovementInterfaceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'securityProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'alternativeSCPHostName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sshPort',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dataMovementInterfaceId'])) {
        $this->dataMovementInterfaceId = $vals['dataMovementInterfaceId'];
      }
      if (isset($vals['securityProtocol'])) {
        $this->securityProtocol = $vals['securityProtocol'];
      }
      if (isset($vals['alternativeSCPHostName'])) {
        $this->alternativeSCPHostName = $vals['alternativeSCPHostName'];
      }
      if (isset($vals['sshPort'])) {
        $this->sshPort = $vals['sshPort'];
      }
    }
  }

  public function getName() {
    return 'SCPDataMovement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataMovementInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->securityProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alternativeSCPHostName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sshPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SCPDataMovement');
    if ($this->dataMovementInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('dataMovementInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->dataMovementInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->securityProtocol !== null) {
      $xfer += $output->writeFieldBegin('securityProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->securityProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alternativeSCPHostName !== null) {
      $xfer += $output->writeFieldBegin('alternativeSCPHostName', TType::STRING, 3);
      $xfer += $output->writeString($this->alternativeSCPHostName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sshPort !== null) {
      $xfer += $output->writeFieldBegin('sshPort', TType::I32, 4);
      $xfer += $output->writeI32($this->sshPort);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GridFTPDataMovement {
  static $_TSPEC;

  public $dataMovementInterfaceId = "DO_NOT_SET_AT_CLIENTS";
  public $securityProtocol = null;
  public $gridFTPEndPoints = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dataMovementInterfaceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'securityProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'gridFTPEndPoints',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dataMovementInterfaceId'])) {
        $this->dataMovementInterfaceId = $vals['dataMovementInterfaceId'];
      }
      if (isset($vals['securityProtocol'])) {
        $this->securityProtocol = $vals['securityProtocol'];
      }
      if (isset($vals['gridFTPEndPoints'])) {
        $this->gridFTPEndPoints = $vals['gridFTPEndPoints'];
      }
    }
  }

  public function getName() {
    return 'GridFTPDataMovement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataMovementInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->securityProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->gridFTPEndPoints = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->gridFTPEndPoints []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GridFTPDataMovement');
    if ($this->dataMovementInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('dataMovementInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->dataMovementInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->securityProtocol !== null) {
      $xfer += $output->writeFieldBegin('securityProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->securityProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gridFTPEndPoints !== null) {
      if (!is_array($this->gridFTPEndPoints)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gridFTPEndPoints', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->gridFTPEndPoints));
        {
          foreach ($this->gridFTPEndPoints as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LOCALSubmission {
  static $_TSPEC;

  public $jobSubmissionInterfaceId = "DO_NOT_SET_AT_CLIENTS";
  public $resourceJobManager = null;
  public $monitoringMechanism = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobSubmissionInterfaceId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'resourceJobManager',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'monitoringMechanism',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobSubmissionInterfaceId'])) {
        $this->jobSubmissionInterfaceId = $vals['jobSubmissionInterfaceId'];
      }
      if (isset($vals['resourceJobManager'])) {
        $this->resourceJobManager = $vals['resourceJobManager'];
      }
      if (isset($vals['monitoringMechanism'])) {
        $this->monitoringMechanism = $vals['monitoringMechanism'];
      }
    }
  }

  public function getName() {
    return 'LOCALSubmission';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobSubmissionInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resourceJobManager);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->monitoringMechanism);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LOCALSubmission');
    if ($this->jobSubmissionInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->jobSubmissionInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceJobManager !== null) {
      $xfer += $output->writeFieldBegin('resourceJobManager', TType::I32, 3);
      $xfer += $output->writeI32($this->resourceJobManager);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->monitoringMechanism !== null) {
      $xfer += $output->writeFieldBegin('monitoringMechanism', TType::STRING, 6);
      $xfer += $output->writeString($this->monitoringMechanism);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LOCALDataMovement {
  static $_TSPEC;

  public $dataMovementInterfaceId = "DO_NOT_SET_AT_CLIENTS";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dataMovementInterfaceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dataMovementInterfaceId'])) {
        $this->dataMovementInterfaceId = $vals['dataMovementInterfaceId'];
      }
    }
  }

  public function getName() {
    return 'LOCALDataMovement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataMovementInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LOCALDataMovement');
    if ($this->dataMovementInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('dataMovementInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->dataMovementInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SSHJobSubmission {
  static $_TSPEC;

  public $jobSubmissionInterfaceId = "DO_NOT_SET_AT_CLIENTS";
  public $securityProtocol = null;
  public $resourceJobManager = null;
  public $alternativeSSHHostName = null;
  public $sshPort = 22;
  public $monitoringMechanism = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobSubmissionInterfaceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'securityProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'resourceJobManager',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'alternativeSSHHostName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sshPort',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'monitoringMechanism',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobSubmissionInterfaceId'])) {
        $this->jobSubmissionInterfaceId = $vals['jobSubmissionInterfaceId'];
      }
      if (isset($vals['securityProtocol'])) {
        $this->securityProtocol = $vals['securityProtocol'];
      }
      if (isset($vals['resourceJobManager'])) {
        $this->resourceJobManager = $vals['resourceJobManager'];
      }
      if (isset($vals['alternativeSSHHostName'])) {
        $this->alternativeSSHHostName = $vals['alternativeSSHHostName'];
      }
      if (isset($vals['sshPort'])) {
        $this->sshPort = $vals['sshPort'];
      }
      if (isset($vals['monitoringMechanism'])) {
        $this->monitoringMechanism = $vals['monitoringMechanism'];
      }
    }
  }

  public function getName() {
    return 'SSHJobSubmission';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobSubmissionInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->securityProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resourceJobManager);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alternativeSSHHostName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sshPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->monitoringMechanism);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SSHJobSubmission');
    if ($this->jobSubmissionInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->jobSubmissionInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->securityProtocol !== null) {
      $xfer += $output->writeFieldBegin('securityProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->securityProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceJobManager !== null) {
      $xfer += $output->writeFieldBegin('resourceJobManager', TType::I32, 3);
      $xfer += $output->writeI32($this->resourceJobManager);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alternativeSSHHostName !== null) {
      $xfer += $output->writeFieldBegin('alternativeSSHHostName', TType::STRING, 4);
      $xfer += $output->writeString($this->alternativeSSHHostName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sshPort !== null) {
      $xfer += $output->writeFieldBegin('sshPort', TType::I32, 5);
      $xfer += $output->writeI32($this->sshPort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->monitoringMechanism !== null) {
      $xfer += $output->writeFieldBegin('monitoringMechanism', TType::STRING, 6);
      $xfer += $output->writeString($this->monitoringMechanism);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GlobusJobSubmission {
  static $_TSPEC;

  public $jobSubmissionInterfaceId = "DO_NOT_SET_AT_CLIENTS";
  public $securityProtocol = null;
  public $resourceJobManager = null;
  public $globusGateKeeperEndPoint = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobSubmissionInterfaceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'securityProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'resourceJobManager',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'globusGateKeeperEndPoint',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobSubmissionInterfaceId'])) {
        $this->jobSubmissionInterfaceId = $vals['jobSubmissionInterfaceId'];
      }
      if (isset($vals['securityProtocol'])) {
        $this->securityProtocol = $vals['securityProtocol'];
      }
      if (isset($vals['resourceJobManager'])) {
        $this->resourceJobManager = $vals['resourceJobManager'];
      }
      if (isset($vals['globusGateKeeperEndPoint'])) {
        $this->globusGateKeeperEndPoint = $vals['globusGateKeeperEndPoint'];
      }
    }
  }

  public function getName() {
    return 'GlobusJobSubmission';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobSubmissionInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->securityProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resourceJobManager);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->globusGateKeeperEndPoint = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->globusGateKeeperEndPoint []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GlobusJobSubmission');
    if ($this->jobSubmissionInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->jobSubmissionInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->securityProtocol !== null) {
      $xfer += $output->writeFieldBegin('securityProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->securityProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceJobManager !== null) {
      $xfer += $output->writeFieldBegin('resourceJobManager', TType::I32, 3);
      $xfer += $output->writeI32($this->resourceJobManager);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->globusGateKeeperEndPoint !== null) {
      if (!is_array($this->globusGateKeeperEndPoint)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('globusGateKeeperEndPoint', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->globusGateKeeperEndPoint));
        {
          foreach ($this->globusGateKeeperEndPoint as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JobSubmissionInterface {
  static $_TSPEC;

  public $jobSubmissionInterfaceId = null;
  public $jobSubmissionProtocol = null;
  public $priorityOrder = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobSubmissionInterfaceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'jobSubmissionProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'priorityOrder',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobSubmissionInterfaceId'])) {
        $this->jobSubmissionInterfaceId = $vals['jobSubmissionInterfaceId'];
      }
      if (isset($vals['jobSubmissionProtocol'])) {
        $this->jobSubmissionProtocol = $vals['jobSubmissionProtocol'];
      }
      if (isset($vals['priorityOrder'])) {
        $this->priorityOrder = $vals['priorityOrder'];
      }
    }
  }

  public function getName() {
    return 'JobSubmissionInterface';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobSubmissionInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobSubmissionProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priorityOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JobSubmissionInterface');
    if ($this->jobSubmissionInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->jobSubmissionInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobSubmissionProtocol !== null) {
      $xfer += $output->writeFieldBegin('jobSubmissionProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->jobSubmissionProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priorityOrder !== null) {
      $xfer += $output->writeFieldBegin('priorityOrder', TType::I32, 3);
      $xfer += $output->writeI32($this->priorityOrder);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DataMovementInterface {
  static $_TSPEC;

  public $dataMovementInterfaceId = null;
  public $dataMovementProtocol = null;
  public $priorityOrder = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dataMovementInterfaceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'dataMovementProtocol',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'priorityOrder',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dataMovementInterfaceId'])) {
        $this->dataMovementInterfaceId = $vals['dataMovementInterfaceId'];
      }
      if (isset($vals['dataMovementProtocol'])) {
        $this->dataMovementProtocol = $vals['dataMovementProtocol'];
      }
      if (isset($vals['priorityOrder'])) {
        $this->priorityOrder = $vals['priorityOrder'];
      }
    }
  }

  public function getName() {
    return 'DataMovementInterface';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataMovementInterfaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dataMovementProtocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priorityOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataMovementInterface');
    if ($this->dataMovementInterfaceId !== null) {
      $xfer += $output->writeFieldBegin('dataMovementInterfaceId', TType::STRING, 1);
      $xfer += $output->writeString($this->dataMovementInterfaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataMovementProtocol !== null) {
      $xfer += $output->writeFieldBegin('dataMovementProtocol', TType::I32, 2);
      $xfer += $output->writeI32($this->dataMovementProtocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priorityOrder !== null) {
      $xfer += $output->writeFieldBegin('priorityOrder', TType::I32, 3);
      $xfer += $output->writeI32($this->priorityOrder);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ComputeResourceDescription {
  static $_TSPEC;

  public $isEmpty = false;
  public $computeResourceId = "DO_NOT_SET_AT_CLIENTS";
  public $hostName = null;
  public $hostAliases = null;
  public $ipAddresses = null;
  public $computeResourceDescription = null;
  public $resourceJobManager = null;
  public $batchQueues = null;
  public $fileSystems = null;
  public $jobSubmissionInterfaces = null;
  public $dataMovemenetInterfaces = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isEmpty',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'computeResourceId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'hostName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'hostAliases',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'ipAddresses',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'computeResourceDescription',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'resourceJobManager',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'batchQueues',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\AppCatalog\ComputeResource\BatchQueue',
            ),
          ),
        9 => array(
          'var' => 'fileSystems',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'jobSubmissionInterfaces',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\AppCatalog\ComputeResource\JobSubmissionInterface',
            ),
          ),
        11 => array(
          'var' => 'dataMovemenetInterfaces',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Airavata\Model\AppCatalog\ComputeResource\DataMovementInterface',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isEmpty'])) {
        $this->isEmpty = $vals['isEmpty'];
      }
      if (isset($vals['computeResourceId'])) {
        $this->computeResourceId = $vals['computeResourceId'];
      }
      if (isset($vals['hostName'])) {
        $this->hostName = $vals['hostName'];
      }
      if (isset($vals['hostAliases'])) {
        $this->hostAliases = $vals['hostAliases'];
      }
      if (isset($vals['ipAddresses'])) {
        $this->ipAddresses = $vals['ipAddresses'];
      }
      if (isset($vals['computeResourceDescription'])) {
        $this->computeResourceDescription = $vals['computeResourceDescription'];
      }
      if (isset($vals['resourceJobManager'])) {
        $this->resourceJobManager = $vals['resourceJobManager'];
      }
      if (isset($vals['batchQueues'])) {
        $this->batchQueues = $vals['batchQueues'];
      }
      if (isset($vals['fileSystems'])) {
        $this->fileSystems = $vals['fileSystems'];
      }
      if (isset($vals['jobSubmissionInterfaces'])) {
        $this->jobSubmissionInterfaces = $vals['jobSubmissionInterfaces'];
      }
      if (isset($vals['dataMovemenetInterfaces'])) {
        $this->dataMovemenetInterfaces = $vals['dataMovemenetInterfaces'];
      }
    }
  }

  public function getName() {
    return 'ComputeResourceDescription';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isEmpty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->computeResourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->hostAliases = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readSetBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readString($elem19);
              if (is_scalar($elem19)) {
                $this->hostAliases[$elem19] = true;
              } else {
                $this->hostAliases []= $elem19;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::SET) {
            $this->ipAddresses = array();
            $_size20 = 0;
            $_etype23 = 0;
            $xfer += $input->readSetBegin($_etype23, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $elem25 = null;
              $xfer += $input->readString($elem25);
              if (is_scalar($elem25)) {
                $this->ipAddresses[$elem25] = true;
              } else {
                $this->ipAddresses []= $elem25;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->computeResourceDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resourceJobManager);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->batchQueues = array();
            $_size26 = 0;
            $_etype29 = 0;
            $xfer += $input->readListBegin($_etype29, $_size26);
            for ($_i30 = 0; $_i30 < $_size26; ++$_i30)
            {
              $elem31 = null;
              $elem31 = new \Airavata\Model\AppCatalog\ComputeResource\BatchQueue();
              $xfer += $elem31->read($input);
              $this->batchQueues []= $elem31;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->fileSystems = array();
            $_size32 = 0;
            $_ktype33 = 0;
            $_vtype34 = 0;
            $xfer += $input->readMapBegin($_ktype33, $_vtype34, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $key37 = 0;
              $val38 = '';
              $xfer += $input->readI32($key37);
              $xfer += $input->readString($val38);
              $this->fileSystems[$key37] = $val38;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->jobSubmissionInterfaces = array();
            $_size39 = 0;
            $_etype42 = 0;
            $xfer += $input->readListBegin($_etype42, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $elem44 = null;
              $elem44 = new \Airavata\Model\AppCatalog\ComputeResource\JobSubmissionInterface();
              $xfer += $elem44->read($input);
              $this->jobSubmissionInterfaces []= $elem44;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->dataMovemenetInterfaces = array();
            $_size45 = 0;
            $_etype48 = 0;
            $xfer += $input->readListBegin($_etype48, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $elem50 = null;
              $elem50 = new \Airavata\Model\AppCatalog\ComputeResource\DataMovementInterface();
              $xfer += $elem50->read($input);
              $this->dataMovemenetInterfaces []= $elem50;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ComputeResourceDescription');
    if ($this->isEmpty !== null) {
      $xfer += $output->writeFieldBegin('isEmpty', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isEmpty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->computeResourceId !== null) {
      $xfer += $output->writeFieldBegin('computeResourceId', TType::STRING, 2);
      $xfer += $output->writeString($this->computeResourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostName !== null) {
      $xfer += $output->writeFieldBegin('hostName', TType::STRING, 3);
      $xfer += $output->writeString($this->hostName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostAliases !== null) {
      if (!is_array($this->hostAliases)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hostAliases', TType::SET, 4);
      {
        $output->writeSetBegin(TType::STRING, count($this->hostAliases));
        {
          foreach ($this->hostAliases as $iter51 => $iter52)
          {
            if (is_scalar($iter52)) {
            $xfer += $output->writeString($iter51);
            } else {
            $xfer += $output->writeString($iter52);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipAddresses !== null) {
      if (!is_array($this->ipAddresses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ipAddresses', TType::SET, 5);
      {
        $output->writeSetBegin(TType::STRING, count($this->ipAddresses));
        {
          foreach ($this->ipAddresses as $iter53 => $iter54)
          {
            if (is_scalar($iter54)) {
            $xfer += $output->writeString($iter53);
            } else {
            $xfer += $output->writeString($iter54);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->computeResourceDescription !== null) {
      $xfer += $output->writeFieldBegin('computeResourceDescription', TType::STRING, 6);
      $xfer += $output->writeString($this->computeResourceDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceJobManager !== null) {
      $xfer += $output->writeFieldBegin('resourceJobManager', TType::I32, 7);
      $xfer += $output->writeI32($this->resourceJobManager);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchQueues !== null) {
      if (!is_array($this->batchQueues)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batchQueues', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->batchQueues));
        {
          foreach ($this->batchQueues as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileSystems !== null) {
      if (!is_array($this->fileSystems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fileSystems', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->fileSystems));
        {
          foreach ($this->fileSystems as $kiter56 => $viter57)
          {
            $xfer += $output->writeI32($kiter56);
            $xfer += $output->writeString($viter57);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobSubmissionInterfaces !== null) {
      if (!is_array($this->jobSubmissionInterfaces)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jobSubmissionInterfaces', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->jobSubmissionInterfaces));
        {
          foreach ($this->jobSubmissionInterfaces as $iter58)
          {
            $xfer += $iter58->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataMovemenetInterfaces !== null) {
      if (!is_array($this->dataMovemenetInterfaces)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dataMovemenetInterfaces', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->dataMovemenetInterfaces));
        {
          foreach ($this->dataMovemenetInterfaces as $iter59)
          {
            $xfer += $iter59->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

$GLOBALS['computeResourceModel_CONSTANTS']['DEFAULT_ID'] = "DO_NOT_SET_AT_CLIENTS";


