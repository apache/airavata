    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class Airavata {

  public interface Iface {

    /**
     * Fetch Apache Airavata API version
     */
    public String getAPIVersion() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Create a Project
     * 
     * 
     * @param project
     */
    public String createProject(org.apache.airavata.model.workspace.Project project) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update a Project
     * 
     * 
     * @param projectId
     * @param updatedProject
     */
    public void updateProject(String projectId, org.apache.airavata.model.workspace.Project updatedProject) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException;

    /**
     * Get a Project by ID
     * 
     * 
     * @param projectId
     */
    public org.apache.airavata.model.workspace.Project getProject(String projectId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException;

    /**
     * Get all Project by user
     * 
     * 
     * @param userName
     */
    public List<org.apache.airavata.model.workspace.Project> getAllUserProjects(String userName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Get all Project for user by project name
     * 
     * 
     * @param userName
     * @param projectName
     */
    public List<org.apache.airavata.model.workspace.Project> searchProjectsByProjectName(String userName, String projectName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Get all Project for user by project description
     * 
     * 
     * @param userName
     * @param description
     */
    public List<org.apache.airavata.model.workspace.Project> searchProjectsByProjectDesc(String userName, String description) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Search Experiments by experiment name
     * 
     * 
     * @param userName
     * @param expName
     */
    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> searchExperimentsByName(String userName, String expName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Search Experiments by experiment name
     * 
     * 
     * @param userName
     * @param description
     */
    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> searchExperimentsByDesc(String userName, String description) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Search Experiments by application id
     * 
     * 
     * @param userName
     * @param applicationId
     */
    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> searchExperimentsByApplication(String userName, String applicationId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Get all Experiments within a Project
     * 
     * 
     * @param projectId
     */
    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllExperimentsInProject(String projectId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException;

    /**
     * Get all Experiments by user
     * 
     * 
     * @param userName
     */
    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllUserExperiments(String userName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
     *   but inferred from the authentication header. This experiment is just a persistent place holder. The client
     *   has to subsequently configure and launch the created experiment. No action is taken on Airavata Server except
     *   registering the experiment in a persistent store.
     * 
     * @param basicExperimentMetadata
     *    The create experiment will require the basic experiment metadata like the name and description, intended user,
     *      the gateway identifer and if the experiment should be shared public by defualt. During the creation of an experiment
     *      the ExperimentMetadata is a required field.
     * 
     * @return
     *   The server-side generated airavata experiment globally unique identifier.
     * 
     * @throws org.apache.airavata.model.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.model.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     * 
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.model.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param experiment
     */
    public String createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch previously created experiment metadata.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @return experimentMetada
     *   This method will return the previously stored experiment metadata.
     * 
     * @throws org.apache.airavata.model.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.model.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.model.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.model.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     */
    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Configure a previously created experiment with required inputs, scheduling and other quality of service
     *   parameters. This method only updates the experiment object within the registry. The experiment has to be launched
     *   to make it actionable by the server.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @param experimentConfigurationData
     *    The configuration information of the experiment with application input parameters, computational resource scheduling
     *      information, special input output handling and additional quality of service parameters.
     * 
     * @return
     *   This method call does not have a return value.
     * 
     * @throws org.apache.airavata.model.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.model.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.model.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.model.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     * @param experiment
     */
    public void updateExperiment(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public void updateExperimentConfiguration(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration) throws org.apache.thrift.TException;

    public void updateResourceScheduleing(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling) throws org.apache.thrift.TException;

    /**
     *  *
     *  * Validate experiment configuration. A true in general indicates, the experiment is ready to be launched.
     *  *
     *  * @param experimentID
     *  * @return sucess/failure
     *  *
     * *
     * 
     * @param airavataExperimentId
     */
    public boolean validateExperiment(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Launch a previously created and configured experiment. Airavata Server will then start processing the request and appropriate
     *   notifications and intermediate and output data will be subsequently available for this experiment.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @param airavataCredStoreToken:
     *   A requirement to execute experiments within Airavata is to first register the targeted remote computational account
     *     credentials with Airavata Credential Store. The administrative API (related to credential store) will return a
     *     generated token associated with the registered credentials. The client has to security posses this token id and is
     *     required to pass it to Airavata Server for all execution requests.
     *   Note: At this point only the credential store token is required so the string is directly passed here. In future if
     *     if more security credentials are enables, then the structure ExecutionSecurityParameters should be used.
     *   Note: This parameter is not persisted within Airavata Registry for security reasons.
     * 
     * @return
     *   This method call does not have a return value.
     * 
     * @throws org.apache.airavata.model.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.model.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.model.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.model.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     * @param airavataCredStoreToken
     */
    public void launchExperiment(String airavataExperimentId, String airavataCredStoreToken) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.LaunchValidationException, org.apache.thrift.TException;

    public org.apache.airavata.model.workspace.experiment.ExperimentStatus getExperimentStatus(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> getExperimentOutputs(String airavataExperimentId) throws org.apache.thrift.TException;

    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getJobStatuses(String airavataExperimentId) throws org.apache.thrift.TException;

    /**
     * Clone an specified experiment with a new name. A copy of the experiment configuration is made and is persisted with new metadata.
     *   The client has to subsequently update this configuration if needed and launch the cloned experiment.
     * 
     * @param newExperimentName
     *    experiment name that should be used in the cloned experiment
     * 
     * @param updatedExperiment
     *    Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
     *      the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
     *      should be shared public by default.
     * 
     * @return
     *   The server-side generated airavata experiment globally unique identifier for the newly cloned experiment.
     * 
     * @throws org.apache.airavata.model.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.model.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.model.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.model.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param existingExperimentID
     * @param newExperimentName
     */
    public String cloneExperiment(String existingExperimentID, String newExperimentName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Terminate a running experiment.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @return
     *   This method call does not have a return value.
     * 
     * @throws org.apache.airavata.model.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.model.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.model.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.model.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     */
    public void terminateExperiment(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Register a Application Module.
     * 
     * @param applicationModule
     *    Application Module Object created from the datamodel.
     * 
     * @return appModuleId
     *   Returns a server-side generated airavata appModule globally unique identifier.
     * 
     * 
     * @param applicationModule
     */
    public String registerApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch a Application Module.
     * 
     * @param appModuleId
     *   The identifier for the requested application module
     * 
     * @return applicationModule
     *   Returns a application Module Object.
     * 
     * 
     * @param appModuleId
     */
    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getApplicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update a Application Module.
     * 
     * @param appModuleId
     *   The identifier for the requested application module to be updated.
     * 
     * @param applicationModule
     *    Application Module Object created from the datamodel.
     * 
     * @return status
     *   Returns a success/failure of the update.
     * 
     * 
     * @param appModuleId
     * @param applicationModule
     */
    public boolean updateApplicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Delete a Application Module.
     * 
     * @param appModuleId
     *   The identifier for the requested application module to be deleted.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param appModuleId
     */
    public boolean deleteApplicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Register a Application Deployment.
     * 
     * @param applicationModule
     *    Application Module Object created from the datamodel.
     * 
     * @return appDeploymentId
     *   Returns a server-side generated airavata appDeployment globally unique identifier.
     * 
     * 
     * @param applicationDeployment
     */
    public String registerApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch a Application Deployment.
     * 
     * @param appDeploymentId
     *   The identifier for the requested application module
     * 
     * @return applicationDeployment
     *   Returns a application Deployment Object.
     * 
     * 
     * @param appDeploymentId
     */
    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getApplicationDeployment(String appDeploymentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update a Application Deployment.
     * 
     * @param appDeploymentId
     *   The identifier for the requested application deployment to be updated.
     * 
     * @param appDeployment
     *    Application Deployment Object created from the datamodel.
     * 
     * @return status
     *   Returns a success/failure of the update.
     * 
     * 
     * @param appDeploymentId
     * @param applicationDeployment
     */
    public boolean updateApplicationDeployment(String appDeploymentId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Delete a Application deployment.
     * 
     * @param appDeploymentId
     *   The identifier for the requested application deployment to be deleted.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param appDeploymentId
     */
    public boolean deleteApplicationDeployment(String appDeploymentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch a list of Deployed Compute Hosts.
     * 
     * @param appModuleId
     *   The identifier for the requested application module
     * 
     * @return list<string>
     *   Returns a list of Deployed Resources.
     * 
     * 
     * @param appModuleId
     */
    public List<String> getAppModuleDeployedResources(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Register a Application Interface.
     * 
     * @param applicationModule
     *    Application Module Object created from the datamodel.
     * 
     * @return appInterfaceId
     *   Returns a server-side generated airavata application interface globally unique identifier.
     * 
     * 
     * @param applicationInterface
     */
    public String registerApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch a Application Interface.
     * 
     * @param appInterfaceId
     *   The identifier for the requested application module
     * 
     * @return applicationInterface
     *   Returns a application Interface Object.
     * 
     * 
     * 
     * @param appInterfaceId
     */
    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getApplicationInterface(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update a Application Interface.
     * 
     * @param appInterfaceId
     *   The identifier for the requested application deployment to be updated.
     * 
     * @param appInterface
     *    Application Interface Object created from the datamodel.
     * 
     * @return status
     *   Returns a success/failure of the update.
     * 
     * 
     * 
     * @param appInterfaceId
     * @param applicationInterface
     */
    public boolean updateApplicationInterface(String appInterfaceId, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Delete a Application Interface.
     * 
     * @param appInterfaceId
     *   The identifier for the requested application interface to be deleted.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * 
     * @param appInterfaceId
     */
    public boolean deleteApplicationInterface(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch the list of Application Inputs.
     * 
     * @param appInterfaceId
     *   The identifier for the requested application interface
     * 
     * @return list<applicationInterfaceModel.InputDataObjectType>
     *   Returns a list of application inputs.
     * 
     * 
     * @param appInterfaceId
     */
    public List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> getApplicationInputs(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch the list of Application Outputs.
     * 
     * @param appInterfaceId
     *   The identifier for the requested application interface
     * 
     * @return list<applicationInterfaceModel.OutputDataObjectType>
     *   Returns a list of application outputs.
     * 
     * 
     * @param appInterfaceId
     */
    public List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> getApplicationOutputs(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Register a Compute Resource.
     * 
     * @param computeResourceDescription
     *    Compute Resource Object created from the datamodel.
     * 
     * @return computeResourceId
     *   Returns a server-side generated airavata compute resource globally unique identifier.
     * 
     * 
     * @param computeResourceDescription
     */
    public String registerComputeResource(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch the given Compute Resource.
     * 
     * @param computeResourceId
     *   The identifier for the requested compute resource
     * 
     * @return computeResourceDescription
     *    Compute Resource Object created from the datamodel..
     * 
     * 
     * @param computeResourceId
     */
    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription getComputeResource(String computeResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update a Compute Resource.
     * 
     * @param computeResourceId
     *   The identifier for the requested compute resource to be updated.
     * 
     * @param computeResourceDescription
     *    Compute Resource Object created from the datamodel.
     * 
     * @return status
     *   Returns a success/failure of the update.
     * 
     * 
     * @param computeResourceId
     * @param computeResourceDescription
     */
    public boolean updateComputeResource(String computeResourceId, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Delete a Compute Resource.
     * 
     * @param computeResourceId
     *   The identifier for the requested compute resource to be deleted.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param computeResourceId
     */
    public boolean deleteComputeResource(String computeResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Add a Local Job Submission details to a compute resource
     *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
     * 
     * @param computeResourceId
     *   The identifier of the compute resource to which JobSubmission protocol to be added
     * 
     * @param priorityOrder
     *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
     * 
     * @param localSubmission
     *   The LOCALSubmission object to be added to the resource.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param computeResourceId
     * @param priorityOrder
     * @param localSubmission
     */
    public boolean addLocalSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update the given Local Job Submission details
     * 
     * @param jobSubmissionInterfaceId
     *   The identifier of the JobSubmission Interface to be updated.
     * 
     * @param localSubmission
     *   The LOCALSubmission object to be updated.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param jobSubmissionInterfaceId
     * @param localSubmission
     */
    public boolean updateLocalSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Add a SSH Job Submission details to a compute resource
     *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
     * 
     * @param computeResourceId
     *   The identifier of the compute resource to which JobSubmission protocol to be added
     * 
     * @param priorityOrder
     *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
     * 
     * @param sshJobSubmission
     *   The SSHJobSubmission object to be added to the resource.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param computeResourceId
     * @param priorityOrder
     * @param sshJobSubmission
     */
    public boolean addSSHJobSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update the given SSH Job Submission details
     * 
     * @param jobSubmissionInterfaceId
     *   The identifier of the JobSubmission Interface to be updated.
     * 
     * @param sshJobSubmission
     *   The SSHJobSubmission object to be updated.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param jobSubmissionInterfaceId
     * @param sshJobSubmission
     */
    public boolean updateSSHJobSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Add a Local data movement details to a compute resource
     *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
     * 
     * @param computeResourceId
     *   The identifier of the compute resource to which JobSubmission protocol to be added
     * 
     * @param priorityOrder
     *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
     * 
     * @param localDataMovement
     *   The LOCALDataMovement object to be added to the resource.
     * 
     * @return status
     *   Returns a success/failure of the addition.
     * 
     * 
     * @param computeResourceId
     * @param priorityOrder
     * @param localDataMovement
     */
    public boolean addLocalDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update the given Local data movement details
     * 
     * @param jobSubmissionInterfaceId
     *   The identifier of the JobSubmission Interface to be updated.
     * 
     * @param localDataMovement
     *   The LOCALDataMovement object to be updated.
     * 
     * @return status
     *   Returns a success/failure of the update.
     * 
     * 
     * @param jobSubmissionInterfaceId
     * @param localDataMovement
     */
    public boolean updateLocalDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Add a SCP data movement details to a compute resource
     *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
     * 
     * @param computeResourceId
     *   The identifier of the compute resource to which JobSubmission protocol to be added
     * 
     * @param priorityOrder
     *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
     * 
     * @param scpDataMovement
     *   The SCPDataMovement object to be added to the resource.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param computeResourceId
     * @param priorityOrder
     * @param scpDataMovement
     */
    public boolean addSCPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update the given scp data movement details
     *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
     * 
     * @param jobSubmissionInterfaceId
     *   The identifier of the JobSubmission Interface to be updated.
     * 
     * @param scpDataMovement
     *   The SCPDataMovement object to be updated.
     * 
     * @return status
     *   Returns a success/failure of the update.
     * 
     * 
     * @param jobSubmissionInterfaceId
     * @param scpDataMovement
     */
    public boolean updateSCPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Add a GridFTP data movement details to a compute resource
     *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
     * 
     * @param computeResourceId
     *   The identifier of the compute resource to which JobSubmission protocol to be added
     * 
     * @param priorityOrder
     *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
     * 
     * @param gridFTPDataMovement
     *   The GridFTPDataMovement object to be added to the resource.
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param computeResourceId
     * @param priorityOrder
     * @param gridFTPDataMovement
     */
    public boolean addGridFTPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Update the given GridFTP data movement details to a compute resource
     *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
     * 
     * @param jobSubmissionInterfaceId
     *   The identifier of the JobSubmission Interface to be updated.
     * 
     * @param gridFTPDataMovement
     *   The GridFTPDataMovement object to be updated.
     * 
     * @return status
     *   Returns a success/failure of the updation.
     * 
     * 
     * @param jobSubmissionInterfaceId
     * @param gridFTPDataMovement
     */
    public boolean updateGridFTPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Change the priority of a given job submisison interface
     * 
     * @param jobSubmissionInterfaceId
     *   The identifier of the JobSubmission Interface to be changed
     * 
     * @param priorityOrder
     *   The new priority of the job manager interface.
     * 
     * @return status
     *   Returns a success/failure of the change.
     * 
     * 
     * @param jobSubmissionInterfaceId
     * @param newPriorityOrder
     */
    public boolean changeJobSubmissionPriority(String jobSubmissionInterfaceId, int newPriorityOrder) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Change the priority of a given data movement interface
     * 
     * @param dataMovementInterfaceId
     *   The identifier of the DataMovement Interface to be changed
     * 
     * @param priorityOrder
     *   The new priority of the data movement interface.
     * 
     * @return status
     *   Returns a success/failure of the change.
     * 
     * 
     * @param dataMovementInterfaceId
     * @param newPriorityOrder
     */
    public boolean changeDataMovementPriority(String dataMovementInterfaceId, int newPriorityOrder) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Change the priorities of a given set of job submission interfaces
     * 
     * @param jobSubmissionPriorityMap
     *   A Map of identifiers of the JobSubmission Interfaces and thier associated priorities to be set.
     * 
     * @return status
     *   Returns a success/failure of the changes.
     * 
     * 
     * @param jobSubmissionPriorityMap
     */
    public boolean changeJobSubmissionPriorities(Map<String,Integer> jobSubmissionPriorityMap) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Change the priorities of a given set of data movement interfaces
     * 
     * @param dataMovementPriorityMap
     *   A Map of identifiers of the DataMovement Interfaces and thier associated priorities to be set.
     * 
     * @return status
     *   Returns a success/failure of the changes.
     * 
     * 
     * @param dataMovementPriorityMap
     */
    public boolean changeDataMovementPriorities(Map<String,Integer> dataMovementPriorityMap) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Delete a given job submisison interface
     * 
     * @param jobSubmissionInterfaceId
     *   The identifier of the JobSubmission Interface to be changed
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param jobSubmissionInterfaceId
     */
    public boolean deleteJobSubmissionInterface(String jobSubmissionInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Delete a given data movement interface
     * 
     * @param dataMovementInterfaceId
     *   The identifier of the DataMovement Interface to be changed
     * 
     * @return status
     *   Returns a success/failure of the deletion.
     * 
     * 
     * @param dataMovementInterfaceId
     */
    public boolean deleteDataMovementInterface(String dataMovementInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createProject(org.apache.airavata.model.workspace.Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProject(String projectId, org.apache.airavata.model.workspace.Project updatedProject, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllUserProjects(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchProjectsByProjectName(String userName, String projectName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchProjectsByProjectDesc(String userName, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchExperimentsByName(String userName, String expName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchExperimentsByDesc(String userName, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchExperimentsByApplication(String userName, String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllExperimentsInProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllUserExperiments(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateExperiment(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateExperimentConfiguration(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateResourceScheduleing(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void validateExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void launchExperiment(String airavataExperimentId, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperimentStatus(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperimentOutputs(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getJobStatuses(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cloneExperiment(String existingExperimentID, String newExperimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void terminateExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateApplicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteApplicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationDeployment(String appDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateApplicationDeployment(String appDeploymentId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteApplicationDeployment(String appDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAppModuleDeployedResources(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationInterface(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateApplicationInterface(String appInterfaceId, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteApplicationInterface(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationInputs(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationOutputs(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerComputeResource(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getComputeResource(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateComputeResource(String computeResourceId, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteComputeResource(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addLocalSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLocalSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSSHJobSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSSHJobSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addLocalDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateLocalDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSCPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSCPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addGridFTPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateGridFTPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeJobSubmissionPriority(String jobSubmissionInterfaceId, int newPriorityOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeDataMovementPriority(String dataMovementInterfaceId, int newPriorityOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeJobSubmissionPriorities(Map<String,Integer> jobSubmissionPriorityMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeDataMovementPriorities(Map<String,Integer> dataMovementPriorityMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteJobSubmissionInterface(String jobSubmissionInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteDataMovementInterface(String dataMovementInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getAPIVersion() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getAPIVersion();
      return recv_getAPIVersion();
    }

    public void send_getAPIVersion() throws org.apache.thrift.TException
    {
      getAPIVersion_args args = new getAPIVersion_args();
      sendBase("getAPIVersion", args);
    }

    public String recv_getAPIVersion() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getAPIVersion_result result = new getAPIVersion_result();
      receiveBase(result, "getAPIVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAPIVersion failed: unknown result");
    }

    public String createProject(org.apache.airavata.model.workspace.Project project) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_createProject(project);
      return recv_createProject();
    }

    public void send_createProject(org.apache.airavata.model.workspace.Project project) throws org.apache.thrift.TException
    {
      createProject_args args = new createProject_args();
      args.setProject(project);
      sendBase("createProject", args);
    }

    public String recv_createProject() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      createProject_result result = new createProject_result();
      receiveBase(result, "createProject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createProject failed: unknown result");
    }

    public void updateProject(String projectId, org.apache.airavata.model.workspace.Project updatedProject) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException
    {
      send_updateProject(projectId, updatedProject);
      recv_updateProject();
    }

    public void send_updateProject(String projectId, org.apache.airavata.model.workspace.Project updatedProject) throws org.apache.thrift.TException
    {
      updateProject_args args = new updateProject_args();
      args.setProjectId(projectId);
      args.setUpdatedProject(updatedProject);
      sendBase("updateProject", args);
    }

    public void recv_updateProject() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException
    {
      updateProject_result result = new updateProject_result();
      receiveBase(result, "updateProject");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.pnfe != null) {
        throw result.pnfe;
      }
      return;
    }

    public org.apache.airavata.model.workspace.Project getProject(String projectId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException
    {
      send_getProject(projectId);
      return recv_getProject();
    }

    public void send_getProject(String projectId) throws org.apache.thrift.TException
    {
      getProject_args args = new getProject_args();
      args.setProjectId(projectId);
      sendBase("getProject", args);
    }

    public org.apache.airavata.model.workspace.Project recv_getProject() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException
    {
      getProject_result result = new getProject_result();
      receiveBase(result, "getProject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.pnfe != null) {
        throw result.pnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProject failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.Project> getAllUserProjects(String userName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getAllUserProjects(userName);
      return recv_getAllUserProjects();
    }

    public void send_getAllUserProjects(String userName) throws org.apache.thrift.TException
    {
      getAllUserProjects_args args = new getAllUserProjects_args();
      args.setUserName(userName);
      sendBase("getAllUserProjects", args);
    }

    public List<org.apache.airavata.model.workspace.Project> recv_getAllUserProjects() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getAllUserProjects_result result = new getAllUserProjects_result();
      receiveBase(result, "getAllUserProjects");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllUserProjects failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.Project> searchProjectsByProjectName(String userName, String projectName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_searchProjectsByProjectName(userName, projectName);
      return recv_searchProjectsByProjectName();
    }

    public void send_searchProjectsByProjectName(String userName, String projectName) throws org.apache.thrift.TException
    {
      searchProjectsByProjectName_args args = new searchProjectsByProjectName_args();
      args.setUserName(userName);
      args.setProjectName(projectName);
      sendBase("searchProjectsByProjectName", args);
    }

    public List<org.apache.airavata.model.workspace.Project> recv_searchProjectsByProjectName() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      searchProjectsByProjectName_result result = new searchProjectsByProjectName_result();
      receiveBase(result, "searchProjectsByProjectName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchProjectsByProjectName failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.Project> searchProjectsByProjectDesc(String userName, String description) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_searchProjectsByProjectDesc(userName, description);
      return recv_searchProjectsByProjectDesc();
    }

    public void send_searchProjectsByProjectDesc(String userName, String description) throws org.apache.thrift.TException
    {
      searchProjectsByProjectDesc_args args = new searchProjectsByProjectDesc_args();
      args.setUserName(userName);
      args.setDescription(description);
      sendBase("searchProjectsByProjectDesc", args);
    }

    public List<org.apache.airavata.model.workspace.Project> recv_searchProjectsByProjectDesc() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      searchProjectsByProjectDesc_result result = new searchProjectsByProjectDesc_result();
      receiveBase(result, "searchProjectsByProjectDesc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchProjectsByProjectDesc failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> searchExperimentsByName(String userName, String expName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_searchExperimentsByName(userName, expName);
      return recv_searchExperimentsByName();
    }

    public void send_searchExperimentsByName(String userName, String expName) throws org.apache.thrift.TException
    {
      searchExperimentsByName_args args = new searchExperimentsByName_args();
      args.setUserName(userName);
      args.setExpName(expName);
      sendBase("searchExperimentsByName", args);
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> recv_searchExperimentsByName() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      searchExperimentsByName_result result = new searchExperimentsByName_result();
      receiveBase(result, "searchExperimentsByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchExperimentsByName failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> searchExperimentsByDesc(String userName, String description) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_searchExperimentsByDesc(userName, description);
      return recv_searchExperimentsByDesc();
    }

    public void send_searchExperimentsByDesc(String userName, String description) throws org.apache.thrift.TException
    {
      searchExperimentsByDesc_args args = new searchExperimentsByDesc_args();
      args.setUserName(userName);
      args.setDescription(description);
      sendBase("searchExperimentsByDesc", args);
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> recv_searchExperimentsByDesc() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      searchExperimentsByDesc_result result = new searchExperimentsByDesc_result();
      receiveBase(result, "searchExperimentsByDesc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchExperimentsByDesc failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> searchExperimentsByApplication(String userName, String applicationId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_searchExperimentsByApplication(userName, applicationId);
      return recv_searchExperimentsByApplication();
    }

    public void send_searchExperimentsByApplication(String userName, String applicationId) throws org.apache.thrift.TException
    {
      searchExperimentsByApplication_args args = new searchExperimentsByApplication_args();
      args.setUserName(userName);
      args.setApplicationId(applicationId);
      sendBase("searchExperimentsByApplication", args);
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> recv_searchExperimentsByApplication() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      searchExperimentsByApplication_result result = new searchExperimentsByApplication_result();
      receiveBase(result, "searchExperimentsByApplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchExperimentsByApplication failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllExperimentsInProject(String projectId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException
    {
      send_getAllExperimentsInProject(projectId);
      return recv_getAllExperimentsInProject();
    }

    public void send_getAllExperimentsInProject(String projectId) throws org.apache.thrift.TException
    {
      getAllExperimentsInProject_args args = new getAllExperimentsInProject_args();
      args.setProjectId(projectId);
      sendBase("getAllExperimentsInProject", args);
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> recv_getAllExperimentsInProject() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException
    {
      getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
      receiveBase(result, "getAllExperimentsInProject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.pnfe != null) {
        throw result.pnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllExperimentsInProject failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllUserExperiments(String userName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getAllUserExperiments(userName);
      return recv_getAllUserExperiments();
    }

    public void send_getAllUserExperiments(String userName) throws org.apache.thrift.TException
    {
      getAllUserExperiments_args args = new getAllUserExperiments_args();
      args.setUserName(userName);
      sendBase("getAllUserExperiments", args);
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> recv_getAllUserExperiments() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getAllUserExperiments_result result = new getAllUserExperiments_result();
      receiveBase(result, "getAllUserExperiments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllUserExperiments failed: unknown result");
    }

    public String createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_createExperiment(experiment);
      return recv_createExperiment();
    }

    public void send_createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) throws org.apache.thrift.TException
    {
      createExperiment_args args = new createExperiment_args();
      args.setExperiment(experiment);
      sendBase("createExperiment", args);
    }

    public String recv_createExperiment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      createExperiment_result result = new createExperiment_result();
      receiveBase(result, "createExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createExperiment failed: unknown result");
    }

    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getExperiment(airavataExperimentId);
      return recv_getExperiment();
    }

    public void send_getExperiment(String airavataExperimentId) throws org.apache.thrift.TException
    {
      getExperiment_args args = new getExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("getExperiment", args);
    }

    public org.apache.airavata.model.workspace.experiment.Experiment recv_getExperiment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getExperiment_result result = new getExperiment_result();
      receiveBase(result, "getExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperiment failed: unknown result");
    }

    public void updateExperiment(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateExperiment(airavataExperimentId, experiment);
      recv_updateExperiment();
    }

    public void send_updateExperiment(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment) throws org.apache.thrift.TException
    {
      updateExperiment_args args = new updateExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      args.setExperiment(experiment);
      sendBase("updateExperiment", args);
    }

    public void recv_updateExperiment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateExperiment_result result = new updateExperiment_result();
      receiveBase(result, "updateExperiment");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void updateExperimentConfiguration(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration) throws org.apache.thrift.TException
    {
      send_updateExperimentConfiguration(airavataExperimentId, userConfiguration);
      recv_updateExperimentConfiguration();
    }

    public void send_updateExperimentConfiguration(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration) throws org.apache.thrift.TException
    {
      updateExperimentConfiguration_args args = new updateExperimentConfiguration_args();
      args.setAiravataExperimentId(airavataExperimentId);
      args.setUserConfiguration(userConfiguration);
      sendBase("updateExperimentConfiguration", args);
    }

    public void recv_updateExperimentConfiguration() throws org.apache.thrift.TException
    {
      updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
      receiveBase(result, "updateExperimentConfiguration");
      return;
    }

    public void updateResourceScheduleing(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling) throws org.apache.thrift.TException
    {
      send_updateResourceScheduleing(airavataExperimentId, resourceScheduling);
      recv_updateResourceScheduleing();
    }

    public void send_updateResourceScheduleing(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling) throws org.apache.thrift.TException
    {
      updateResourceScheduleing_args args = new updateResourceScheduleing_args();
      args.setAiravataExperimentId(airavataExperimentId);
      args.setResourceScheduling(resourceScheduling);
      sendBase("updateResourceScheduleing", args);
    }

    public void recv_updateResourceScheduleing() throws org.apache.thrift.TException
    {
      updateResourceScheduleing_result result = new updateResourceScheduleing_result();
      receiveBase(result, "updateResourceScheduleing");
      return;
    }

    public boolean validateExperiment(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_validateExperiment(airavataExperimentId);
      return recv_validateExperiment();
    }

    public void send_validateExperiment(String airavataExperimentId) throws org.apache.thrift.TException
    {
      validateExperiment_args args = new validateExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("validateExperiment", args);
    }

    public boolean recv_validateExperiment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      validateExperiment_result result = new validateExperiment_result();
      receiveBase(result, "validateExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateExperiment failed: unknown result");
    }

    public void launchExperiment(String airavataExperimentId, String airavataCredStoreToken) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.LaunchValidationException, org.apache.thrift.TException
    {
      send_launchExperiment(airavataExperimentId, airavataCredStoreToken);
      recv_launchExperiment();
    }

    public void send_launchExperiment(String airavataExperimentId, String airavataCredStoreToken) throws org.apache.thrift.TException
    {
      launchExperiment_args args = new launchExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      args.setAiravataCredStoreToken(airavataCredStoreToken);
      sendBase("launchExperiment", args);
    }

    public void recv_launchExperiment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.LaunchValidationException, org.apache.thrift.TException
    {
      launchExperiment_result result = new launchExperiment_result();
      receiveBase(result, "launchExperiment");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.lve != null) {
        throw result.lve;
      }
      return;
    }

    public org.apache.airavata.model.workspace.experiment.ExperimentStatus getExperimentStatus(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getExperimentStatus(airavataExperimentId);
      return recv_getExperimentStatus();
    }

    public void send_getExperimentStatus(String airavataExperimentId) throws org.apache.thrift.TException
    {
      getExperimentStatus_args args = new getExperimentStatus_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("getExperimentStatus", args);
    }

    public org.apache.airavata.model.workspace.experiment.ExperimentStatus recv_getExperimentStatus() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getExperimentStatus_result result = new getExperimentStatus_result();
      receiveBase(result, "getExperimentStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperimentStatus failed: unknown result");
    }

    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> getExperimentOutputs(String airavataExperimentId) throws org.apache.thrift.TException
    {
      send_getExperimentOutputs(airavataExperimentId);
      return recv_getExperimentOutputs();
    }

    public void send_getExperimentOutputs(String airavataExperimentId) throws org.apache.thrift.TException
    {
      getExperimentOutputs_args args = new getExperimentOutputs_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("getExperimentOutputs", args);
    }

    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> recv_getExperimentOutputs() throws org.apache.thrift.TException
    {
      getExperimentOutputs_result result = new getExperimentOutputs_result();
      receiveBase(result, "getExperimentOutputs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperimentOutputs failed: unknown result");
    }

    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getJobStatuses(String airavataExperimentId) throws org.apache.thrift.TException
    {
      send_getJobStatuses(airavataExperimentId);
      return recv_getJobStatuses();
    }

    public void send_getJobStatuses(String airavataExperimentId) throws org.apache.thrift.TException
    {
      getJobStatuses_args args = new getJobStatuses_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("getJobStatuses", args);
    }

    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> recv_getJobStatuses() throws org.apache.thrift.TException
    {
      getJobStatuses_result result = new getJobStatuses_result();
      receiveBase(result, "getJobStatuses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJobStatuses failed: unknown result");
    }

    public String cloneExperiment(String existingExperimentID, String newExperimentName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_cloneExperiment(existingExperimentID, newExperimentName);
      return recv_cloneExperiment();
    }

    public void send_cloneExperiment(String existingExperimentID, String newExperimentName) throws org.apache.thrift.TException
    {
      cloneExperiment_args args = new cloneExperiment_args();
      args.setExistingExperimentID(existingExperimentID);
      args.setNewExperimentName(newExperimentName);
      sendBase("cloneExperiment", args);
    }

    public String recv_cloneExperiment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      cloneExperiment_result result = new cloneExperiment_result();
      receiveBase(result, "cloneExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneExperiment failed: unknown result");
    }

    public void terminateExperiment(String airavataExperimentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_terminateExperiment(airavataExperimentId);
      recv_terminateExperiment();
    }

    public void send_terminateExperiment(String airavataExperimentId) throws org.apache.thrift.TException
    {
      terminateExperiment_args args = new terminateExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("terminateExperiment", args);
    }

    public void recv_terminateExperiment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      terminateExperiment_result result = new terminateExperiment_result();
      receiveBase(result, "terminateExperiment");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public String registerApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_registerApplicationModule(applicationModule);
      return recv_registerApplicationModule();
    }

    public void send_registerApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.thrift.TException
    {
      registerApplicationModule_args args = new registerApplicationModule_args();
      args.setApplicationModule(applicationModule);
      sendBase("registerApplicationModule", args);
    }

    public String recv_registerApplicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      registerApplicationModule_result result = new registerApplicationModule_result();
      receiveBase(result, "registerApplicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerApplicationModule failed: unknown result");
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getApplicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getApplicationModule(appModuleId);
      return recv_getApplicationModule();
    }

    public void send_getApplicationModule(String appModuleId) throws org.apache.thrift.TException
    {
      getApplicationModule_args args = new getApplicationModule_args();
      args.setAppModuleId(appModuleId);
      sendBase("getApplicationModule", args);
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule recv_getApplicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getApplicationModule_result result = new getApplicationModule_result();
      receiveBase(result, "getApplicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationModule failed: unknown result");
    }

    public boolean updateApplicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateApplicationModule(appModuleId, applicationModule);
      return recv_updateApplicationModule();
    }

    public void send_updateApplicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.thrift.TException
    {
      updateApplicationModule_args args = new updateApplicationModule_args();
      args.setAppModuleId(appModuleId);
      args.setApplicationModule(applicationModule);
      sendBase("updateApplicationModule", args);
    }

    public boolean recv_updateApplicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateApplicationModule_result result = new updateApplicationModule_result();
      receiveBase(result, "updateApplicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateApplicationModule failed: unknown result");
    }

    public boolean deleteApplicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_deleteApplicationModule(appModuleId);
      return recv_deleteApplicationModule();
    }

    public void send_deleteApplicationModule(String appModuleId) throws org.apache.thrift.TException
    {
      deleteApplicationModule_args args = new deleteApplicationModule_args();
      args.setAppModuleId(appModuleId);
      sendBase("deleteApplicationModule", args);
    }

    public boolean recv_deleteApplicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      deleteApplicationModule_result result = new deleteApplicationModule_result();
      receiveBase(result, "deleteApplicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteApplicationModule failed: unknown result");
    }

    public String registerApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_registerApplicationDeployment(applicationDeployment);
      return recv_registerApplicationDeployment();
    }

    public void send_registerApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.thrift.TException
    {
      registerApplicationDeployment_args args = new registerApplicationDeployment_args();
      args.setApplicationDeployment(applicationDeployment);
      sendBase("registerApplicationDeployment", args);
    }

    public String recv_registerApplicationDeployment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      registerApplicationDeployment_result result = new registerApplicationDeployment_result();
      receiveBase(result, "registerApplicationDeployment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerApplicationDeployment failed: unknown result");
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getApplicationDeployment(String appDeploymentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getApplicationDeployment(appDeploymentId);
      return recv_getApplicationDeployment();
    }

    public void send_getApplicationDeployment(String appDeploymentId) throws org.apache.thrift.TException
    {
      getApplicationDeployment_args args = new getApplicationDeployment_args();
      args.setAppDeploymentId(appDeploymentId);
      sendBase("getApplicationDeployment", args);
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription recv_getApplicationDeployment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getApplicationDeployment_result result = new getApplicationDeployment_result();
      receiveBase(result, "getApplicationDeployment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationDeployment failed: unknown result");
    }

    public boolean updateApplicationDeployment(String appDeploymentId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateApplicationDeployment(appDeploymentId, applicationDeployment);
      return recv_updateApplicationDeployment();
    }

    public void send_updateApplicationDeployment(String appDeploymentId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.thrift.TException
    {
      updateApplicationDeployment_args args = new updateApplicationDeployment_args();
      args.setAppDeploymentId(appDeploymentId);
      args.setApplicationDeployment(applicationDeployment);
      sendBase("updateApplicationDeployment", args);
    }

    public boolean recv_updateApplicationDeployment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateApplicationDeployment_result result = new updateApplicationDeployment_result();
      receiveBase(result, "updateApplicationDeployment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateApplicationDeployment failed: unknown result");
    }

    public boolean deleteApplicationDeployment(String appDeploymentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_deleteApplicationDeployment(appDeploymentId);
      return recv_deleteApplicationDeployment();
    }

    public void send_deleteApplicationDeployment(String appDeploymentId) throws org.apache.thrift.TException
    {
      deleteApplicationDeployment_args args = new deleteApplicationDeployment_args();
      args.setAppDeploymentId(appDeploymentId);
      sendBase("deleteApplicationDeployment", args);
    }

    public boolean recv_deleteApplicationDeployment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      deleteApplicationDeployment_result result = new deleteApplicationDeployment_result();
      receiveBase(result, "deleteApplicationDeployment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteApplicationDeployment failed: unknown result");
    }

    public List<String> getAppModuleDeployedResources(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getAppModuleDeployedResources(appModuleId);
      return recv_getAppModuleDeployedResources();
    }

    public void send_getAppModuleDeployedResources(String appModuleId) throws org.apache.thrift.TException
    {
      getAppModuleDeployedResources_args args = new getAppModuleDeployedResources_args();
      args.setAppModuleId(appModuleId);
      sendBase("getAppModuleDeployedResources", args);
    }

    public List<String> recv_getAppModuleDeployedResources() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getAppModuleDeployedResources_result result = new getAppModuleDeployedResources_result();
      receiveBase(result, "getAppModuleDeployedResources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAppModuleDeployedResources failed: unknown result");
    }

    public String registerApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_registerApplicationInterface(applicationInterface);
      return recv_registerApplicationInterface();
    }

    public void send_registerApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.thrift.TException
    {
      registerApplicationInterface_args args = new registerApplicationInterface_args();
      args.setApplicationInterface(applicationInterface);
      sendBase("registerApplicationInterface", args);
    }

    public String recv_registerApplicationInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      registerApplicationInterface_result result = new registerApplicationInterface_result();
      receiveBase(result, "registerApplicationInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerApplicationInterface failed: unknown result");
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getApplicationInterface(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getApplicationInterface(appInterfaceId);
      return recv_getApplicationInterface();
    }

    public void send_getApplicationInterface(String appInterfaceId) throws org.apache.thrift.TException
    {
      getApplicationInterface_args args = new getApplicationInterface_args();
      args.setAppInterfaceId(appInterfaceId);
      sendBase("getApplicationInterface", args);
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription recv_getApplicationInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getApplicationInterface_result result = new getApplicationInterface_result();
      receiveBase(result, "getApplicationInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationInterface failed: unknown result");
    }

    public boolean updateApplicationInterface(String appInterfaceId, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateApplicationInterface(appInterfaceId, applicationInterface);
      return recv_updateApplicationInterface();
    }

    public void send_updateApplicationInterface(String appInterfaceId, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.thrift.TException
    {
      updateApplicationInterface_args args = new updateApplicationInterface_args();
      args.setAppInterfaceId(appInterfaceId);
      args.setApplicationInterface(applicationInterface);
      sendBase("updateApplicationInterface", args);
    }

    public boolean recv_updateApplicationInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateApplicationInterface_result result = new updateApplicationInterface_result();
      receiveBase(result, "updateApplicationInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateApplicationInterface failed: unknown result");
    }

    public boolean deleteApplicationInterface(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_deleteApplicationInterface(appInterfaceId);
      return recv_deleteApplicationInterface();
    }

    public void send_deleteApplicationInterface(String appInterfaceId) throws org.apache.thrift.TException
    {
      deleteApplicationInterface_args args = new deleteApplicationInterface_args();
      args.setAppInterfaceId(appInterfaceId);
      sendBase("deleteApplicationInterface", args);
    }

    public boolean recv_deleteApplicationInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      deleteApplicationInterface_result result = new deleteApplicationInterface_result();
      receiveBase(result, "deleteApplicationInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteApplicationInterface failed: unknown result");
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> getApplicationInputs(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getApplicationInputs(appInterfaceId);
      return recv_getApplicationInputs();
    }

    public void send_getApplicationInputs(String appInterfaceId) throws org.apache.thrift.TException
    {
      getApplicationInputs_args args = new getApplicationInputs_args();
      args.setAppInterfaceId(appInterfaceId);
      sendBase("getApplicationInputs", args);
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> recv_getApplicationInputs() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getApplicationInputs_result result = new getApplicationInputs_result();
      receiveBase(result, "getApplicationInputs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationInputs failed: unknown result");
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> getApplicationOutputs(String appInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getApplicationOutputs(appInterfaceId);
      return recv_getApplicationOutputs();
    }

    public void send_getApplicationOutputs(String appInterfaceId) throws org.apache.thrift.TException
    {
      getApplicationOutputs_args args = new getApplicationOutputs_args();
      args.setAppInterfaceId(appInterfaceId);
      sendBase("getApplicationOutputs", args);
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> recv_getApplicationOutputs() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getApplicationOutputs_result result = new getApplicationOutputs_result();
      receiveBase(result, "getApplicationOutputs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationOutputs failed: unknown result");
    }

    public String registerComputeResource(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_registerComputeResource(computeResourceDescription);
      return recv_registerComputeResource();
    }

    public void send_registerComputeResource(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) throws org.apache.thrift.TException
    {
      registerComputeResource_args args = new registerComputeResource_args();
      args.setComputeResourceDescription(computeResourceDescription);
      sendBase("registerComputeResource", args);
    }

    public String recv_registerComputeResource() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      registerComputeResource_result result = new registerComputeResource_result();
      receiveBase(result, "registerComputeResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerComputeResource failed: unknown result");
    }

    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription getComputeResource(String computeResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getComputeResource(computeResourceId);
      return recv_getComputeResource();
    }

    public void send_getComputeResource(String computeResourceId) throws org.apache.thrift.TException
    {
      getComputeResource_args args = new getComputeResource_args();
      args.setComputeResourceId(computeResourceId);
      sendBase("getComputeResource", args);
    }

    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription recv_getComputeResource() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getComputeResource_result result = new getComputeResource_result();
      receiveBase(result, "getComputeResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getComputeResource failed: unknown result");
    }

    public boolean updateComputeResource(String computeResourceId, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateComputeResource(computeResourceId, computeResourceDescription);
      return recv_updateComputeResource();
    }

    public void send_updateComputeResource(String computeResourceId, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) throws org.apache.thrift.TException
    {
      updateComputeResource_args args = new updateComputeResource_args();
      args.setComputeResourceId(computeResourceId);
      args.setComputeResourceDescription(computeResourceDescription);
      sendBase("updateComputeResource", args);
    }

    public boolean recv_updateComputeResource() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateComputeResource_result result = new updateComputeResource_result();
      receiveBase(result, "updateComputeResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateComputeResource failed: unknown result");
    }

    public boolean deleteComputeResource(String computeResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_deleteComputeResource(computeResourceId);
      return recv_deleteComputeResource();
    }

    public void send_deleteComputeResource(String computeResourceId) throws org.apache.thrift.TException
    {
      deleteComputeResource_args args = new deleteComputeResource_args();
      args.setComputeResourceId(computeResourceId);
      sendBase("deleteComputeResource", args);
    }

    public boolean recv_deleteComputeResource() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      deleteComputeResource_result result = new deleteComputeResource_result();
      receiveBase(result, "deleteComputeResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteComputeResource failed: unknown result");
    }

    public boolean addLocalSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addLocalSubmissionDetails(computeResourceId, priorityOrder, localSubmission);
      return recv_addLocalSubmissionDetails();
    }

    public void send_addLocalSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) throws org.apache.thrift.TException
    {
      addLocalSubmissionDetails_args args = new addLocalSubmissionDetails_args();
      args.setComputeResourceId(computeResourceId);
      args.setPriorityOrder(priorityOrder);
      args.setLocalSubmission(localSubmission);
      sendBase("addLocalSubmissionDetails", args);
    }

    public boolean recv_addLocalSubmissionDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addLocalSubmissionDetails_result result = new addLocalSubmissionDetails_result();
      receiveBase(result, "addLocalSubmissionDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLocalSubmissionDetails failed: unknown result");
    }

    public boolean updateLocalSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission);
      return recv_updateLocalSubmissionDetails();
    }

    public void send_updateLocalSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) throws org.apache.thrift.TException
    {
      updateLocalSubmissionDetails_args args = new updateLocalSubmissionDetails_args();
      args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
      args.setLocalSubmission(localSubmission);
      sendBase("updateLocalSubmissionDetails", args);
    }

    public boolean recv_updateLocalSubmissionDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateLocalSubmissionDetails_result result = new updateLocalSubmissionDetails_result();
      receiveBase(result, "updateLocalSubmissionDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLocalSubmissionDetails failed: unknown result");
    }

    public boolean addSSHJobSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addSSHJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission);
      return recv_addSSHJobSubmissionDetails();
    }

    public void send_addSSHJobSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) throws org.apache.thrift.TException
    {
      addSSHJobSubmissionDetails_args args = new addSSHJobSubmissionDetails_args();
      args.setComputeResourceId(computeResourceId);
      args.setPriorityOrder(priorityOrder);
      args.setSshJobSubmission(sshJobSubmission);
      sendBase("addSSHJobSubmissionDetails", args);
    }

    public boolean recv_addSSHJobSubmissionDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addSSHJobSubmissionDetails_result result = new addSSHJobSubmissionDetails_result();
      receiveBase(result, "addSSHJobSubmissionDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSSHJobSubmissionDetails failed: unknown result");
    }

    public boolean updateSSHJobSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
      return recv_updateSSHJobSubmissionDetails();
    }

    public void send_updateSSHJobSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) throws org.apache.thrift.TException
    {
      updateSSHJobSubmissionDetails_args args = new updateSSHJobSubmissionDetails_args();
      args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
      args.setSshJobSubmission(sshJobSubmission);
      sendBase("updateSSHJobSubmissionDetails", args);
    }

    public boolean recv_updateSSHJobSubmissionDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateSSHJobSubmissionDetails_result result = new updateSSHJobSubmissionDetails_result();
      receiveBase(result, "updateSSHJobSubmissionDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSSHJobSubmissionDetails failed: unknown result");
    }

    public boolean addLocalDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addLocalDataMovementDetails(computeResourceId, priorityOrder, localDataMovement);
      return recv_addLocalDataMovementDetails();
    }

    public void send_addLocalDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) throws org.apache.thrift.TException
    {
      addLocalDataMovementDetails_args args = new addLocalDataMovementDetails_args();
      args.setComputeResourceId(computeResourceId);
      args.setPriorityOrder(priorityOrder);
      args.setLocalDataMovement(localDataMovement);
      sendBase("addLocalDataMovementDetails", args);
    }

    public boolean recv_addLocalDataMovementDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addLocalDataMovementDetails_result result = new addLocalDataMovementDetails_result();
      receiveBase(result, "addLocalDataMovementDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLocalDataMovementDetails failed: unknown result");
    }

    public boolean updateLocalDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateLocalDataMovementDetails(jobSubmissionInterfaceId, localDataMovement);
      return recv_updateLocalDataMovementDetails();
    }

    public void send_updateLocalDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) throws org.apache.thrift.TException
    {
      updateLocalDataMovementDetails_args args = new updateLocalDataMovementDetails_args();
      args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
      args.setLocalDataMovement(localDataMovement);
      sendBase("updateLocalDataMovementDetails", args);
    }

    public boolean recv_updateLocalDataMovementDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateLocalDataMovementDetails_result result = new updateLocalDataMovementDetails_result();
      receiveBase(result, "updateLocalDataMovementDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateLocalDataMovementDetails failed: unknown result");
    }

    public boolean addSCPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addSCPDataMovementDetails(computeResourceId, priorityOrder, scpDataMovement);
      return recv_addSCPDataMovementDetails();
    }

    public void send_addSCPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) throws org.apache.thrift.TException
    {
      addSCPDataMovementDetails_args args = new addSCPDataMovementDetails_args();
      args.setComputeResourceId(computeResourceId);
      args.setPriorityOrder(priorityOrder);
      args.setScpDataMovement(scpDataMovement);
      sendBase("addSCPDataMovementDetails", args);
    }

    public boolean recv_addSCPDataMovementDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addSCPDataMovementDetails_result result = new addSCPDataMovementDetails_result();
      receiveBase(result, "addSCPDataMovementDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSCPDataMovementDetails failed: unknown result");
    }

    public boolean updateSCPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateSCPDataMovementDetails(jobSubmissionInterfaceId, scpDataMovement);
      return recv_updateSCPDataMovementDetails();
    }

    public void send_updateSCPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) throws org.apache.thrift.TException
    {
      updateSCPDataMovementDetails_args args = new updateSCPDataMovementDetails_args();
      args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
      args.setScpDataMovement(scpDataMovement);
      sendBase("updateSCPDataMovementDetails", args);
    }

    public boolean recv_updateSCPDataMovementDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateSCPDataMovementDetails_result result = new updateSCPDataMovementDetails_result();
      receiveBase(result, "updateSCPDataMovementDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSCPDataMovementDetails failed: unknown result");
    }

    public boolean addGridFTPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addGridFTPDataMovementDetails(computeResourceId, priorityOrder, gridFTPDataMovement);
      return recv_addGridFTPDataMovementDetails();
    }

    public void send_addGridFTPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) throws org.apache.thrift.TException
    {
      addGridFTPDataMovementDetails_args args = new addGridFTPDataMovementDetails_args();
      args.setComputeResourceId(computeResourceId);
      args.setPriorityOrder(priorityOrder);
      args.setGridFTPDataMovement(gridFTPDataMovement);
      sendBase("addGridFTPDataMovementDetails", args);
    }

    public boolean recv_addGridFTPDataMovementDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addGridFTPDataMovementDetails_result result = new addGridFTPDataMovementDetails_result();
      receiveBase(result, "addGridFTPDataMovementDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addGridFTPDataMovementDetails failed: unknown result");
    }

    public boolean updateGridFTPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateGridFTPDataMovementDetails(jobSubmissionInterfaceId, gridFTPDataMovement);
      return recv_updateGridFTPDataMovementDetails();
    }

    public void send_updateGridFTPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) throws org.apache.thrift.TException
    {
      updateGridFTPDataMovementDetails_args args = new updateGridFTPDataMovementDetails_args();
      args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
      args.setGridFTPDataMovement(gridFTPDataMovement);
      sendBase("updateGridFTPDataMovementDetails", args);
    }

    public boolean recv_updateGridFTPDataMovementDetails() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateGridFTPDataMovementDetails_result result = new updateGridFTPDataMovementDetails_result();
      receiveBase(result, "updateGridFTPDataMovementDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGridFTPDataMovementDetails failed: unknown result");
    }

    public boolean changeJobSubmissionPriority(String jobSubmissionInterfaceId, int newPriorityOrder) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_changeJobSubmissionPriority(jobSubmissionInterfaceId, newPriorityOrder);
      return recv_changeJobSubmissionPriority();
    }

    public void send_changeJobSubmissionPriority(String jobSubmissionInterfaceId, int newPriorityOrder) throws org.apache.thrift.TException
    {
      changeJobSubmissionPriority_args args = new changeJobSubmissionPriority_args();
      args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
      args.setNewPriorityOrder(newPriorityOrder);
      sendBase("changeJobSubmissionPriority", args);
    }

    public boolean recv_changeJobSubmissionPriority() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      changeJobSubmissionPriority_result result = new changeJobSubmissionPriority_result();
      receiveBase(result, "changeJobSubmissionPriority");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeJobSubmissionPriority failed: unknown result");
    }

    public boolean changeDataMovementPriority(String dataMovementInterfaceId, int newPriorityOrder) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_changeDataMovementPriority(dataMovementInterfaceId, newPriorityOrder);
      return recv_changeDataMovementPriority();
    }

    public void send_changeDataMovementPriority(String dataMovementInterfaceId, int newPriorityOrder) throws org.apache.thrift.TException
    {
      changeDataMovementPriority_args args = new changeDataMovementPriority_args();
      args.setDataMovementInterfaceId(dataMovementInterfaceId);
      args.setNewPriorityOrder(newPriorityOrder);
      sendBase("changeDataMovementPriority", args);
    }

    public boolean recv_changeDataMovementPriority() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      changeDataMovementPriority_result result = new changeDataMovementPriority_result();
      receiveBase(result, "changeDataMovementPriority");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeDataMovementPriority failed: unknown result");
    }

    public boolean changeJobSubmissionPriorities(Map<String,Integer> jobSubmissionPriorityMap) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_changeJobSubmissionPriorities(jobSubmissionPriorityMap);
      return recv_changeJobSubmissionPriorities();
    }

    public void send_changeJobSubmissionPriorities(Map<String,Integer> jobSubmissionPriorityMap) throws org.apache.thrift.TException
    {
      changeJobSubmissionPriorities_args args = new changeJobSubmissionPriorities_args();
      args.setJobSubmissionPriorityMap(jobSubmissionPriorityMap);
      sendBase("changeJobSubmissionPriorities", args);
    }

    public boolean recv_changeJobSubmissionPriorities() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      changeJobSubmissionPriorities_result result = new changeJobSubmissionPriorities_result();
      receiveBase(result, "changeJobSubmissionPriorities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeJobSubmissionPriorities failed: unknown result");
    }

    public boolean changeDataMovementPriorities(Map<String,Integer> dataMovementPriorityMap) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_changeDataMovementPriorities(dataMovementPriorityMap);
      return recv_changeDataMovementPriorities();
    }

    public void send_changeDataMovementPriorities(Map<String,Integer> dataMovementPriorityMap) throws org.apache.thrift.TException
    {
      changeDataMovementPriorities_args args = new changeDataMovementPriorities_args();
      args.setDataMovementPriorityMap(dataMovementPriorityMap);
      sendBase("changeDataMovementPriorities", args);
    }

    public boolean recv_changeDataMovementPriorities() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      changeDataMovementPriorities_result result = new changeDataMovementPriorities_result();
      receiveBase(result, "changeDataMovementPriorities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeDataMovementPriorities failed: unknown result");
    }

    public boolean deleteJobSubmissionInterface(String jobSubmissionInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_deleteJobSubmissionInterface(jobSubmissionInterfaceId);
      return recv_deleteJobSubmissionInterface();
    }

    public void send_deleteJobSubmissionInterface(String jobSubmissionInterfaceId) throws org.apache.thrift.TException
    {
      deleteJobSubmissionInterface_args args = new deleteJobSubmissionInterface_args();
      args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
      sendBase("deleteJobSubmissionInterface", args);
    }

    public boolean recv_deleteJobSubmissionInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      deleteJobSubmissionInterface_result result = new deleteJobSubmissionInterface_result();
      receiveBase(result, "deleteJobSubmissionInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteJobSubmissionInterface failed: unknown result");
    }

    public boolean deleteDataMovementInterface(String dataMovementInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_deleteDataMovementInterface(dataMovementInterfaceId);
      return recv_deleteDataMovementInterface();
    }

    public void send_deleteDataMovementInterface(String dataMovementInterfaceId) throws org.apache.thrift.TException
    {
      deleteDataMovementInterface_args args = new deleteDataMovementInterface_args();
      args.setDataMovementInterfaceId(dataMovementInterfaceId);
      sendBase("deleteDataMovementInterface", args);
    }

    public boolean recv_deleteDataMovementInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      deleteDataMovementInterface_result result = new deleteDataMovementInterface_result();
      receiveBase(result, "deleteDataMovementInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteDataMovementInterface failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAPIVersion_call method_call = new getAPIVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAPIVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAPIVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAPIVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAPIVersion_args args = new getAPIVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAPIVersion();
      }
    }

    public void createProject(org.apache.airavata.model.workspace.Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createProject_call method_call = new createProject_call(project, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createProject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.workspace.Project project;
      public createProject_call(org.apache.airavata.model.workspace.Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.project = project;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createProject_args args = new createProject_args();
        args.setProject(project);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createProject();
      }
    }

    public void updateProject(String projectId, org.apache.airavata.model.workspace.Project updatedProject, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProject_call method_call = new updateProject_call(projectId, updatedProject, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectId;
      private org.apache.airavata.model.workspace.Project updatedProject;
      public updateProject_call(String projectId, org.apache.airavata.model.workspace.Project updatedProject, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.updatedProject = updatedProject;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProject_args args = new updateProject_args();
        args.setProjectId(projectId);
        args.setUpdatedProject(updatedProject);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateProject();
      }
    }

    public void getProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProject_call method_call = new getProject_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectId;
      public getProject_call(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProject_args args = new getProject_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.workspace.Project getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProject();
      }
    }

    public void getAllUserProjects(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllUserProjects_call method_call = new getAllUserProjects_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllUserProjects_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public getAllUserProjects_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllUserProjects", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllUserProjects_args args = new getAllUserProjects_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.Project> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllUserProjects();
      }
    }

    public void searchProjectsByProjectName(String userName, String projectName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchProjectsByProjectName_call method_call = new searchProjectsByProjectName_call(userName, projectName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchProjectsByProjectName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String projectName;
      public searchProjectsByProjectName_call(String userName, String projectName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.projectName = projectName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchProjectsByProjectName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchProjectsByProjectName_args args = new searchProjectsByProjectName_args();
        args.setUserName(userName);
        args.setProjectName(projectName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.Project> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchProjectsByProjectName();
      }
    }

    public void searchProjectsByProjectDesc(String userName, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchProjectsByProjectDesc_call method_call = new searchProjectsByProjectDesc_call(userName, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchProjectsByProjectDesc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String description;
      public searchProjectsByProjectDesc_call(String userName, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchProjectsByProjectDesc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchProjectsByProjectDesc_args args = new searchProjectsByProjectDesc_args();
        args.setUserName(userName);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.Project> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchProjectsByProjectDesc();
      }
    }

    public void searchExperimentsByName(String userName, String expName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchExperimentsByName_call method_call = new searchExperimentsByName_call(userName, expName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchExperimentsByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String expName;
      public searchExperimentsByName_call(String userName, String expName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.expName = expName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExperimentsByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchExperimentsByName_args args = new searchExperimentsByName_args();
        args.setUserName(userName);
        args.setExpName(expName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchExperimentsByName();
      }
    }

    public void searchExperimentsByDesc(String userName, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchExperimentsByDesc_call method_call = new searchExperimentsByDesc_call(userName, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchExperimentsByDesc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String description;
      public searchExperimentsByDesc_call(String userName, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExperimentsByDesc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchExperimentsByDesc_args args = new searchExperimentsByDesc_args();
        args.setUserName(userName);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchExperimentsByDesc();
      }
    }

    public void searchExperimentsByApplication(String userName, String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchExperimentsByApplication_call method_call = new searchExperimentsByApplication_call(userName, applicationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchExperimentsByApplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String applicationId;
      public searchExperimentsByApplication_call(String userName, String applicationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.applicationId = applicationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchExperimentsByApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchExperimentsByApplication_args args = new searchExperimentsByApplication_args();
        args.setUserName(userName);
        args.setApplicationId(applicationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchExperimentsByApplication();
      }
    }

    public void getAllExperimentsInProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllExperimentsInProject_call method_call = new getAllExperimentsInProject_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllExperimentsInProject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectId;
      public getAllExperimentsInProject_call(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllExperimentsInProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllExperimentsInProject_args args = new getAllExperimentsInProject_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.experiment.Experiment> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.ProjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllExperimentsInProject();
      }
    }

    public void getAllUserExperiments(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllUserExperiments_call method_call = new getAllUserExperiments_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllUserExperiments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public getAllUserExperiments_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllUserExperiments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllUserExperiments_args args = new getAllUserExperiments_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.experiment.Experiment> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllUserExperiments();
      }
    }

    public void createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createExperiment_call method_call = new createExperiment_call(experiment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.workspace.experiment.Experiment experiment;
      public createExperiment_call(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experiment = experiment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createExperiment_args args = new createExperiment_args();
        args.setExperiment(experiment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createExperiment();
      }
    }

    public void getExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperiment_call method_call = new getExperiment_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public getExperiment_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperiment_args args = new getExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.workspace.experiment.Experiment getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperiment();
      }
    }

    public void updateExperiment(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateExperiment_call method_call = new updateExperiment_call(airavataExperimentId, experiment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      private org.apache.airavata.model.workspace.experiment.Experiment experiment;
      public updateExperiment_call(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
        this.experiment = experiment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateExperiment_args args = new updateExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.setExperiment(experiment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateExperiment();
      }
    }

    public void updateExperimentConfiguration(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateExperimentConfiguration_call method_call = new updateExperimentConfiguration_call(airavataExperimentId, userConfiguration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateExperimentConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      private org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration;
      public updateExperimentConfiguration_call(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
        this.userConfiguration = userConfiguration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateExperimentConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateExperimentConfiguration_args args = new updateExperimentConfiguration_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.setUserConfiguration(userConfiguration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateExperimentConfiguration();
      }
    }

    public void updateResourceScheduleing(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateResourceScheduleing_call method_call = new updateResourceScheduleing_call(airavataExperimentId, resourceScheduling, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateResourceScheduleing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      private org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling;
      public updateResourceScheduleing_call(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
        this.resourceScheduling = resourceScheduling;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateResourceScheduleing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateResourceScheduleing_args args = new updateResourceScheduleing_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.setResourceScheduling(resourceScheduling);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateResourceScheduleing();
      }
    }

    public void validateExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateExperiment_call method_call = new validateExperiment_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public validateExperiment_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateExperiment_args args = new validateExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateExperiment();
      }
    }

    public void launchExperiment(String airavataExperimentId, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      launchExperiment_call method_call = new launchExperiment_call(airavataExperimentId, airavataCredStoreToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class launchExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      private String airavataCredStoreToken;
      public launchExperiment_call(String airavataExperimentId, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
        this.airavataCredStoreToken = airavataCredStoreToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("launchExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        launchExperiment_args args = new launchExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.setAiravataCredStoreToken(airavataCredStoreToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.LaunchValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_launchExperiment();
      }
    }

    public void getExperimentStatus(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperimentStatus_call method_call = new getExperimentStatus_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperimentStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public getExperimentStatus_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperimentStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperimentStatus_args args = new getExperimentStatus_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.workspace.experiment.ExperimentStatus getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperimentStatus();
      }
    }

    public void getExperimentOutputs(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperimentOutputs_call method_call = new getExperimentOutputs_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperimentOutputs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public getExperimentOutputs_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperimentOutputs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperimentOutputs_args args = new getExperimentOutputs_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.workspace.experiment.DataObjectType> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperimentOutputs();
      }
    }

    public void getJobStatuses(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJobStatuses_call method_call = new getJobStatuses_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJobStatuses_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public getJobStatuses_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJobStatuses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJobStatuses_args args = new getJobStatuses_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJobStatuses();
      }
    }

    public void cloneExperiment(String existingExperimentID, String newExperimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cloneExperiment_call method_call = new cloneExperiment_call(existingExperimentID, newExperimentName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cloneExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String existingExperimentID;
      private String newExperimentName;
      public cloneExperiment_call(String existingExperimentID, String newExperimentName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.existingExperimentID = existingExperimentID;
        this.newExperimentName = newExperimentName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cloneExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cloneExperiment_args args = new cloneExperiment_args();
        args.setExistingExperimentID(existingExperimentID);
        args.setNewExperimentName(newExperimentName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cloneExperiment();
      }
    }

    public void terminateExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateExperiment_call method_call = new terminateExperiment_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public terminateExperiment_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateExperiment_args args = new terminateExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.ExperimentNotFoundException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_terminateExperiment();
      }
    }

    public void registerApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerApplicationModule_call method_call = new registerApplicationModule_call(applicationModule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerApplicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule;
      public registerApplicationModule_call(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationModule = applicationModule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerApplicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerApplicationModule_args args = new registerApplicationModule_args();
        args.setApplicationModule(applicationModule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerApplicationModule();
      }
    }

    public void getApplicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationModule_call method_call = new getApplicationModule_call(appModuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appModuleId;
      public getApplicationModule_call(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appModuleId = appModuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationModule_args args = new getApplicationModule_args();
        args.setAppModuleId(appModuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationModule();
      }
    }

    public void updateApplicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateApplicationModule_call method_call = new updateApplicationModule_call(appModuleId, applicationModule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateApplicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appModuleId;
      private org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule;
      public updateApplicationModule_call(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appModuleId = appModuleId;
        this.applicationModule = applicationModule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateApplicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateApplicationModule_args args = new updateApplicationModule_args();
        args.setAppModuleId(appModuleId);
        args.setApplicationModule(applicationModule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateApplicationModule();
      }
    }

    public void deleteApplicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteApplicationModule_call method_call = new deleteApplicationModule_call(appModuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteApplicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appModuleId;
      public deleteApplicationModule_call(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appModuleId = appModuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteApplicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteApplicationModule_args args = new deleteApplicationModule_args();
        args.setAppModuleId(appModuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteApplicationModule();
      }
    }

    public void registerApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerApplicationDeployment_call method_call = new registerApplicationDeployment_call(applicationDeployment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerApplicationDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment;
      public registerApplicationDeployment_call(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationDeployment = applicationDeployment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerApplicationDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerApplicationDeployment_args args = new registerApplicationDeployment_args();
        args.setApplicationDeployment(applicationDeployment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerApplicationDeployment();
      }
    }

    public void getApplicationDeployment(String appDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationDeployment_call method_call = new getApplicationDeployment_call(appDeploymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appDeploymentId;
      public getApplicationDeployment_call(String appDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appDeploymentId = appDeploymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationDeployment_args args = new getApplicationDeployment_args();
        args.setAppDeploymentId(appDeploymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationDeployment();
      }
    }

    public void updateApplicationDeployment(String appDeploymentId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateApplicationDeployment_call method_call = new updateApplicationDeployment_call(appDeploymentId, applicationDeployment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateApplicationDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appDeploymentId;
      private org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment;
      public updateApplicationDeployment_call(String appDeploymentId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appDeploymentId = appDeploymentId;
        this.applicationDeployment = applicationDeployment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateApplicationDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateApplicationDeployment_args args = new updateApplicationDeployment_args();
        args.setAppDeploymentId(appDeploymentId);
        args.setApplicationDeployment(applicationDeployment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateApplicationDeployment();
      }
    }

    public void deleteApplicationDeployment(String appDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteApplicationDeployment_call method_call = new deleteApplicationDeployment_call(appDeploymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteApplicationDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appDeploymentId;
      public deleteApplicationDeployment_call(String appDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appDeploymentId = appDeploymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteApplicationDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteApplicationDeployment_args args = new deleteApplicationDeployment_args();
        args.setAppDeploymentId(appDeploymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteApplicationDeployment();
      }
    }

    public void getAppModuleDeployedResources(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAppModuleDeployedResources_call method_call = new getAppModuleDeployedResources_call(appModuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAppModuleDeployedResources_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appModuleId;
      public getAppModuleDeployedResources_call(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appModuleId = appModuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAppModuleDeployedResources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAppModuleDeployedResources_args args = new getAppModuleDeployedResources_args();
        args.setAppModuleId(appModuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAppModuleDeployedResources();
      }
    }

    public void registerApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerApplicationInterface_call method_call = new registerApplicationInterface_call(applicationInterface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerApplicationInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface;
      public registerApplicationInterface_call(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationInterface = applicationInterface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerApplicationInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerApplicationInterface_args args = new registerApplicationInterface_args();
        args.setApplicationInterface(applicationInterface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerApplicationInterface();
      }
    }

    public void getApplicationInterface(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationInterface_call method_call = new getApplicationInterface_call(appInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appInterfaceId;
      public getApplicationInterface_call(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appInterfaceId = appInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationInterface_args args = new getApplicationInterface_args();
        args.setAppInterfaceId(appInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationInterface();
      }
    }

    public void updateApplicationInterface(String appInterfaceId, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateApplicationInterface_call method_call = new updateApplicationInterface_call(appInterfaceId, applicationInterface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateApplicationInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appInterfaceId;
      private org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface;
      public updateApplicationInterface_call(String appInterfaceId, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appInterfaceId = appInterfaceId;
        this.applicationInterface = applicationInterface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateApplicationInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateApplicationInterface_args args = new updateApplicationInterface_args();
        args.setAppInterfaceId(appInterfaceId);
        args.setApplicationInterface(applicationInterface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateApplicationInterface();
      }
    }

    public void deleteApplicationInterface(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteApplicationInterface_call method_call = new deleteApplicationInterface_call(appInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteApplicationInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appInterfaceId;
      public deleteApplicationInterface_call(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appInterfaceId = appInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteApplicationInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteApplicationInterface_args args = new deleteApplicationInterface_args();
        args.setAppInterfaceId(appInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteApplicationInterface();
      }
    }

    public void getApplicationInputs(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationInputs_call method_call = new getApplicationInputs_call(appInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationInputs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appInterfaceId;
      public getApplicationInputs_call(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appInterfaceId = appInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationInputs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationInputs_args args = new getApplicationInputs_args();
        args.setAppInterfaceId(appInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationInputs();
      }
    }

    public void getApplicationOutputs(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationOutputs_call method_call = new getApplicationOutputs_call(appInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationOutputs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appInterfaceId;
      public getApplicationOutputs_call(String appInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appInterfaceId = appInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationOutputs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationOutputs_args args = new getApplicationOutputs_args();
        args.setAppInterfaceId(appInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationOutputs();
      }
    }

    public void registerComputeResource(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerComputeResource_call method_call = new registerComputeResource_call(computeResourceDescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerComputeResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription;
      public registerComputeResource_call(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceDescription = computeResourceDescription;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerComputeResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerComputeResource_args args = new registerComputeResource_args();
        args.setComputeResourceDescription(computeResourceDescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerComputeResource();
      }
    }

    public void getComputeResource(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getComputeResource_call method_call = new getComputeResource_call(computeResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getComputeResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      public getComputeResource_call(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getComputeResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getComputeResource_args args = new getComputeResource_args();
        args.setComputeResourceId(computeResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getComputeResource();
      }
    }

    public void updateComputeResource(String computeResourceId, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateComputeResource_call method_call = new updateComputeResource_call(computeResourceId, computeResourceDescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateComputeResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription;
      public updateComputeResource_call(String computeResourceId, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.computeResourceDescription = computeResourceDescription;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateComputeResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateComputeResource_args args = new updateComputeResource_args();
        args.setComputeResourceId(computeResourceId);
        args.setComputeResourceDescription(computeResourceDescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateComputeResource();
      }
    }

    public void deleteComputeResource(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteComputeResource_call method_call = new deleteComputeResource_call(computeResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteComputeResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      public deleteComputeResource_call(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteComputeResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteComputeResource_args args = new deleteComputeResource_args();
        args.setComputeResourceId(computeResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteComputeResource();
      }
    }

    public void addLocalSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLocalSubmissionDetails_call method_call = new addLocalSubmissionDetails_call(computeResourceId, priorityOrder, localSubmission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLocalSubmissionDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private int priorityOrder;
      private org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission;
      public addLocalSubmissionDetails_call(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.priorityOrder = priorityOrder;
        this.localSubmission = localSubmission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLocalSubmissionDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLocalSubmissionDetails_args args = new addLocalSubmissionDetails_args();
        args.setComputeResourceId(computeResourceId);
        args.setPriorityOrder(priorityOrder);
        args.setLocalSubmission(localSubmission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLocalSubmissionDetails();
      }
    }

    public void updateLocalSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLocalSubmissionDetails_call method_call = new updateLocalSubmissionDetails_call(jobSubmissionInterfaceId, localSubmission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLocalSubmissionDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobSubmissionInterfaceId;
      private org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission;
      public updateLocalSubmissionDetails_call(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
        this.localSubmission = localSubmission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLocalSubmissionDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLocalSubmissionDetails_args args = new updateLocalSubmissionDetails_args();
        args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
        args.setLocalSubmission(localSubmission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLocalSubmissionDetails();
      }
    }

    public void addSSHJobSubmissionDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSSHJobSubmissionDetails_call method_call = new addSSHJobSubmissionDetails_call(computeResourceId, priorityOrder, sshJobSubmission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSSHJobSubmissionDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private int priorityOrder;
      private org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission;
      public addSSHJobSubmissionDetails_call(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.priorityOrder = priorityOrder;
        this.sshJobSubmission = sshJobSubmission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSSHJobSubmissionDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSSHJobSubmissionDetails_args args = new addSSHJobSubmissionDetails_args();
        args.setComputeResourceId(computeResourceId);
        args.setPriorityOrder(priorityOrder);
        args.setSshJobSubmission(sshJobSubmission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSSHJobSubmissionDetails();
      }
    }

    public void updateSSHJobSubmissionDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSSHJobSubmissionDetails_call method_call = new updateSSHJobSubmissionDetails_call(jobSubmissionInterfaceId, sshJobSubmission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSSHJobSubmissionDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobSubmissionInterfaceId;
      private org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission;
      public updateSSHJobSubmissionDetails_call(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
        this.sshJobSubmission = sshJobSubmission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSSHJobSubmissionDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSSHJobSubmissionDetails_args args = new updateSSHJobSubmissionDetails_args();
        args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
        args.setSshJobSubmission(sshJobSubmission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSSHJobSubmissionDetails();
      }
    }

    public void addLocalDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLocalDataMovementDetails_call method_call = new addLocalDataMovementDetails_call(computeResourceId, priorityOrder, localDataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLocalDataMovementDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private int priorityOrder;
      private org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement;
      public addLocalDataMovementDetails_call(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.priorityOrder = priorityOrder;
        this.localDataMovement = localDataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLocalDataMovementDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLocalDataMovementDetails_args args = new addLocalDataMovementDetails_args();
        args.setComputeResourceId(computeResourceId);
        args.setPriorityOrder(priorityOrder);
        args.setLocalDataMovement(localDataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLocalDataMovementDetails();
      }
    }

    public void updateLocalDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLocalDataMovementDetails_call method_call = new updateLocalDataMovementDetails_call(jobSubmissionInterfaceId, localDataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLocalDataMovementDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobSubmissionInterfaceId;
      private org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement;
      public updateLocalDataMovementDetails_call(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
        this.localDataMovement = localDataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLocalDataMovementDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLocalDataMovementDetails_args args = new updateLocalDataMovementDetails_args();
        args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
        args.setLocalDataMovement(localDataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateLocalDataMovementDetails();
      }
    }

    public void addSCPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSCPDataMovementDetails_call method_call = new addSCPDataMovementDetails_call(computeResourceId, priorityOrder, scpDataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSCPDataMovementDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private int priorityOrder;
      private org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement;
      public addSCPDataMovementDetails_call(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.priorityOrder = priorityOrder;
        this.scpDataMovement = scpDataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSCPDataMovementDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSCPDataMovementDetails_args args = new addSCPDataMovementDetails_args();
        args.setComputeResourceId(computeResourceId);
        args.setPriorityOrder(priorityOrder);
        args.setScpDataMovement(scpDataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSCPDataMovementDetails();
      }
    }

    public void updateSCPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSCPDataMovementDetails_call method_call = new updateSCPDataMovementDetails_call(jobSubmissionInterfaceId, scpDataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSCPDataMovementDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobSubmissionInterfaceId;
      private org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement;
      public updateSCPDataMovementDetails_call(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
        this.scpDataMovement = scpDataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSCPDataMovementDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSCPDataMovementDetails_args args = new updateSCPDataMovementDetails_args();
        args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
        args.setScpDataMovement(scpDataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSCPDataMovementDetails();
      }
    }

    public void addGridFTPDataMovementDetails(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGridFTPDataMovementDetails_call method_call = new addGridFTPDataMovementDetails_call(computeResourceId, priorityOrder, gridFTPDataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGridFTPDataMovementDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private int priorityOrder;
      private org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement;
      public addGridFTPDataMovementDetails_call(String computeResourceId, int priorityOrder, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.priorityOrder = priorityOrder;
        this.gridFTPDataMovement = gridFTPDataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGridFTPDataMovementDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGridFTPDataMovementDetails_args args = new addGridFTPDataMovementDetails_args();
        args.setComputeResourceId(computeResourceId);
        args.setPriorityOrder(priorityOrder);
        args.setGridFTPDataMovement(gridFTPDataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addGridFTPDataMovementDetails();
      }
    }

    public void updateGridFTPDataMovementDetails(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGridFTPDataMovementDetails_call method_call = new updateGridFTPDataMovementDetails_call(jobSubmissionInterfaceId, gridFTPDataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGridFTPDataMovementDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobSubmissionInterfaceId;
      private org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement;
      public updateGridFTPDataMovementDetails_call(String jobSubmissionInterfaceId, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
        this.gridFTPDataMovement = gridFTPDataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGridFTPDataMovementDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGridFTPDataMovementDetails_args args = new updateGridFTPDataMovementDetails_args();
        args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
        args.setGridFTPDataMovement(gridFTPDataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGridFTPDataMovementDetails();
      }
    }

    public void changeJobSubmissionPriority(String jobSubmissionInterfaceId, int newPriorityOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeJobSubmissionPriority_call method_call = new changeJobSubmissionPriority_call(jobSubmissionInterfaceId, newPriorityOrder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeJobSubmissionPriority_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobSubmissionInterfaceId;
      private int newPriorityOrder;
      public changeJobSubmissionPriority_call(String jobSubmissionInterfaceId, int newPriorityOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
        this.newPriorityOrder = newPriorityOrder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeJobSubmissionPriority", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeJobSubmissionPriority_args args = new changeJobSubmissionPriority_args();
        args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
        args.setNewPriorityOrder(newPriorityOrder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeJobSubmissionPriority();
      }
    }

    public void changeDataMovementPriority(String dataMovementInterfaceId, int newPriorityOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeDataMovementPriority_call method_call = new changeDataMovementPriority_call(dataMovementInterfaceId, newPriorityOrder, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeDataMovementPriority_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dataMovementInterfaceId;
      private int newPriorityOrder;
      public changeDataMovementPriority_call(String dataMovementInterfaceId, int newPriorityOrder, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataMovementInterfaceId = dataMovementInterfaceId;
        this.newPriorityOrder = newPriorityOrder;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeDataMovementPriority", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeDataMovementPriority_args args = new changeDataMovementPriority_args();
        args.setDataMovementInterfaceId(dataMovementInterfaceId);
        args.setNewPriorityOrder(newPriorityOrder);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeDataMovementPriority();
      }
    }

    public void changeJobSubmissionPriorities(Map<String,Integer> jobSubmissionPriorityMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeJobSubmissionPriorities_call method_call = new changeJobSubmissionPriorities_call(jobSubmissionPriorityMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeJobSubmissionPriorities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,Integer> jobSubmissionPriorityMap;
      public changeJobSubmissionPriorities_call(Map<String,Integer> jobSubmissionPriorityMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionPriorityMap = jobSubmissionPriorityMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeJobSubmissionPriorities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeJobSubmissionPriorities_args args = new changeJobSubmissionPriorities_args();
        args.setJobSubmissionPriorityMap(jobSubmissionPriorityMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeJobSubmissionPriorities();
      }
    }

    public void changeDataMovementPriorities(Map<String,Integer> dataMovementPriorityMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeDataMovementPriorities_call method_call = new changeDataMovementPriorities_call(dataMovementPriorityMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeDataMovementPriorities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,Integer> dataMovementPriorityMap;
      public changeDataMovementPriorities_call(Map<String,Integer> dataMovementPriorityMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataMovementPriorityMap = dataMovementPriorityMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeDataMovementPriorities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeDataMovementPriorities_args args = new changeDataMovementPriorities_args();
        args.setDataMovementPriorityMap(dataMovementPriorityMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeDataMovementPriorities();
      }
    }

    public void deleteJobSubmissionInterface(String jobSubmissionInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteJobSubmissionInterface_call method_call = new deleteJobSubmissionInterface_call(jobSubmissionInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteJobSubmissionInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobSubmissionInterfaceId;
      public deleteJobSubmissionInterface_call(String jobSubmissionInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteJobSubmissionInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteJobSubmissionInterface_args args = new deleteJobSubmissionInterface_args();
        args.setJobSubmissionInterfaceId(jobSubmissionInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteJobSubmissionInterface();
      }
    }

    public void deleteDataMovementInterface(String dataMovementInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteDataMovementInterface_call method_call = new deleteDataMovementInterface_call(dataMovementInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteDataMovementInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dataMovementInterfaceId;
      public deleteDataMovementInterface_call(String dataMovementInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataMovementInterfaceId = dataMovementInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDataMovementInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteDataMovementInterface_args args = new deleteDataMovementInterface_args();
        args.setDataMovementInterfaceId(dataMovementInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteDataMovementInterface();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAPIVersion", new getAPIVersion());
      processMap.put("createProject", new createProject());
      processMap.put("updateProject", new updateProject());
      processMap.put("getProject", new getProject());
      processMap.put("getAllUserProjects", new getAllUserProjects());
      processMap.put("searchProjectsByProjectName", new searchProjectsByProjectName());
      processMap.put("searchProjectsByProjectDesc", new searchProjectsByProjectDesc());
      processMap.put("searchExperimentsByName", new searchExperimentsByName());
      processMap.put("searchExperimentsByDesc", new searchExperimentsByDesc());
      processMap.put("searchExperimentsByApplication", new searchExperimentsByApplication());
      processMap.put("getAllExperimentsInProject", new getAllExperimentsInProject());
      processMap.put("getAllUserExperiments", new getAllUserExperiments());
      processMap.put("createExperiment", new createExperiment());
      processMap.put("getExperiment", new getExperiment());
      processMap.put("updateExperiment", new updateExperiment());
      processMap.put("updateExperimentConfiguration", new updateExperimentConfiguration());
      processMap.put("updateResourceScheduleing", new updateResourceScheduleing());
      processMap.put("validateExperiment", new validateExperiment());
      processMap.put("launchExperiment", new launchExperiment());
      processMap.put("getExperimentStatus", new getExperimentStatus());
      processMap.put("getExperimentOutputs", new getExperimentOutputs());
      processMap.put("getJobStatuses", new getJobStatuses());
      processMap.put("cloneExperiment", new cloneExperiment());
      processMap.put("terminateExperiment", new terminateExperiment());
      processMap.put("registerApplicationModule", new registerApplicationModule());
      processMap.put("getApplicationModule", new getApplicationModule());
      processMap.put("updateApplicationModule", new updateApplicationModule());
      processMap.put("deleteApplicationModule", new deleteApplicationModule());
      processMap.put("registerApplicationDeployment", new registerApplicationDeployment());
      processMap.put("getApplicationDeployment", new getApplicationDeployment());
      processMap.put("updateApplicationDeployment", new updateApplicationDeployment());
      processMap.put("deleteApplicationDeployment", new deleteApplicationDeployment());
      processMap.put("getAppModuleDeployedResources", new getAppModuleDeployedResources());
      processMap.put("registerApplicationInterface", new registerApplicationInterface());
      processMap.put("getApplicationInterface", new getApplicationInterface());
      processMap.put("updateApplicationInterface", new updateApplicationInterface());
      processMap.put("deleteApplicationInterface", new deleteApplicationInterface());
      processMap.put("getApplicationInputs", new getApplicationInputs());
      processMap.put("getApplicationOutputs", new getApplicationOutputs());
      processMap.put("registerComputeResource", new registerComputeResource());
      processMap.put("getComputeResource", new getComputeResource());
      processMap.put("updateComputeResource", new updateComputeResource());
      processMap.put("deleteComputeResource", new deleteComputeResource());
      processMap.put("addLocalSubmissionDetails", new addLocalSubmissionDetails());
      processMap.put("updateLocalSubmissionDetails", new updateLocalSubmissionDetails());
      processMap.put("addSSHJobSubmissionDetails", new addSSHJobSubmissionDetails());
      processMap.put("updateSSHJobSubmissionDetails", new updateSSHJobSubmissionDetails());
      processMap.put("addLocalDataMovementDetails", new addLocalDataMovementDetails());
      processMap.put("updateLocalDataMovementDetails", new updateLocalDataMovementDetails());
      processMap.put("addSCPDataMovementDetails", new addSCPDataMovementDetails());
      processMap.put("updateSCPDataMovementDetails", new updateSCPDataMovementDetails());
      processMap.put("addGridFTPDataMovementDetails", new addGridFTPDataMovementDetails());
      processMap.put("updateGridFTPDataMovementDetails", new updateGridFTPDataMovementDetails());
      processMap.put("changeJobSubmissionPriority", new changeJobSubmissionPriority());
      processMap.put("changeDataMovementPriority", new changeDataMovementPriority());
      processMap.put("changeJobSubmissionPriorities", new changeJobSubmissionPriorities());
      processMap.put("changeDataMovementPriorities", new changeDataMovementPriorities());
      processMap.put("deleteJobSubmissionInterface", new deleteJobSubmissionInterface());
      processMap.put("deleteDataMovementInterface", new deleteDataMovementInterface());
      return processMap;
    }

    public static class getAPIVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAPIVersion_args> {
      public getAPIVersion() {
        super("getAPIVersion");
      }

      public getAPIVersion_args getEmptyArgsInstance() {
        return new getAPIVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAPIVersion_result getResult(I iface, getAPIVersion_args args) throws org.apache.thrift.TException {
        getAPIVersion_result result = new getAPIVersion_result();
        try {
          result.success = iface.getAPIVersion();
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class createProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createProject_args> {
      public createProject() {
        super("createProject");
      }

      public createProject_args getEmptyArgsInstance() {
        return new createProject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createProject_result getResult(I iface, createProject_args args) throws org.apache.thrift.TException {
        createProject_result result = new createProject_result();
        try {
          result.success = iface.createProject(args.project);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProject_args> {
      public updateProject() {
        super("updateProject");
      }

      public updateProject_args getEmptyArgsInstance() {
        return new updateProject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProject_result getResult(I iface, updateProject_args args) throws org.apache.thrift.TException {
        updateProject_result result = new updateProject_result();
        try {
          iface.updateProject(args.projectId, args.updatedProject);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.model.error.ProjectNotFoundException pnfe) {
          result.pnfe = pnfe;
        }
        return result;
      }
    }

    public static class getProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProject_args> {
      public getProject() {
        super("getProject");
      }

      public getProject_args getEmptyArgsInstance() {
        return new getProject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProject_result getResult(I iface, getProject_args args) throws org.apache.thrift.TException {
        getProject_result result = new getProject_result();
        try {
          result.success = iface.getProject(args.projectId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.model.error.ProjectNotFoundException pnfe) {
          result.pnfe = pnfe;
        }
        return result;
      }
    }

    public static class getAllUserProjects<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllUserProjects_args> {
      public getAllUserProjects() {
        super("getAllUserProjects");
      }

      public getAllUserProjects_args getEmptyArgsInstance() {
        return new getAllUserProjects_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllUserProjects_result getResult(I iface, getAllUserProjects_args args) throws org.apache.thrift.TException {
        getAllUserProjects_result result = new getAllUserProjects_result();
        try {
          result.success = iface.getAllUserProjects(args.userName);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class searchProjectsByProjectName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchProjectsByProjectName_args> {
      public searchProjectsByProjectName() {
        super("searchProjectsByProjectName");
      }

      public searchProjectsByProjectName_args getEmptyArgsInstance() {
        return new searchProjectsByProjectName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchProjectsByProjectName_result getResult(I iface, searchProjectsByProjectName_args args) throws org.apache.thrift.TException {
        searchProjectsByProjectName_result result = new searchProjectsByProjectName_result();
        try {
          result.success = iface.searchProjectsByProjectName(args.userName, args.projectName);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class searchProjectsByProjectDesc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchProjectsByProjectDesc_args> {
      public searchProjectsByProjectDesc() {
        super("searchProjectsByProjectDesc");
      }

      public searchProjectsByProjectDesc_args getEmptyArgsInstance() {
        return new searchProjectsByProjectDesc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchProjectsByProjectDesc_result getResult(I iface, searchProjectsByProjectDesc_args args) throws org.apache.thrift.TException {
        searchProjectsByProjectDesc_result result = new searchProjectsByProjectDesc_result();
        try {
          result.success = iface.searchProjectsByProjectDesc(args.userName, args.description);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class searchExperimentsByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchExperimentsByName_args> {
      public searchExperimentsByName() {
        super("searchExperimentsByName");
      }

      public searchExperimentsByName_args getEmptyArgsInstance() {
        return new searchExperimentsByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchExperimentsByName_result getResult(I iface, searchExperimentsByName_args args) throws org.apache.thrift.TException {
        searchExperimentsByName_result result = new searchExperimentsByName_result();
        try {
          result.success = iface.searchExperimentsByName(args.userName, args.expName);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class searchExperimentsByDesc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchExperimentsByDesc_args> {
      public searchExperimentsByDesc() {
        super("searchExperimentsByDesc");
      }

      public searchExperimentsByDesc_args getEmptyArgsInstance() {
        return new searchExperimentsByDesc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchExperimentsByDesc_result getResult(I iface, searchExperimentsByDesc_args args) throws org.apache.thrift.TException {
        searchExperimentsByDesc_result result = new searchExperimentsByDesc_result();
        try {
          result.success = iface.searchExperimentsByDesc(args.userName, args.description);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class searchExperimentsByApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchExperimentsByApplication_args> {
      public searchExperimentsByApplication() {
        super("searchExperimentsByApplication");
      }

      public searchExperimentsByApplication_args getEmptyArgsInstance() {
        return new searchExperimentsByApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchExperimentsByApplication_result getResult(I iface, searchExperimentsByApplication_args args) throws org.apache.thrift.TException {
        searchExperimentsByApplication_result result = new searchExperimentsByApplication_result();
        try {
          result.success = iface.searchExperimentsByApplication(args.userName, args.applicationId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getAllExperimentsInProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllExperimentsInProject_args> {
      public getAllExperimentsInProject() {
        super("getAllExperimentsInProject");
      }

      public getAllExperimentsInProject_args getEmptyArgsInstance() {
        return new getAllExperimentsInProject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllExperimentsInProject_result getResult(I iface, getAllExperimentsInProject_args args) throws org.apache.thrift.TException {
        getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
        try {
          result.success = iface.getAllExperimentsInProject(args.projectId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.model.error.ProjectNotFoundException pnfe) {
          result.pnfe = pnfe;
        }
        return result;
      }
    }

    public static class getAllUserExperiments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllUserExperiments_args> {
      public getAllUserExperiments() {
        super("getAllUserExperiments");
      }

      public getAllUserExperiments_args getEmptyArgsInstance() {
        return new getAllUserExperiments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllUserExperiments_result getResult(I iface, getAllUserExperiments_args args) throws org.apache.thrift.TException {
        getAllUserExperiments_result result = new getAllUserExperiments_result();
        try {
          result.success = iface.getAllUserExperiments(args.userName);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class createExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createExperiment_args> {
      public createExperiment() {
        super("createExperiment");
      }

      public createExperiment_args getEmptyArgsInstance() {
        return new createExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createExperiment_result getResult(I iface, createExperiment_args args) throws org.apache.thrift.TException {
        createExperiment_result result = new createExperiment_result();
        try {
          result.success = iface.createExperiment(args.experiment);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperiment_args> {
      public getExperiment() {
        super("getExperiment");
      }

      public getExperiment_args getEmptyArgsInstance() {
        return new getExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperiment_result getResult(I iface, getExperiment_args args) throws org.apache.thrift.TException {
        getExperiment_result result = new getExperiment_result();
        try {
          result.success = iface.getExperiment(args.airavataExperimentId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExperiment_args> {
      public updateExperiment() {
        super("updateExperiment");
      }

      public updateExperiment_args getEmptyArgsInstance() {
        return new updateExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateExperiment_result getResult(I iface, updateExperiment_args args) throws org.apache.thrift.TException {
        updateExperiment_result result = new updateExperiment_result();
        try {
          iface.updateExperiment(args.airavataExperimentId, args.experiment);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateExperimentConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExperimentConfiguration_args> {
      public updateExperimentConfiguration() {
        super("updateExperimentConfiguration");
      }

      public updateExperimentConfiguration_args getEmptyArgsInstance() {
        return new updateExperimentConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateExperimentConfiguration_result getResult(I iface, updateExperimentConfiguration_args args) throws org.apache.thrift.TException {
        updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
        iface.updateExperimentConfiguration(args.airavataExperimentId, args.userConfiguration);
        return result;
      }
    }

    public static class updateResourceScheduleing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateResourceScheduleing_args> {
      public updateResourceScheduleing() {
        super("updateResourceScheduleing");
      }

      public updateResourceScheduleing_args getEmptyArgsInstance() {
        return new updateResourceScheduleing_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateResourceScheduleing_result getResult(I iface, updateResourceScheduleing_args args) throws org.apache.thrift.TException {
        updateResourceScheduleing_result result = new updateResourceScheduleing_result();
        iface.updateResourceScheduleing(args.airavataExperimentId, args.resourceScheduling);
        return result;
      }
    }

    public static class validateExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateExperiment_args> {
      public validateExperiment() {
        super("validateExperiment");
      }

      public validateExperiment_args getEmptyArgsInstance() {
        return new validateExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validateExperiment_result getResult(I iface, validateExperiment_args args) throws org.apache.thrift.TException {
        validateExperiment_result result = new validateExperiment_result();
        try {
          result.success = iface.validateExperiment(args.airavataExperimentId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class launchExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, launchExperiment_args> {
      public launchExperiment() {
        super("launchExperiment");
      }

      public launchExperiment_args getEmptyArgsInstance() {
        return new launchExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public launchExperiment_result getResult(I iface, launchExperiment_args args) throws org.apache.thrift.TException {
        launchExperiment_result result = new launchExperiment_result();
        try {
          iface.launchExperiment(args.airavataExperimentId, args.airavataCredStoreToken);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.model.error.LaunchValidationException lve) {
          result.lve = lve;
        }
        return result;
      }
    }

    public static class getExperimentStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperimentStatus_args> {
      public getExperimentStatus() {
        super("getExperimentStatus");
      }

      public getExperimentStatus_args getEmptyArgsInstance() {
        return new getExperimentStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperimentStatus_result getResult(I iface, getExperimentStatus_args args) throws org.apache.thrift.TException {
        getExperimentStatus_result result = new getExperimentStatus_result();
        try {
          result.success = iface.getExperimentStatus(args.airavataExperimentId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getExperimentOutputs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperimentOutputs_args> {
      public getExperimentOutputs() {
        super("getExperimentOutputs");
      }

      public getExperimentOutputs_args getEmptyArgsInstance() {
        return new getExperimentOutputs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperimentOutputs_result getResult(I iface, getExperimentOutputs_args args) throws org.apache.thrift.TException {
        getExperimentOutputs_result result = new getExperimentOutputs_result();
        result.success = iface.getExperimentOutputs(args.airavataExperimentId);
        return result;
      }
    }

    public static class getJobStatuses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJobStatuses_args> {
      public getJobStatuses() {
        super("getJobStatuses");
      }

      public getJobStatuses_args getEmptyArgsInstance() {
        return new getJobStatuses_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJobStatuses_result getResult(I iface, getJobStatuses_args args) throws org.apache.thrift.TException {
        getJobStatuses_result result = new getJobStatuses_result();
        result.success = iface.getJobStatuses(args.airavataExperimentId);
        return result;
      }
    }

    public static class cloneExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneExperiment_args> {
      public cloneExperiment() {
        super("cloneExperiment");
      }

      public cloneExperiment_args getEmptyArgsInstance() {
        return new cloneExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneExperiment_result getResult(I iface, cloneExperiment_args args) throws org.apache.thrift.TException {
        cloneExperiment_result result = new cloneExperiment_result();
        try {
          result.success = iface.cloneExperiment(args.existingExperimentID, args.newExperimentName);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class terminateExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateExperiment_args> {
      public terminateExperiment() {
        super("terminateExperiment");
      }

      public terminateExperiment_args getEmptyArgsInstance() {
        return new terminateExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public terminateExperiment_result getResult(I iface, terminateExperiment_args args) throws org.apache.thrift.TException {
        terminateExperiment_result result = new terminateExperiment_result();
        try {
          iface.terminateExperiment(args.airavataExperimentId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class registerApplicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerApplicationModule_args> {
      public registerApplicationModule() {
        super("registerApplicationModule");
      }

      public registerApplicationModule_args getEmptyArgsInstance() {
        return new registerApplicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerApplicationModule_result getResult(I iface, registerApplicationModule_args args) throws org.apache.thrift.TException {
        registerApplicationModule_result result = new registerApplicationModule_result();
        try {
          result.success = iface.registerApplicationModule(args.applicationModule);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getApplicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationModule_args> {
      public getApplicationModule() {
        super("getApplicationModule");
      }

      public getApplicationModule_args getEmptyArgsInstance() {
        return new getApplicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationModule_result getResult(I iface, getApplicationModule_args args) throws org.apache.thrift.TException {
        getApplicationModule_result result = new getApplicationModule_result();
        try {
          result.success = iface.getApplicationModule(args.appModuleId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateApplicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateApplicationModule_args> {
      public updateApplicationModule() {
        super("updateApplicationModule");
      }

      public updateApplicationModule_args getEmptyArgsInstance() {
        return new updateApplicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateApplicationModule_result getResult(I iface, updateApplicationModule_args args) throws org.apache.thrift.TException {
        updateApplicationModule_result result = new updateApplicationModule_result();
        try {
          result.success = iface.updateApplicationModule(args.appModuleId, args.applicationModule);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deleteApplicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteApplicationModule_args> {
      public deleteApplicationModule() {
        super("deleteApplicationModule");
      }

      public deleteApplicationModule_args getEmptyArgsInstance() {
        return new deleteApplicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteApplicationModule_result getResult(I iface, deleteApplicationModule_args args) throws org.apache.thrift.TException {
        deleteApplicationModule_result result = new deleteApplicationModule_result();
        try {
          result.success = iface.deleteApplicationModule(args.appModuleId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class registerApplicationDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerApplicationDeployment_args> {
      public registerApplicationDeployment() {
        super("registerApplicationDeployment");
      }

      public registerApplicationDeployment_args getEmptyArgsInstance() {
        return new registerApplicationDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerApplicationDeployment_result getResult(I iface, registerApplicationDeployment_args args) throws org.apache.thrift.TException {
        registerApplicationDeployment_result result = new registerApplicationDeployment_result();
        try {
          result.success = iface.registerApplicationDeployment(args.applicationDeployment);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getApplicationDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationDeployment_args> {
      public getApplicationDeployment() {
        super("getApplicationDeployment");
      }

      public getApplicationDeployment_args getEmptyArgsInstance() {
        return new getApplicationDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationDeployment_result getResult(I iface, getApplicationDeployment_args args) throws org.apache.thrift.TException {
        getApplicationDeployment_result result = new getApplicationDeployment_result();
        try {
          result.success = iface.getApplicationDeployment(args.appDeploymentId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateApplicationDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateApplicationDeployment_args> {
      public updateApplicationDeployment() {
        super("updateApplicationDeployment");
      }

      public updateApplicationDeployment_args getEmptyArgsInstance() {
        return new updateApplicationDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateApplicationDeployment_result getResult(I iface, updateApplicationDeployment_args args) throws org.apache.thrift.TException {
        updateApplicationDeployment_result result = new updateApplicationDeployment_result();
        try {
          result.success = iface.updateApplicationDeployment(args.appDeploymentId, args.applicationDeployment);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deleteApplicationDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteApplicationDeployment_args> {
      public deleteApplicationDeployment() {
        super("deleteApplicationDeployment");
      }

      public deleteApplicationDeployment_args getEmptyArgsInstance() {
        return new deleteApplicationDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteApplicationDeployment_result getResult(I iface, deleteApplicationDeployment_args args) throws org.apache.thrift.TException {
        deleteApplicationDeployment_result result = new deleteApplicationDeployment_result();
        try {
          result.success = iface.deleteApplicationDeployment(args.appDeploymentId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getAppModuleDeployedResources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAppModuleDeployedResources_args> {
      public getAppModuleDeployedResources() {
        super("getAppModuleDeployedResources");
      }

      public getAppModuleDeployedResources_args getEmptyArgsInstance() {
        return new getAppModuleDeployedResources_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAppModuleDeployedResources_result getResult(I iface, getAppModuleDeployedResources_args args) throws org.apache.thrift.TException {
        getAppModuleDeployedResources_result result = new getAppModuleDeployedResources_result();
        try {
          result.success = iface.getAppModuleDeployedResources(args.appModuleId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class registerApplicationInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerApplicationInterface_args> {
      public registerApplicationInterface() {
        super("registerApplicationInterface");
      }

      public registerApplicationInterface_args getEmptyArgsInstance() {
        return new registerApplicationInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerApplicationInterface_result getResult(I iface, registerApplicationInterface_args args) throws org.apache.thrift.TException {
        registerApplicationInterface_result result = new registerApplicationInterface_result();
        try {
          result.success = iface.registerApplicationInterface(args.applicationInterface);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getApplicationInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationInterface_args> {
      public getApplicationInterface() {
        super("getApplicationInterface");
      }

      public getApplicationInterface_args getEmptyArgsInstance() {
        return new getApplicationInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationInterface_result getResult(I iface, getApplicationInterface_args args) throws org.apache.thrift.TException {
        getApplicationInterface_result result = new getApplicationInterface_result();
        try {
          result.success = iface.getApplicationInterface(args.appInterfaceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateApplicationInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateApplicationInterface_args> {
      public updateApplicationInterface() {
        super("updateApplicationInterface");
      }

      public updateApplicationInterface_args getEmptyArgsInstance() {
        return new updateApplicationInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateApplicationInterface_result getResult(I iface, updateApplicationInterface_args args) throws org.apache.thrift.TException {
        updateApplicationInterface_result result = new updateApplicationInterface_result();
        try {
          result.success = iface.updateApplicationInterface(args.appInterfaceId, args.applicationInterface);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deleteApplicationInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteApplicationInterface_args> {
      public deleteApplicationInterface() {
        super("deleteApplicationInterface");
      }

      public deleteApplicationInterface_args getEmptyArgsInstance() {
        return new deleteApplicationInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteApplicationInterface_result getResult(I iface, deleteApplicationInterface_args args) throws org.apache.thrift.TException {
        deleteApplicationInterface_result result = new deleteApplicationInterface_result();
        try {
          result.success = iface.deleteApplicationInterface(args.appInterfaceId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getApplicationInputs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationInputs_args> {
      public getApplicationInputs() {
        super("getApplicationInputs");
      }

      public getApplicationInputs_args getEmptyArgsInstance() {
        return new getApplicationInputs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationInputs_result getResult(I iface, getApplicationInputs_args args) throws org.apache.thrift.TException {
        getApplicationInputs_result result = new getApplicationInputs_result();
        try {
          result.success = iface.getApplicationInputs(args.appInterfaceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getApplicationOutputs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationOutputs_args> {
      public getApplicationOutputs() {
        super("getApplicationOutputs");
      }

      public getApplicationOutputs_args getEmptyArgsInstance() {
        return new getApplicationOutputs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationOutputs_result getResult(I iface, getApplicationOutputs_args args) throws org.apache.thrift.TException {
        getApplicationOutputs_result result = new getApplicationOutputs_result();
        try {
          result.success = iface.getApplicationOutputs(args.appInterfaceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class registerComputeResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerComputeResource_args> {
      public registerComputeResource() {
        super("registerComputeResource");
      }

      public registerComputeResource_args getEmptyArgsInstance() {
        return new registerComputeResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerComputeResource_result getResult(I iface, registerComputeResource_args args) throws org.apache.thrift.TException {
        registerComputeResource_result result = new registerComputeResource_result();
        try {
          result.success = iface.registerComputeResource(args.computeResourceDescription);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getComputeResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getComputeResource_args> {
      public getComputeResource() {
        super("getComputeResource");
      }

      public getComputeResource_args getEmptyArgsInstance() {
        return new getComputeResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getComputeResource_result getResult(I iface, getComputeResource_args args) throws org.apache.thrift.TException {
        getComputeResource_result result = new getComputeResource_result();
        try {
          result.success = iface.getComputeResource(args.computeResourceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateComputeResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateComputeResource_args> {
      public updateComputeResource() {
        super("updateComputeResource");
      }

      public updateComputeResource_args getEmptyArgsInstance() {
        return new updateComputeResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateComputeResource_result getResult(I iface, updateComputeResource_args args) throws org.apache.thrift.TException {
        updateComputeResource_result result = new updateComputeResource_result();
        try {
          result.success = iface.updateComputeResource(args.computeResourceId, args.computeResourceDescription);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deleteComputeResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteComputeResource_args> {
      public deleteComputeResource() {
        super("deleteComputeResource");
      }

      public deleteComputeResource_args getEmptyArgsInstance() {
        return new deleteComputeResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteComputeResource_result getResult(I iface, deleteComputeResource_args args) throws org.apache.thrift.TException {
        deleteComputeResource_result result = new deleteComputeResource_result();
        try {
          result.success = iface.deleteComputeResource(args.computeResourceId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addLocalSubmissionDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLocalSubmissionDetails_args> {
      public addLocalSubmissionDetails() {
        super("addLocalSubmissionDetails");
      }

      public addLocalSubmissionDetails_args getEmptyArgsInstance() {
        return new addLocalSubmissionDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLocalSubmissionDetails_result getResult(I iface, addLocalSubmissionDetails_args args) throws org.apache.thrift.TException {
        addLocalSubmissionDetails_result result = new addLocalSubmissionDetails_result();
        try {
          result.success = iface.addLocalSubmissionDetails(args.computeResourceId, args.priorityOrder, args.localSubmission);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateLocalSubmissionDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLocalSubmissionDetails_args> {
      public updateLocalSubmissionDetails() {
        super("updateLocalSubmissionDetails");
      }

      public updateLocalSubmissionDetails_args getEmptyArgsInstance() {
        return new updateLocalSubmissionDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLocalSubmissionDetails_result getResult(I iface, updateLocalSubmissionDetails_args args) throws org.apache.thrift.TException {
        updateLocalSubmissionDetails_result result = new updateLocalSubmissionDetails_result();
        try {
          result.success = iface.updateLocalSubmissionDetails(args.jobSubmissionInterfaceId, args.localSubmission);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addSSHJobSubmissionDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSSHJobSubmissionDetails_args> {
      public addSSHJobSubmissionDetails() {
        super("addSSHJobSubmissionDetails");
      }

      public addSSHJobSubmissionDetails_args getEmptyArgsInstance() {
        return new addSSHJobSubmissionDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSSHJobSubmissionDetails_result getResult(I iface, addSSHJobSubmissionDetails_args args) throws org.apache.thrift.TException {
        addSSHJobSubmissionDetails_result result = new addSSHJobSubmissionDetails_result();
        try {
          result.success = iface.addSSHJobSubmissionDetails(args.computeResourceId, args.priorityOrder, args.sshJobSubmission);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateSSHJobSubmissionDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSSHJobSubmissionDetails_args> {
      public updateSSHJobSubmissionDetails() {
        super("updateSSHJobSubmissionDetails");
      }

      public updateSSHJobSubmissionDetails_args getEmptyArgsInstance() {
        return new updateSSHJobSubmissionDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSSHJobSubmissionDetails_result getResult(I iface, updateSSHJobSubmissionDetails_args args) throws org.apache.thrift.TException {
        updateSSHJobSubmissionDetails_result result = new updateSSHJobSubmissionDetails_result();
        try {
          result.success = iface.updateSSHJobSubmissionDetails(args.jobSubmissionInterfaceId, args.sshJobSubmission);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addLocalDataMovementDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLocalDataMovementDetails_args> {
      public addLocalDataMovementDetails() {
        super("addLocalDataMovementDetails");
      }

      public addLocalDataMovementDetails_args getEmptyArgsInstance() {
        return new addLocalDataMovementDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLocalDataMovementDetails_result getResult(I iface, addLocalDataMovementDetails_args args) throws org.apache.thrift.TException {
        addLocalDataMovementDetails_result result = new addLocalDataMovementDetails_result();
        try {
          result.success = iface.addLocalDataMovementDetails(args.computeResourceId, args.priorityOrder, args.localDataMovement);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateLocalDataMovementDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLocalDataMovementDetails_args> {
      public updateLocalDataMovementDetails() {
        super("updateLocalDataMovementDetails");
      }

      public updateLocalDataMovementDetails_args getEmptyArgsInstance() {
        return new updateLocalDataMovementDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateLocalDataMovementDetails_result getResult(I iface, updateLocalDataMovementDetails_args args) throws org.apache.thrift.TException {
        updateLocalDataMovementDetails_result result = new updateLocalDataMovementDetails_result();
        try {
          result.success = iface.updateLocalDataMovementDetails(args.jobSubmissionInterfaceId, args.localDataMovement);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addSCPDataMovementDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSCPDataMovementDetails_args> {
      public addSCPDataMovementDetails() {
        super("addSCPDataMovementDetails");
      }

      public addSCPDataMovementDetails_args getEmptyArgsInstance() {
        return new addSCPDataMovementDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSCPDataMovementDetails_result getResult(I iface, addSCPDataMovementDetails_args args) throws org.apache.thrift.TException {
        addSCPDataMovementDetails_result result = new addSCPDataMovementDetails_result();
        try {
          result.success = iface.addSCPDataMovementDetails(args.computeResourceId, args.priorityOrder, args.scpDataMovement);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateSCPDataMovementDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSCPDataMovementDetails_args> {
      public updateSCPDataMovementDetails() {
        super("updateSCPDataMovementDetails");
      }

      public updateSCPDataMovementDetails_args getEmptyArgsInstance() {
        return new updateSCPDataMovementDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSCPDataMovementDetails_result getResult(I iface, updateSCPDataMovementDetails_args args) throws org.apache.thrift.TException {
        updateSCPDataMovementDetails_result result = new updateSCPDataMovementDetails_result();
        try {
          result.success = iface.updateSCPDataMovementDetails(args.jobSubmissionInterfaceId, args.scpDataMovement);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addGridFTPDataMovementDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGridFTPDataMovementDetails_args> {
      public addGridFTPDataMovementDetails() {
        super("addGridFTPDataMovementDetails");
      }

      public addGridFTPDataMovementDetails_args getEmptyArgsInstance() {
        return new addGridFTPDataMovementDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addGridFTPDataMovementDetails_result getResult(I iface, addGridFTPDataMovementDetails_args args) throws org.apache.thrift.TException {
        addGridFTPDataMovementDetails_result result = new addGridFTPDataMovementDetails_result();
        try {
          result.success = iface.addGridFTPDataMovementDetails(args.computeResourceId, args.priorityOrder, args.gridFTPDataMovement);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateGridFTPDataMovementDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGridFTPDataMovementDetails_args> {
      public updateGridFTPDataMovementDetails() {
        super("updateGridFTPDataMovementDetails");
      }

      public updateGridFTPDataMovementDetails_args getEmptyArgsInstance() {
        return new updateGridFTPDataMovementDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGridFTPDataMovementDetails_result getResult(I iface, updateGridFTPDataMovementDetails_args args) throws org.apache.thrift.TException {
        updateGridFTPDataMovementDetails_result result = new updateGridFTPDataMovementDetails_result();
        try {
          result.success = iface.updateGridFTPDataMovementDetails(args.jobSubmissionInterfaceId, args.gridFTPDataMovement);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class changeJobSubmissionPriority<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeJobSubmissionPriority_args> {
      public changeJobSubmissionPriority() {
        super("changeJobSubmissionPriority");
      }

      public changeJobSubmissionPriority_args getEmptyArgsInstance() {
        return new changeJobSubmissionPriority_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeJobSubmissionPriority_result getResult(I iface, changeJobSubmissionPriority_args args) throws org.apache.thrift.TException {
        changeJobSubmissionPriority_result result = new changeJobSubmissionPriority_result();
        try {
          result.success = iface.changeJobSubmissionPriority(args.jobSubmissionInterfaceId, args.newPriorityOrder);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class changeDataMovementPriority<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeDataMovementPriority_args> {
      public changeDataMovementPriority() {
        super("changeDataMovementPriority");
      }

      public changeDataMovementPriority_args getEmptyArgsInstance() {
        return new changeDataMovementPriority_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeDataMovementPriority_result getResult(I iface, changeDataMovementPriority_args args) throws org.apache.thrift.TException {
        changeDataMovementPriority_result result = new changeDataMovementPriority_result();
        try {
          result.success = iface.changeDataMovementPriority(args.dataMovementInterfaceId, args.newPriorityOrder);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class changeJobSubmissionPriorities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeJobSubmissionPriorities_args> {
      public changeJobSubmissionPriorities() {
        super("changeJobSubmissionPriorities");
      }

      public changeJobSubmissionPriorities_args getEmptyArgsInstance() {
        return new changeJobSubmissionPriorities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeJobSubmissionPriorities_result getResult(I iface, changeJobSubmissionPriorities_args args) throws org.apache.thrift.TException {
        changeJobSubmissionPriorities_result result = new changeJobSubmissionPriorities_result();
        try {
          result.success = iface.changeJobSubmissionPriorities(args.jobSubmissionPriorityMap);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class changeDataMovementPriorities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeDataMovementPriorities_args> {
      public changeDataMovementPriorities() {
        super("changeDataMovementPriorities");
      }

      public changeDataMovementPriorities_args getEmptyArgsInstance() {
        return new changeDataMovementPriorities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeDataMovementPriorities_result getResult(I iface, changeDataMovementPriorities_args args) throws org.apache.thrift.TException {
        changeDataMovementPriorities_result result = new changeDataMovementPriorities_result();
        try {
          result.success = iface.changeDataMovementPriorities(args.dataMovementPriorityMap);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deleteJobSubmissionInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteJobSubmissionInterface_args> {
      public deleteJobSubmissionInterface() {
        super("deleteJobSubmissionInterface");
      }

      public deleteJobSubmissionInterface_args getEmptyArgsInstance() {
        return new deleteJobSubmissionInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteJobSubmissionInterface_result getResult(I iface, deleteJobSubmissionInterface_args args) throws org.apache.thrift.TException {
        deleteJobSubmissionInterface_result result = new deleteJobSubmissionInterface_result();
        try {
          result.success = iface.deleteJobSubmissionInterface(args.jobSubmissionInterfaceId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deleteDataMovementInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteDataMovementInterface_args> {
      public deleteDataMovementInterface() {
        super("deleteDataMovementInterface");
      }

      public deleteDataMovementInterface_args getEmptyArgsInstance() {
        return new deleteDataMovementInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteDataMovementInterface_result getResult(I iface, deleteDataMovementInterface_args args) throws org.apache.thrift.TException {
        deleteDataMovementInterface_result result = new deleteDataMovementInterface_result();
        try {
          result.success = iface.deleteDataMovementInterface(args.dataMovementInterfaceId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAPIVersion", new getAPIVersion());
      processMap.put("createProject", new createProject());
      processMap.put("updateProject", new updateProject());
      processMap.put("getProject", new getProject());
      processMap.put("getAllUserProjects", new getAllUserProjects());
      processMap.put("searchProjectsByProjectName", new searchProjectsByProjectName());
      processMap.put("searchProjectsByProjectDesc", new searchProjectsByProjectDesc());
      processMap.put("searchExperimentsByName", new searchExperimentsByName());
      processMap.put("searchExperimentsByDesc", new searchExperimentsByDesc());
      processMap.put("searchExperimentsByApplication", new searchExperimentsByApplication());
      processMap.put("getAllExperimentsInProject", new getAllExperimentsInProject());
      processMap.put("getAllUserExperiments", new getAllUserExperiments());
      processMap.put("createExperiment", new createExperiment());
      processMap.put("getExperiment", new getExperiment());
      processMap.put("updateExperiment", new updateExperiment());
      processMap.put("updateExperimentConfiguration", new updateExperimentConfiguration());
      processMap.put("updateResourceScheduleing", new updateResourceScheduleing());
      processMap.put("validateExperiment", new validateExperiment());
      processMap.put("launchExperiment", new launchExperiment());
      processMap.put("getExperimentStatus", new getExperimentStatus());
      processMap.put("getExperimentOutputs", new getExperimentOutputs());
      processMap.put("getJobStatuses", new getJobStatuses());
      processMap.put("cloneExperiment", new cloneExperiment());
      processMap.put("terminateExperiment", new terminateExperiment());
      processMap.put("registerApplicationModule", new registerApplicationModule());
      processMap.put("getApplicationModule", new getApplicationModule());
      processMap.put("updateApplicationModule", new updateApplicationModule());
      processMap.put("deleteApplicationModule", new deleteApplicationModule());
      processMap.put("registerApplicationDeployment", new registerApplicationDeployment());
      processMap.put("getApplicationDeployment", new getApplicationDeployment());
      processMap.put("updateApplicationDeployment", new updateApplicationDeployment());
      processMap.put("deleteApplicationDeployment", new deleteApplicationDeployment());
      processMap.put("getAppModuleDeployedResources", new getAppModuleDeployedResources());
      processMap.put("registerApplicationInterface", new registerApplicationInterface());
      processMap.put("getApplicationInterface", new getApplicationInterface());
      processMap.put("updateApplicationInterface", new updateApplicationInterface());
      processMap.put("deleteApplicationInterface", new deleteApplicationInterface());
      processMap.put("getApplicationInputs", new getApplicationInputs());
      processMap.put("getApplicationOutputs", new getApplicationOutputs());
      processMap.put("registerComputeResource", new registerComputeResource());
      processMap.put("getComputeResource", new getComputeResource());
      processMap.put("updateComputeResource", new updateComputeResource());
      processMap.put("deleteComputeResource", new deleteComputeResource());
      processMap.put("addLocalSubmissionDetails", new addLocalSubmissionDetails());
      processMap.put("updateLocalSubmissionDetails", new updateLocalSubmissionDetails());
      processMap.put("addSSHJobSubmissionDetails", new addSSHJobSubmissionDetails());
      processMap.put("updateSSHJobSubmissionDetails", new updateSSHJobSubmissionDetails());
      processMap.put("addLocalDataMovementDetails", new addLocalDataMovementDetails());
      processMap.put("updateLocalDataMovementDetails", new updateLocalDataMovementDetails());
      processMap.put("addSCPDataMovementDetails", new addSCPDataMovementDetails());
      processMap.put("updateSCPDataMovementDetails", new updateSCPDataMovementDetails());
      processMap.put("addGridFTPDataMovementDetails", new addGridFTPDataMovementDetails());
      processMap.put("updateGridFTPDataMovementDetails", new updateGridFTPDataMovementDetails());
      processMap.put("changeJobSubmissionPriority", new changeJobSubmissionPriority());
      processMap.put("changeDataMovementPriority", new changeDataMovementPriority());
      processMap.put("changeJobSubmissionPriorities", new changeJobSubmissionPriorities());
      processMap.put("changeDataMovementPriorities", new changeDataMovementPriorities());
      processMap.put("deleteJobSubmissionInterface", new deleteJobSubmissionInterface());
      processMap.put("deleteDataMovementInterface", new deleteDataMovementInterface());
      return processMap;
    }

    public static class getAPIVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAPIVersion_args, String> {
      public getAPIVersion() {
        super("getAPIVersion");
      }

      public getAPIVersion_args getEmptyArgsInstance() {
        return new getAPIVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getAPIVersion_result result = new getAPIVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAPIVersion_result result = new getAPIVersion_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAPIVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getAPIVersion(resultHandler);
      }
    }

    public static class createProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createProject_args, String> {
      public createProject() {
        super("createProject");
      }

      public createProject_args getEmptyArgsInstance() {
        return new createProject_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createProject_result result = new createProject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createProject_result result = new createProject_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createProject_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createProject(args.project,resultHandler);
      }
    }

    public static class updateProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProject_args, Void> {
      public updateProject() {
        super("updateProject");
      }

      public updateProject_args getEmptyArgsInstance() {
        return new updateProject_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateProject_result result = new updateProject_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProject_result result = new updateProject_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ProjectNotFoundException) {
                        result.pnfe = (org.apache.airavata.model.error.ProjectNotFoundException) e;
                        result.setPnfeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProject_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateProject(args.projectId, args.updatedProject,resultHandler);
      }
    }

    public static class getProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProject_args, org.apache.airavata.model.workspace.Project> {
      public getProject() {
        super("getProject");
      }

      public getProject_args getEmptyArgsInstance() {
        return new getProject_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.workspace.Project> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.workspace.Project>() { 
          public void onComplete(org.apache.airavata.model.workspace.Project o) {
            getProject_result result = new getProject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProject_result result = new getProject_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ProjectNotFoundException) {
                        result.pnfe = (org.apache.airavata.model.error.ProjectNotFoundException) e;
                        result.setPnfeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProject_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.Project> resultHandler) throws TException {
        iface.getProject(args.projectId,resultHandler);
      }
    }

    public static class getAllUserProjects<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllUserProjects_args, List<org.apache.airavata.model.workspace.Project>> {
      public getAllUserProjects() {
        super("getAllUserProjects");
      }

      public getAllUserProjects_args getEmptyArgsInstance() {
        return new getAllUserProjects_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.Project> o) {
            getAllUserProjects_result result = new getAllUserProjects_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllUserProjects_result result = new getAllUserProjects_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllUserProjects_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> resultHandler) throws TException {
        iface.getAllUserProjects(args.userName,resultHandler);
      }
    }

    public static class searchProjectsByProjectName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchProjectsByProjectName_args, List<org.apache.airavata.model.workspace.Project>> {
      public searchProjectsByProjectName() {
        super("searchProjectsByProjectName");
      }

      public searchProjectsByProjectName_args getEmptyArgsInstance() {
        return new searchProjectsByProjectName_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.Project> o) {
            searchProjectsByProjectName_result result = new searchProjectsByProjectName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchProjectsByProjectName_result result = new searchProjectsByProjectName_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchProjectsByProjectName_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> resultHandler) throws TException {
        iface.searchProjectsByProjectName(args.userName, args.projectName,resultHandler);
      }
    }

    public static class searchProjectsByProjectDesc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchProjectsByProjectDesc_args, List<org.apache.airavata.model.workspace.Project>> {
      public searchProjectsByProjectDesc() {
        super("searchProjectsByProjectDesc");
      }

      public searchProjectsByProjectDesc_args getEmptyArgsInstance() {
        return new searchProjectsByProjectDesc_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.Project> o) {
            searchProjectsByProjectDesc_result result = new searchProjectsByProjectDesc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchProjectsByProjectDesc_result result = new searchProjectsByProjectDesc_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchProjectsByProjectDesc_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> resultHandler) throws TException {
        iface.searchProjectsByProjectDesc(args.userName, args.description,resultHandler);
      }
    }

    public static class searchExperimentsByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchExperimentsByName_args, List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> {
      public searchExperimentsByName() {
        super("searchExperimentsByName");
      }

      public searchExperimentsByName_args getEmptyArgsInstance() {
        return new searchExperimentsByName_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> o) {
            searchExperimentsByName_result result = new searchExperimentsByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchExperimentsByName_result result = new searchExperimentsByName_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchExperimentsByName_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> resultHandler) throws TException {
        iface.searchExperimentsByName(args.userName, args.expName,resultHandler);
      }
    }

    public static class searchExperimentsByDesc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchExperimentsByDesc_args, List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> {
      public searchExperimentsByDesc() {
        super("searchExperimentsByDesc");
      }

      public searchExperimentsByDesc_args getEmptyArgsInstance() {
        return new searchExperimentsByDesc_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> o) {
            searchExperimentsByDesc_result result = new searchExperimentsByDesc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchExperimentsByDesc_result result = new searchExperimentsByDesc_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchExperimentsByDesc_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> resultHandler) throws TException {
        iface.searchExperimentsByDesc(args.userName, args.description,resultHandler);
      }
    }

    public static class searchExperimentsByApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchExperimentsByApplication_args, List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> {
      public searchExperimentsByApplication() {
        super("searchExperimentsByApplication");
      }

      public searchExperimentsByApplication_args getEmptyArgsInstance() {
        return new searchExperimentsByApplication_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> o) {
            searchExperimentsByApplication_result result = new searchExperimentsByApplication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchExperimentsByApplication_result result = new searchExperimentsByApplication_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchExperimentsByApplication_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>> resultHandler) throws TException {
        iface.searchExperimentsByApplication(args.userName, args.applicationId,resultHandler);
      }
    }

    public static class getAllExperimentsInProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllExperimentsInProject_args, List<org.apache.airavata.model.workspace.experiment.Experiment>> {
      public getAllExperimentsInProject() {
        super("getAllExperimentsInProject");
      }

      public getAllExperimentsInProject_args getEmptyArgsInstance() {
        return new getAllExperimentsInProject_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.experiment.Experiment> o) {
            getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ProjectNotFoundException) {
                        result.pnfe = (org.apache.airavata.model.error.ProjectNotFoundException) e;
                        result.setPnfeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllExperimentsInProject_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> resultHandler) throws TException {
        iface.getAllExperimentsInProject(args.projectId,resultHandler);
      }
    }

    public static class getAllUserExperiments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllUserExperiments_args, List<org.apache.airavata.model.workspace.experiment.Experiment>> {
      public getAllUserExperiments() {
        super("getAllUserExperiments");
      }

      public getAllUserExperiments_args getEmptyArgsInstance() {
        return new getAllUserExperiments_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.experiment.Experiment> o) {
            getAllUserExperiments_result result = new getAllUserExperiments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllUserExperiments_result result = new getAllUserExperiments_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllUserExperiments_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> resultHandler) throws TException {
        iface.getAllUserExperiments(args.userName,resultHandler);
      }
    }

    public static class createExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createExperiment_args, String> {
      public createExperiment() {
        super("createExperiment");
      }

      public createExperiment_args getEmptyArgsInstance() {
        return new createExperiment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createExperiment_result result = new createExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createExperiment_result result = new createExperiment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createExperiment(args.experiment,resultHandler);
      }
    }

    public static class getExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperiment_args, org.apache.airavata.model.workspace.experiment.Experiment> {
      public getExperiment() {
        super("getExperiment");
      }

      public getExperiment_args getEmptyArgsInstance() {
        return new getExperiment_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment>() { 
          public void onComplete(org.apache.airavata.model.workspace.experiment.Experiment o) {
            getExperiment_result result = new getExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperiment_result result = new getExperiment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.model.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment> resultHandler) throws TException {
        iface.getExperiment(args.airavataExperimentId,resultHandler);
      }
    }

    public static class updateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateExperiment_args, Void> {
      public updateExperiment() {
        super("updateExperiment");
      }

      public updateExperiment_args getEmptyArgsInstance() {
        return new updateExperiment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateExperiment_result result = new updateExperiment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateExperiment_result result = new updateExperiment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.model.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateExperiment(args.airavataExperimentId, args.experiment,resultHandler);
      }
    }

    public static class updateExperimentConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateExperimentConfiguration_args, Void> {
      public updateExperimentConfiguration() {
        super("updateExperimentConfiguration");
      }

      public updateExperimentConfiguration_args getEmptyArgsInstance() {
        return new updateExperimentConfiguration_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateExperimentConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateExperimentConfiguration(args.airavataExperimentId, args.userConfiguration,resultHandler);
      }
    }

    public static class updateResourceScheduleing<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateResourceScheduleing_args, Void> {
      public updateResourceScheduleing() {
        super("updateResourceScheduleing");
      }

      public updateResourceScheduleing_args getEmptyArgsInstance() {
        return new updateResourceScheduleing_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateResourceScheduleing_result result = new updateResourceScheduleing_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateResourceScheduleing_result result = new updateResourceScheduleing_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateResourceScheduleing_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateResourceScheduleing(args.airavataExperimentId, args.resourceScheduling,resultHandler);
      }
    }

    public static class validateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validateExperiment_args, Boolean> {
      public validateExperiment() {
        super("validateExperiment");
      }

      public validateExperiment_args getEmptyArgsInstance() {
        return new validateExperiment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            validateExperiment_result result = new validateExperiment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            validateExperiment_result result = new validateExperiment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.model.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.validateExperiment(args.airavataExperimentId,resultHandler);
      }
    }

    public static class launchExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, launchExperiment_args, Void> {
      public launchExperiment() {
        super("launchExperiment");
      }

      public launchExperiment_args getEmptyArgsInstance() {
        return new launchExperiment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            launchExperiment_result result = new launchExperiment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            launchExperiment_result result = new launchExperiment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.model.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.LaunchValidationException) {
                        result.lve = (org.apache.airavata.model.error.LaunchValidationException) e;
                        result.setLveIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, launchExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.launchExperiment(args.airavataExperimentId, args.airavataCredStoreToken,resultHandler);
      }
    }

    public static class getExperimentStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentStatus_args, org.apache.airavata.model.workspace.experiment.ExperimentStatus> {
      public getExperimentStatus() {
        super("getExperimentStatus");
      }

      public getExperimentStatus_args getEmptyArgsInstance() {
        return new getExperimentStatus_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus>() { 
          public void onComplete(org.apache.airavata.model.workspace.experiment.ExperimentStatus o) {
            getExperimentStatus_result result = new getExperimentStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperimentStatus_result result = new getExperimentStatus_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.model.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperimentStatus_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus> resultHandler) throws TException {
        iface.getExperimentStatus(args.airavataExperimentId,resultHandler);
      }
    }

    public static class getExperimentOutputs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentOutputs_args, List<org.apache.airavata.model.workspace.experiment.DataObjectType>> {
      public getExperimentOutputs() {
        super("getExperimentOutputs");
      }

      public getExperimentOutputs_args getEmptyArgsInstance() {
        return new getExperimentOutputs_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>>() { 
          public void onComplete(List<org.apache.airavata.model.workspace.experiment.DataObjectType> o) {
            getExperimentOutputs_result result = new getExperimentOutputs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperimentOutputs_result result = new getExperimentOutputs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperimentOutputs_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>> resultHandler) throws TException {
        iface.getExperimentOutputs(args.airavataExperimentId,resultHandler);
      }
    }

    public static class getJobStatuses<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJobStatuses_args, Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>> {
      public getJobStatuses() {
        super("getJobStatuses");
      }

      public getJobStatuses_args getEmptyArgsInstance() {
        return new getJobStatuses_args();
      }

      public AsyncMethodCallback<Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>>() { 
          public void onComplete(Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> o) {
            getJobStatuses_result result = new getJobStatuses_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getJobStatuses_result result = new getJobStatuses_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getJobStatuses_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>> resultHandler) throws TException {
        iface.getJobStatuses(args.airavataExperimentId,resultHandler);
      }
    }

    public static class cloneExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cloneExperiment_args, String> {
      public cloneExperiment() {
        super("cloneExperiment");
      }

      public cloneExperiment_args getEmptyArgsInstance() {
        return new cloneExperiment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            cloneExperiment_result result = new cloneExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cloneExperiment_result result = new cloneExperiment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.model.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cloneExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.cloneExperiment(args.existingExperimentID, args.newExperimentName,resultHandler);
      }
    }

    public static class terminateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateExperiment_args, Void> {
      public terminateExperiment() {
        super("terminateExperiment");
      }

      public terminateExperiment_args getEmptyArgsInstance() {
        return new terminateExperiment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            terminateExperiment_result result = new terminateExperiment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            terminateExperiment_result result = new terminateExperiment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.model.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.terminateExperiment(args.airavataExperimentId,resultHandler);
      }
    }

    public static class registerApplicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerApplicationModule_args, String> {
      public registerApplicationModule() {
        super("registerApplicationModule");
      }

      public registerApplicationModule_args getEmptyArgsInstance() {
        return new registerApplicationModule_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            registerApplicationModule_result result = new registerApplicationModule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerApplicationModule_result result = new registerApplicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerApplicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.registerApplicationModule(args.applicationModule,resultHandler);
      }
    }

    public static class getApplicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationModule_args, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule> {
      public getApplicationModule() {
        super("getApplicationModule");
      }

      public getApplicationModule_args getEmptyArgsInstance() {
        return new getApplicationModule_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule>() { 
          public void onComplete(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule o) {
            getApplicationModule_result result = new getApplicationModule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationModule_result result = new getApplicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule> resultHandler) throws TException {
        iface.getApplicationModule(args.appModuleId,resultHandler);
      }
    }

    public static class updateApplicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateApplicationModule_args, Boolean> {
      public updateApplicationModule() {
        super("updateApplicationModule");
      }

      public updateApplicationModule_args getEmptyArgsInstance() {
        return new updateApplicationModule_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateApplicationModule_result result = new updateApplicationModule_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateApplicationModule_result result = new updateApplicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateApplicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateApplicationModule(args.appModuleId, args.applicationModule,resultHandler);
      }
    }

    public static class deleteApplicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteApplicationModule_args, Boolean> {
      public deleteApplicationModule() {
        super("deleteApplicationModule");
      }

      public deleteApplicationModule_args getEmptyArgsInstance() {
        return new deleteApplicationModule_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteApplicationModule_result result = new deleteApplicationModule_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteApplicationModule_result result = new deleteApplicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteApplicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteApplicationModule(args.appModuleId,resultHandler);
      }
    }

    public static class registerApplicationDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerApplicationDeployment_args, String> {
      public registerApplicationDeployment() {
        super("registerApplicationDeployment");
      }

      public registerApplicationDeployment_args getEmptyArgsInstance() {
        return new registerApplicationDeployment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            registerApplicationDeployment_result result = new registerApplicationDeployment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerApplicationDeployment_result result = new registerApplicationDeployment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerApplicationDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.registerApplicationDeployment(args.applicationDeployment,resultHandler);
      }
    }

    public static class getApplicationDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationDeployment_args, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription> {
      public getApplicationDeployment() {
        super("getApplicationDeployment");
      }

      public getApplicationDeployment_args getEmptyArgsInstance() {
        return new getApplicationDeployment_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription>() { 
          public void onComplete(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription o) {
            getApplicationDeployment_result result = new getApplicationDeployment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationDeployment_result result = new getApplicationDeployment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription> resultHandler) throws TException {
        iface.getApplicationDeployment(args.appDeploymentId,resultHandler);
      }
    }

    public static class updateApplicationDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateApplicationDeployment_args, Boolean> {
      public updateApplicationDeployment() {
        super("updateApplicationDeployment");
      }

      public updateApplicationDeployment_args getEmptyArgsInstance() {
        return new updateApplicationDeployment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateApplicationDeployment_result result = new updateApplicationDeployment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateApplicationDeployment_result result = new updateApplicationDeployment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateApplicationDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateApplicationDeployment(args.appDeploymentId, args.applicationDeployment,resultHandler);
      }
    }

    public static class deleteApplicationDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteApplicationDeployment_args, Boolean> {
      public deleteApplicationDeployment() {
        super("deleteApplicationDeployment");
      }

      public deleteApplicationDeployment_args getEmptyArgsInstance() {
        return new deleteApplicationDeployment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteApplicationDeployment_result result = new deleteApplicationDeployment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteApplicationDeployment_result result = new deleteApplicationDeployment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteApplicationDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteApplicationDeployment(args.appDeploymentId,resultHandler);
      }
    }

    public static class getAppModuleDeployedResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAppModuleDeployedResources_args, List<String>> {
      public getAppModuleDeployedResources() {
        super("getAppModuleDeployedResources");
      }

      public getAppModuleDeployedResources_args getEmptyArgsInstance() {
        return new getAppModuleDeployedResources_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAppModuleDeployedResources_result result = new getAppModuleDeployedResources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAppModuleDeployedResources_result result = new getAppModuleDeployedResources_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAppModuleDeployedResources_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAppModuleDeployedResources(args.appModuleId,resultHandler);
      }
    }

    public static class registerApplicationInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerApplicationInterface_args, String> {
      public registerApplicationInterface() {
        super("registerApplicationInterface");
      }

      public registerApplicationInterface_args getEmptyArgsInstance() {
        return new registerApplicationInterface_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            registerApplicationInterface_result result = new registerApplicationInterface_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerApplicationInterface_result result = new registerApplicationInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerApplicationInterface_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.registerApplicationInterface(args.applicationInterface,resultHandler);
      }
    }

    public static class getApplicationInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationInterface_args, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription> {
      public getApplicationInterface() {
        super("getApplicationInterface");
      }

      public getApplicationInterface_args getEmptyArgsInstance() {
        return new getApplicationInterface_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription>() { 
          public void onComplete(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription o) {
            getApplicationInterface_result result = new getApplicationInterface_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationInterface_result result = new getApplicationInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationInterface_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription> resultHandler) throws TException {
        iface.getApplicationInterface(args.appInterfaceId,resultHandler);
      }
    }

    public static class updateApplicationInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateApplicationInterface_args, Boolean> {
      public updateApplicationInterface() {
        super("updateApplicationInterface");
      }

      public updateApplicationInterface_args getEmptyArgsInstance() {
        return new updateApplicationInterface_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateApplicationInterface_result result = new updateApplicationInterface_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateApplicationInterface_result result = new updateApplicationInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateApplicationInterface_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateApplicationInterface(args.appInterfaceId, args.applicationInterface,resultHandler);
      }
    }

    public static class deleteApplicationInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteApplicationInterface_args, Boolean> {
      public deleteApplicationInterface() {
        super("deleteApplicationInterface");
      }

      public deleteApplicationInterface_args getEmptyArgsInstance() {
        return new deleteApplicationInterface_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteApplicationInterface_result result = new deleteApplicationInterface_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteApplicationInterface_result result = new deleteApplicationInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteApplicationInterface_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteApplicationInterface(args.appInterfaceId,resultHandler);
      }
    }

    public static class getApplicationInputs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationInputs_args, List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>> {
      public getApplicationInputs() {
        super("getApplicationInputs");
      }

      public getApplicationInputs_args getEmptyArgsInstance() {
        return new getApplicationInputs_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>>() { 
          public void onComplete(List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> o) {
            getApplicationInputs_result result = new getApplicationInputs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationInputs_result result = new getApplicationInputs_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationInputs_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>> resultHandler) throws TException {
        iface.getApplicationInputs(args.appInterfaceId,resultHandler);
      }
    }

    public static class getApplicationOutputs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationOutputs_args, List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>> {
      public getApplicationOutputs() {
        super("getApplicationOutputs");
      }

      public getApplicationOutputs_args getEmptyArgsInstance() {
        return new getApplicationOutputs_args();
      }

      public AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>>() { 
          public void onComplete(List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> o) {
            getApplicationOutputs_result result = new getApplicationOutputs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationOutputs_result result = new getApplicationOutputs_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationOutputs_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>> resultHandler) throws TException {
        iface.getApplicationOutputs(args.appInterfaceId,resultHandler);
      }
    }

    public static class registerComputeResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerComputeResource_args, String> {
      public registerComputeResource() {
        super("registerComputeResource");
      }

      public registerComputeResource_args getEmptyArgsInstance() {
        return new registerComputeResource_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            registerComputeResource_result result = new registerComputeResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerComputeResource_result result = new registerComputeResource_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerComputeResource_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.registerComputeResource(args.computeResourceDescription,resultHandler);
      }
    }

    public static class getComputeResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getComputeResource_args, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription> {
      public getComputeResource() {
        super("getComputeResource");
      }

      public getComputeResource_args getEmptyArgsInstance() {
        return new getComputeResource_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription>() { 
          public void onComplete(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription o) {
            getComputeResource_result result = new getComputeResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getComputeResource_result result = new getComputeResource_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getComputeResource_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription> resultHandler) throws TException {
        iface.getComputeResource(args.computeResourceId,resultHandler);
      }
    }

    public static class updateComputeResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateComputeResource_args, Boolean> {
      public updateComputeResource() {
        super("updateComputeResource");
      }

      public updateComputeResource_args getEmptyArgsInstance() {
        return new updateComputeResource_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateComputeResource_result result = new updateComputeResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateComputeResource_result result = new updateComputeResource_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateComputeResource_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateComputeResource(args.computeResourceId, args.computeResourceDescription,resultHandler);
      }
    }

    public static class deleteComputeResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteComputeResource_args, Boolean> {
      public deleteComputeResource() {
        super("deleteComputeResource");
      }

      public deleteComputeResource_args getEmptyArgsInstance() {
        return new deleteComputeResource_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteComputeResource_result result = new deleteComputeResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteComputeResource_result result = new deleteComputeResource_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteComputeResource_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteComputeResource(args.computeResourceId,resultHandler);
      }
    }

    public static class addLocalSubmissionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addLocalSubmissionDetails_args, Boolean> {
      public addLocalSubmissionDetails() {
        super("addLocalSubmissionDetails");
      }

      public addLocalSubmissionDetails_args getEmptyArgsInstance() {
        return new addLocalSubmissionDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addLocalSubmissionDetails_result result = new addLocalSubmissionDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addLocalSubmissionDetails_result result = new addLocalSubmissionDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addLocalSubmissionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addLocalSubmissionDetails(args.computeResourceId, args.priorityOrder, args.localSubmission,resultHandler);
      }
    }

    public static class updateLocalSubmissionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLocalSubmissionDetails_args, Boolean> {
      public updateLocalSubmissionDetails() {
        super("updateLocalSubmissionDetails");
      }

      public updateLocalSubmissionDetails_args getEmptyArgsInstance() {
        return new updateLocalSubmissionDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateLocalSubmissionDetails_result result = new updateLocalSubmissionDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLocalSubmissionDetails_result result = new updateLocalSubmissionDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLocalSubmissionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateLocalSubmissionDetails(args.jobSubmissionInterfaceId, args.localSubmission,resultHandler);
      }
    }

    public static class addSSHJobSubmissionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSSHJobSubmissionDetails_args, Boolean> {
      public addSSHJobSubmissionDetails() {
        super("addSSHJobSubmissionDetails");
      }

      public addSSHJobSubmissionDetails_args getEmptyArgsInstance() {
        return new addSSHJobSubmissionDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addSSHJobSubmissionDetails_result result = new addSSHJobSubmissionDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSSHJobSubmissionDetails_result result = new addSSHJobSubmissionDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSSHJobSubmissionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addSSHJobSubmissionDetails(args.computeResourceId, args.priorityOrder, args.sshJobSubmission,resultHandler);
      }
    }

    public static class updateSSHJobSubmissionDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSSHJobSubmissionDetails_args, Boolean> {
      public updateSSHJobSubmissionDetails() {
        super("updateSSHJobSubmissionDetails");
      }

      public updateSSHJobSubmissionDetails_args getEmptyArgsInstance() {
        return new updateSSHJobSubmissionDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateSSHJobSubmissionDetails_result result = new updateSSHJobSubmissionDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSSHJobSubmissionDetails_result result = new updateSSHJobSubmissionDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSSHJobSubmissionDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateSSHJobSubmissionDetails(args.jobSubmissionInterfaceId, args.sshJobSubmission,resultHandler);
      }
    }

    public static class addLocalDataMovementDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addLocalDataMovementDetails_args, Boolean> {
      public addLocalDataMovementDetails() {
        super("addLocalDataMovementDetails");
      }

      public addLocalDataMovementDetails_args getEmptyArgsInstance() {
        return new addLocalDataMovementDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addLocalDataMovementDetails_result result = new addLocalDataMovementDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addLocalDataMovementDetails_result result = new addLocalDataMovementDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addLocalDataMovementDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addLocalDataMovementDetails(args.computeResourceId, args.priorityOrder, args.localDataMovement,resultHandler);
      }
    }

    public static class updateLocalDataMovementDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateLocalDataMovementDetails_args, Boolean> {
      public updateLocalDataMovementDetails() {
        super("updateLocalDataMovementDetails");
      }

      public updateLocalDataMovementDetails_args getEmptyArgsInstance() {
        return new updateLocalDataMovementDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateLocalDataMovementDetails_result result = new updateLocalDataMovementDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateLocalDataMovementDetails_result result = new updateLocalDataMovementDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateLocalDataMovementDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateLocalDataMovementDetails(args.jobSubmissionInterfaceId, args.localDataMovement,resultHandler);
      }
    }

    public static class addSCPDataMovementDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSCPDataMovementDetails_args, Boolean> {
      public addSCPDataMovementDetails() {
        super("addSCPDataMovementDetails");
      }

      public addSCPDataMovementDetails_args getEmptyArgsInstance() {
        return new addSCPDataMovementDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addSCPDataMovementDetails_result result = new addSCPDataMovementDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSCPDataMovementDetails_result result = new addSCPDataMovementDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSCPDataMovementDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addSCPDataMovementDetails(args.computeResourceId, args.priorityOrder, args.scpDataMovement,resultHandler);
      }
    }

    public static class updateSCPDataMovementDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSCPDataMovementDetails_args, Boolean> {
      public updateSCPDataMovementDetails() {
        super("updateSCPDataMovementDetails");
      }

      public updateSCPDataMovementDetails_args getEmptyArgsInstance() {
        return new updateSCPDataMovementDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateSCPDataMovementDetails_result result = new updateSCPDataMovementDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSCPDataMovementDetails_result result = new updateSCPDataMovementDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSCPDataMovementDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateSCPDataMovementDetails(args.jobSubmissionInterfaceId, args.scpDataMovement,resultHandler);
      }
    }

    public static class addGridFTPDataMovementDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addGridFTPDataMovementDetails_args, Boolean> {
      public addGridFTPDataMovementDetails() {
        super("addGridFTPDataMovementDetails");
      }

      public addGridFTPDataMovementDetails_args getEmptyArgsInstance() {
        return new addGridFTPDataMovementDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addGridFTPDataMovementDetails_result result = new addGridFTPDataMovementDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addGridFTPDataMovementDetails_result result = new addGridFTPDataMovementDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addGridFTPDataMovementDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addGridFTPDataMovementDetails(args.computeResourceId, args.priorityOrder, args.gridFTPDataMovement,resultHandler);
      }
    }

    public static class updateGridFTPDataMovementDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGridFTPDataMovementDetails_args, Boolean> {
      public updateGridFTPDataMovementDetails() {
        super("updateGridFTPDataMovementDetails");
      }

      public updateGridFTPDataMovementDetails_args getEmptyArgsInstance() {
        return new updateGridFTPDataMovementDetails_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateGridFTPDataMovementDetails_result result = new updateGridFTPDataMovementDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateGridFTPDataMovementDetails_result result = new updateGridFTPDataMovementDetails_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGridFTPDataMovementDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateGridFTPDataMovementDetails(args.jobSubmissionInterfaceId, args.gridFTPDataMovement,resultHandler);
      }
    }

    public static class changeJobSubmissionPriority<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeJobSubmissionPriority_args, Boolean> {
      public changeJobSubmissionPriority() {
        super("changeJobSubmissionPriority");
      }

      public changeJobSubmissionPriority_args getEmptyArgsInstance() {
        return new changeJobSubmissionPriority_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            changeJobSubmissionPriority_result result = new changeJobSubmissionPriority_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeJobSubmissionPriority_result result = new changeJobSubmissionPriority_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeJobSubmissionPriority_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.changeJobSubmissionPriority(args.jobSubmissionInterfaceId, args.newPriorityOrder,resultHandler);
      }
    }

    public static class changeDataMovementPriority<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeDataMovementPriority_args, Boolean> {
      public changeDataMovementPriority() {
        super("changeDataMovementPriority");
      }

      public changeDataMovementPriority_args getEmptyArgsInstance() {
        return new changeDataMovementPriority_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            changeDataMovementPriority_result result = new changeDataMovementPriority_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeDataMovementPriority_result result = new changeDataMovementPriority_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeDataMovementPriority_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.changeDataMovementPriority(args.dataMovementInterfaceId, args.newPriorityOrder,resultHandler);
      }
    }

    public static class changeJobSubmissionPriorities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeJobSubmissionPriorities_args, Boolean> {
      public changeJobSubmissionPriorities() {
        super("changeJobSubmissionPriorities");
      }

      public changeJobSubmissionPriorities_args getEmptyArgsInstance() {
        return new changeJobSubmissionPriorities_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            changeJobSubmissionPriorities_result result = new changeJobSubmissionPriorities_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeJobSubmissionPriorities_result result = new changeJobSubmissionPriorities_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeJobSubmissionPriorities_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.changeJobSubmissionPriorities(args.jobSubmissionPriorityMap,resultHandler);
      }
    }

    public static class changeDataMovementPriorities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeDataMovementPriorities_args, Boolean> {
      public changeDataMovementPriorities() {
        super("changeDataMovementPriorities");
      }

      public changeDataMovementPriorities_args getEmptyArgsInstance() {
        return new changeDataMovementPriorities_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            changeDataMovementPriorities_result result = new changeDataMovementPriorities_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeDataMovementPriorities_result result = new changeDataMovementPriorities_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeDataMovementPriorities_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.changeDataMovementPriorities(args.dataMovementPriorityMap,resultHandler);
      }
    }

    public static class deleteJobSubmissionInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteJobSubmissionInterface_args, Boolean> {
      public deleteJobSubmissionInterface() {
        super("deleteJobSubmissionInterface");
      }

      public deleteJobSubmissionInterface_args getEmptyArgsInstance() {
        return new deleteJobSubmissionInterface_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteJobSubmissionInterface_result result = new deleteJobSubmissionInterface_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteJobSubmissionInterface_result result = new deleteJobSubmissionInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteJobSubmissionInterface_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteJobSubmissionInterface(args.jobSubmissionInterfaceId,resultHandler);
      }
    }

    public static class deleteDataMovementInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteDataMovementInterface_args, Boolean> {
      public deleteDataMovementInterface() {
        super("deleteDataMovementInterface");
      }

      public deleteDataMovementInterface_args getEmptyArgsInstance() {
        return new deleteDataMovementInterface_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteDataMovementInterface_result result = new deleteDataMovementInterface_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteDataMovementInterface_result result = new deleteDataMovementInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteDataMovementInterface_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteDataMovementInterface(args.dataMovementInterfaceId,resultHandler);
      }
    }

  }

  public static class getAPIVersion_args implements org.apache.thrift.TBase<getAPIVersion_args, getAPIVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAPIVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAPIVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAPIVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAPIVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAPIVersion_args.class, metaDataMap);
    }

    public getAPIVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAPIVersion_args(getAPIVersion_args other) {
    }

    public getAPIVersion_args deepCopy() {
      return new getAPIVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAPIVersion_args)
        return this.equals((getAPIVersion_args)that);
      return false;
    }

    public boolean equals(getAPIVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAPIVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAPIVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAPIVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getAPIVersion_argsStandardScheme getScheme() {
        return new getAPIVersion_argsStandardScheme();
      }
    }

    private static class getAPIVersion_argsStandardScheme extends StandardScheme<getAPIVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAPIVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getAPIVersion_argsTupleScheme getScheme() {
        return new getAPIVersion_argsTupleScheme();
      }
    }

    private static class getAPIVersion_argsTupleScheme extends TupleScheme<getAPIVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAPIVersion_result implements org.apache.thrift.TBase<getAPIVersion_result, getAPIVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAPIVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAPIVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAPIVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAPIVersion_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAPIVersion_result.class, metaDataMap);
    }

    public getAPIVersion_result() {
    }

    public getAPIVersion_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAPIVersion_result(getAPIVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getAPIVersion_result deepCopy() {
      return new getAPIVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getAPIVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAPIVersion_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getAPIVersion_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getAPIVersion_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAPIVersion_result)
        return this.equals((getAPIVersion_result)that);
      return false;
    }

    public boolean equals(getAPIVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAPIVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAPIVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAPIVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getAPIVersion_resultStandardScheme getScheme() {
        return new getAPIVersion_resultStandardScheme();
      }
    }

    private static class getAPIVersion_resultStandardScheme extends StandardScheme<getAPIVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAPIVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getAPIVersion_resultTupleScheme getScheme() {
        return new getAPIVersion_resultTupleScheme();
      }
    }

    private static class getAPIVersion_resultTupleScheme extends TupleScheme<getAPIVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class createProject_args implements org.apache.thrift.TBase<createProject_args, createProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<createProject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProject_args");

    private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createProject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createProject_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.workspace.Project project; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT((short)1, "project");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT
            return PROJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProject_args.class, metaDataMap);
    }

    public createProject_args() {
    }

    public createProject_args(
      org.apache.airavata.model.workspace.Project project)
    {
      this();
      this.project = project;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createProject_args(createProject_args other) {
      if (other.isSetProject()) {
        this.project = new org.apache.airavata.model.workspace.Project(other.project);
      }
    }

    public createProject_args deepCopy() {
      return new createProject_args(this);
    }

    @Override
    public void clear() {
      this.project = null;
    }

    public org.apache.airavata.model.workspace.Project getProject() {
      return this.project;
    }

    public createProject_args setProject(org.apache.airavata.model.workspace.Project project) {
      this.project = project;
      return this;
    }

    public void unsetProject() {
      this.project = null;
    }

    /** Returns true if field project is set (has been assigned a value) and false otherwise */
    public boolean isSetProject() {
      return this.project != null;
    }

    public void setProjectIsSet(boolean value) {
      if (!value) {
        this.project = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT:
        if (value == null) {
          unsetProject();
        } else {
          setProject((org.apache.airavata.model.workspace.Project)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT:
        return getProject();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT:
        return isSetProject();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createProject_args)
        return this.equals((createProject_args)that);
      return false;
    }

    public boolean equals(createProject_args that) {
      if (that == null)
        return false;

      boolean this_present_project = true && this.isSetProject();
      boolean that_present_project = true && that.isSetProject();
      if (this_present_project || that_present_project) {
        if (!(this_present_project && that_present_project))
          return false;
        if (!this.project.equals(that.project))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createProject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createProject_args(");
      boolean first = true;

      sb.append("project:");
      if (this.project == null) {
        sb.append("null");
      } else {
        sb.append(this.project);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (project == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'project' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (project != null) {
        project.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createProject_argsStandardSchemeFactory implements SchemeFactory {
      public createProject_argsStandardScheme getScheme() {
        return new createProject_argsStandardScheme();
      }
    }

    private static class createProject_argsStandardScheme extends StandardScheme<createProject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createProject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.project = new org.apache.airavata.model.workspace.Project();
                struct.project.read(iprot);
                struct.setProjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createProject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.project != null) {
          oprot.writeFieldBegin(PROJECT_FIELD_DESC);
          struct.project.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createProject_argsTupleSchemeFactory implements SchemeFactory {
      public createProject_argsTupleScheme getScheme() {
        return new createProject_argsTupleScheme();
      }
    }

    private static class createProject_argsTupleScheme extends TupleScheme<createProject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.project.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.project = new org.apache.airavata.model.workspace.Project();
        struct.project.read(iprot);
        struct.setProjectIsSet(true);
      }
    }

  }

  public static class createProject_result implements org.apache.thrift.TBase<createProject_result, createProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<createProject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createProject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createProject_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProject_result.class, metaDataMap);
    }

    public createProject_result() {
    }

    public createProject_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createProject_result(createProject_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public createProject_result deepCopy() {
      return new createProject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createProject_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public createProject_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public createProject_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public createProject_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createProject_result)
        return this.equals((createProject_result)that);
      return false;
    }

    public boolean equals(createProject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createProject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createProject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createProject_resultStandardSchemeFactory implements SchemeFactory {
      public createProject_resultStandardScheme getScheme() {
        return new createProject_resultStandardScheme();
      }
    }

    private static class createProject_resultStandardScheme extends StandardScheme<createProject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createProject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createProject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createProject_resultTupleSchemeFactory implements SchemeFactory {
      public createProject_resultTupleScheme getScheme() {
        return new createProject_resultTupleScheme();
      }
    }

    private static class createProject_resultTupleScheme extends TupleScheme<createProject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateProject_args implements org.apache.thrift.TBase<updateProject_args, updateProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProject_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UPDATED_PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedProject", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProject_argsTupleSchemeFactory());
    }

    public String projectId; // required
    public org.apache.airavata.model.workspace.Project updatedProject; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      UPDATED_PROJECT((short)2, "updatedProject");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // UPDATED_PROJECT
            return UPDATED_PROJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UPDATED_PROJECT, new org.apache.thrift.meta_data.FieldMetaData("updatedProject", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProject_args.class, metaDataMap);
    }

    public updateProject_args() {
    }

    public updateProject_args(
      String projectId,
      org.apache.airavata.model.workspace.Project updatedProject)
    {
      this();
      this.projectId = projectId;
      this.updatedProject = updatedProject;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProject_args(updateProject_args other) {
      if (other.isSetProjectId()) {
        this.projectId = other.projectId;
      }
      if (other.isSetUpdatedProject()) {
        this.updatedProject = new org.apache.airavata.model.workspace.Project(other.updatedProject);
      }
    }

    public updateProject_args deepCopy() {
      return new updateProject_args(this);
    }

    @Override
    public void clear() {
      this.projectId = null;
      this.updatedProject = null;
    }

    public String getProjectId() {
      return this.projectId;
    }

    public updateProject_args setProjectId(String projectId) {
      this.projectId = projectId;
      return this;
    }

    public void unsetProjectId() {
      this.projectId = null;
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return this.projectId != null;
    }

    public void setProjectIdIsSet(boolean value) {
      if (!value) {
        this.projectId = null;
      }
    }

    public org.apache.airavata.model.workspace.Project getUpdatedProject() {
      return this.updatedProject;
    }

    public updateProject_args setUpdatedProject(org.apache.airavata.model.workspace.Project updatedProject) {
      this.updatedProject = updatedProject;
      return this;
    }

    public void unsetUpdatedProject() {
      this.updatedProject = null;
    }

    /** Returns true if field updatedProject is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdatedProject() {
      return this.updatedProject != null;
    }

    public void setUpdatedProjectIsSet(boolean value) {
      if (!value) {
        this.updatedProject = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((String)value);
        }
        break;

      case UPDATED_PROJECT:
        if (value == null) {
          unsetUpdatedProject();
        } else {
          setUpdatedProject((org.apache.airavata.model.workspace.Project)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      case UPDATED_PROJECT:
        return getUpdatedProject();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case UPDATED_PROJECT:
        return isSetUpdatedProject();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProject_args)
        return this.equals((updateProject_args)that);
      return false;
    }

    public boolean equals(updateProject_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true && this.isSetProjectId();
      boolean that_present_projectId = true && that.isSetProjectId();
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (!this.projectId.equals(that.projectId))
          return false;
      }

      boolean this_present_updatedProject = true && this.isSetUpdatedProject();
      boolean that_present_updatedProject = true && that.isSetUpdatedProject();
      if (this_present_updatedProject || that_present_updatedProject) {
        if (!(this_present_updatedProject && that_present_updatedProject))
          return false;
        if (!this.updatedProject.equals(that.updatedProject))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateProject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdatedProject()).compareTo(other.isSetUpdatedProject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdatedProject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedProject, other.updatedProject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProject_args(");
      boolean first = true;

      sb.append("projectId:");
      if (this.projectId == null) {
        sb.append("null");
      } else {
        sb.append(this.projectId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updatedProject:");
      if (this.updatedProject == null) {
        sb.append("null");
      } else {
        sb.append(this.updatedProject);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (projectId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not present! Struct: " + toString());
      }
      if (updatedProject == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'updatedProject' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (updatedProject != null) {
        updatedProject.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProject_argsStandardSchemeFactory implements SchemeFactory {
      public updateProject_argsStandardScheme getScheme() {
        return new updateProject_argsStandardScheme();
      }
    }

    private static class updateProject_argsStandardScheme extends StandardScheme<updateProject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectId = iprot.readString();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UPDATED_PROJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updatedProject = new org.apache.airavata.model.workspace.Project();
                struct.updatedProject.read(iprot);
                struct.setUpdatedProjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectId != null) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.projectId);
          oprot.writeFieldEnd();
        }
        if (struct.updatedProject != null) {
          oprot.writeFieldBegin(UPDATED_PROJECT_FIELD_DESC);
          struct.updatedProject.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProject_argsTupleSchemeFactory implements SchemeFactory {
      public updateProject_argsTupleScheme getScheme() {
        return new updateProject_argsTupleScheme();
      }
    }

    private static class updateProject_argsTupleScheme extends TupleScheme<updateProject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.projectId);
        struct.updatedProject.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
        struct.updatedProject = new org.apache.airavata.model.workspace.Project();
        struct.updatedProject.read(iprot);
        struct.setUpdatedProjectIsSet(true);
      }
    }

  }

  public static class updateProject_result implements org.apache.thrift.TBase<updateProject_result, updateProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProject_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("pnfe", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProject_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required
    public org.apache.airavata.model.error.ProjectNotFoundException pnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase"),
      PNFE((short)4, "pnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          case 4: // PNFE
            return PNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PNFE, new org.apache.thrift.meta_data.FieldMetaData("pnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProject_result.class, metaDataMap);
    }

    public updateProject_result() {
    }

    public updateProject_result(
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase,
      org.apache.airavata.model.error.ProjectNotFoundException pnfe)
    {
      this();
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
      this.pnfe = pnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProject_result(updateProject_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
      if (other.isSetPnfe()) {
        this.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException(other.pnfe);
      }
    }

    public updateProject_result deepCopy() {
      return new updateProject_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.ace = null;
      this.ase = null;
      this.pnfe = null;
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateProject_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateProject_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateProject_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.model.error.ProjectNotFoundException getPnfe() {
      return this.pnfe;
    }

    public updateProject_result setPnfe(org.apache.airavata.model.error.ProjectNotFoundException pnfe) {
      this.pnfe = pnfe;
      return this;
    }

    public void unsetPnfe() {
      this.pnfe = null;
    }

    /** Returns true if field pnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetPnfe() {
      return this.pnfe != null;
    }

    public void setPnfeIsSet(boolean value) {
      if (!value) {
        this.pnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      case PNFE:
        if (value == null) {
          unsetPnfe();
        } else {
          setPnfe((org.apache.airavata.model.error.ProjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      case PNFE:
        return getPnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      case PNFE:
        return isSetPnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProject_result)
        return this.equals((updateProject_result)that);
      return false;
    }

    public boolean equals(updateProject_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_pnfe = true && this.isSetPnfe();
      boolean that_present_pnfe = true && that.isSetPnfe();
      if (this_present_pnfe || that_present_pnfe) {
        if (!(this_present_pnfe && that_present_pnfe))
          return false;
        if (!this.pnfe.equals(that.pnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateProject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPnfe()).compareTo(other.isSetPnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnfe, other.pnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProject_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pnfe:");
      if (this.pnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.pnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProject_resultStandardSchemeFactory implements SchemeFactory {
      public updateProject_resultStandardScheme getScheme() {
        return new updateProject_resultStandardScheme();
      }
    }

    private static class updateProject_resultStandardScheme extends StandardScheme<updateProject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException();
                struct.pnfe.read(iprot);
                struct.setPnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pnfe != null) {
          oprot.writeFieldBegin(PNFE_FIELD_DESC);
          struct.pnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProject_resultTupleSchemeFactory implements SchemeFactory {
      public updateProject_resultTupleScheme getScheme() {
        return new updateProject_resultTupleScheme();
      }
    }

    private static class updateProject_resultTupleScheme extends TupleScheme<updateProject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAce()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        if (struct.isSetPnfe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetPnfe()) {
          struct.pnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException();
          struct.pnfe.read(iprot);
          struct.setPnfeIsSet(true);
        }
      }
    }

  }

  public static class getProject_args implements org.apache.thrift.TBase<getProject_args, getProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProject_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProject_argsTupleSchemeFactory());
    }

    public String projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProject_args.class, metaDataMap);
    }

    public getProject_args() {
    }

    public getProject_args(
      String projectId)
    {
      this();
      this.projectId = projectId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProject_args(getProject_args other) {
      if (other.isSetProjectId()) {
        this.projectId = other.projectId;
      }
    }

    public getProject_args deepCopy() {
      return new getProject_args(this);
    }

    @Override
    public void clear() {
      this.projectId = null;
    }

    public String getProjectId() {
      return this.projectId;
    }

    public getProject_args setProjectId(String projectId) {
      this.projectId = projectId;
      return this;
    }

    public void unsetProjectId() {
      this.projectId = null;
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return this.projectId != null;
    }

    public void setProjectIdIsSet(boolean value) {
      if (!value) {
        this.projectId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProject_args)
        return this.equals((getProject_args)that);
      return false;
    }

    public boolean equals(getProject_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true && this.isSetProjectId();
      boolean that_present_projectId = true && that.isSetProjectId();
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (!this.projectId.equals(that.projectId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProject_args(");
      boolean first = true;

      sb.append("projectId:");
      if (this.projectId == null) {
        sb.append("null");
      } else {
        sb.append(this.projectId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (projectId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProject_argsStandardSchemeFactory implements SchemeFactory {
      public getProject_argsStandardScheme getScheme() {
        return new getProject_argsStandardScheme();
      }
    }

    private static class getProject_argsStandardScheme extends StandardScheme<getProject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectId = iprot.readString();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectId != null) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.projectId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProject_argsTupleSchemeFactory implements SchemeFactory {
      public getProject_argsTupleScheme getScheme() {
        return new getProject_argsTupleScheme();
      }
    }

    private static class getProject_argsTupleScheme extends TupleScheme<getProject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
    }

  }

  public static class getProject_result implements org.apache.thrift.TBase<getProject_result, getProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("pnfe", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProject_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.workspace.Project success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required
    public org.apache.airavata.model.error.ProjectNotFoundException pnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase"),
      PNFE((short)4, "pnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          case 4: // PNFE
            return PNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PNFE, new org.apache.thrift.meta_data.FieldMetaData("pnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProject_result.class, metaDataMap);
    }

    public getProject_result() {
    }

    public getProject_result(
      org.apache.airavata.model.workspace.Project success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase,
      org.apache.airavata.model.error.ProjectNotFoundException pnfe)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
      this.pnfe = pnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProject_result(getProject_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.workspace.Project(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
      if (other.isSetPnfe()) {
        this.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException(other.pnfe);
      }
    }

    public getProject_result deepCopy() {
      return new getProject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
      this.pnfe = null;
    }

    public org.apache.airavata.model.workspace.Project getSuccess() {
      return this.success;
    }

    public getProject_result setSuccess(org.apache.airavata.model.workspace.Project success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getProject_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getProject_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getProject_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.model.error.ProjectNotFoundException getPnfe() {
      return this.pnfe;
    }

    public getProject_result setPnfe(org.apache.airavata.model.error.ProjectNotFoundException pnfe) {
      this.pnfe = pnfe;
      return this;
    }

    public void unsetPnfe() {
      this.pnfe = null;
    }

    /** Returns true if field pnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetPnfe() {
      return this.pnfe != null;
    }

    public void setPnfeIsSet(boolean value) {
      if (!value) {
        this.pnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.workspace.Project)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      case PNFE:
        if (value == null) {
          unsetPnfe();
        } else {
          setPnfe((org.apache.airavata.model.error.ProjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      case PNFE:
        return getPnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      case PNFE:
        return isSetPnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProject_result)
        return this.equals((getProject_result)that);
      return false;
    }

    public boolean equals(getProject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_pnfe = true && this.isSetPnfe();
      boolean that_present_pnfe = true && that.isSetPnfe();
      if (this_present_pnfe || that_present_pnfe) {
        if (!(this_present_pnfe && that_present_pnfe))
          return false;
        if (!this.pnfe.equals(that.pnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPnfe()).compareTo(other.isSetPnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnfe, other.pnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pnfe:");
      if (this.pnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.pnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProject_resultStandardSchemeFactory implements SchemeFactory {
      public getProject_resultStandardScheme getScheme() {
        return new getProject_resultStandardScheme();
      }
    }

    private static class getProject_resultStandardScheme extends StandardScheme<getProject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.workspace.Project();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException();
                struct.pnfe.read(iprot);
                struct.setPnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pnfe != null) {
          oprot.writeFieldBegin(PNFE_FIELD_DESC);
          struct.pnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProject_resultTupleSchemeFactory implements SchemeFactory {
      public getProject_resultTupleScheme getScheme() {
        return new getProject_resultTupleScheme();
      }
    }

    private static class getProject_resultTupleScheme extends TupleScheme<getProject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        if (struct.isSetPnfe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetPnfe()) {
          struct.pnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.workspace.Project();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException();
          struct.pnfe.read(iprot);
          struct.setPnfeIsSet(true);
        }
      }
    }

  }

  public static class getAllUserProjects_args implements org.apache.thrift.TBase<getAllUserProjects_args, getAllUserProjects_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserProjects_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserProjects_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllUserProjects_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllUserProjects_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserProjects_args.class, metaDataMap);
    }

    public getAllUserProjects_args() {
    }

    public getAllUserProjects_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllUserProjects_args(getAllUserProjects_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public getAllUserProjects_args deepCopy() {
      return new getAllUserProjects_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public getAllUserProjects_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllUserProjects_args)
        return this.equals((getAllUserProjects_args)that);
      return false;
    }

    public boolean equals(getAllUserProjects_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllUserProjects_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllUserProjects_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllUserProjects_argsStandardSchemeFactory implements SchemeFactory {
      public getAllUserProjects_argsStandardScheme getScheme() {
        return new getAllUserProjects_argsStandardScheme();
      }
    }

    private static class getAllUserProjects_argsStandardScheme extends StandardScheme<getAllUserProjects_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllUserProjects_argsTupleSchemeFactory implements SchemeFactory {
      public getAllUserProjects_argsTupleScheme getScheme() {
        return new getAllUserProjects_argsTupleScheme();
      }
    }

    private static class getAllUserProjects_argsTupleScheme extends TupleScheme<getAllUserProjects_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }

  }

  public static class getAllUserProjects_result implements org.apache.thrift.TBase<getAllUserProjects_result, getAllUserProjects_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserProjects_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserProjects_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllUserProjects_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllUserProjects_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.Project> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserProjects_result.class, metaDataMap);
    }

    public getAllUserProjects_result() {
    }

    public getAllUserProjects_result(
      List<org.apache.airavata.model.workspace.Project> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllUserProjects_result(getAllUserProjects_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.Project> __this__success = new ArrayList<org.apache.airavata.model.workspace.Project>(other.success.size());
        for (org.apache.airavata.model.workspace.Project other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.Project(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getAllUserProjects_result deepCopy() {
      return new getAllUserProjects_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.Project> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.Project elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.Project>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.Project> getSuccess() {
      return this.success;
    }

    public getAllUserProjects_result setSuccess(List<org.apache.airavata.model.workspace.Project> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAllUserProjects_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getAllUserProjects_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getAllUserProjects_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.Project>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllUserProjects_result)
        return this.equals((getAllUserProjects_result)that);
      return false;
    }

    public boolean equals(getAllUserProjects_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllUserProjects_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllUserProjects_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllUserProjects_resultStandardSchemeFactory implements SchemeFactory {
      public getAllUserProjects_resultStandardScheme getScheme() {
        return new getAllUserProjects_resultStandardScheme();
      }
    }

    private static class getAllUserProjects_resultStandardScheme extends StandardScheme<getAllUserProjects_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    org.apache.airavata.model.workspace.Project _elem2;
                    _elem2 = new org.apache.airavata.model.workspace.Project();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.Project _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllUserProjects_resultTupleSchemeFactory implements SchemeFactory {
      public getAllUserProjects_resultTupleScheme getScheme() {
        return new getAllUserProjects_resultTupleScheme();
      }
    }

    private static class getAllUserProjects_resultTupleScheme extends TupleScheme<getAllUserProjects_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.Project _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              org.apache.airavata.model.workspace.Project _elem7;
              _elem7 = new org.apache.airavata.model.workspace.Project();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class searchProjectsByProjectName_args implements org.apache.thrift.TBase<searchProjectsByProjectName_args, searchProjectsByProjectName_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchProjectsByProjectName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProjectsByProjectName_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProjectsByProjectName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProjectsByProjectName_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String projectName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      PROJECT_NAME((short)2, "projectName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PROJECT_NAME
            return PROJECT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProjectsByProjectName_args.class, metaDataMap);
    }

    public searchProjectsByProjectName_args() {
    }

    public searchProjectsByProjectName_args(
      String userName,
      String projectName)
    {
      this();
      this.userName = userName;
      this.projectName = projectName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProjectsByProjectName_args(searchProjectsByProjectName_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
    }

    public searchProjectsByProjectName_args deepCopy() {
      return new searchProjectsByProjectName_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.projectName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public searchProjectsByProjectName_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getProjectName() {
      return this.projectName;
    }

    public searchProjectsByProjectName_args setProjectName(String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case PROJECT_NAME:
        return getProjectName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case PROJECT_NAME:
        return isSetProjectName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProjectsByProjectName_args)
        return this.equals((searchProjectsByProjectName_args)that);
      return false;
    }

    public boolean equals(searchProjectsByProjectName_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchProjectsByProjectName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProjectsByProjectName_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (projectName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProjectsByProjectName_argsStandardSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectName_argsStandardScheme getScheme() {
        return new searchProjectsByProjectName_argsStandardScheme();
      }
    }

    private static class searchProjectsByProjectName_argsStandardScheme extends StandardScheme<searchProjectsByProjectName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProjectsByProjectName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProjectsByProjectName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProjectsByProjectName_argsTupleSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectName_argsTupleScheme getScheme() {
        return new searchProjectsByProjectName_argsTupleScheme();
      }
    }

    private static class searchProjectsByProjectName_argsTupleScheme extends TupleScheme<searchProjectsByProjectName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.projectName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
    }

  }

  public static class searchProjectsByProjectName_result implements org.apache.thrift.TBase<searchProjectsByProjectName_result, searchProjectsByProjectName_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchProjectsByProjectName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProjectsByProjectName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProjectsByProjectName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProjectsByProjectName_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.Project> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProjectsByProjectName_result.class, metaDataMap);
    }

    public searchProjectsByProjectName_result() {
    }

    public searchProjectsByProjectName_result(
      List<org.apache.airavata.model.workspace.Project> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProjectsByProjectName_result(searchProjectsByProjectName_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.Project> __this__success = new ArrayList<org.apache.airavata.model.workspace.Project>(other.success.size());
        for (org.apache.airavata.model.workspace.Project other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.Project(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public searchProjectsByProjectName_result deepCopy() {
      return new searchProjectsByProjectName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.Project> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.Project elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.Project>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.Project> getSuccess() {
      return this.success;
    }

    public searchProjectsByProjectName_result setSuccess(List<org.apache.airavata.model.workspace.Project> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchProjectsByProjectName_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public searchProjectsByProjectName_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public searchProjectsByProjectName_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.Project>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProjectsByProjectName_result)
        return this.equals((searchProjectsByProjectName_result)that);
      return false;
    }

    public boolean equals(searchProjectsByProjectName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchProjectsByProjectName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProjectsByProjectName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProjectsByProjectName_resultStandardSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectName_resultStandardScheme getScheme() {
        return new searchProjectsByProjectName_resultStandardScheme();
      }
    }

    private static class searchProjectsByProjectName_resultStandardScheme extends StandardScheme<searchProjectsByProjectName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProjectsByProjectName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    org.apache.airavata.model.workspace.Project _elem10;
                    _elem10 = new org.apache.airavata.model.workspace.Project();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProjectsByProjectName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.Project _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProjectsByProjectName_resultTupleSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectName_resultTupleScheme getScheme() {
        return new searchProjectsByProjectName_resultTupleScheme();
      }
    }

    private static class searchProjectsByProjectName_resultTupleScheme extends TupleScheme<searchProjectsByProjectName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.Project _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              org.apache.airavata.model.workspace.Project _elem15;
              _elem15 = new org.apache.airavata.model.workspace.Project();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class searchProjectsByProjectDesc_args implements org.apache.thrift.TBase<searchProjectsByProjectDesc_args, searchProjectsByProjectDesc_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchProjectsByProjectDesc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProjectsByProjectDesc_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProjectsByProjectDesc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProjectsByProjectDesc_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      DESCRIPTION((short)2, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProjectsByProjectDesc_args.class, metaDataMap);
    }

    public searchProjectsByProjectDesc_args() {
    }

    public searchProjectsByProjectDesc_args(
      String userName,
      String description)
    {
      this();
      this.userName = userName;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProjectsByProjectDesc_args(searchProjectsByProjectDesc_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public searchProjectsByProjectDesc_args deepCopy() {
      return new searchProjectsByProjectDesc_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.description = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public searchProjectsByProjectDesc_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public searchProjectsByProjectDesc_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProjectsByProjectDesc_args)
        return this.equals((searchProjectsByProjectDesc_args)that);
      return false;
    }

    public boolean equals(searchProjectsByProjectDesc_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchProjectsByProjectDesc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProjectsByProjectDesc_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (description == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProjectsByProjectDesc_argsStandardSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectDesc_argsStandardScheme getScheme() {
        return new searchProjectsByProjectDesc_argsStandardScheme();
      }
    }

    private static class searchProjectsByProjectDesc_argsStandardScheme extends StandardScheme<searchProjectsByProjectDesc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProjectsByProjectDesc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProjectsByProjectDesc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProjectsByProjectDesc_argsTupleSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectDesc_argsTupleScheme getScheme() {
        return new searchProjectsByProjectDesc_argsTupleScheme();
      }
    }

    private static class searchProjectsByProjectDesc_argsTupleScheme extends TupleScheme<searchProjectsByProjectDesc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectDesc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.description);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectDesc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }

  }

  public static class searchProjectsByProjectDesc_result implements org.apache.thrift.TBase<searchProjectsByProjectDesc_result, searchProjectsByProjectDesc_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchProjectsByProjectDesc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProjectsByProjectDesc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProjectsByProjectDesc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProjectsByProjectDesc_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.Project> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProjectsByProjectDesc_result.class, metaDataMap);
    }

    public searchProjectsByProjectDesc_result() {
    }

    public searchProjectsByProjectDesc_result(
      List<org.apache.airavata.model.workspace.Project> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProjectsByProjectDesc_result(searchProjectsByProjectDesc_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.Project> __this__success = new ArrayList<org.apache.airavata.model.workspace.Project>(other.success.size());
        for (org.apache.airavata.model.workspace.Project other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.Project(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public searchProjectsByProjectDesc_result deepCopy() {
      return new searchProjectsByProjectDesc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.Project> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.Project elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.Project>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.Project> getSuccess() {
      return this.success;
    }

    public searchProjectsByProjectDesc_result setSuccess(List<org.apache.airavata.model.workspace.Project> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchProjectsByProjectDesc_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public searchProjectsByProjectDesc_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public searchProjectsByProjectDesc_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.Project>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProjectsByProjectDesc_result)
        return this.equals((searchProjectsByProjectDesc_result)that);
      return false;
    }

    public boolean equals(searchProjectsByProjectDesc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchProjectsByProjectDesc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProjectsByProjectDesc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProjectsByProjectDesc_resultStandardSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectDesc_resultStandardScheme getScheme() {
        return new searchProjectsByProjectDesc_resultStandardScheme();
      }
    }

    private static class searchProjectsByProjectDesc_resultStandardScheme extends StandardScheme<searchProjectsByProjectDesc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProjectsByProjectDesc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    org.apache.airavata.model.workspace.Project _elem18;
                    _elem18 = new org.apache.airavata.model.workspace.Project();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProjectsByProjectDesc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.Project _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProjectsByProjectDesc_resultTupleSchemeFactory implements SchemeFactory {
      public searchProjectsByProjectDesc_resultTupleScheme getScheme() {
        return new searchProjectsByProjectDesc_resultTupleScheme();
      }
    }

    private static class searchProjectsByProjectDesc_resultTupleScheme extends TupleScheme<searchProjectsByProjectDesc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectDesc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.Project _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProjectsByProjectDesc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              org.apache.airavata.model.workspace.Project _elem23;
              _elem23 = new org.apache.airavata.model.workspace.Project();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class searchExperimentsByName_args implements org.apache.thrift.TBase<searchExperimentsByName_args, searchExperimentsByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchExperimentsByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExperimentsByName_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EXP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("expName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchExperimentsByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchExperimentsByName_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String expName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      EXP_NAME((short)2, "expName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // EXP_NAME
            return EXP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXP_NAME, new org.apache.thrift.meta_data.FieldMetaData("expName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExperimentsByName_args.class, metaDataMap);
    }

    public searchExperimentsByName_args() {
    }

    public searchExperimentsByName_args(
      String userName,
      String expName)
    {
      this();
      this.userName = userName;
      this.expName = expName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExperimentsByName_args(searchExperimentsByName_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetExpName()) {
        this.expName = other.expName;
      }
    }

    public searchExperimentsByName_args deepCopy() {
      return new searchExperimentsByName_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.expName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public searchExperimentsByName_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getExpName() {
      return this.expName;
    }

    public searchExperimentsByName_args setExpName(String expName) {
      this.expName = expName;
      return this;
    }

    public void unsetExpName() {
      this.expName = null;
    }

    /** Returns true if field expName is set (has been assigned a value) and false otherwise */
    public boolean isSetExpName() {
      return this.expName != null;
    }

    public void setExpNameIsSet(boolean value) {
      if (!value) {
        this.expName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case EXP_NAME:
        if (value == null) {
          unsetExpName();
        } else {
          setExpName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case EXP_NAME:
        return getExpName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case EXP_NAME:
        return isSetExpName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExperimentsByName_args)
        return this.equals((searchExperimentsByName_args)that);
      return false;
    }

    public boolean equals(searchExperimentsByName_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_expName = true && this.isSetExpName();
      boolean that_present_expName = true && that.isSetExpName();
      if (this_present_expName || that_present_expName) {
        if (!(this_present_expName && that_present_expName))
          return false;
        if (!this.expName.equals(that.expName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchExperimentsByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExpName()).compareTo(other.isSetExpName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expName, other.expName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExperimentsByName_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expName:");
      if (this.expName == null) {
        sb.append("null");
      } else {
        sb.append(this.expName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (expName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'expName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchExperimentsByName_argsStandardSchemeFactory implements SchemeFactory {
      public searchExperimentsByName_argsStandardScheme getScheme() {
        return new searchExperimentsByName_argsStandardScheme();
      }
    }

    private static class searchExperimentsByName_argsStandardScheme extends StandardScheme<searchExperimentsByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchExperimentsByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expName = iprot.readString();
                struct.setExpNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchExperimentsByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.expName != null) {
          oprot.writeFieldBegin(EXP_NAME_FIELD_DESC);
          oprot.writeString(struct.expName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchExperimentsByName_argsTupleSchemeFactory implements SchemeFactory {
      public searchExperimentsByName_argsTupleScheme getScheme() {
        return new searchExperimentsByName_argsTupleScheme();
      }
    }

    private static class searchExperimentsByName_argsTupleScheme extends TupleScheme<searchExperimentsByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.expName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.expName = iprot.readString();
        struct.setExpNameIsSet(true);
      }
    }

  }

  public static class searchExperimentsByName_result implements org.apache.thrift.TBase<searchExperimentsByName_result, searchExperimentsByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchExperimentsByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExperimentsByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchExperimentsByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchExperimentsByName_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ExperimentSummary.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExperimentsByName_result.class, metaDataMap);
    }

    public searchExperimentsByName_result() {
    }

    public searchExperimentsByName_result(
      List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExperimentsByName_result(searchExperimentsByName_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(other.success.size());
        for (org.apache.airavata.model.workspace.experiment.ExperimentSummary other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.experiment.ExperimentSummary(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public searchExperimentsByName_result deepCopy() {
      return new searchExperimentsByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.experiment.ExperimentSummary elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getSuccess() {
      return this.success;
    }

    public searchExperimentsByName_result setSuccess(List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchExperimentsByName_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public searchExperimentsByName_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public searchExperimentsByName_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExperimentsByName_result)
        return this.equals((searchExperimentsByName_result)that);
      return false;
    }

    public boolean equals(searchExperimentsByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchExperimentsByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExperimentsByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchExperimentsByName_resultStandardSchemeFactory implements SchemeFactory {
      public searchExperimentsByName_resultStandardScheme getScheme() {
        return new searchExperimentsByName_resultStandardScheme();
      }
    }

    private static class searchExperimentsByName_resultStandardScheme extends StandardScheme<searchExperimentsByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchExperimentsByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    org.apache.airavata.model.workspace.experiment.ExperimentSummary _elem26;
                    _elem26 = new org.apache.airavata.model.workspace.experiment.ExperimentSummary();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchExperimentsByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.experiment.ExperimentSummary _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchExperimentsByName_resultTupleSchemeFactory implements SchemeFactory {
      public searchExperimentsByName_resultTupleScheme getScheme() {
        return new searchExperimentsByName_resultTupleScheme();
      }
    }

    private static class searchExperimentsByName_resultTupleScheme extends TupleScheme<searchExperimentsByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.experiment.ExperimentSummary _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              org.apache.airavata.model.workspace.experiment.ExperimentSummary _elem31;
              _elem31 = new org.apache.airavata.model.workspace.experiment.ExperimentSummary();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class searchExperimentsByDesc_args implements org.apache.thrift.TBase<searchExperimentsByDesc_args, searchExperimentsByDesc_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchExperimentsByDesc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExperimentsByDesc_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchExperimentsByDesc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchExperimentsByDesc_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      DESCRIPTION((short)2, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExperimentsByDesc_args.class, metaDataMap);
    }

    public searchExperimentsByDesc_args() {
    }

    public searchExperimentsByDesc_args(
      String userName,
      String description)
    {
      this();
      this.userName = userName;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExperimentsByDesc_args(searchExperimentsByDesc_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public searchExperimentsByDesc_args deepCopy() {
      return new searchExperimentsByDesc_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.description = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public searchExperimentsByDesc_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public searchExperimentsByDesc_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExperimentsByDesc_args)
        return this.equals((searchExperimentsByDesc_args)that);
      return false;
    }

    public boolean equals(searchExperimentsByDesc_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchExperimentsByDesc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExperimentsByDesc_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (description == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchExperimentsByDesc_argsStandardSchemeFactory implements SchemeFactory {
      public searchExperimentsByDesc_argsStandardScheme getScheme() {
        return new searchExperimentsByDesc_argsStandardScheme();
      }
    }

    private static class searchExperimentsByDesc_argsStandardScheme extends StandardScheme<searchExperimentsByDesc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchExperimentsByDesc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchExperimentsByDesc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchExperimentsByDesc_argsTupleSchemeFactory implements SchemeFactory {
      public searchExperimentsByDesc_argsTupleScheme getScheme() {
        return new searchExperimentsByDesc_argsTupleScheme();
      }
    }

    private static class searchExperimentsByDesc_argsTupleScheme extends TupleScheme<searchExperimentsByDesc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByDesc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.description);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByDesc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }

  }

  public static class searchExperimentsByDesc_result implements org.apache.thrift.TBase<searchExperimentsByDesc_result, searchExperimentsByDesc_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchExperimentsByDesc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExperimentsByDesc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchExperimentsByDesc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchExperimentsByDesc_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ExperimentSummary.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExperimentsByDesc_result.class, metaDataMap);
    }

    public searchExperimentsByDesc_result() {
    }

    public searchExperimentsByDesc_result(
      List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExperimentsByDesc_result(searchExperimentsByDesc_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(other.success.size());
        for (org.apache.airavata.model.workspace.experiment.ExperimentSummary other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.experiment.ExperimentSummary(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public searchExperimentsByDesc_result deepCopy() {
      return new searchExperimentsByDesc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.experiment.ExperimentSummary elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getSuccess() {
      return this.success;
    }

    public searchExperimentsByDesc_result setSuccess(List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchExperimentsByDesc_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public searchExperimentsByDesc_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public searchExperimentsByDesc_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExperimentsByDesc_result)
        return this.equals((searchExperimentsByDesc_result)that);
      return false;
    }

    public boolean equals(searchExperimentsByDesc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchExperimentsByDesc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExperimentsByDesc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchExperimentsByDesc_resultStandardSchemeFactory implements SchemeFactory {
      public searchExperimentsByDesc_resultStandardScheme getScheme() {
        return new searchExperimentsByDesc_resultStandardScheme();
      }
    }

    private static class searchExperimentsByDesc_resultStandardScheme extends StandardScheme<searchExperimentsByDesc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchExperimentsByDesc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    org.apache.airavata.model.workspace.experiment.ExperimentSummary _elem34;
                    _elem34 = new org.apache.airavata.model.workspace.experiment.ExperimentSummary();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchExperimentsByDesc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.experiment.ExperimentSummary _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchExperimentsByDesc_resultTupleSchemeFactory implements SchemeFactory {
      public searchExperimentsByDesc_resultTupleScheme getScheme() {
        return new searchExperimentsByDesc_resultTupleScheme();
      }
    }

    private static class searchExperimentsByDesc_resultTupleScheme extends TupleScheme<searchExperimentsByDesc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByDesc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.experiment.ExperimentSummary _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByDesc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              org.apache.airavata.model.workspace.experiment.ExperimentSummary _elem39;
              _elem39 = new org.apache.airavata.model.workspace.experiment.ExperimentSummary();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class searchExperimentsByApplication_args implements org.apache.thrift.TBase<searchExperimentsByApplication_args, searchExperimentsByApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchExperimentsByApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExperimentsByApplication_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchExperimentsByApplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchExperimentsByApplication_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String applicationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      APPLICATION_ID((short)2, "applicationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // APPLICATION_ID
            return APPLICATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExperimentsByApplication_args.class, metaDataMap);
    }

    public searchExperimentsByApplication_args() {
    }

    public searchExperimentsByApplication_args(
      String userName,
      String applicationId)
    {
      this();
      this.userName = userName;
      this.applicationId = applicationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExperimentsByApplication_args(searchExperimentsByApplication_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
    }

    public searchExperimentsByApplication_args deepCopy() {
      return new searchExperimentsByApplication_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.applicationId = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public searchExperimentsByApplication_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public searchExperimentsByApplication_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case APPLICATION_ID:
        return getApplicationId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case APPLICATION_ID:
        return isSetApplicationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExperimentsByApplication_args)
        return this.equals((searchExperimentsByApplication_args)that);
      return false;
    }

    public boolean equals(searchExperimentsByApplication_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchExperimentsByApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExperimentsByApplication_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (applicationId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchExperimentsByApplication_argsStandardSchemeFactory implements SchemeFactory {
      public searchExperimentsByApplication_argsStandardScheme getScheme() {
        return new searchExperimentsByApplication_argsStandardScheme();
      }
    }

    private static class searchExperimentsByApplication_argsStandardScheme extends StandardScheme<searchExperimentsByApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchExperimentsByApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchExperimentsByApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchExperimentsByApplication_argsTupleSchemeFactory implements SchemeFactory {
      public searchExperimentsByApplication_argsTupleScheme getScheme() {
        return new searchExperimentsByApplication_argsTupleScheme();
      }
    }

    private static class searchExperimentsByApplication_argsTupleScheme extends TupleScheme<searchExperimentsByApplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.applicationId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.applicationId = iprot.readString();
        struct.setApplicationIdIsSet(true);
      }
    }

  }

  public static class searchExperimentsByApplication_result implements org.apache.thrift.TBase<searchExperimentsByApplication_result, searchExperimentsByApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchExperimentsByApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchExperimentsByApplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchExperimentsByApplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchExperimentsByApplication_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ExperimentSummary.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchExperimentsByApplication_result.class, metaDataMap);
    }

    public searchExperimentsByApplication_result() {
    }

    public searchExperimentsByApplication_result(
      List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchExperimentsByApplication_result(searchExperimentsByApplication_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(other.success.size());
        for (org.apache.airavata.model.workspace.experiment.ExperimentSummary other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.experiment.ExperimentSummary(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public searchExperimentsByApplication_result deepCopy() {
      return new searchExperimentsByApplication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.experiment.ExperimentSummary elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> getSuccess() {
      return this.success;
    }

    public searchExperimentsByApplication_result setSuccess(List<org.apache.airavata.model.workspace.experiment.ExperimentSummary> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchExperimentsByApplication_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public searchExperimentsByApplication_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public searchExperimentsByApplication_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.experiment.ExperimentSummary>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchExperimentsByApplication_result)
        return this.equals((searchExperimentsByApplication_result)that);
      return false;
    }

    public boolean equals(searchExperimentsByApplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchExperimentsByApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchExperimentsByApplication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchExperimentsByApplication_resultStandardSchemeFactory implements SchemeFactory {
      public searchExperimentsByApplication_resultStandardScheme getScheme() {
        return new searchExperimentsByApplication_resultStandardScheme();
      }
    }

    private static class searchExperimentsByApplication_resultStandardScheme extends StandardScheme<searchExperimentsByApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchExperimentsByApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    org.apache.airavata.model.workspace.experiment.ExperimentSummary _elem42;
                    _elem42 = new org.apache.airavata.model.workspace.experiment.ExperimentSummary();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchExperimentsByApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.experiment.ExperimentSummary _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchExperimentsByApplication_resultTupleSchemeFactory implements SchemeFactory {
      public searchExperimentsByApplication_resultTupleScheme getScheme() {
        return new searchExperimentsByApplication_resultTupleScheme();
      }
    }

    private static class searchExperimentsByApplication_resultTupleScheme extends TupleScheme<searchExperimentsByApplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.experiment.ExperimentSummary _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchExperimentsByApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.ExperimentSummary>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              org.apache.airavata.model.workspace.experiment.ExperimentSummary _elem47;
              _elem47 = new org.apache.airavata.model.workspace.experiment.ExperimentSummary();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getAllExperimentsInProject_args implements org.apache.thrift.TBase<getAllExperimentsInProject_args, getAllExperimentsInProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllExperimentsInProject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllExperimentsInProject_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllExperimentsInProject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllExperimentsInProject_argsTupleSchemeFactory());
    }

    public String projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllExperimentsInProject_args.class, metaDataMap);
    }

    public getAllExperimentsInProject_args() {
    }

    public getAllExperimentsInProject_args(
      String projectId)
    {
      this();
      this.projectId = projectId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllExperimentsInProject_args(getAllExperimentsInProject_args other) {
      if (other.isSetProjectId()) {
        this.projectId = other.projectId;
      }
    }

    public getAllExperimentsInProject_args deepCopy() {
      return new getAllExperimentsInProject_args(this);
    }

    @Override
    public void clear() {
      this.projectId = null;
    }

    public String getProjectId() {
      return this.projectId;
    }

    public getAllExperimentsInProject_args setProjectId(String projectId) {
      this.projectId = projectId;
      return this;
    }

    public void unsetProjectId() {
      this.projectId = null;
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return this.projectId != null;
    }

    public void setProjectIdIsSet(boolean value) {
      if (!value) {
        this.projectId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllExperimentsInProject_args)
        return this.equals((getAllExperimentsInProject_args)that);
      return false;
    }

    public boolean equals(getAllExperimentsInProject_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true && this.isSetProjectId();
      boolean that_present_projectId = true && that.isSetProjectId();
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (!this.projectId.equals(that.projectId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllExperimentsInProject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllExperimentsInProject_args(");
      boolean first = true;

      sb.append("projectId:");
      if (this.projectId == null) {
        sb.append("null");
      } else {
        sb.append(this.projectId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (projectId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllExperimentsInProject_argsStandardSchemeFactory implements SchemeFactory {
      public getAllExperimentsInProject_argsStandardScheme getScheme() {
        return new getAllExperimentsInProject_argsStandardScheme();
      }
    }

    private static class getAllExperimentsInProject_argsStandardScheme extends StandardScheme<getAllExperimentsInProject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectId = iprot.readString();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectId != null) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.projectId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllExperimentsInProject_argsTupleSchemeFactory implements SchemeFactory {
      public getAllExperimentsInProject_argsTupleScheme getScheme() {
        return new getAllExperimentsInProject_argsTupleScheme();
      }
    }

    private static class getAllExperimentsInProject_argsTupleScheme extends TupleScheme<getAllExperimentsInProject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
    }

  }

  public static class getAllExperimentsInProject_result implements org.apache.thrift.TBase<getAllExperimentsInProject_result, getAllExperimentsInProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllExperimentsInProject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllExperimentsInProject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("pnfe", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllExperimentsInProject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllExperimentsInProject_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required
    public org.apache.airavata.model.error.ProjectNotFoundException pnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase"),
      PNFE((short)4, "pnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          case 4: // PNFE
            return PNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PNFE, new org.apache.thrift.meta_data.FieldMetaData("pnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllExperimentsInProject_result.class, metaDataMap);
    }

    public getAllExperimentsInProject_result() {
    }

    public getAllExperimentsInProject_result(
      List<org.apache.airavata.model.workspace.experiment.Experiment> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase,
      org.apache.airavata.model.error.ProjectNotFoundException pnfe)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
      this.pnfe = pnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllExperimentsInProject_result(getAllExperimentsInProject_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.experiment.Experiment> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(other.success.size());
        for (org.apache.airavata.model.workspace.experiment.Experiment other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.experiment.Experiment(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
      if (other.isSetPnfe()) {
        this.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException(other.pnfe);
      }
    }

    public getAllExperimentsInProject_result deepCopy() {
      return new getAllExperimentsInProject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
      this.pnfe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.Experiment> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.experiment.Experiment elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> getSuccess() {
      return this.success;
    }

    public getAllExperimentsInProject_result setSuccess(List<org.apache.airavata.model.workspace.experiment.Experiment> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAllExperimentsInProject_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getAllExperimentsInProject_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getAllExperimentsInProject_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.model.error.ProjectNotFoundException getPnfe() {
      return this.pnfe;
    }

    public getAllExperimentsInProject_result setPnfe(org.apache.airavata.model.error.ProjectNotFoundException pnfe) {
      this.pnfe = pnfe;
      return this;
    }

    public void unsetPnfe() {
      this.pnfe = null;
    }

    /** Returns true if field pnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetPnfe() {
      return this.pnfe != null;
    }

    public void setPnfeIsSet(boolean value) {
      if (!value) {
        this.pnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.experiment.Experiment>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      case PNFE:
        if (value == null) {
          unsetPnfe();
        } else {
          setPnfe((org.apache.airavata.model.error.ProjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      case PNFE:
        return getPnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      case PNFE:
        return isSetPnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllExperimentsInProject_result)
        return this.equals((getAllExperimentsInProject_result)that);
      return false;
    }

    public boolean equals(getAllExperimentsInProject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_pnfe = true && this.isSetPnfe();
      boolean that_present_pnfe = true && that.isSetPnfe();
      if (this_present_pnfe || that_present_pnfe) {
        if (!(this_present_pnfe && that_present_pnfe))
          return false;
        if (!this.pnfe.equals(that.pnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllExperimentsInProject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPnfe()).compareTo(other.isSetPnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnfe, other.pnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllExperimentsInProject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pnfe:");
      if (this.pnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.pnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllExperimentsInProject_resultStandardSchemeFactory implements SchemeFactory {
      public getAllExperimentsInProject_resultStandardScheme getScheme() {
        return new getAllExperimentsInProject_resultStandardScheme();
      }
    }

    private static class getAllExperimentsInProject_resultStandardScheme extends StandardScheme<getAllExperimentsInProject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    org.apache.airavata.model.workspace.experiment.Experiment _elem50;
                    _elem50 = new org.apache.airavata.model.workspace.experiment.Experiment();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException();
                struct.pnfe.read(iprot);
                struct.setPnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.experiment.Experiment _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pnfe != null) {
          oprot.writeFieldBegin(PNFE_FIELD_DESC);
          struct.pnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllExperimentsInProject_resultTupleSchemeFactory implements SchemeFactory {
      public getAllExperimentsInProject_resultTupleScheme getScheme() {
        return new getAllExperimentsInProject_resultTupleScheme();
      }
    }

    private static class getAllExperimentsInProject_resultTupleScheme extends TupleScheme<getAllExperimentsInProject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        if (struct.isSetPnfe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.experiment.Experiment _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetPnfe()) {
          struct.pnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              org.apache.airavata.model.workspace.experiment.Experiment _elem55;
              _elem55 = new org.apache.airavata.model.workspace.experiment.Experiment();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pnfe = new org.apache.airavata.model.error.ProjectNotFoundException();
          struct.pnfe.read(iprot);
          struct.setPnfeIsSet(true);
        }
      }
    }

  }

  public static class getAllUserExperiments_args implements org.apache.thrift.TBase<getAllUserExperiments_args, getAllUserExperiments_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserExperiments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserExperiments_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllUserExperiments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllUserExperiments_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserExperiments_args.class, metaDataMap);
    }

    public getAllUserExperiments_args() {
    }

    public getAllUserExperiments_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllUserExperiments_args(getAllUserExperiments_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public getAllUserExperiments_args deepCopy() {
      return new getAllUserExperiments_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public getAllUserExperiments_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllUserExperiments_args)
        return this.equals((getAllUserExperiments_args)that);
      return false;
    }

    public boolean equals(getAllUserExperiments_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllUserExperiments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllUserExperiments_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllUserExperiments_argsStandardSchemeFactory implements SchemeFactory {
      public getAllUserExperiments_argsStandardScheme getScheme() {
        return new getAllUserExperiments_argsStandardScheme();
      }
    }

    private static class getAllUserExperiments_argsStandardScheme extends StandardScheme<getAllUserExperiments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllUserExperiments_argsTupleSchemeFactory implements SchemeFactory {
      public getAllUserExperiments_argsTupleScheme getScheme() {
        return new getAllUserExperiments_argsTupleScheme();
      }
    }

    private static class getAllUserExperiments_argsTupleScheme extends TupleScheme<getAllUserExperiments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }

  }

  public static class getAllUserExperiments_result implements org.apache.thrift.TBase<getAllUserExperiments_result, getAllUserExperiments_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserExperiments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserExperiments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllUserExperiments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllUserExperiments_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserExperiments_result.class, metaDataMap);
    }

    public getAllUserExperiments_result() {
    }

    public getAllUserExperiments_result(
      List<org.apache.airavata.model.workspace.experiment.Experiment> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllUserExperiments_result(getAllUserExperiments_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.experiment.Experiment> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(other.success.size());
        for (org.apache.airavata.model.workspace.experiment.Experiment other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.experiment.Experiment(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getAllUserExperiments_result deepCopy() {
      return new getAllUserExperiments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.Experiment> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.experiment.Experiment elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.experiment.Experiment> getSuccess() {
      return this.success;
    }

    public getAllUserExperiments_result setSuccess(List<org.apache.airavata.model.workspace.experiment.Experiment> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAllUserExperiments_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getAllUserExperiments_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getAllUserExperiments_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.experiment.Experiment>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllUserExperiments_result)
        return this.equals((getAllUserExperiments_result)that);
      return false;
    }

    public boolean equals(getAllUserExperiments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllUserExperiments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllUserExperiments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllUserExperiments_resultStandardSchemeFactory implements SchemeFactory {
      public getAllUserExperiments_resultStandardScheme getScheme() {
        return new getAllUserExperiments_resultStandardScheme();
      }
    }

    private static class getAllUserExperiments_resultStandardScheme extends StandardScheme<getAllUserExperiments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    org.apache.airavata.model.workspace.experiment.Experiment _elem58;
                    _elem58 = new org.apache.airavata.model.workspace.experiment.Experiment();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.experiment.Experiment _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllUserExperiments_resultTupleSchemeFactory implements SchemeFactory {
      public getAllUserExperiments_resultTupleScheme getScheme() {
        return new getAllUserExperiments_resultTupleScheme();
      }
    }

    private static class getAllUserExperiments_resultTupleScheme extends TupleScheme<getAllUserExperiments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.experiment.Experiment _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              org.apache.airavata.model.workspace.experiment.Experiment _elem63;
              _elem63 = new org.apache.airavata.model.workspace.experiment.Experiment();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class createExperiment_args implements org.apache.thrift.TBase<createExperiment_args, createExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExperiment_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.workspace.experiment.Experiment experiment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENT((short)1, "experiment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENT
            return EXPERIMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_args.class, metaDataMap);
    }

    public createExperiment_args() {
    }

    public createExperiment_args(
      org.apache.airavata.model.workspace.experiment.Experiment experiment)
    {
      this();
      this.experiment = experiment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExperiment_args(createExperiment_args other) {
      if (other.isSetExperiment()) {
        this.experiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.experiment);
      }
    }

    public createExperiment_args deepCopy() {
      return new createExperiment_args(this);
    }

    @Override
    public void clear() {
      this.experiment = null;
    }

    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment() {
      return this.experiment;
    }

    public createExperiment_args setExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) {
      this.experiment = experiment;
      return this;
    }

    public void unsetExperiment() {
      this.experiment = null;
    }

    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
    public boolean isSetExperiment() {
      return this.experiment != null;
    }

    public void setExperimentIsSet(boolean value) {
      if (!value) {
        this.experiment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENT:
        if (value == null) {
          unsetExperiment();
        } else {
          setExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENT:
        return getExperiment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENT:
        return isSetExperiment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExperiment_args)
        return this.equals((createExperiment_args)that);
      return false;
    }

    public boolean equals(createExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_experiment = true && this.isSetExperiment();
      boolean that_present_experiment = true && that.isSetExperiment();
      if (this_present_experiment || that_present_experiment) {
        if (!(this_present_experiment && that_present_experiment))
          return false;
        if (!this.experiment.equals(that.experiment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperiment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExperiment_args(");
      boolean first = true;

      sb.append("experiment:");
      if (this.experiment == null) {
        sb.append("null");
      } else {
        sb.append(this.experiment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (experiment == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'experiment' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (experiment != null) {
        experiment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public createExperiment_argsStandardScheme getScheme() {
        return new createExperiment_argsStandardScheme();
      }
    }

    private static class createExperiment_argsStandardScheme extends StandardScheme<createExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
                struct.experiment.read(iprot);
                struct.setExperimentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.experiment != null) {
          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
          struct.experiment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public createExperiment_argsTupleScheme getScheme() {
        return new createExperiment_argsTupleScheme();
      }
    }

    private static class createExperiment_argsTupleScheme extends TupleScheme<createExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.experiment.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
        struct.experiment.read(iprot);
        struct.setExperimentIsSet(true);
      }
    }

  }

  public static class createExperiment_result implements org.apache.thrift.TBase<createExperiment_result, createExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExperiment_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_result.class, metaDataMap);
    }

    public createExperiment_result() {
    }

    public createExperiment_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExperiment_result(createExperiment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public createExperiment_result deepCopy() {
      return new createExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createExperiment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public createExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public createExperiment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public createExperiment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExperiment_result)
        return this.equals((createExperiment_result)that);
      return false;
    }

    public boolean equals(createExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public createExperiment_resultStandardScheme getScheme() {
        return new createExperiment_resultStandardScheme();
      }
    }

    private static class createExperiment_resultStandardScheme extends StandardScheme<createExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public createExperiment_resultTupleScheme getScheme() {
        return new createExperiment_resultTupleScheme();
      }
    }

    private static class createExperiment_resultTupleScheme extends TupleScheme<createExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getExperiment_args implements org.apache.thrift.TBase<getExperiment_args, getExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_args.class, metaDataMap);
    }

    public getExperiment_args() {
    }

    public getExperiment_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperiment_args(getExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public getExperiment_args deepCopy() {
      return new getExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public getExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperiment_args)
        return this.equals((getExperiment_args)that);
      return false;
    }

    public boolean equals(getExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public getExperiment_argsStandardScheme getScheme() {
        return new getExperiment_argsStandardScheme();
      }
    }

    private static class getExperiment_argsStandardScheme extends StandardScheme<getExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public getExperiment_argsTupleScheme getScheme() {
        return new getExperiment_argsTupleScheme();
      }
    }

    private static class getExperiment_argsTupleScheme extends TupleScheme<getExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
      }
    }

  }

  public static class getExperiment_result implements org.apache.thrift.TBase<getExperiment_result, getExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperiment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.workspace.experiment.Experiment success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_result.class, metaDataMap);
    }

    public getExperiment_result() {
    }

    public getExperiment_result(
      org.apache.airavata.model.workspace.experiment.Experiment success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.ExperimentNotFoundException enf,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperiment_result(getExperiment_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.workspace.experiment.Experiment(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.model.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getExperiment_result deepCopy() {
      return new getExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.workspace.experiment.Experiment getSuccess() {
      return this.success;
    }

    public getExperiment_result setSuccess(org.apache.airavata.model.workspace.experiment.Experiment success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public getExperiment_result setEnf(org.apache.airavata.model.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getExperiment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getExperiment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.workspace.experiment.Experiment)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.model.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperiment_result)
        return this.equals((getExperiment_result)that);
      return false;
    }

    public boolean equals(getExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public getExperiment_resultStandardScheme getScheme() {
        return new getExperiment_resultStandardScheme();
      }
    }

    private static class getExperiment_resultStandardScheme extends StandardScheme<getExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.workspace.experiment.Experiment();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public getExperiment_resultTupleScheme getScheme() {
        return new getExperiment_resultTupleScheme();
      }
    }

    private static class getExperiment_resultTupleScheme extends TupleScheme<getExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.workspace.experiment.Experiment();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateExperiment_args implements org.apache.thrift.TBase<updateExperiment_args, updateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required
    public org.apache.airavata.model.workspace.experiment.Experiment experiment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
      EXPERIMENT((short)2, "experiment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          case 2: // EXPERIMENT
            return EXPERIMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperiment_args.class, metaDataMap);
    }

    public updateExperiment_args() {
    }

    public updateExperiment_args(
      String airavataExperimentId,
      org.apache.airavata.model.workspace.experiment.Experiment experiment)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
      this.experiment = experiment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExperiment_args(updateExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
      if (other.isSetExperiment()) {
        this.experiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.experiment);
      }
    }

    public updateExperiment_args deepCopy() {
      return new updateExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
      this.experiment = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public updateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment() {
      return this.experiment;
    }

    public updateExperiment_args setExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) {
      this.experiment = experiment;
      return this;
    }

    public void unsetExperiment() {
      this.experiment = null;
    }

    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
    public boolean isSetExperiment() {
      return this.experiment != null;
    }

    public void setExperimentIsSet(boolean value) {
      if (!value) {
        this.experiment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      case EXPERIMENT:
        if (value == null) {
          unsetExperiment();
        } else {
          setExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      case EXPERIMENT:
        return getExperiment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      case EXPERIMENT:
        return isSetExperiment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExperiment_args)
        return this.equals((updateExperiment_args)that);
      return false;
    }

    public boolean equals(updateExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      boolean this_present_experiment = true && this.isSetExperiment();
      boolean that_present_experiment = true && that.isSetExperiment();
      if (this_present_experiment || that_present_experiment) {
        if (!(this_present_experiment && that_present_experiment))
          return false;
        if (!this.experiment.equals(that.experiment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperiment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experiment:");
      if (this.experiment == null) {
        sb.append("null");
      } else {
        sb.append(this.experiment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      if (experiment == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'experiment' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (experiment != null) {
        experiment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public updateExperiment_argsStandardScheme getScheme() {
        return new updateExperiment_argsStandardScheme();
      }
    }

    private static class updateExperiment_argsStandardScheme extends StandardScheme<updateExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXPERIMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
                struct.experiment.read(iprot);
                struct.setExperimentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        if (struct.experiment != null) {
          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
          struct.experiment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public updateExperiment_argsTupleScheme getScheme() {
        return new updateExperiment_argsTupleScheme();
      }
    }

    private static class updateExperiment_argsTupleScheme extends TupleScheme<updateExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
        struct.experiment.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
        struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
        struct.experiment.read(iprot);
        struct.setExperimentIsSet(true);
      }
    }

  }

  public static class updateExperiment_result implements org.apache.thrift.TBase<updateExperiment_result, updateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperiment_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExperiment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperiment_result.class, metaDataMap);
    }

    public updateExperiment_result() {
    }

    public updateExperiment_result(
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.ExperimentNotFoundException enf,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExperiment_result(updateExperiment_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.model.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateExperiment_result deepCopy() {
      return new updateExperiment_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public updateExperiment_result setEnf(org.apache.airavata.model.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateExperiment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateExperiment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.model.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExperiment_result)
        return this.equals((updateExperiment_result)that);
      return false;
    }

    public boolean equals(updateExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExperiment_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public updateExperiment_resultStandardScheme getScheme() {
        return new updateExperiment_resultStandardScheme();
      }
    }

    private static class updateExperiment_resultStandardScheme extends StandardScheme<updateExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public updateExperiment_resultTupleScheme getScheme() {
        return new updateExperiment_resultTupleScheme();
      }
    }

    private static class updateExperiment_resultTupleScheme extends TupleScheme<updateExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetEnf()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateExperimentConfiguration_args implements org.apache.thrift.TBase<updateExperimentConfiguration_args, updateExperimentConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperimentConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperimentConfiguration_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("userConfiguration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExperimentConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExperimentConfiguration_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required
    public org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
      USER_CONFIGURATION((short)2, "userConfiguration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          case 2: // USER_CONFIGURATION
            return USER_CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("userConfiguration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.UserConfigurationData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperimentConfiguration_args.class, metaDataMap);
    }

    public updateExperimentConfiguration_args() {
    }

    public updateExperimentConfiguration_args(
      String airavataExperimentId,
      org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
      this.userConfiguration = userConfiguration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExperimentConfiguration_args(updateExperimentConfiguration_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
      if (other.isSetUserConfiguration()) {
        this.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData(other.userConfiguration);
      }
    }

    public updateExperimentConfiguration_args deepCopy() {
      return new updateExperimentConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
      this.userConfiguration = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public updateExperimentConfiguration_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public org.apache.airavata.model.workspace.experiment.UserConfigurationData getUserConfiguration() {
      return this.userConfiguration;
    }

    public updateExperimentConfiguration_args setUserConfiguration(org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration) {
      this.userConfiguration = userConfiguration;
      return this;
    }

    public void unsetUserConfiguration() {
      this.userConfiguration = null;
    }

    /** Returns true if field userConfiguration is set (has been assigned a value) and false otherwise */
    public boolean isSetUserConfiguration() {
      return this.userConfiguration != null;
    }

    public void setUserConfigurationIsSet(boolean value) {
      if (!value) {
        this.userConfiguration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      case USER_CONFIGURATION:
        if (value == null) {
          unsetUserConfiguration();
        } else {
          setUserConfiguration((org.apache.airavata.model.workspace.experiment.UserConfigurationData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      case USER_CONFIGURATION:
        return getUserConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      case USER_CONFIGURATION:
        return isSetUserConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExperimentConfiguration_args)
        return this.equals((updateExperimentConfiguration_args)that);
      return false;
    }

    public boolean equals(updateExperimentConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      boolean this_present_userConfiguration = true && this.isSetUserConfiguration();
      boolean that_present_userConfiguration = true && that.isSetUserConfiguration();
      if (this_present_userConfiguration || that_present_userConfiguration) {
        if (!(this_present_userConfiguration && that_present_userConfiguration))
          return false;
        if (!this.userConfiguration.equals(that.userConfiguration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateExperimentConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserConfiguration()).compareTo(other.isSetUserConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userConfiguration, other.userConfiguration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExperimentConfiguration_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userConfiguration:");
      if (this.userConfiguration == null) {
        sb.append("null");
      } else {
        sb.append(this.userConfiguration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      if (userConfiguration == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userConfiguration' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (userConfiguration != null) {
        userConfiguration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExperimentConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public updateExperimentConfiguration_argsStandardScheme getScheme() {
        return new updateExperimentConfiguration_argsStandardScheme();
      }
    }

    private static class updateExperimentConfiguration_argsStandardScheme extends StandardScheme<updateExperimentConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData();
                struct.userConfiguration.read(iprot);
                struct.setUserConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        if (struct.userConfiguration != null) {
          oprot.writeFieldBegin(USER_CONFIGURATION_FIELD_DESC);
          struct.userConfiguration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExperimentConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public updateExperimentConfiguration_argsTupleScheme getScheme() {
        return new updateExperimentConfiguration_argsTupleScheme();
      }
    }

    private static class updateExperimentConfiguration_argsTupleScheme extends TupleScheme<updateExperimentConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
        struct.userConfiguration.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
        struct.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData();
        struct.userConfiguration.read(iprot);
        struct.setUserConfigurationIsSet(true);
      }
    }

  }

  public static class updateExperimentConfiguration_result implements org.apache.thrift.TBase<updateExperimentConfiguration_result, updateExperimentConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperimentConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperimentConfiguration_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExperimentConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExperimentConfiguration_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperimentConfiguration_result.class, metaDataMap);
    }

    public updateExperimentConfiguration_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExperimentConfiguration_result(updateExperimentConfiguration_result other) {
    }

    public updateExperimentConfiguration_result deepCopy() {
      return new updateExperimentConfiguration_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExperimentConfiguration_result)
        return this.equals((updateExperimentConfiguration_result)that);
      return false;
    }

    public boolean equals(updateExperimentConfiguration_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateExperimentConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExperimentConfiguration_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExperimentConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public updateExperimentConfiguration_resultStandardScheme getScheme() {
        return new updateExperimentConfiguration_resultStandardScheme();
      }
    }

    private static class updateExperimentConfiguration_resultStandardScheme extends StandardScheme<updateExperimentConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExperimentConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public updateExperimentConfiguration_resultTupleScheme getScheme() {
        return new updateExperimentConfiguration_resultTupleScheme();
      }
    }

    private static class updateExperimentConfiguration_resultTupleScheme extends TupleScheme<updateExperimentConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateResourceScheduleing_args implements org.apache.thrift.TBase<updateResourceScheduleing_args, updateResourceScheduleing_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceScheduleing_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceScheduleing_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RESOURCE_SCHEDULING_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceScheduling", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateResourceScheduleing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateResourceScheduleing_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required
    public org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
      RESOURCE_SCHEDULING((short)2, "resourceScheduling");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          case 2: // RESOURCE_SCHEDULING
            return RESOURCE_SCHEDULING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESOURCE_SCHEDULING, new org.apache.thrift.meta_data.FieldMetaData("resourceScheduling", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceScheduleing_args.class, metaDataMap);
    }

    public updateResourceScheduleing_args() {
    }

    public updateResourceScheduleing_args(
      String airavataExperimentId,
      org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
      this.resourceScheduling = resourceScheduling;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResourceScheduleing_args(updateResourceScheduleing_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
      if (other.isSetResourceScheduling()) {
        this.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling(other.resourceScheduling);
      }
    }

    public updateResourceScheduleing_args deepCopy() {
      return new updateResourceScheduleing_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
      this.resourceScheduling = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public updateResourceScheduleing_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling getResourceScheduling() {
      return this.resourceScheduling;
    }

    public updateResourceScheduleing_args setResourceScheduling(org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling) {
      this.resourceScheduling = resourceScheduling;
      return this;
    }

    public void unsetResourceScheduling() {
      this.resourceScheduling = null;
    }

    /** Returns true if field resourceScheduling is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceScheduling() {
      return this.resourceScheduling != null;
    }

    public void setResourceSchedulingIsSet(boolean value) {
      if (!value) {
        this.resourceScheduling = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      case RESOURCE_SCHEDULING:
        if (value == null) {
          unsetResourceScheduling();
        } else {
          setResourceScheduling((org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      case RESOURCE_SCHEDULING:
        return getResourceScheduling();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      case RESOURCE_SCHEDULING:
        return isSetResourceScheduling();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResourceScheduleing_args)
        return this.equals((updateResourceScheduleing_args)that);
      return false;
    }

    public boolean equals(updateResourceScheduleing_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      boolean this_present_resourceScheduling = true && this.isSetResourceScheduling();
      boolean that_present_resourceScheduling = true && that.isSetResourceScheduling();
      if (this_present_resourceScheduling || that_present_resourceScheduling) {
        if (!(this_present_resourceScheduling && that_present_resourceScheduling))
          return false;
        if (!this.resourceScheduling.equals(that.resourceScheduling))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateResourceScheduleing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResourceScheduling()).compareTo(other.isSetResourceScheduling());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceScheduling()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceScheduling, other.resourceScheduling);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateResourceScheduleing_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resourceScheduling:");
      if (this.resourceScheduling == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceScheduling);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      if (resourceScheduling == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceScheduling' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (resourceScheduling != null) {
        resourceScheduling.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateResourceScheduleing_argsStandardSchemeFactory implements SchemeFactory {
      public updateResourceScheduleing_argsStandardScheme getScheme() {
        return new updateResourceScheduleing_argsStandardScheme();
      }
    }

    private static class updateResourceScheduleing_argsStandardScheme extends StandardScheme<updateResourceScheduleing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESOURCE_SCHEDULING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling();
                struct.resourceScheduling.read(iprot);
                struct.setResourceSchedulingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        if (struct.resourceScheduling != null) {
          oprot.writeFieldBegin(RESOURCE_SCHEDULING_FIELD_DESC);
          struct.resourceScheduling.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateResourceScheduleing_argsTupleSchemeFactory implements SchemeFactory {
      public updateResourceScheduleing_argsTupleScheme getScheme() {
        return new updateResourceScheduleing_argsTupleScheme();
      }
    }

    private static class updateResourceScheduleing_argsTupleScheme extends TupleScheme<updateResourceScheduleing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
        struct.resourceScheduling.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
        struct.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling();
        struct.resourceScheduling.read(iprot);
        struct.setResourceSchedulingIsSet(true);
      }
    }

  }

  public static class updateResourceScheduleing_result implements org.apache.thrift.TBase<updateResourceScheduleing_result, updateResourceScheduleing_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceScheduleing_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceScheduleing_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateResourceScheduleing_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateResourceScheduleing_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceScheduleing_result.class, metaDataMap);
    }

    public updateResourceScheduleing_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResourceScheduleing_result(updateResourceScheduleing_result other) {
    }

    public updateResourceScheduleing_result deepCopy() {
      return new updateResourceScheduleing_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResourceScheduleing_result)
        return this.equals((updateResourceScheduleing_result)that);
      return false;
    }

    public boolean equals(updateResourceScheduleing_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateResourceScheduleing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateResourceScheduleing_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateResourceScheduleing_resultStandardSchemeFactory implements SchemeFactory {
      public updateResourceScheduleing_resultStandardScheme getScheme() {
        return new updateResourceScheduleing_resultStandardScheme();
      }
    }

    private static class updateResourceScheduleing_resultStandardScheme extends StandardScheme<updateResourceScheduleing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateResourceScheduleing_resultTupleSchemeFactory implements SchemeFactory {
      public updateResourceScheduleing_resultTupleScheme getScheme() {
        return new updateResourceScheduleing_resultTupleScheme();
      }
    }

    private static class updateResourceScheduleing_resultTupleScheme extends TupleScheme<updateResourceScheduleing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class validateExperiment_args implements org.apache.thrift.TBase<validateExperiment_args, validateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<validateExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateExperiment_args.class, metaDataMap);
    }

    public validateExperiment_args() {
    }

    public validateExperiment_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateExperiment_args(validateExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public validateExperiment_args deepCopy() {
      return new validateExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public validateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateExperiment_args)
        return this.equals((validateExperiment_args)that);
      return false;
    }

    public boolean equals(validateExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(validateExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public validateExperiment_argsStandardScheme getScheme() {
        return new validateExperiment_argsStandardScheme();
      }
    }

    private static class validateExperiment_argsStandardScheme extends StandardScheme<validateExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public validateExperiment_argsTupleScheme getScheme() {
        return new validateExperiment_argsTupleScheme();
      }
    }

    private static class validateExperiment_argsTupleScheme extends TupleScheme<validateExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
      }
    }

  }

  public static class validateExperiment_result implements org.apache.thrift.TBase<validateExperiment_result, validateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<validateExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateExperiment_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateExperiment_result.class, metaDataMap);
    }

    public validateExperiment_result() {
    }

    public validateExperiment_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.ExperimentNotFoundException enf,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateExperiment_result(validateExperiment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.model.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public validateExperiment_result deepCopy() {
      return new validateExperiment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public validateExperiment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public validateExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public validateExperiment_result setEnf(org.apache.airavata.model.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public validateExperiment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public validateExperiment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.model.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateExperiment_result)
        return this.equals((validateExperiment_result)that);
      return false;
    }

    public boolean equals(validateExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(validateExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateExperiment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public validateExperiment_resultStandardScheme getScheme() {
        return new validateExperiment_resultStandardScheme();
      }
    }

    private static class validateExperiment_resultStandardScheme extends StandardScheme<validateExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public validateExperiment_resultTupleScheme getScheme() {
        return new validateExperiment_resultTupleScheme();
      }
    }

    private static class validateExperiment_resultTupleScheme extends TupleScheme<validateExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class launchExperiment_args implements org.apache.thrift.TBase<launchExperiment_args, launchExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<launchExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataCredStoreToken", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new launchExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new launchExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required
    public String airavataCredStoreToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
      AIRAVATA_CRED_STORE_TOKEN((short)2, "airavataCredStoreToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          case 2: // AIRAVATA_CRED_STORE_TOKEN
            return AIRAVATA_CRED_STORE_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AIRAVATA_CRED_STORE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("airavataCredStoreToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchExperiment_args.class, metaDataMap);
    }

    public launchExperiment_args() {
    }

    public launchExperiment_args(
      String airavataExperimentId,
      String airavataCredStoreToken)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
      this.airavataCredStoreToken = airavataCredStoreToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchExperiment_args(launchExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
      if (other.isSetAiravataCredStoreToken()) {
        this.airavataCredStoreToken = other.airavataCredStoreToken;
      }
    }

    public launchExperiment_args deepCopy() {
      return new launchExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
      this.airavataCredStoreToken = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public launchExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public String getAiravataCredStoreToken() {
      return this.airavataCredStoreToken;
    }

    public launchExperiment_args setAiravataCredStoreToken(String airavataCredStoreToken) {
      this.airavataCredStoreToken = airavataCredStoreToken;
      return this;
    }

    public void unsetAiravataCredStoreToken() {
      this.airavataCredStoreToken = null;
    }

    /** Returns true if field airavataCredStoreToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataCredStoreToken() {
      return this.airavataCredStoreToken != null;
    }

    public void setAiravataCredStoreTokenIsSet(boolean value) {
      if (!value) {
        this.airavataCredStoreToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      case AIRAVATA_CRED_STORE_TOKEN:
        if (value == null) {
          unsetAiravataCredStoreToken();
        } else {
          setAiravataCredStoreToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      case AIRAVATA_CRED_STORE_TOKEN:
        return getAiravataCredStoreToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      case AIRAVATA_CRED_STORE_TOKEN:
        return isSetAiravataCredStoreToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof launchExperiment_args)
        return this.equals((launchExperiment_args)that);
      return false;
    }

    public boolean equals(launchExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      boolean this_present_airavataCredStoreToken = true && this.isSetAiravataCredStoreToken();
      boolean that_present_airavataCredStoreToken = true && that.isSetAiravataCredStoreToken();
      if (this_present_airavataCredStoreToken || that_present_airavataCredStoreToken) {
        if (!(this_present_airavataCredStoreToken && that_present_airavataCredStoreToken))
          return false;
        if (!this.airavataCredStoreToken.equals(that.airavataCredStoreToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(launchExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAiravataCredStoreToken()).compareTo(other.isSetAiravataCredStoreToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataCredStoreToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataCredStoreToken, other.airavataCredStoreToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("launchExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("airavataCredStoreToken:");
      if (this.airavataCredStoreToken == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataCredStoreToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      if (airavataCredStoreToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataCredStoreToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public launchExperiment_argsStandardScheme getScheme() {
        return new launchExperiment_argsStandardScheme();
      }
    }

    private static class launchExperiment_argsStandardScheme extends StandardScheme<launchExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AIRAVATA_CRED_STORE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataCredStoreToken = iprot.readString();
                struct.setAiravataCredStoreTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        if (struct.airavataCredStoreToken != null) {
          oprot.writeFieldBegin(AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.airavataCredStoreToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public launchExperiment_argsTupleScheme getScheme() {
        return new launchExperiment_argsTupleScheme();
      }
    }

    private static class launchExperiment_argsTupleScheme extends TupleScheme<launchExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
        oprot.writeString(struct.airavataCredStoreToken);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
        struct.airavataCredStoreToken = iprot.readString();
        struct.setAiravataCredStoreTokenIsSet(true);
      }
    }

  }

  public static class launchExperiment_result implements org.apache.thrift.TBase<launchExperiment_result, launchExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<launchExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchExperiment_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField LVE_FIELD_DESC = new org.apache.thrift.protocol.TField("lve", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new launchExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new launchExperiment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required
    public org.apache.airavata.model.error.LaunchValidationException lve; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase"),
      LVE((short)5, "lve");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          case 5: // LVE
            return LVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.LVE, new org.apache.thrift.meta_data.FieldMetaData("lve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchExperiment_result.class, metaDataMap);
    }

    public launchExperiment_result() {
    }

    public launchExperiment_result(
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.ExperimentNotFoundException enf,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase,
      org.apache.airavata.model.error.LaunchValidationException lve)
    {
      this();
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
      this.lve = lve;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchExperiment_result(launchExperiment_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.model.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
      if (other.isSetLve()) {
        this.lve = new org.apache.airavata.model.error.LaunchValidationException(other.lve);
      }
    }

    public launchExperiment_result deepCopy() {
      return new launchExperiment_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
      this.lve = null;
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public launchExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public launchExperiment_result setEnf(org.apache.airavata.model.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public launchExperiment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public launchExperiment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.model.error.LaunchValidationException getLve() {
      return this.lve;
    }

    public launchExperiment_result setLve(org.apache.airavata.model.error.LaunchValidationException lve) {
      this.lve = lve;
      return this;
    }

    public void unsetLve() {
      this.lve = null;
    }

    /** Returns true if field lve is set (has been assigned a value) and false otherwise */
    public boolean isSetLve() {
      return this.lve != null;
    }

    public void setLveIsSet(boolean value) {
      if (!value) {
        this.lve = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.model.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      case LVE:
        if (value == null) {
          unsetLve();
        } else {
          setLve((org.apache.airavata.model.error.LaunchValidationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      case LVE:
        return getLve();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      case LVE:
        return isSetLve();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof launchExperiment_result)
        return this.equals((launchExperiment_result)that);
      return false;
    }

    public boolean equals(launchExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_lve = true && this.isSetLve();
      boolean that_present_lve = true && that.isSetLve();
      if (this_present_lve || that_present_lve) {
        if (!(this_present_lve && that_present_lve))
          return false;
        if (!this.lve.equals(that.lve))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(launchExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLve()).compareTo(other.isSetLve());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLve()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lve, other.lve);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("launchExperiment_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lve:");
      if (this.lve == null) {
        sb.append("null");
      } else {
        sb.append(this.lve);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public launchExperiment_resultStandardScheme getScheme() {
        return new launchExperiment_resultStandardScheme();
      }
    }

    private static class launchExperiment_resultStandardScheme extends StandardScheme<launchExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lve = new org.apache.airavata.model.error.LaunchValidationException();
                struct.lve.read(iprot);
                struct.setLveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lve != null) {
          oprot.writeFieldBegin(LVE_FIELD_DESC);
          struct.lve.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public launchExperiment_resultTupleScheme getScheme() {
        return new launchExperiment_resultTupleScheme();
      }
    }

    private static class launchExperiment_resultTupleScheme extends TupleScheme<launchExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetEnf()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        if (struct.isSetLve()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetLve()) {
          struct.lve.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.lve = new org.apache.airavata.model.error.LaunchValidationException();
          struct.lve.read(iprot);
          struct.setLveIsSet(true);
        }
      }
    }

  }

  public static class getExperimentStatus_args implements org.apache.thrift.TBase<getExperimentStatus_args, getExperimentStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentStatus_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentStatus_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentStatus_args.class, metaDataMap);
    }

    public getExperimentStatus_args() {
    }

    public getExperimentStatus_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentStatus_args(getExperimentStatus_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public getExperimentStatus_args deepCopy() {
      return new getExperimentStatus_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public getExperimentStatus_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentStatus_args)
        return this.equals((getExperimentStatus_args)that);
      return false;
    }

    public boolean equals(getExperimentStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperimentStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentStatus_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getExperimentStatus_argsStandardScheme getScheme() {
        return new getExperimentStatus_argsStandardScheme();
      }
    }

    private static class getExperimentStatus_argsStandardScheme extends StandardScheme<getExperimentStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getExperimentStatus_argsTupleScheme getScheme() {
        return new getExperimentStatus_argsTupleScheme();
      }
    }

    private static class getExperimentStatus_argsTupleScheme extends TupleScheme<getExperimentStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
      }
    }

  }

  public static class getExperimentStatus_result implements org.apache.thrift.TBase<getExperimentStatus_result, getExperimentStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentStatus_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.workspace.experiment.ExperimentStatus success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ExperimentStatus.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentStatus_result.class, metaDataMap);
    }

    public getExperimentStatus_result() {
    }

    public getExperimentStatus_result(
      org.apache.airavata.model.workspace.experiment.ExperimentStatus success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.ExperimentNotFoundException enf,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentStatus_result(getExperimentStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.model.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getExperimentStatus_result deepCopy() {
      return new getExperimentStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.workspace.experiment.ExperimentStatus getSuccess() {
      return this.success;
    }

    public getExperimentStatus_result setSuccess(org.apache.airavata.model.workspace.experiment.ExperimentStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getExperimentStatus_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public getExperimentStatus_result setEnf(org.apache.airavata.model.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getExperimentStatus_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getExperimentStatus_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.workspace.experiment.ExperimentStatus)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.model.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentStatus_result)
        return this.equals((getExperimentStatus_result)that);
      return false;
    }

    public boolean equals(getExperimentStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperimentStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getExperimentStatus_resultStandardScheme getScheme() {
        return new getExperimentStatus_resultStandardScheme();
      }
    }

    private static class getExperimentStatus_resultStandardScheme extends StandardScheme<getExperimentStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getExperimentStatus_resultTupleScheme getScheme() {
        return new getExperimentStatus_resultTupleScheme();
      }
    }

    private static class getExperimentStatus_resultTupleScheme extends TupleScheme<getExperimentStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getExperimentOutputs_args implements org.apache.thrift.TBase<getExperimentOutputs_args, getExperimentOutputs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentOutputs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentOutputs_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentOutputs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentOutputs_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentOutputs_args.class, metaDataMap);
    }

    public getExperimentOutputs_args() {
    }

    public getExperimentOutputs_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentOutputs_args(getExperimentOutputs_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public getExperimentOutputs_args deepCopy() {
      return new getExperimentOutputs_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public getExperimentOutputs_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentOutputs_args)
        return this.equals((getExperimentOutputs_args)that);
      return false;
    }

    public boolean equals(getExperimentOutputs_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperimentOutputs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentOutputs_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentOutputs_argsStandardSchemeFactory implements SchemeFactory {
      public getExperimentOutputs_argsStandardScheme getScheme() {
        return new getExperimentOutputs_argsStandardScheme();
      }
    }

    private static class getExperimentOutputs_argsStandardScheme extends StandardScheme<getExperimentOutputs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentOutputs_argsTupleSchemeFactory implements SchemeFactory {
      public getExperimentOutputs_argsTupleScheme getScheme() {
        return new getExperimentOutputs_argsTupleScheme();
      }
    }

    private static class getExperimentOutputs_argsTupleScheme extends TupleScheme<getExperimentOutputs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
      }
    }

  }

  public static class getExperimentOutputs_result implements org.apache.thrift.TBase<getExperimentOutputs_result, getExperimentOutputs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentOutputs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentOutputs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentOutputs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentOutputs_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.DataObjectType.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentOutputs_result.class, metaDataMap);
    }

    public getExperimentOutputs_result() {
    }

    public getExperimentOutputs_result(
      List<org.apache.airavata.model.workspace.experiment.DataObjectType> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentOutputs_result(getExperimentOutputs_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.workspace.experiment.DataObjectType> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(other.success.size());
        for (org.apache.airavata.model.workspace.experiment.DataObjectType other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.workspace.experiment.DataObjectType(other_element));
        }
        this.success = __this__success;
      }
    }

    public getExperimentOutputs_result deepCopy() {
      return new getExperimentOutputs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.DataObjectType> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.workspace.experiment.DataObjectType elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> getSuccess() {
      return this.success;
    }

    public getExperimentOutputs_result setSuccess(List<org.apache.airavata.model.workspace.experiment.DataObjectType> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.workspace.experiment.DataObjectType>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentOutputs_result)
        return this.equals((getExperimentOutputs_result)that);
      return false;
    }

    public boolean equals(getExperimentOutputs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperimentOutputs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentOutputs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentOutputs_resultStandardSchemeFactory implements SchemeFactory {
      public getExperimentOutputs_resultStandardScheme getScheme() {
        return new getExperimentOutputs_resultStandardScheme();
      }
    }

    private static class getExperimentOutputs_resultStandardScheme extends StandardScheme<getExperimentOutputs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    org.apache.airavata.model.workspace.experiment.DataObjectType _elem66;
                    _elem66 = new org.apache.airavata.model.workspace.experiment.DataObjectType();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.workspace.experiment.DataObjectType _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentOutputs_resultTupleSchemeFactory implements SchemeFactory {
      public getExperimentOutputs_resultTupleScheme getScheme() {
        return new getExperimentOutputs_resultTupleScheme();
      }
    }

    private static class getExperimentOutputs_resultTupleScheme extends TupleScheme<getExperimentOutputs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.workspace.experiment.DataObjectType _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              org.apache.airavata.model.workspace.experiment.DataObjectType _elem71;
              _elem71 = new org.apache.airavata.model.workspace.experiment.DataObjectType();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getJobStatuses_args implements org.apache.thrift.TBase<getJobStatuses_args, getJobStatuses_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatuses_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatuses_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatuses_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatuses_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatuses_args.class, metaDataMap);
    }

    public getJobStatuses_args() {
    }

    public getJobStatuses_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatuses_args(getJobStatuses_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public getJobStatuses_args deepCopy() {
      return new getJobStatuses_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public getJobStatuses_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatuses_args)
        return this.equals((getJobStatuses_args)that);
      return false;
    }

    public boolean equals(getJobStatuses_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getJobStatuses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatuses_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataExperimentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatuses_argsStandardSchemeFactory implements SchemeFactory {
      public getJobStatuses_argsStandardScheme getScheme() {
        return new getJobStatuses_argsStandardScheme();
      }
    }

    private static class getJobStatuses_argsStandardScheme extends StandardScheme<getJobStatuses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatuses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatuses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatuses_argsTupleSchemeFactory implements SchemeFactory {
      public getJobStatuses_argsTupleScheme getScheme() {
        return new getJobStatuses_argsTupleScheme();
      }
    }

    private static class getJobStatuses_argsTupleScheme extends TupleScheme<getJobStatuses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataExperimentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataExperimentId = iprot.readString();
        struct.setAiravataExperimentIdIsSet(true);
      }
    }

  }

  public static class getJobStatuses_result implements org.apache.thrift.TBase<getJobStatuses_result, getJobStatuses_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatuses_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatuses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatuses_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatuses_resultTupleSchemeFactory());
    }

    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.JobStatus.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatuses_result.class, metaDataMap);
    }

    public getJobStatuses_result() {
    }

    public getJobStatuses_result(
      Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatuses_result(getJobStatuses_result other) {
      if (other.isSetSuccess()) {
        Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> __this__success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>(other.success.size());
        for (Map.Entry<String, org.apache.airavata.model.workspace.experiment.JobStatus> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          org.apache.airavata.model.workspace.experiment.JobStatus other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          org.apache.airavata.model.workspace.experiment.JobStatus __this__success_copy_value = new org.apache.airavata.model.workspace.experiment.JobStatus(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getJobStatuses_result deepCopy() {
      return new getJobStatuses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, org.apache.airavata.model.workspace.experiment.JobStatus val) {
      if (this.success == null) {
        this.success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>();
      }
      this.success.put(key, val);
    }

    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getSuccess() {
      return this.success;
    }

    public getJobStatuses_result setSuccess(Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatuses_result)
        return this.equals((getJobStatuses_result)that);
      return false;
    }

    public boolean equals(getJobStatuses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getJobStatuses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatuses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatuses_resultStandardSchemeFactory implements SchemeFactory {
      public getJobStatuses_resultStandardScheme getScheme() {
        return new getJobStatuses_resultStandardScheme();
      }
    }

    private static class getJobStatuses_resultStandardScheme extends StandardScheme<getJobStatuses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatuses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin();
                  struct.success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>(2*_map72.size);
                  for (int _i73 = 0; _i73 < _map72.size; ++_i73)
                  {
                    String _key74;
                    org.apache.airavata.model.workspace.experiment.JobStatus _val75;
                    _key74 = iprot.readString();
                    _val75 = new org.apache.airavata.model.workspace.experiment.JobStatus();
                    _val75.read(iprot);
                    struct.success.put(_key74, _val75);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatuses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, org.apache.airavata.model.workspace.experiment.JobStatus> _iter76 : struct.success.entrySet())
            {
              oprot.writeString(_iter76.getKey());
              _iter76.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatuses_resultTupleSchemeFactory implements SchemeFactory {
      public getJobStatuses_resultTupleScheme getScheme() {
        return new getJobStatuses_resultTupleScheme();
      }
    }

    private static class getJobStatuses_resultTupleScheme extends TupleScheme<getJobStatuses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, org.apache.airavata.model.workspace.experiment.JobStatus> _iter77 : struct.success.entrySet())
            {
              oprot.writeString(_iter77.getKey());
              _iter77.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map78 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>(2*_map78.size);
            for (int _i79 = 0; _i79 < _map78.size; ++_i79)
            {
              String _key80;
              org.apache.airavata.model.workspace.experiment.JobStatus _val81;
              _key80 = iprot.readString();
              _val81 = new org.apache.airavata.model.workspace.experiment.JobStatus();
              _val81.read(iprot);
              struct.success.put(_key80, _val81);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cloneExperiment_args implements org.apache.thrift.TBase<cloneExperiment_args, cloneExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperiment_args");

    private static final org.apache.thrift.protocol.TField EXISTING_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("existingExperimentID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_EXPERIMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newExperimentName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cloneExperiment_argsTupleSchemeFactory());
    }

    public String existingExperimentID; // required
    public String newExperimentName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXISTING_EXPERIMENT_ID((short)1, "existingExperimentID"),
      NEW_EXPERIMENT_NAME((short)2, "newExperimentName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXISTING_EXPERIMENT_ID
            return EXISTING_EXPERIMENT_ID;
          case 2: // NEW_EXPERIMENT_NAME
            return NEW_EXPERIMENT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXISTING_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("existingExperimentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_EXPERIMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("newExperimentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperiment_args.class, metaDataMap);
    }

    public cloneExperiment_args() {
    }

    public cloneExperiment_args(
      String existingExperimentID,
      String newExperimentName)
    {
      this();
      this.existingExperimentID = existingExperimentID;
      this.newExperimentName = newExperimentName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneExperiment_args(cloneExperiment_args other) {
      if (other.isSetExistingExperimentID()) {
        this.existingExperimentID = other.existingExperimentID;
      }
      if (other.isSetNewExperimentName()) {
        this.newExperimentName = other.newExperimentName;
      }
    }

    public cloneExperiment_args deepCopy() {
      return new cloneExperiment_args(this);
    }

    @Override
    public void clear() {
      this.existingExperimentID = null;
      this.newExperimentName = null;
    }

    public String getExistingExperimentID() {
      return this.existingExperimentID;
    }

    public cloneExperiment_args setExistingExperimentID(String existingExperimentID) {
      this.existingExperimentID = existingExperimentID;
      return this;
    }

    public void unsetExistingExperimentID() {
      this.existingExperimentID = null;
    }

    /** Returns true if field existingExperimentID is set (has been assigned a value) and false otherwise */
    public boolean isSetExistingExperimentID() {
      return this.existingExperimentID != null;
    }

    public void setExistingExperimentIDIsSet(boolean value) {
      if (!value) {
        this.existingExperimentID = null;
      }
    }

    public String getNewExperimentName() {
      return this.newExperimentName;
    }

    public cloneExperiment_args setNewExperimentName(String newExperimentName) {
      this.newExperimentName = newExperimentName;
      return this;
    }

    public void unsetNewExperimentName() {
      this.newExperimentName = null;
    }

    /** Returns true if field newExperimentName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewExperimentName() {
      return this.newExperimentName != null;
    }

    public void setNewExperimentNameIsSet(boolean value) {
      if (!value) {
        this.newExperimentName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXISTING_EXPERIMENT_ID:
        if (value == null) {
          unsetExistingExperimentID();
        } else {
          setExistingExperimentID((String)value);
        }
        break;

      case NEW_EXPERIMENT_NAME:
        if (value == null) {
          unsetNewExperimentName();
        } else {
          setNewExperimentName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXISTING_EXPERIMENT_ID:
        return getExistingExperimentID();

      case NEW_EXPERIMENT_NAME:
        return getNewExperimentName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXISTING_EXPERIMENT_ID:
        return isSetExistingExperimentID();
      case NEW_EXPERIMENT_NAME:
        return isSetNewExperimentName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneExperiment_args)
        return this.equals((cloneExperiment_args)that);
      return false;
    }

    public boolean equals(cloneExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_existingExperimentID = true && this.isSetExistingExperimentID();
      boolean that_present_existingExperimentID = true && that.isSetExistingExperimentID();
      if (this_present_existingExperimentID || that_present_existingExperimentID) {
        if (!(this_present_existingExperimentID && that_present_existingExperimentID))
          return false;
        if (!this.existingExperimentID.equals(that.existingExperimentID))
          return false;
      }

      boolean this_present_newExperimentName = true && this.isSetNewExperimentName();
      boolean that_present_newExperimentName = true && that.isSetNewExperimentName();
      if (this_present_newExperimentName || that_present_newExperimentName) {
        if (!(this_present_newExperimentName && that_present_newExperimentName))
          return false;
        if (!this.newExperimentName.equals(that.newExperimentName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cloneExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExistingExperimentID()).compareTo(other.isSetExistingExperimentID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExistingExperimentID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.existingExperimentID, other.existingExperimentID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewExperimentName()).compareTo(other.isSetNewExperimentName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewExperimentName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newExperimentName, other.newExperimentName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneExperiment_args(");
      boolean first = true;

      sb.append("existingExperimentID:");
      if (this.existingExperimentID == null) {
        sb.append("null");
      } else {
        sb.append(this.existingExperimentID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newExperimentName:");
      if (this.newExperimentName == null) {
        sb.append("null");
      } else {
        sb.append(this.newExperimentName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public cloneExperiment_argsStandardScheme getScheme() {
        return new cloneExperiment_argsStandardScheme();
      }
    }

    private static class cloneExperiment_argsStandardScheme extends StandardScheme<cloneExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXISTING_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.existingExperimentID = iprot.readString();
                struct.setExistingExperimentIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_EXPERIMENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newExperimentName = iprot.readString();
                struct.setNewExperimentNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.existingExperimentID != null) {
          oprot.writeFieldBegin(EXISTING_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.existingExperimentID);
          oprot.writeFieldEnd();
        }
        if (struct.newExperimentName != null) {
          oprot.writeFieldBegin(NEW_EXPERIMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.newExperimentName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cloneExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public cloneExperiment_argsTupleScheme getScheme() {
        return new cloneExperiment_argsTupleScheme();
      }
    }

    private static class cloneExperiment_argsTupleScheme extends TupleScheme<cloneExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExistingExperimentID()) {
          optionals.set(0);
        }
        if (struct.isSetNewExperimentName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExistingExperimentID()) {
          oprot.writeString(struct.existingExperimentID);
        }
        if (struct.isSetNewExperimentName()) {
          oprot.writeString(struct.newExperimentName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.existingExperimentID = iprot.readString();
          struct.setExistingExperimentIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newExperimentName = iprot.readString();
          struct.setNewExperimentNameIsSet(true);
        }
      }
    }

  }

  public static class cloneExperiment_result implements org.apache.thrift.TBase<cloneExperiment_result, cloneExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cloneExperiment_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperiment_result.class, metaDataMap);
    }

    public cloneExperiment_result() {
    }

    public cloneExperiment_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.ExperimentNotFoundException enf,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneExperiment_result(cloneExperiment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.model.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public cloneExperiment_result deepCopy() {
      return new cloneExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public cloneExperiment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public cloneExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public cloneExperiment_result setEnf(org.apache.airavata.model.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public cloneExperiment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public cloneExperiment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.model.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneExperiment_result)
        return this.equals((cloneExperiment_result)that);
      return false;
    }

    public boolean equals(cloneExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cloneExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public cloneExperiment_resultStandardScheme getScheme() {
        return new cloneExperiment_resultStandardScheme();
      }
    }

    private static class cloneExperiment_resultStandardScheme extends StandardScheme<cloneExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cloneExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public cloneExperiment_resultTupleScheme getScheme() {
        return new cloneExperiment_resultTupleScheme();
      }
    }

    private static class cloneExperiment_resultTupleScheme extends TupleScheme<cloneExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class terminateExperiment_args implements org.apache.thrift.TBase<terminateExperiment_args, terminateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_args.class, metaDataMap);
    }

    public terminateExperiment_args() {
    }

    public terminateExperiment_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateExperiment_args(terminateExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public terminateExperiment_args deepCopy() {
      return new terminateExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public terminateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateExperiment_args)
        return this.equals((terminateExperiment_args)that);
      return false;
    }

    public boolean equals(terminateExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(terminateExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public terminateExperiment_argsStandardScheme getScheme() {
        return new terminateExperiment_argsStandardScheme();
      }
    }

    private static class terminateExperiment_argsStandardScheme extends StandardScheme<terminateExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public terminateExperiment_argsTupleScheme getScheme() {
        return new terminateExperiment_argsTupleScheme();
      }
    }

    private static class terminateExperiment_argsTupleScheme extends TupleScheme<terminateExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAiravataExperimentId()) {
          oprot.writeString(struct.airavataExperimentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.airavataExperimentId = iprot.readString();
          struct.setAiravataExperimentIdIsSet(true);
        }
      }
    }

  }

  public static class terminateExperiment_result implements org.apache.thrift.TBase<terminateExperiment_result, terminateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateExperiment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_result.class, metaDataMap);
    }

    public terminateExperiment_result() {
    }

    public terminateExperiment_result(
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.ExperimentNotFoundException enf,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateExperiment_result(terminateExperiment_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.model.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public terminateExperiment_result deepCopy() {
      return new terminateExperiment_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public terminateExperiment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public terminateExperiment_result setEnf(org.apache.airavata.model.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public terminateExperiment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public terminateExperiment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.model.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateExperiment_result)
        return this.equals((terminateExperiment_result)that);
      return false;
    }

    public boolean equals(terminateExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(terminateExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateExperiment_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public terminateExperiment_resultStandardScheme getScheme() {
        return new terminateExperiment_resultStandardScheme();
      }
    }

    private static class terminateExperiment_resultStandardScheme extends StandardScheme<terminateExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public terminateExperiment_resultTupleScheme getScheme() {
        return new terminateExperiment_resultTupleScheme();
      }
    }

    private static class terminateExperiment_resultTupleScheme extends TupleScheme<terminateExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetEnf()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.enf = new org.apache.airavata.model.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class registerApplicationModule_args implements org.apache.thrift.TBase<registerApplicationModule_args, registerApplicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationModule_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_MODULE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationModule", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerApplicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerApplicationModule_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_MODULE((short)1, "applicationModule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_MODULE
            return APPLICATION_MODULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_MODULE, new org.apache.thrift.meta_data.FieldMetaData("applicationModule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationModule_args.class, metaDataMap);
    }

    public registerApplicationModule_args() {
    }

    public registerApplicationModule_args(
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule)
    {
      this();
      this.applicationModule = applicationModule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationModule_args(registerApplicationModule_args other) {
      if (other.isSetApplicationModule()) {
        this.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule(other.applicationModule);
      }
    }

    public registerApplicationModule_args deepCopy() {
      return new registerApplicationModule_args(this);
    }

    @Override
    public void clear() {
      this.applicationModule = null;
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getApplicationModule() {
      return this.applicationModule;
    }

    public registerApplicationModule_args setApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) {
      this.applicationModule = applicationModule;
      return this;
    }

    public void unsetApplicationModule() {
      this.applicationModule = null;
    }

    /** Returns true if field applicationModule is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationModule() {
      return this.applicationModule != null;
    }

    public void setApplicationModuleIsSet(boolean value) {
      if (!value) {
        this.applicationModule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_MODULE:
        if (value == null) {
          unsetApplicationModule();
        } else {
          setApplicationModule((org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_MODULE:
        return getApplicationModule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_MODULE:
        return isSetApplicationModule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationModule_args)
        return this.equals((registerApplicationModule_args)that);
      return false;
    }

    public boolean equals(registerApplicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationModule = true && this.isSetApplicationModule();
      boolean that_present_applicationModule = true && that.isSetApplicationModule();
      if (this_present_applicationModule || that_present_applicationModule) {
        if (!(this_present_applicationModule && that_present_applicationModule))
          return false;
        if (!this.applicationModule.equals(that.applicationModule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerApplicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationModule()).compareTo(other.isSetApplicationModule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationModule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationModule, other.applicationModule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerApplicationModule_args(");
      boolean first = true;

      sb.append("applicationModule:");
      if (this.applicationModule == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationModule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationModule == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationModule' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationModule != null) {
        applicationModule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public registerApplicationModule_argsStandardScheme getScheme() {
        return new registerApplicationModule_argsStandardScheme();
      }
    }

    private static class registerApplicationModule_argsStandardScheme extends StandardScheme<registerApplicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_MODULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
                struct.applicationModule.read(iprot);
                struct.setApplicationModuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationModule != null) {
          oprot.writeFieldBegin(APPLICATION_MODULE_FIELD_DESC);
          struct.applicationModule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public registerApplicationModule_argsTupleScheme getScheme() {
        return new registerApplicationModule_argsTupleScheme();
      }
    }

    private static class registerApplicationModule_argsTupleScheme extends TupleScheme<registerApplicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.applicationModule.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
        struct.applicationModule.read(iprot);
        struct.setApplicationModuleIsSet(true);
      }
    }

  }

  public static class registerApplicationModule_result implements org.apache.thrift.TBase<registerApplicationModule_result, registerApplicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerApplicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerApplicationModule_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationModule_result.class, metaDataMap);
    }

    public registerApplicationModule_result() {
    }

    public registerApplicationModule_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationModule_result(registerApplicationModule_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public registerApplicationModule_result deepCopy() {
      return new registerApplicationModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerApplicationModule_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public registerApplicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public registerApplicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public registerApplicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationModule_result)
        return this.equals((registerApplicationModule_result)that);
      return false;
    }

    public boolean equals(registerApplicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerApplicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerApplicationModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public registerApplicationModule_resultStandardScheme getScheme() {
        return new registerApplicationModule_resultStandardScheme();
      }
    }

    private static class registerApplicationModule_resultStandardScheme extends StandardScheme<registerApplicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public registerApplicationModule_resultTupleScheme getScheme() {
        return new registerApplicationModule_resultTupleScheme();
      }
    }

    private static class registerApplicationModule_resultTupleScheme extends TupleScheme<registerApplicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getApplicationModule_args implements org.apache.thrift.TBase<getApplicationModule_args, getApplicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationModule_args");

    private static final org.apache.thrift.protocol.TField APP_MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appModuleId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationModule_argsTupleSchemeFactory());
    }

    public String appModuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_MODULE_ID((short)1, "appModuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_MODULE_ID
            return APP_MODULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("appModuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationModule_args.class, metaDataMap);
    }

    public getApplicationModule_args() {
    }

    public getApplicationModule_args(
      String appModuleId)
    {
      this();
      this.appModuleId = appModuleId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationModule_args(getApplicationModule_args other) {
      if (other.isSetAppModuleId()) {
        this.appModuleId = other.appModuleId;
      }
    }

    public getApplicationModule_args deepCopy() {
      return new getApplicationModule_args(this);
    }

    @Override
    public void clear() {
      this.appModuleId = null;
    }

    public String getAppModuleId() {
      return this.appModuleId;
    }

    public getApplicationModule_args setAppModuleId(String appModuleId) {
      this.appModuleId = appModuleId;
      return this;
    }

    public void unsetAppModuleId() {
      this.appModuleId = null;
    }

    /** Returns true if field appModuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppModuleId() {
      return this.appModuleId != null;
    }

    public void setAppModuleIdIsSet(boolean value) {
      if (!value) {
        this.appModuleId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_MODULE_ID:
        if (value == null) {
          unsetAppModuleId();
        } else {
          setAppModuleId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_MODULE_ID:
        return getAppModuleId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_MODULE_ID:
        return isSetAppModuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationModule_args)
        return this.equals((getApplicationModule_args)that);
      return false;
    }

    public boolean equals(getApplicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_appModuleId = true && this.isSetAppModuleId();
      boolean that_present_appModuleId = true && that.isSetAppModuleId();
      if (this_present_appModuleId || that_present_appModuleId) {
        if (!(this_present_appModuleId && that_present_appModuleId))
          return false;
        if (!this.appModuleId.equals(that.appModuleId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppModuleId()).compareTo(other.isSetAppModuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppModuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appModuleId, other.appModuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationModule_args(");
      boolean first = true;

      sb.append("appModuleId:");
      if (this.appModuleId == null) {
        sb.append("null");
      } else {
        sb.append(this.appModuleId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appModuleId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appModuleId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationModule_argsStandardScheme getScheme() {
        return new getApplicationModule_argsStandardScheme();
      }
    }

    private static class getApplicationModule_argsStandardScheme extends StandardScheme<getApplicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_MODULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appModuleId = iprot.readString();
                struct.setAppModuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appModuleId != null) {
          oprot.writeFieldBegin(APP_MODULE_ID_FIELD_DESC);
          oprot.writeString(struct.appModuleId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationModule_argsTupleScheme getScheme() {
        return new getApplicationModule_argsTupleScheme();
      }
    }

    private static class getApplicationModule_argsTupleScheme extends TupleScheme<getApplicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appModuleId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appModuleId = iprot.readString();
        struct.setAppModuleIdIsSet(true);
      }
    }

  }

  public static class getApplicationModule_result implements org.apache.thrift.TBase<getApplicationModule_result, getApplicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationModule_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationModule_result.class, metaDataMap);
    }

    public getApplicationModule_result() {
    }

    public getApplicationModule_result(
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationModule_result(getApplicationModule_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getApplicationModule_result deepCopy() {
      return new getApplicationModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getSuccess() {
      return this.success;
    }

    public getApplicationModule_result setSuccess(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getApplicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getApplicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getApplicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationModule_result)
        return this.equals((getApplicationModule_result)that);
      return false;
    }

    public boolean equals(getApplicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationModule_resultStandardScheme getScheme() {
        return new getApplicationModule_resultStandardScheme();
      }
    }

    private static class getApplicationModule_resultStandardScheme extends StandardScheme<getApplicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationModule_resultTupleScheme getScheme() {
        return new getApplicationModule_resultTupleScheme();
      }
    }

    private static class getApplicationModule_resultTupleScheme extends TupleScheme<getApplicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateApplicationModule_args implements org.apache.thrift.TBase<updateApplicationModule_args, updateApplicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationModule_args");

    private static final org.apache.thrift.protocol.TField APP_MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appModuleId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_MODULE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationModule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationModule_argsTupleSchemeFactory());
    }

    public String appModuleId; // required
    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_MODULE_ID((short)1, "appModuleId"),
      APPLICATION_MODULE((short)2, "applicationModule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_MODULE_ID
            return APP_MODULE_ID;
          case 2: // APPLICATION_MODULE
            return APPLICATION_MODULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("appModuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_MODULE, new org.apache.thrift.meta_data.FieldMetaData("applicationModule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationModule_args.class, metaDataMap);
    }

    public updateApplicationModule_args() {
    }

    public updateApplicationModule_args(
      String appModuleId,
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule)
    {
      this();
      this.appModuleId = appModuleId;
      this.applicationModule = applicationModule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationModule_args(updateApplicationModule_args other) {
      if (other.isSetAppModuleId()) {
        this.appModuleId = other.appModuleId;
      }
      if (other.isSetApplicationModule()) {
        this.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule(other.applicationModule);
      }
    }

    public updateApplicationModule_args deepCopy() {
      return new updateApplicationModule_args(this);
    }

    @Override
    public void clear() {
      this.appModuleId = null;
      this.applicationModule = null;
    }

    public String getAppModuleId() {
      return this.appModuleId;
    }

    public updateApplicationModule_args setAppModuleId(String appModuleId) {
      this.appModuleId = appModuleId;
      return this;
    }

    public void unsetAppModuleId() {
      this.appModuleId = null;
    }

    /** Returns true if field appModuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppModuleId() {
      return this.appModuleId != null;
    }

    public void setAppModuleIdIsSet(boolean value) {
      if (!value) {
        this.appModuleId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getApplicationModule() {
      return this.applicationModule;
    }

    public updateApplicationModule_args setApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) {
      this.applicationModule = applicationModule;
      return this;
    }

    public void unsetApplicationModule() {
      this.applicationModule = null;
    }

    /** Returns true if field applicationModule is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationModule() {
      return this.applicationModule != null;
    }

    public void setApplicationModuleIsSet(boolean value) {
      if (!value) {
        this.applicationModule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_MODULE_ID:
        if (value == null) {
          unsetAppModuleId();
        } else {
          setAppModuleId((String)value);
        }
        break;

      case APPLICATION_MODULE:
        if (value == null) {
          unsetApplicationModule();
        } else {
          setApplicationModule((org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_MODULE_ID:
        return getAppModuleId();

      case APPLICATION_MODULE:
        return getApplicationModule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_MODULE_ID:
        return isSetAppModuleId();
      case APPLICATION_MODULE:
        return isSetApplicationModule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationModule_args)
        return this.equals((updateApplicationModule_args)that);
      return false;
    }

    public boolean equals(updateApplicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_appModuleId = true && this.isSetAppModuleId();
      boolean that_present_appModuleId = true && that.isSetAppModuleId();
      if (this_present_appModuleId || that_present_appModuleId) {
        if (!(this_present_appModuleId && that_present_appModuleId))
          return false;
        if (!this.appModuleId.equals(that.appModuleId))
          return false;
      }

      boolean this_present_applicationModule = true && this.isSetApplicationModule();
      boolean that_present_applicationModule = true && that.isSetApplicationModule();
      if (this_present_applicationModule || that_present_applicationModule) {
        if (!(this_present_applicationModule && that_present_applicationModule))
          return false;
        if (!this.applicationModule.equals(that.applicationModule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateApplicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppModuleId()).compareTo(other.isSetAppModuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppModuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appModuleId, other.appModuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationModule()).compareTo(other.isSetApplicationModule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationModule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationModule, other.applicationModule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationModule_args(");
      boolean first = true;

      sb.append("appModuleId:");
      if (this.appModuleId == null) {
        sb.append("null");
      } else {
        sb.append(this.appModuleId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationModule:");
      if (this.applicationModule == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationModule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appModuleId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appModuleId' was not present! Struct: " + toString());
      }
      if (applicationModule == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationModule' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationModule != null) {
        applicationModule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public updateApplicationModule_argsStandardScheme getScheme() {
        return new updateApplicationModule_argsStandardScheme();
      }
    }

    private static class updateApplicationModule_argsStandardScheme extends StandardScheme<updateApplicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_MODULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appModuleId = iprot.readString();
                struct.setAppModuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_MODULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
                struct.applicationModule.read(iprot);
                struct.setApplicationModuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appModuleId != null) {
          oprot.writeFieldBegin(APP_MODULE_ID_FIELD_DESC);
          oprot.writeString(struct.appModuleId);
          oprot.writeFieldEnd();
        }
        if (struct.applicationModule != null) {
          oprot.writeFieldBegin(APPLICATION_MODULE_FIELD_DESC);
          struct.applicationModule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public updateApplicationModule_argsTupleScheme getScheme() {
        return new updateApplicationModule_argsTupleScheme();
      }
    }

    private static class updateApplicationModule_argsTupleScheme extends TupleScheme<updateApplicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appModuleId);
        struct.applicationModule.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appModuleId = iprot.readString();
        struct.setAppModuleIdIsSet(true);
        struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
        struct.applicationModule.read(iprot);
        struct.setApplicationModuleIsSet(true);
      }
    }

  }

  public static class updateApplicationModule_result implements org.apache.thrift.TBase<updateApplicationModule_result, updateApplicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationModule_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationModule_result.class, metaDataMap);
    }

    public updateApplicationModule_result() {
    }

    public updateApplicationModule_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationModule_result(updateApplicationModule_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateApplicationModule_result deepCopy() {
      return new updateApplicationModule_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateApplicationModule_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateApplicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateApplicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateApplicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationModule_result)
        return this.equals((updateApplicationModule_result)that);
      return false;
    }

    public boolean equals(updateApplicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateApplicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationModule_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public updateApplicationModule_resultStandardScheme getScheme() {
        return new updateApplicationModule_resultStandardScheme();
      }
    }

    private static class updateApplicationModule_resultStandardScheme extends StandardScheme<updateApplicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public updateApplicationModule_resultTupleScheme getScheme() {
        return new updateApplicationModule_resultTupleScheme();
      }
    }

    private static class updateApplicationModule_resultTupleScheme extends TupleScheme<updateApplicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deleteApplicationModule_args implements org.apache.thrift.TBase<deleteApplicationModule_args, deleteApplicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationModule_args");

    private static final org.apache.thrift.protocol.TField APP_MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appModuleId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationModule_argsTupleSchemeFactory());
    }

    public String appModuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_MODULE_ID((short)1, "appModuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_MODULE_ID
            return APP_MODULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("appModuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationModule_args.class, metaDataMap);
    }

    public deleteApplicationModule_args() {
    }

    public deleteApplicationModule_args(
      String appModuleId)
    {
      this();
      this.appModuleId = appModuleId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationModule_args(deleteApplicationModule_args other) {
      if (other.isSetAppModuleId()) {
        this.appModuleId = other.appModuleId;
      }
    }

    public deleteApplicationModule_args deepCopy() {
      return new deleteApplicationModule_args(this);
    }

    @Override
    public void clear() {
      this.appModuleId = null;
    }

    public String getAppModuleId() {
      return this.appModuleId;
    }

    public deleteApplicationModule_args setAppModuleId(String appModuleId) {
      this.appModuleId = appModuleId;
      return this;
    }

    public void unsetAppModuleId() {
      this.appModuleId = null;
    }

    /** Returns true if field appModuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppModuleId() {
      return this.appModuleId != null;
    }

    public void setAppModuleIdIsSet(boolean value) {
      if (!value) {
        this.appModuleId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_MODULE_ID:
        if (value == null) {
          unsetAppModuleId();
        } else {
          setAppModuleId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_MODULE_ID:
        return getAppModuleId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_MODULE_ID:
        return isSetAppModuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationModule_args)
        return this.equals((deleteApplicationModule_args)that);
      return false;
    }

    public boolean equals(deleteApplicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_appModuleId = true && this.isSetAppModuleId();
      boolean that_present_appModuleId = true && that.isSetAppModuleId();
      if (this_present_appModuleId || that_present_appModuleId) {
        if (!(this_present_appModuleId && that_present_appModuleId))
          return false;
        if (!this.appModuleId.equals(that.appModuleId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteApplicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppModuleId()).compareTo(other.isSetAppModuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppModuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appModuleId, other.appModuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationModule_args(");
      boolean first = true;

      sb.append("appModuleId:");
      if (this.appModuleId == null) {
        sb.append("null");
      } else {
        sb.append(this.appModuleId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appModuleId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appModuleId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationModule_argsStandardScheme getScheme() {
        return new deleteApplicationModule_argsStandardScheme();
      }
    }

    private static class deleteApplicationModule_argsStandardScheme extends StandardScheme<deleteApplicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_MODULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appModuleId = iprot.readString();
                struct.setAppModuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appModuleId != null) {
          oprot.writeFieldBegin(APP_MODULE_ID_FIELD_DESC);
          oprot.writeString(struct.appModuleId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationModule_argsTupleScheme getScheme() {
        return new deleteApplicationModule_argsTupleScheme();
      }
    }

    private static class deleteApplicationModule_argsTupleScheme extends TupleScheme<deleteApplicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appModuleId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appModuleId = iprot.readString();
        struct.setAppModuleIdIsSet(true);
      }
    }

  }

  public static class deleteApplicationModule_result implements org.apache.thrift.TBase<deleteApplicationModule_result, deleteApplicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationModule_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationModule_result.class, metaDataMap);
    }

    public deleteApplicationModule_result() {
    }

    public deleteApplicationModule_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationModule_result(deleteApplicationModule_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public deleteApplicationModule_result deepCopy() {
      return new deleteApplicationModule_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteApplicationModule_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deleteApplicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public deleteApplicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public deleteApplicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationModule_result)
        return this.equals((deleteApplicationModule_result)that);
      return false;
    }

    public boolean equals(deleteApplicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteApplicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationModule_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationModule_resultStandardScheme getScheme() {
        return new deleteApplicationModule_resultStandardScheme();
      }
    }

    private static class deleteApplicationModule_resultStandardScheme extends StandardScheme<deleteApplicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationModule_resultTupleScheme getScheme() {
        return new deleteApplicationModule_resultTupleScheme();
      }
    }

    private static class deleteApplicationModule_resultTupleScheme extends TupleScheme<deleteApplicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class registerApplicationDeployment_args implements org.apache.thrift.TBase<registerApplicationDeployment_args, registerApplicationDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationDeployment_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_DEPLOYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDeployment", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerApplicationDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerApplicationDeployment_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_DEPLOYMENT((short)1, "applicationDeployment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_DEPLOYMENT
            return APPLICATION_DEPLOYMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_DEPLOYMENT, new org.apache.thrift.meta_data.FieldMetaData("applicationDeployment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationDeployment_args.class, metaDataMap);
    }

    public registerApplicationDeployment_args() {
    }

    public registerApplicationDeployment_args(
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment)
    {
      this();
      this.applicationDeployment = applicationDeployment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationDeployment_args(registerApplicationDeployment_args other) {
      if (other.isSetApplicationDeployment()) {
        this.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription(other.applicationDeployment);
      }
    }

    public registerApplicationDeployment_args deepCopy() {
      return new registerApplicationDeployment_args(this);
    }

    @Override
    public void clear() {
      this.applicationDeployment = null;
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getApplicationDeployment() {
      return this.applicationDeployment;
    }

    public registerApplicationDeployment_args setApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) {
      this.applicationDeployment = applicationDeployment;
      return this;
    }

    public void unsetApplicationDeployment() {
      this.applicationDeployment = null;
    }

    /** Returns true if field applicationDeployment is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationDeployment() {
      return this.applicationDeployment != null;
    }

    public void setApplicationDeploymentIsSet(boolean value) {
      if (!value) {
        this.applicationDeployment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_DEPLOYMENT:
        if (value == null) {
          unsetApplicationDeployment();
        } else {
          setApplicationDeployment((org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_DEPLOYMENT:
        return getApplicationDeployment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_DEPLOYMENT:
        return isSetApplicationDeployment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationDeployment_args)
        return this.equals((registerApplicationDeployment_args)that);
      return false;
    }

    public boolean equals(registerApplicationDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationDeployment = true && this.isSetApplicationDeployment();
      boolean that_present_applicationDeployment = true && that.isSetApplicationDeployment();
      if (this_present_applicationDeployment || that_present_applicationDeployment) {
        if (!(this_present_applicationDeployment && that_present_applicationDeployment))
          return false;
        if (!this.applicationDeployment.equals(that.applicationDeployment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerApplicationDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationDeployment()).compareTo(other.isSetApplicationDeployment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationDeployment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDeployment, other.applicationDeployment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerApplicationDeployment_args(");
      boolean first = true;

      sb.append("applicationDeployment:");
      if (this.applicationDeployment == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationDeployment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationDeployment == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationDeployment' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationDeployment != null) {
        applicationDeployment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public registerApplicationDeployment_argsStandardScheme getScheme() {
        return new registerApplicationDeployment_argsStandardScheme();
      }
    }

    private static class registerApplicationDeployment_argsStandardScheme extends StandardScheme<registerApplicationDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_DEPLOYMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
                struct.applicationDeployment.read(iprot);
                struct.setApplicationDeploymentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationDeployment != null) {
          oprot.writeFieldBegin(APPLICATION_DEPLOYMENT_FIELD_DESC);
          struct.applicationDeployment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public registerApplicationDeployment_argsTupleScheme getScheme() {
        return new registerApplicationDeployment_argsTupleScheme();
      }
    }

    private static class registerApplicationDeployment_argsTupleScheme extends TupleScheme<registerApplicationDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.applicationDeployment.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
        struct.applicationDeployment.read(iprot);
        struct.setApplicationDeploymentIsSet(true);
      }
    }

  }

  public static class registerApplicationDeployment_result implements org.apache.thrift.TBase<registerApplicationDeployment_result, registerApplicationDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationDeployment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerApplicationDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerApplicationDeployment_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationDeployment_result.class, metaDataMap);
    }

    public registerApplicationDeployment_result() {
    }

    public registerApplicationDeployment_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationDeployment_result(registerApplicationDeployment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public registerApplicationDeployment_result deepCopy() {
      return new registerApplicationDeployment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerApplicationDeployment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public registerApplicationDeployment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public registerApplicationDeployment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public registerApplicationDeployment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationDeployment_result)
        return this.equals((registerApplicationDeployment_result)that);
      return false;
    }

    public boolean equals(registerApplicationDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerApplicationDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerApplicationDeployment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public registerApplicationDeployment_resultStandardScheme getScheme() {
        return new registerApplicationDeployment_resultStandardScheme();
      }
    }

    private static class registerApplicationDeployment_resultStandardScheme extends StandardScheme<registerApplicationDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public registerApplicationDeployment_resultTupleScheme getScheme() {
        return new registerApplicationDeployment_resultTupleScheme();
      }
    }

    private static class registerApplicationDeployment_resultTupleScheme extends TupleScheme<registerApplicationDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getApplicationDeployment_args implements org.apache.thrift.TBase<getApplicationDeployment_args, getApplicationDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationDeployment_args");

    private static final org.apache.thrift.protocol.TField APP_DEPLOYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appDeploymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationDeployment_argsTupleSchemeFactory());
    }

    public String appDeploymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_DEPLOYMENT_ID((short)1, "appDeploymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_DEPLOYMENT_ID
            return APP_DEPLOYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_DEPLOYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("appDeploymentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationDeployment_args.class, metaDataMap);
    }

    public getApplicationDeployment_args() {
    }

    public getApplicationDeployment_args(
      String appDeploymentId)
    {
      this();
      this.appDeploymentId = appDeploymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationDeployment_args(getApplicationDeployment_args other) {
      if (other.isSetAppDeploymentId()) {
        this.appDeploymentId = other.appDeploymentId;
      }
    }

    public getApplicationDeployment_args deepCopy() {
      return new getApplicationDeployment_args(this);
    }

    @Override
    public void clear() {
      this.appDeploymentId = null;
    }

    public String getAppDeploymentId() {
      return this.appDeploymentId;
    }

    public getApplicationDeployment_args setAppDeploymentId(String appDeploymentId) {
      this.appDeploymentId = appDeploymentId;
      return this;
    }

    public void unsetAppDeploymentId() {
      this.appDeploymentId = null;
    }

    /** Returns true if field appDeploymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppDeploymentId() {
      return this.appDeploymentId != null;
    }

    public void setAppDeploymentIdIsSet(boolean value) {
      if (!value) {
        this.appDeploymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_DEPLOYMENT_ID:
        if (value == null) {
          unsetAppDeploymentId();
        } else {
          setAppDeploymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_DEPLOYMENT_ID:
        return getAppDeploymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_DEPLOYMENT_ID:
        return isSetAppDeploymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationDeployment_args)
        return this.equals((getApplicationDeployment_args)that);
      return false;
    }

    public boolean equals(getApplicationDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_appDeploymentId = true && this.isSetAppDeploymentId();
      boolean that_present_appDeploymentId = true && that.isSetAppDeploymentId();
      if (this_present_appDeploymentId || that_present_appDeploymentId) {
        if (!(this_present_appDeploymentId && that_present_appDeploymentId))
          return false;
        if (!this.appDeploymentId.equals(that.appDeploymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppDeploymentId()).compareTo(other.isSetAppDeploymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppDeploymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appDeploymentId, other.appDeploymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationDeployment_args(");
      boolean first = true;

      sb.append("appDeploymentId:");
      if (this.appDeploymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.appDeploymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appDeploymentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appDeploymentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_argsStandardScheme getScheme() {
        return new getApplicationDeployment_argsStandardScheme();
      }
    }

    private static class getApplicationDeployment_argsStandardScheme extends StandardScheme<getApplicationDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_DEPLOYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appDeploymentId = iprot.readString();
                struct.setAppDeploymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appDeploymentId != null) {
          oprot.writeFieldBegin(APP_DEPLOYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.appDeploymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_argsTupleScheme getScheme() {
        return new getApplicationDeployment_argsTupleScheme();
      }
    }

    private static class getApplicationDeployment_argsTupleScheme extends TupleScheme<getApplicationDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appDeploymentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appDeploymentId = iprot.readString();
        struct.setAppDeploymentIdIsSet(true);
      }
    }

  }

  public static class getApplicationDeployment_result implements org.apache.thrift.TBase<getApplicationDeployment_result, getApplicationDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationDeployment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationDeployment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationDeployment_result.class, metaDataMap);
    }

    public getApplicationDeployment_result() {
    }

    public getApplicationDeployment_result(
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationDeployment_result(getApplicationDeployment_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getApplicationDeployment_result deepCopy() {
      return new getApplicationDeployment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getSuccess() {
      return this.success;
    }

    public getApplicationDeployment_result setSuccess(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getApplicationDeployment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getApplicationDeployment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getApplicationDeployment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationDeployment_result)
        return this.equals((getApplicationDeployment_result)that);
      return false;
    }

    public boolean equals(getApplicationDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationDeployment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_resultStandardScheme getScheme() {
        return new getApplicationDeployment_resultStandardScheme();
      }
    }

    private static class getApplicationDeployment_resultStandardScheme extends StandardScheme<getApplicationDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_resultTupleScheme getScheme() {
        return new getApplicationDeployment_resultTupleScheme();
      }
    }

    private static class getApplicationDeployment_resultTupleScheme extends TupleScheme<getApplicationDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateApplicationDeployment_args implements org.apache.thrift.TBase<updateApplicationDeployment_args, updateApplicationDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationDeployment_args");

    private static final org.apache.thrift.protocol.TField APP_DEPLOYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appDeploymentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_DEPLOYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDeployment", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationDeployment_argsTupleSchemeFactory());
    }

    public String appDeploymentId; // required
    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_DEPLOYMENT_ID((short)1, "appDeploymentId"),
      APPLICATION_DEPLOYMENT((short)2, "applicationDeployment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_DEPLOYMENT_ID
            return APP_DEPLOYMENT_ID;
          case 2: // APPLICATION_DEPLOYMENT
            return APPLICATION_DEPLOYMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_DEPLOYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("appDeploymentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_DEPLOYMENT, new org.apache.thrift.meta_data.FieldMetaData("applicationDeployment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationDeployment_args.class, metaDataMap);
    }

    public updateApplicationDeployment_args() {
    }

    public updateApplicationDeployment_args(
      String appDeploymentId,
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment)
    {
      this();
      this.appDeploymentId = appDeploymentId;
      this.applicationDeployment = applicationDeployment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationDeployment_args(updateApplicationDeployment_args other) {
      if (other.isSetAppDeploymentId()) {
        this.appDeploymentId = other.appDeploymentId;
      }
      if (other.isSetApplicationDeployment()) {
        this.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription(other.applicationDeployment);
      }
    }

    public updateApplicationDeployment_args deepCopy() {
      return new updateApplicationDeployment_args(this);
    }

    @Override
    public void clear() {
      this.appDeploymentId = null;
      this.applicationDeployment = null;
    }

    public String getAppDeploymentId() {
      return this.appDeploymentId;
    }

    public updateApplicationDeployment_args setAppDeploymentId(String appDeploymentId) {
      this.appDeploymentId = appDeploymentId;
      return this;
    }

    public void unsetAppDeploymentId() {
      this.appDeploymentId = null;
    }

    /** Returns true if field appDeploymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppDeploymentId() {
      return this.appDeploymentId != null;
    }

    public void setAppDeploymentIdIsSet(boolean value) {
      if (!value) {
        this.appDeploymentId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getApplicationDeployment() {
      return this.applicationDeployment;
    }

    public updateApplicationDeployment_args setApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) {
      this.applicationDeployment = applicationDeployment;
      return this;
    }

    public void unsetApplicationDeployment() {
      this.applicationDeployment = null;
    }

    /** Returns true if field applicationDeployment is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationDeployment() {
      return this.applicationDeployment != null;
    }

    public void setApplicationDeploymentIsSet(boolean value) {
      if (!value) {
        this.applicationDeployment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_DEPLOYMENT_ID:
        if (value == null) {
          unsetAppDeploymentId();
        } else {
          setAppDeploymentId((String)value);
        }
        break;

      case APPLICATION_DEPLOYMENT:
        if (value == null) {
          unsetApplicationDeployment();
        } else {
          setApplicationDeployment((org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_DEPLOYMENT_ID:
        return getAppDeploymentId();

      case APPLICATION_DEPLOYMENT:
        return getApplicationDeployment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_DEPLOYMENT_ID:
        return isSetAppDeploymentId();
      case APPLICATION_DEPLOYMENT:
        return isSetApplicationDeployment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationDeployment_args)
        return this.equals((updateApplicationDeployment_args)that);
      return false;
    }

    public boolean equals(updateApplicationDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_appDeploymentId = true && this.isSetAppDeploymentId();
      boolean that_present_appDeploymentId = true && that.isSetAppDeploymentId();
      if (this_present_appDeploymentId || that_present_appDeploymentId) {
        if (!(this_present_appDeploymentId && that_present_appDeploymentId))
          return false;
        if (!this.appDeploymentId.equals(that.appDeploymentId))
          return false;
      }

      boolean this_present_applicationDeployment = true && this.isSetApplicationDeployment();
      boolean that_present_applicationDeployment = true && that.isSetApplicationDeployment();
      if (this_present_applicationDeployment || that_present_applicationDeployment) {
        if (!(this_present_applicationDeployment && that_present_applicationDeployment))
          return false;
        if (!this.applicationDeployment.equals(that.applicationDeployment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateApplicationDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppDeploymentId()).compareTo(other.isSetAppDeploymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppDeploymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appDeploymentId, other.appDeploymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationDeployment()).compareTo(other.isSetApplicationDeployment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationDeployment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDeployment, other.applicationDeployment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationDeployment_args(");
      boolean first = true;

      sb.append("appDeploymentId:");
      if (this.appDeploymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.appDeploymentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationDeployment:");
      if (this.applicationDeployment == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationDeployment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appDeploymentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appDeploymentId' was not present! Struct: " + toString());
      }
      if (applicationDeployment == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationDeployment' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationDeployment != null) {
        applicationDeployment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public updateApplicationDeployment_argsStandardScheme getScheme() {
        return new updateApplicationDeployment_argsStandardScheme();
      }
    }

    private static class updateApplicationDeployment_argsStandardScheme extends StandardScheme<updateApplicationDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_DEPLOYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appDeploymentId = iprot.readString();
                struct.setAppDeploymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_DEPLOYMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
                struct.applicationDeployment.read(iprot);
                struct.setApplicationDeploymentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appDeploymentId != null) {
          oprot.writeFieldBegin(APP_DEPLOYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.appDeploymentId);
          oprot.writeFieldEnd();
        }
        if (struct.applicationDeployment != null) {
          oprot.writeFieldBegin(APPLICATION_DEPLOYMENT_FIELD_DESC);
          struct.applicationDeployment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public updateApplicationDeployment_argsTupleScheme getScheme() {
        return new updateApplicationDeployment_argsTupleScheme();
      }
    }

    private static class updateApplicationDeployment_argsTupleScheme extends TupleScheme<updateApplicationDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appDeploymentId);
        struct.applicationDeployment.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appDeploymentId = iprot.readString();
        struct.setAppDeploymentIdIsSet(true);
        struct.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
        struct.applicationDeployment.read(iprot);
        struct.setApplicationDeploymentIsSet(true);
      }
    }

  }

  public static class updateApplicationDeployment_result implements org.apache.thrift.TBase<updateApplicationDeployment_result, updateApplicationDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationDeployment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationDeployment_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationDeployment_result.class, metaDataMap);
    }

    public updateApplicationDeployment_result() {
    }

    public updateApplicationDeployment_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationDeployment_result(updateApplicationDeployment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateApplicationDeployment_result deepCopy() {
      return new updateApplicationDeployment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateApplicationDeployment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateApplicationDeployment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateApplicationDeployment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateApplicationDeployment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationDeployment_result)
        return this.equals((updateApplicationDeployment_result)that);
      return false;
    }

    public boolean equals(updateApplicationDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateApplicationDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationDeployment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public updateApplicationDeployment_resultStandardScheme getScheme() {
        return new updateApplicationDeployment_resultStandardScheme();
      }
    }

    private static class updateApplicationDeployment_resultStandardScheme extends StandardScheme<updateApplicationDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public updateApplicationDeployment_resultTupleScheme getScheme() {
        return new updateApplicationDeployment_resultTupleScheme();
      }
    }

    private static class updateApplicationDeployment_resultTupleScheme extends TupleScheme<updateApplicationDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deleteApplicationDeployment_args implements org.apache.thrift.TBase<deleteApplicationDeployment_args, deleteApplicationDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationDeployment_args");

    private static final org.apache.thrift.protocol.TField APP_DEPLOYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appDeploymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationDeployment_argsTupleSchemeFactory());
    }

    public String appDeploymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_DEPLOYMENT_ID((short)1, "appDeploymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_DEPLOYMENT_ID
            return APP_DEPLOYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_DEPLOYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("appDeploymentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationDeployment_args.class, metaDataMap);
    }

    public deleteApplicationDeployment_args() {
    }

    public deleteApplicationDeployment_args(
      String appDeploymentId)
    {
      this();
      this.appDeploymentId = appDeploymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationDeployment_args(deleteApplicationDeployment_args other) {
      if (other.isSetAppDeploymentId()) {
        this.appDeploymentId = other.appDeploymentId;
      }
    }

    public deleteApplicationDeployment_args deepCopy() {
      return new deleteApplicationDeployment_args(this);
    }

    @Override
    public void clear() {
      this.appDeploymentId = null;
    }

    public String getAppDeploymentId() {
      return this.appDeploymentId;
    }

    public deleteApplicationDeployment_args setAppDeploymentId(String appDeploymentId) {
      this.appDeploymentId = appDeploymentId;
      return this;
    }

    public void unsetAppDeploymentId() {
      this.appDeploymentId = null;
    }

    /** Returns true if field appDeploymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppDeploymentId() {
      return this.appDeploymentId != null;
    }

    public void setAppDeploymentIdIsSet(boolean value) {
      if (!value) {
        this.appDeploymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_DEPLOYMENT_ID:
        if (value == null) {
          unsetAppDeploymentId();
        } else {
          setAppDeploymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_DEPLOYMENT_ID:
        return getAppDeploymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_DEPLOYMENT_ID:
        return isSetAppDeploymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationDeployment_args)
        return this.equals((deleteApplicationDeployment_args)that);
      return false;
    }

    public boolean equals(deleteApplicationDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_appDeploymentId = true && this.isSetAppDeploymentId();
      boolean that_present_appDeploymentId = true && that.isSetAppDeploymentId();
      if (this_present_appDeploymentId || that_present_appDeploymentId) {
        if (!(this_present_appDeploymentId && that_present_appDeploymentId))
          return false;
        if (!this.appDeploymentId.equals(that.appDeploymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteApplicationDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppDeploymentId()).compareTo(other.isSetAppDeploymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppDeploymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appDeploymentId, other.appDeploymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationDeployment_args(");
      boolean first = true;

      sb.append("appDeploymentId:");
      if (this.appDeploymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.appDeploymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appDeploymentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appDeploymentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationDeployment_argsStandardScheme getScheme() {
        return new deleteApplicationDeployment_argsStandardScheme();
      }
    }

    private static class deleteApplicationDeployment_argsStandardScheme extends StandardScheme<deleteApplicationDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_DEPLOYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appDeploymentId = iprot.readString();
                struct.setAppDeploymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appDeploymentId != null) {
          oprot.writeFieldBegin(APP_DEPLOYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.appDeploymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationDeployment_argsTupleScheme getScheme() {
        return new deleteApplicationDeployment_argsTupleScheme();
      }
    }

    private static class deleteApplicationDeployment_argsTupleScheme extends TupleScheme<deleteApplicationDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appDeploymentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appDeploymentId = iprot.readString();
        struct.setAppDeploymentIdIsSet(true);
      }
    }

  }

  public static class deleteApplicationDeployment_result implements org.apache.thrift.TBase<deleteApplicationDeployment_result, deleteApplicationDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationDeployment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationDeployment_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationDeployment_result.class, metaDataMap);
    }

    public deleteApplicationDeployment_result() {
    }

    public deleteApplicationDeployment_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationDeployment_result(deleteApplicationDeployment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public deleteApplicationDeployment_result deepCopy() {
      return new deleteApplicationDeployment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteApplicationDeployment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deleteApplicationDeployment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public deleteApplicationDeployment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public deleteApplicationDeployment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationDeployment_result)
        return this.equals((deleteApplicationDeployment_result)that);
      return false;
    }

    public boolean equals(deleteApplicationDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteApplicationDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationDeployment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationDeployment_resultStandardScheme getScheme() {
        return new deleteApplicationDeployment_resultStandardScheme();
      }
    }

    private static class deleteApplicationDeployment_resultStandardScheme extends StandardScheme<deleteApplicationDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationDeployment_resultTupleScheme getScheme() {
        return new deleteApplicationDeployment_resultTupleScheme();
      }
    }

    private static class deleteApplicationDeployment_resultTupleScheme extends TupleScheme<deleteApplicationDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getAppModuleDeployedResources_args implements org.apache.thrift.TBase<getAppModuleDeployedResources_args, getAppModuleDeployedResources_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAppModuleDeployedResources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppModuleDeployedResources_args");

    private static final org.apache.thrift.protocol.TField APP_MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appModuleId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppModuleDeployedResources_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppModuleDeployedResources_argsTupleSchemeFactory());
    }

    public String appModuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_MODULE_ID((short)1, "appModuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_MODULE_ID
            return APP_MODULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("appModuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppModuleDeployedResources_args.class, metaDataMap);
    }

    public getAppModuleDeployedResources_args() {
    }

    public getAppModuleDeployedResources_args(
      String appModuleId)
    {
      this();
      this.appModuleId = appModuleId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppModuleDeployedResources_args(getAppModuleDeployedResources_args other) {
      if (other.isSetAppModuleId()) {
        this.appModuleId = other.appModuleId;
      }
    }

    public getAppModuleDeployedResources_args deepCopy() {
      return new getAppModuleDeployedResources_args(this);
    }

    @Override
    public void clear() {
      this.appModuleId = null;
    }

    public String getAppModuleId() {
      return this.appModuleId;
    }

    public getAppModuleDeployedResources_args setAppModuleId(String appModuleId) {
      this.appModuleId = appModuleId;
      return this;
    }

    public void unsetAppModuleId() {
      this.appModuleId = null;
    }

    /** Returns true if field appModuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppModuleId() {
      return this.appModuleId != null;
    }

    public void setAppModuleIdIsSet(boolean value) {
      if (!value) {
        this.appModuleId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_MODULE_ID:
        if (value == null) {
          unsetAppModuleId();
        } else {
          setAppModuleId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_MODULE_ID:
        return getAppModuleId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_MODULE_ID:
        return isSetAppModuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppModuleDeployedResources_args)
        return this.equals((getAppModuleDeployedResources_args)that);
      return false;
    }

    public boolean equals(getAppModuleDeployedResources_args that) {
      if (that == null)
        return false;

      boolean this_present_appModuleId = true && this.isSetAppModuleId();
      boolean that_present_appModuleId = true && that.isSetAppModuleId();
      if (this_present_appModuleId || that_present_appModuleId) {
        if (!(this_present_appModuleId && that_present_appModuleId))
          return false;
        if (!this.appModuleId.equals(that.appModuleId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAppModuleDeployedResources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppModuleId()).compareTo(other.isSetAppModuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppModuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appModuleId, other.appModuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppModuleDeployedResources_args(");
      boolean first = true;

      sb.append("appModuleId:");
      if (this.appModuleId == null) {
        sb.append("null");
      } else {
        sb.append(this.appModuleId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appModuleId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appModuleId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppModuleDeployedResources_argsStandardSchemeFactory implements SchemeFactory {
      public getAppModuleDeployedResources_argsStandardScheme getScheme() {
        return new getAppModuleDeployedResources_argsStandardScheme();
      }
    }

    private static class getAppModuleDeployedResources_argsStandardScheme extends StandardScheme<getAppModuleDeployedResources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppModuleDeployedResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_MODULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appModuleId = iprot.readString();
                struct.setAppModuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppModuleDeployedResources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appModuleId != null) {
          oprot.writeFieldBegin(APP_MODULE_ID_FIELD_DESC);
          oprot.writeString(struct.appModuleId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppModuleDeployedResources_argsTupleSchemeFactory implements SchemeFactory {
      public getAppModuleDeployedResources_argsTupleScheme getScheme() {
        return new getAppModuleDeployedResources_argsTupleScheme();
      }
    }

    private static class getAppModuleDeployedResources_argsTupleScheme extends TupleScheme<getAppModuleDeployedResources_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppModuleDeployedResources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appModuleId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppModuleDeployedResources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appModuleId = iprot.readString();
        struct.setAppModuleIdIsSet(true);
      }
    }

  }

  public static class getAppModuleDeployedResources_result implements org.apache.thrift.TBase<getAppModuleDeployedResources_result, getAppModuleDeployedResources_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAppModuleDeployedResources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppModuleDeployedResources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppModuleDeployedResources_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppModuleDeployedResources_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppModuleDeployedResources_result.class, metaDataMap);
    }

    public getAppModuleDeployedResources_result() {
    }

    public getAppModuleDeployedResources_result(
      List<String> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppModuleDeployedResources_result(getAppModuleDeployedResources_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getAppModuleDeployedResources_result deepCopy() {
      return new getAppModuleDeployedResources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAppModuleDeployedResources_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAppModuleDeployedResources_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getAppModuleDeployedResources_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getAppModuleDeployedResources_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppModuleDeployedResources_result)
        return this.equals((getAppModuleDeployedResources_result)that);
      return false;
    }

    public boolean equals(getAppModuleDeployedResources_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAppModuleDeployedResources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppModuleDeployedResources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppModuleDeployedResources_resultStandardSchemeFactory implements SchemeFactory {
      public getAppModuleDeployedResources_resultStandardScheme getScheme() {
        return new getAppModuleDeployedResources_resultStandardScheme();
      }
    }

    private static class getAppModuleDeployedResources_resultStandardScheme extends StandardScheme<getAppModuleDeployedResources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppModuleDeployedResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    String _elem84;
                    _elem84 = iprot.readString();
                    struct.success.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppModuleDeployedResources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter85 : struct.success)
            {
              oprot.writeString(_iter85);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppModuleDeployedResources_resultTupleSchemeFactory implements SchemeFactory {
      public getAppModuleDeployedResources_resultTupleScheme getScheme() {
        return new getAppModuleDeployedResources_resultTupleScheme();
      }
    }

    private static class getAppModuleDeployedResources_resultTupleScheme extends TupleScheme<getAppModuleDeployedResources_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppModuleDeployedResources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter86 : struct.success)
            {
              oprot.writeString(_iter86);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppModuleDeployedResources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              String _elem89;
              _elem89 = iprot.readString();
              struct.success.add(_elem89);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class registerApplicationInterface_args implements org.apache.thrift.TBase<registerApplicationInterface_args, registerApplicationInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationInterface_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterface", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerApplicationInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerApplicationInterface_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_INTERFACE((short)1, "applicationInterface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_INTERFACE
            return APPLICATION_INTERFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("applicationInterface", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationInterface_args.class, metaDataMap);
    }

    public registerApplicationInterface_args() {
    }

    public registerApplicationInterface_args(
      org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface)
    {
      this();
      this.applicationInterface = applicationInterface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationInterface_args(registerApplicationInterface_args other) {
      if (other.isSetApplicationInterface()) {
        this.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription(other.applicationInterface);
      }
    }

    public registerApplicationInterface_args deepCopy() {
      return new registerApplicationInterface_args(this);
    }

    @Override
    public void clear() {
      this.applicationInterface = null;
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getApplicationInterface() {
      return this.applicationInterface;
    }

    public registerApplicationInterface_args setApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) {
      this.applicationInterface = applicationInterface;
      return this;
    }

    public void unsetApplicationInterface() {
      this.applicationInterface = null;
    }

    /** Returns true if field applicationInterface is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInterface() {
      return this.applicationInterface != null;
    }

    public void setApplicationInterfaceIsSet(boolean value) {
      if (!value) {
        this.applicationInterface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_INTERFACE:
        if (value == null) {
          unsetApplicationInterface();
        } else {
          setApplicationInterface((org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_INTERFACE:
        return getApplicationInterface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_INTERFACE:
        return isSetApplicationInterface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationInterface_args)
        return this.equals((registerApplicationInterface_args)that);
      return false;
    }

    public boolean equals(registerApplicationInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationInterface = true && this.isSetApplicationInterface();
      boolean that_present_applicationInterface = true && that.isSetApplicationInterface();
      if (this_present_applicationInterface || that_present_applicationInterface) {
        if (!(this_present_applicationInterface && that_present_applicationInterface))
          return false;
        if (!this.applicationInterface.equals(that.applicationInterface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerApplicationInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationInterface()).compareTo(other.isSetApplicationInterface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInterface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterface, other.applicationInterface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerApplicationInterface_args(");
      boolean first = true;

      sb.append("applicationInterface:");
      if (this.applicationInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInterface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationInterface == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterface' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationInterface != null) {
        applicationInterface.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationInterface_argsStandardSchemeFactory implements SchemeFactory {
      public registerApplicationInterface_argsStandardScheme getScheme() {
        return new registerApplicationInterface_argsStandardScheme();
      }
    }

    private static class registerApplicationInterface_argsStandardScheme extends StandardScheme<registerApplicationInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_INTERFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
                struct.applicationInterface.read(iprot);
                struct.setApplicationInterfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationInterface != null) {
          oprot.writeFieldBegin(APPLICATION_INTERFACE_FIELD_DESC);
          struct.applicationInterface.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationInterface_argsTupleSchemeFactory implements SchemeFactory {
      public registerApplicationInterface_argsTupleScheme getScheme() {
        return new registerApplicationInterface_argsTupleScheme();
      }
    }

    private static class registerApplicationInterface_argsTupleScheme extends TupleScheme<registerApplicationInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.applicationInterface.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
        struct.applicationInterface.read(iprot);
        struct.setApplicationInterfaceIsSet(true);
      }
    }

  }

  public static class registerApplicationInterface_result implements org.apache.thrift.TBase<registerApplicationInterface_result, registerApplicationInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerApplicationInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerApplicationInterface_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationInterface_result.class, metaDataMap);
    }

    public registerApplicationInterface_result() {
    }

    public registerApplicationInterface_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationInterface_result(registerApplicationInterface_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public registerApplicationInterface_result deepCopy() {
      return new registerApplicationInterface_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerApplicationInterface_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public registerApplicationInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public registerApplicationInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public registerApplicationInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationInterface_result)
        return this.equals((registerApplicationInterface_result)that);
      return false;
    }

    public boolean equals(registerApplicationInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerApplicationInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerApplicationInterface_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationInterface_resultStandardSchemeFactory implements SchemeFactory {
      public registerApplicationInterface_resultStandardScheme getScheme() {
        return new registerApplicationInterface_resultStandardScheme();
      }
    }

    private static class registerApplicationInterface_resultStandardScheme extends StandardScheme<registerApplicationInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationInterface_resultTupleSchemeFactory implements SchemeFactory {
      public registerApplicationInterface_resultTupleScheme getScheme() {
        return new registerApplicationInterface_resultTupleScheme();
      }
    }

    private static class registerApplicationInterface_resultTupleScheme extends TupleScheme<registerApplicationInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getApplicationInterface_args implements org.apache.thrift.TBase<getApplicationInterface_args, getApplicationInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationInterface_args");

    private static final org.apache.thrift.protocol.TField APP_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationInterface_argsTupleSchemeFactory());
    }

    public String appInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_INTERFACE_ID((short)1, "appInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_INTERFACE_ID
            return APP_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("appInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationInterface_args.class, metaDataMap);
    }

    public getApplicationInterface_args() {
    }

    public getApplicationInterface_args(
      String appInterfaceId)
    {
      this();
      this.appInterfaceId = appInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationInterface_args(getApplicationInterface_args other) {
      if (other.isSetAppInterfaceId()) {
        this.appInterfaceId = other.appInterfaceId;
      }
    }

    public getApplicationInterface_args deepCopy() {
      return new getApplicationInterface_args(this);
    }

    @Override
    public void clear() {
      this.appInterfaceId = null;
    }

    public String getAppInterfaceId() {
      return this.appInterfaceId;
    }

    public getApplicationInterface_args setAppInterfaceId(String appInterfaceId) {
      this.appInterfaceId = appInterfaceId;
      return this;
    }

    public void unsetAppInterfaceId() {
      this.appInterfaceId = null;
    }

    /** Returns true if field appInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppInterfaceId() {
      return this.appInterfaceId != null;
    }

    public void setAppInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.appInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_INTERFACE_ID:
        if (value == null) {
          unsetAppInterfaceId();
        } else {
          setAppInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_INTERFACE_ID:
        return getAppInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_INTERFACE_ID:
        return isSetAppInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationInterface_args)
        return this.equals((getApplicationInterface_args)that);
      return false;
    }

    public boolean equals(getApplicationInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_appInterfaceId = true && this.isSetAppInterfaceId();
      boolean that_present_appInterfaceId = true && that.isSetAppInterfaceId();
      if (this_present_appInterfaceId || that_present_appInterfaceId) {
        if (!(this_present_appInterfaceId && that_present_appInterfaceId))
          return false;
        if (!this.appInterfaceId.equals(that.appInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppInterfaceId()).compareTo(other.isSetAppInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInterfaceId, other.appInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationInterface_args(");
      boolean first = true;

      sb.append("appInterfaceId:");
      if (this.appInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.appInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationInterface_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationInterface_argsStandardScheme getScheme() {
        return new getApplicationInterface_argsStandardScheme();
      }
    }

    private static class getApplicationInterface_argsStandardScheme extends StandardScheme<getApplicationInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appInterfaceId = iprot.readString();
                struct.setAppInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appInterfaceId != null) {
          oprot.writeFieldBegin(APP_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.appInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationInterface_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationInterface_argsTupleScheme getScheme() {
        return new getApplicationInterface_argsTupleScheme();
      }
    }

    private static class getApplicationInterface_argsTupleScheme extends TupleScheme<getApplicationInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appInterfaceId = iprot.readString();
        struct.setAppInterfaceIdIsSet(true);
      }
    }

  }

  public static class getApplicationInterface_result implements org.apache.thrift.TBase<getApplicationInterface_result, getApplicationInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationInterface_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationInterface_result.class, metaDataMap);
    }

    public getApplicationInterface_result() {
    }

    public getApplicationInterface_result(
      org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationInterface_result(getApplicationInterface_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getApplicationInterface_result deepCopy() {
      return new getApplicationInterface_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getSuccess() {
      return this.success;
    }

    public getApplicationInterface_result setSuccess(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getApplicationInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getApplicationInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getApplicationInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationInterface_result)
        return this.equals((getApplicationInterface_result)that);
      return false;
    }

    public boolean equals(getApplicationInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationInterface_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationInterface_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationInterface_resultStandardScheme getScheme() {
        return new getApplicationInterface_resultStandardScheme();
      }
    }

    private static class getApplicationInterface_resultStandardScheme extends StandardScheme<getApplicationInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationInterface_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationInterface_resultTupleScheme getScheme() {
        return new getApplicationInterface_resultTupleScheme();
      }
    }

    private static class getApplicationInterface_resultTupleScheme extends TupleScheme<getApplicationInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateApplicationInterface_args implements org.apache.thrift.TBase<updateApplicationInterface_args, updateApplicationInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationInterface_args");

    private static final org.apache.thrift.protocol.TField APP_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterface", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationInterface_argsTupleSchemeFactory());
    }

    public String appInterfaceId; // required
    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_INTERFACE_ID((short)1, "appInterfaceId"),
      APPLICATION_INTERFACE((short)2, "applicationInterface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_INTERFACE_ID
            return APP_INTERFACE_ID;
          case 2: // APPLICATION_INTERFACE
            return APPLICATION_INTERFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("appInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("applicationInterface", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationInterface_args.class, metaDataMap);
    }

    public updateApplicationInterface_args() {
    }

    public updateApplicationInterface_args(
      String appInterfaceId,
      org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface)
    {
      this();
      this.appInterfaceId = appInterfaceId;
      this.applicationInterface = applicationInterface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationInterface_args(updateApplicationInterface_args other) {
      if (other.isSetAppInterfaceId()) {
        this.appInterfaceId = other.appInterfaceId;
      }
      if (other.isSetApplicationInterface()) {
        this.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription(other.applicationInterface);
      }
    }

    public updateApplicationInterface_args deepCopy() {
      return new updateApplicationInterface_args(this);
    }

    @Override
    public void clear() {
      this.appInterfaceId = null;
      this.applicationInterface = null;
    }

    public String getAppInterfaceId() {
      return this.appInterfaceId;
    }

    public updateApplicationInterface_args setAppInterfaceId(String appInterfaceId) {
      this.appInterfaceId = appInterfaceId;
      return this;
    }

    public void unsetAppInterfaceId() {
      this.appInterfaceId = null;
    }

    /** Returns true if field appInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppInterfaceId() {
      return this.appInterfaceId != null;
    }

    public void setAppInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.appInterfaceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getApplicationInterface() {
      return this.applicationInterface;
    }

    public updateApplicationInterface_args setApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) {
      this.applicationInterface = applicationInterface;
      return this;
    }

    public void unsetApplicationInterface() {
      this.applicationInterface = null;
    }

    /** Returns true if field applicationInterface is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInterface() {
      return this.applicationInterface != null;
    }

    public void setApplicationInterfaceIsSet(boolean value) {
      if (!value) {
        this.applicationInterface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_INTERFACE_ID:
        if (value == null) {
          unsetAppInterfaceId();
        } else {
          setAppInterfaceId((String)value);
        }
        break;

      case APPLICATION_INTERFACE:
        if (value == null) {
          unsetApplicationInterface();
        } else {
          setApplicationInterface((org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_INTERFACE_ID:
        return getAppInterfaceId();

      case APPLICATION_INTERFACE:
        return getApplicationInterface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_INTERFACE_ID:
        return isSetAppInterfaceId();
      case APPLICATION_INTERFACE:
        return isSetApplicationInterface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationInterface_args)
        return this.equals((updateApplicationInterface_args)that);
      return false;
    }

    public boolean equals(updateApplicationInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_appInterfaceId = true && this.isSetAppInterfaceId();
      boolean that_present_appInterfaceId = true && that.isSetAppInterfaceId();
      if (this_present_appInterfaceId || that_present_appInterfaceId) {
        if (!(this_present_appInterfaceId && that_present_appInterfaceId))
          return false;
        if (!this.appInterfaceId.equals(that.appInterfaceId))
          return false;
      }

      boolean this_present_applicationInterface = true && this.isSetApplicationInterface();
      boolean that_present_applicationInterface = true && that.isSetApplicationInterface();
      if (this_present_applicationInterface || that_present_applicationInterface) {
        if (!(this_present_applicationInterface && that_present_applicationInterface))
          return false;
        if (!this.applicationInterface.equals(that.applicationInterface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateApplicationInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppInterfaceId()).compareTo(other.isSetAppInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInterfaceId, other.appInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationInterface()).compareTo(other.isSetApplicationInterface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInterface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterface, other.applicationInterface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationInterface_args(");
      boolean first = true;

      sb.append("appInterfaceId:");
      if (this.appInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.appInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationInterface:");
      if (this.applicationInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInterface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appInterfaceId' was not present! Struct: " + toString());
      }
      if (applicationInterface == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterface' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationInterface != null) {
        applicationInterface.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationInterface_argsStandardSchemeFactory implements SchemeFactory {
      public updateApplicationInterface_argsStandardScheme getScheme() {
        return new updateApplicationInterface_argsStandardScheme();
      }
    }

    private static class updateApplicationInterface_argsStandardScheme extends StandardScheme<updateApplicationInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appInterfaceId = iprot.readString();
                struct.setAppInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_INTERFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
                struct.applicationInterface.read(iprot);
                struct.setApplicationInterfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appInterfaceId != null) {
          oprot.writeFieldBegin(APP_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.appInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.applicationInterface != null) {
          oprot.writeFieldBegin(APPLICATION_INTERFACE_FIELD_DESC);
          struct.applicationInterface.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationInterface_argsTupleSchemeFactory implements SchemeFactory {
      public updateApplicationInterface_argsTupleScheme getScheme() {
        return new updateApplicationInterface_argsTupleScheme();
      }
    }

    private static class updateApplicationInterface_argsTupleScheme extends TupleScheme<updateApplicationInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appInterfaceId);
        struct.applicationInterface.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appInterfaceId = iprot.readString();
        struct.setAppInterfaceIdIsSet(true);
        struct.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
        struct.applicationInterface.read(iprot);
        struct.setApplicationInterfaceIsSet(true);
      }
    }

  }

  public static class updateApplicationInterface_result implements org.apache.thrift.TBase<updateApplicationInterface_result, updateApplicationInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationInterface_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationInterface_result.class, metaDataMap);
    }

    public updateApplicationInterface_result() {
    }

    public updateApplicationInterface_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationInterface_result(updateApplicationInterface_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateApplicationInterface_result deepCopy() {
      return new updateApplicationInterface_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateApplicationInterface_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateApplicationInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateApplicationInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateApplicationInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationInterface_result)
        return this.equals((updateApplicationInterface_result)that);
      return false;
    }

    public boolean equals(updateApplicationInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateApplicationInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationInterface_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationInterface_resultStandardSchemeFactory implements SchemeFactory {
      public updateApplicationInterface_resultStandardScheme getScheme() {
        return new updateApplicationInterface_resultStandardScheme();
      }
    }

    private static class updateApplicationInterface_resultStandardScheme extends StandardScheme<updateApplicationInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationInterface_resultTupleSchemeFactory implements SchemeFactory {
      public updateApplicationInterface_resultTupleScheme getScheme() {
        return new updateApplicationInterface_resultTupleScheme();
      }
    }

    private static class updateApplicationInterface_resultTupleScheme extends TupleScheme<updateApplicationInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deleteApplicationInterface_args implements org.apache.thrift.TBase<deleteApplicationInterface_args, deleteApplicationInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationInterface_args");

    private static final org.apache.thrift.protocol.TField APP_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationInterface_argsTupleSchemeFactory());
    }

    public String appInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_INTERFACE_ID((short)1, "appInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_INTERFACE_ID
            return APP_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("appInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationInterface_args.class, metaDataMap);
    }

    public deleteApplicationInterface_args() {
    }

    public deleteApplicationInterface_args(
      String appInterfaceId)
    {
      this();
      this.appInterfaceId = appInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationInterface_args(deleteApplicationInterface_args other) {
      if (other.isSetAppInterfaceId()) {
        this.appInterfaceId = other.appInterfaceId;
      }
    }

    public deleteApplicationInterface_args deepCopy() {
      return new deleteApplicationInterface_args(this);
    }

    @Override
    public void clear() {
      this.appInterfaceId = null;
    }

    public String getAppInterfaceId() {
      return this.appInterfaceId;
    }

    public deleteApplicationInterface_args setAppInterfaceId(String appInterfaceId) {
      this.appInterfaceId = appInterfaceId;
      return this;
    }

    public void unsetAppInterfaceId() {
      this.appInterfaceId = null;
    }

    /** Returns true if field appInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppInterfaceId() {
      return this.appInterfaceId != null;
    }

    public void setAppInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.appInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_INTERFACE_ID:
        if (value == null) {
          unsetAppInterfaceId();
        } else {
          setAppInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_INTERFACE_ID:
        return getAppInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_INTERFACE_ID:
        return isSetAppInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationInterface_args)
        return this.equals((deleteApplicationInterface_args)that);
      return false;
    }

    public boolean equals(deleteApplicationInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_appInterfaceId = true && this.isSetAppInterfaceId();
      boolean that_present_appInterfaceId = true && that.isSetAppInterfaceId();
      if (this_present_appInterfaceId || that_present_appInterfaceId) {
        if (!(this_present_appInterfaceId && that_present_appInterfaceId))
          return false;
        if (!this.appInterfaceId.equals(that.appInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteApplicationInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppInterfaceId()).compareTo(other.isSetAppInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInterfaceId, other.appInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationInterface_args(");
      boolean first = true;

      sb.append("appInterfaceId:");
      if (this.appInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.appInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationInterface_argsStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationInterface_argsStandardScheme getScheme() {
        return new deleteApplicationInterface_argsStandardScheme();
      }
    }

    private static class deleteApplicationInterface_argsStandardScheme extends StandardScheme<deleteApplicationInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appInterfaceId = iprot.readString();
                struct.setAppInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appInterfaceId != null) {
          oprot.writeFieldBegin(APP_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.appInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationInterface_argsTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationInterface_argsTupleScheme getScheme() {
        return new deleteApplicationInterface_argsTupleScheme();
      }
    }

    private static class deleteApplicationInterface_argsTupleScheme extends TupleScheme<deleteApplicationInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appInterfaceId = iprot.readString();
        struct.setAppInterfaceIdIsSet(true);
      }
    }

  }

  public static class deleteApplicationInterface_result implements org.apache.thrift.TBase<deleteApplicationInterface_result, deleteApplicationInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationInterface_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationInterface_result.class, metaDataMap);
    }

    public deleteApplicationInterface_result() {
    }

    public deleteApplicationInterface_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationInterface_result(deleteApplicationInterface_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public deleteApplicationInterface_result deepCopy() {
      return new deleteApplicationInterface_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteApplicationInterface_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deleteApplicationInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public deleteApplicationInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public deleteApplicationInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationInterface_result)
        return this.equals((deleteApplicationInterface_result)that);
      return false;
    }

    public boolean equals(deleteApplicationInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteApplicationInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationInterface_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationInterface_resultStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationInterface_resultStandardScheme getScheme() {
        return new deleteApplicationInterface_resultStandardScheme();
      }
    }

    private static class deleteApplicationInterface_resultStandardScheme extends StandardScheme<deleteApplicationInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationInterface_resultTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationInterface_resultTupleScheme getScheme() {
        return new deleteApplicationInterface_resultTupleScheme();
      }
    }

    private static class deleteApplicationInterface_resultTupleScheme extends TupleScheme<deleteApplicationInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getApplicationInputs_args implements org.apache.thrift.TBase<getApplicationInputs_args, getApplicationInputs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationInputs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationInputs_args");

    private static final org.apache.thrift.protocol.TField APP_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationInputs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationInputs_argsTupleSchemeFactory());
    }

    public String appInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_INTERFACE_ID((short)1, "appInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_INTERFACE_ID
            return APP_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("appInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationInputs_args.class, metaDataMap);
    }

    public getApplicationInputs_args() {
    }

    public getApplicationInputs_args(
      String appInterfaceId)
    {
      this();
      this.appInterfaceId = appInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationInputs_args(getApplicationInputs_args other) {
      if (other.isSetAppInterfaceId()) {
        this.appInterfaceId = other.appInterfaceId;
      }
    }

    public getApplicationInputs_args deepCopy() {
      return new getApplicationInputs_args(this);
    }

    @Override
    public void clear() {
      this.appInterfaceId = null;
    }

    public String getAppInterfaceId() {
      return this.appInterfaceId;
    }

    public getApplicationInputs_args setAppInterfaceId(String appInterfaceId) {
      this.appInterfaceId = appInterfaceId;
      return this;
    }

    public void unsetAppInterfaceId() {
      this.appInterfaceId = null;
    }

    /** Returns true if field appInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppInterfaceId() {
      return this.appInterfaceId != null;
    }

    public void setAppInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.appInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_INTERFACE_ID:
        if (value == null) {
          unsetAppInterfaceId();
        } else {
          setAppInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_INTERFACE_ID:
        return getAppInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_INTERFACE_ID:
        return isSetAppInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationInputs_args)
        return this.equals((getApplicationInputs_args)that);
      return false;
    }

    public boolean equals(getApplicationInputs_args that) {
      if (that == null)
        return false;

      boolean this_present_appInterfaceId = true && this.isSetAppInterfaceId();
      boolean that_present_appInterfaceId = true && that.isSetAppInterfaceId();
      if (this_present_appInterfaceId || that_present_appInterfaceId) {
        if (!(this_present_appInterfaceId && that_present_appInterfaceId))
          return false;
        if (!this.appInterfaceId.equals(that.appInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationInputs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppInterfaceId()).compareTo(other.isSetAppInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInterfaceId, other.appInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationInputs_args(");
      boolean first = true;

      sb.append("appInterfaceId:");
      if (this.appInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.appInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationInputs_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationInputs_argsStandardScheme getScheme() {
        return new getApplicationInputs_argsStandardScheme();
      }
    }

    private static class getApplicationInputs_argsStandardScheme extends StandardScheme<getApplicationInputs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationInputs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appInterfaceId = iprot.readString();
                struct.setAppInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationInputs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appInterfaceId != null) {
          oprot.writeFieldBegin(APP_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.appInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationInputs_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationInputs_argsTupleScheme getScheme() {
        return new getApplicationInputs_argsTupleScheme();
      }
    }

    private static class getApplicationInputs_argsTupleScheme extends TupleScheme<getApplicationInputs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationInputs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationInputs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appInterfaceId = iprot.readString();
        struct.setAppInterfaceIdIsSet(true);
      }
    }

  }

  public static class getApplicationInputs_result implements org.apache.thrift.TBase<getApplicationInputs_result, getApplicationInputs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationInputs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationInputs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationInputs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationInputs_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationInputs_result.class, metaDataMap);
    }

    public getApplicationInputs_result() {
    }

    public getApplicationInputs_result(
      List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationInputs_result(getApplicationInputs_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> __this__success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>(other.success.size());
        for (org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getApplicationInputs_result deepCopy() {
      return new getApplicationInputs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> getSuccess() {
      return this.success;
    }

    public getApplicationInputs_result setSuccess(List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getApplicationInputs_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getApplicationInputs_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getApplicationInputs_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationInputs_result)
        return this.equals((getApplicationInputs_result)that);
      return false;
    }

    public boolean equals(getApplicationInputs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationInputs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationInputs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationInputs_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationInputs_resultStandardScheme getScheme() {
        return new getApplicationInputs_resultStandardScheme();
      }
    }

    private static class getApplicationInputs_resultStandardScheme extends StandardScheme<getApplicationInputs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationInputs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType _elem92;
                    _elem92 = new org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationInputs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationInputs_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationInputs_resultTupleScheme getScheme() {
        return new getApplicationInputs_resultTupleScheme();
      }
    }

    private static class getApplicationInputs_resultTupleScheme extends TupleScheme<getApplicationInputs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationInputs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationInputs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType _elem97;
              _elem97 = new org.apache.airavata.model.appcatalog.appinterface.InputDataObjectType();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getApplicationOutputs_args implements org.apache.thrift.TBase<getApplicationOutputs_args, getApplicationOutputs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationOutputs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationOutputs_args");

    private static final org.apache.thrift.protocol.TField APP_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationOutputs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationOutputs_argsTupleSchemeFactory());
    }

    public String appInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_INTERFACE_ID((short)1, "appInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_INTERFACE_ID
            return APP_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("appInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationOutputs_args.class, metaDataMap);
    }

    public getApplicationOutputs_args() {
    }

    public getApplicationOutputs_args(
      String appInterfaceId)
    {
      this();
      this.appInterfaceId = appInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationOutputs_args(getApplicationOutputs_args other) {
      if (other.isSetAppInterfaceId()) {
        this.appInterfaceId = other.appInterfaceId;
      }
    }

    public getApplicationOutputs_args deepCopy() {
      return new getApplicationOutputs_args(this);
    }

    @Override
    public void clear() {
      this.appInterfaceId = null;
    }

    public String getAppInterfaceId() {
      return this.appInterfaceId;
    }

    public getApplicationOutputs_args setAppInterfaceId(String appInterfaceId) {
      this.appInterfaceId = appInterfaceId;
      return this;
    }

    public void unsetAppInterfaceId() {
      this.appInterfaceId = null;
    }

    /** Returns true if field appInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppInterfaceId() {
      return this.appInterfaceId != null;
    }

    public void setAppInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.appInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_INTERFACE_ID:
        if (value == null) {
          unsetAppInterfaceId();
        } else {
          setAppInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_INTERFACE_ID:
        return getAppInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_INTERFACE_ID:
        return isSetAppInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationOutputs_args)
        return this.equals((getApplicationOutputs_args)that);
      return false;
    }

    public boolean equals(getApplicationOutputs_args that) {
      if (that == null)
        return false;

      boolean this_present_appInterfaceId = true && this.isSetAppInterfaceId();
      boolean that_present_appInterfaceId = true && that.isSetAppInterfaceId();
      if (this_present_appInterfaceId || that_present_appInterfaceId) {
        if (!(this_present_appInterfaceId && that_present_appInterfaceId))
          return false;
        if (!this.appInterfaceId.equals(that.appInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationOutputs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppInterfaceId()).compareTo(other.isSetAppInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInterfaceId, other.appInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationOutputs_args(");
      boolean first = true;

      sb.append("appInterfaceId:");
      if (this.appInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.appInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationOutputs_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationOutputs_argsStandardScheme getScheme() {
        return new getApplicationOutputs_argsStandardScheme();
      }
    }

    private static class getApplicationOutputs_argsStandardScheme extends StandardScheme<getApplicationOutputs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationOutputs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appInterfaceId = iprot.readString();
                struct.setAppInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationOutputs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appInterfaceId != null) {
          oprot.writeFieldBegin(APP_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.appInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationOutputs_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationOutputs_argsTupleScheme getScheme() {
        return new getApplicationOutputs_argsTupleScheme();
      }
    }

    private static class getApplicationOutputs_argsTupleScheme extends TupleScheme<getApplicationOutputs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationOutputs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationOutputs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appInterfaceId = iprot.readString();
        struct.setAppInterfaceIdIsSet(true);
      }
    }

  }

  public static class getApplicationOutputs_result implements org.apache.thrift.TBase<getApplicationOutputs_result, getApplicationOutputs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationOutputs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationOutputs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationOutputs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationOutputs_resultTupleSchemeFactory());
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationOutputs_result.class, metaDataMap);
    }

    public getApplicationOutputs_result() {
    }

    public getApplicationOutputs_result(
      List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationOutputs_result(getApplicationOutputs_result other) {
      if (other.isSetSuccess()) {
        List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> __this__success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>(other.success.size());
        for (org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType other_element : other.success) {
          __this__success.add(new org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getApplicationOutputs_result deepCopy() {
      return new getApplicationOutputs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>();
      }
      this.success.add(elem);
    }

    public List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> getSuccess() {
      return this.success;
    }

    public getApplicationOutputs_result setSuccess(List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getApplicationOutputs_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getApplicationOutputs_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getApplicationOutputs_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationOutputs_result)
        return this.equals((getApplicationOutputs_result)that);
      return false;
    }

    public boolean equals(getApplicationOutputs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationOutputs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationOutputs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationOutputs_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationOutputs_resultStandardScheme getScheme() {
        return new getApplicationOutputs_resultStandardScheme();
      }
    }

    private static class getApplicationOutputs_resultStandardScheme extends StandardScheme<getApplicationOutputs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationOutputs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>(_list98.size);
                  for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                  {
                    org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType _elem100;
                    _elem100 = new org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType();
                    _elem100.read(iprot);
                    struct.success.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationOutputs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationOutputs_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationOutputs_resultTupleScheme getScheme() {
        return new getApplicationOutputs_resultTupleScheme();
      }
    }

    private static class getApplicationOutputs_resultTupleScheme extends TupleScheme<getApplicationOutputs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationOutputs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationOutputs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType _elem105;
              _elem105 = new org.apache.airavata.model.appcatalog.appinterface.OutputDataObjectType();
              _elem105.read(iprot);
              struct.success.add(_elem105);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class registerComputeResource_args implements org.apache.thrift.TBase<registerComputeResource_args, registerComputeResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerComputeResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerComputeResource_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceDescription", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerComputeResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerComputeResource_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_DESCRIPTION((short)1, "computeResourceDescription");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_DESCRIPTION
            return COMPUTE_RESOURCE_DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("computeResourceDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerComputeResource_args.class, metaDataMap);
    }

    public registerComputeResource_args() {
    }

    public registerComputeResource_args(
      org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription)
    {
      this();
      this.computeResourceDescription = computeResourceDescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerComputeResource_args(registerComputeResource_args other) {
      if (other.isSetComputeResourceDescription()) {
        this.computeResourceDescription = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription(other.computeResourceDescription);
      }
    }

    public registerComputeResource_args deepCopy() {
      return new registerComputeResource_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceDescription = null;
    }

    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription getComputeResourceDescription() {
      return this.computeResourceDescription;
    }

    public registerComputeResource_args setComputeResourceDescription(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) {
      this.computeResourceDescription = computeResourceDescription;
      return this;
    }

    public void unsetComputeResourceDescription() {
      this.computeResourceDescription = null;
    }

    /** Returns true if field computeResourceDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceDescription() {
      return this.computeResourceDescription != null;
    }

    public void setComputeResourceDescriptionIsSet(boolean value) {
      if (!value) {
        this.computeResourceDescription = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_DESCRIPTION:
        if (value == null) {
          unsetComputeResourceDescription();
        } else {
          setComputeResourceDescription((org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_DESCRIPTION:
        return getComputeResourceDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_DESCRIPTION:
        return isSetComputeResourceDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerComputeResource_args)
        return this.equals((registerComputeResource_args)that);
      return false;
    }

    public boolean equals(registerComputeResource_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceDescription = true && this.isSetComputeResourceDescription();
      boolean that_present_computeResourceDescription = true && that.isSetComputeResourceDescription();
      if (this_present_computeResourceDescription || that_present_computeResourceDescription) {
        if (!(this_present_computeResourceDescription && that_present_computeResourceDescription))
          return false;
        if (!this.computeResourceDescription.equals(that.computeResourceDescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerComputeResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceDescription()).compareTo(other.isSetComputeResourceDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceDescription, other.computeResourceDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerComputeResource_args(");
      boolean first = true;

      sb.append("computeResourceDescription:");
      if (this.computeResourceDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceDescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceDescription == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceDescription' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (computeResourceDescription != null) {
        computeResourceDescription.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerComputeResource_argsStandardSchemeFactory implements SchemeFactory {
      public registerComputeResource_argsStandardScheme getScheme() {
        return new registerComputeResource_argsStandardScheme();
      }
    }

    private static class registerComputeResource_argsStandardScheme extends StandardScheme<registerComputeResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerComputeResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.computeResourceDescription = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription();
                struct.computeResourceDescription.read(iprot);
                struct.setComputeResourceDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerComputeResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceDescription != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC);
          struct.computeResourceDescription.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerComputeResource_argsTupleSchemeFactory implements SchemeFactory {
      public registerComputeResource_argsTupleScheme getScheme() {
        return new registerComputeResource_argsTupleScheme();
      }
    }

    private static class registerComputeResource_argsTupleScheme extends TupleScheme<registerComputeResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.computeResourceDescription.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceDescription = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription();
        struct.computeResourceDescription.read(iprot);
        struct.setComputeResourceDescriptionIsSet(true);
      }
    }

  }

  public static class registerComputeResource_result implements org.apache.thrift.TBase<registerComputeResource_result, registerComputeResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerComputeResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerComputeResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerComputeResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerComputeResource_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerComputeResource_result.class, metaDataMap);
    }

    public registerComputeResource_result() {
    }

    public registerComputeResource_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerComputeResource_result(registerComputeResource_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public registerComputeResource_result deepCopy() {
      return new registerComputeResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerComputeResource_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public registerComputeResource_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public registerComputeResource_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public registerComputeResource_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerComputeResource_result)
        return this.equals((registerComputeResource_result)that);
      return false;
    }

    public boolean equals(registerComputeResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerComputeResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerComputeResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerComputeResource_resultStandardSchemeFactory implements SchemeFactory {
      public registerComputeResource_resultStandardScheme getScheme() {
        return new registerComputeResource_resultStandardScheme();
      }
    }

    private static class registerComputeResource_resultStandardScheme extends StandardScheme<registerComputeResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerComputeResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerComputeResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerComputeResource_resultTupleSchemeFactory implements SchemeFactory {
      public registerComputeResource_resultTupleScheme getScheme() {
        return new registerComputeResource_resultTupleScheme();
      }
    }

    private static class registerComputeResource_resultTupleScheme extends TupleScheme<registerComputeResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getComputeResource_args implements org.apache.thrift.TBase<getComputeResource_args, getComputeResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getComputeResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComputeResource_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComputeResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComputeResource_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComputeResource_args.class, metaDataMap);
    }

    public getComputeResource_args() {
    }

    public getComputeResource_args(
      String computeResourceId)
    {
      this();
      this.computeResourceId = computeResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComputeResource_args(getComputeResource_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
    }

    public getComputeResource_args deepCopy() {
      return new getComputeResource_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public getComputeResource_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComputeResource_args)
        return this.equals((getComputeResource_args)that);
      return false;
    }

    public boolean equals(getComputeResource_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getComputeResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComputeResource_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComputeResource_argsStandardSchemeFactory implements SchemeFactory {
      public getComputeResource_argsStandardScheme getScheme() {
        return new getComputeResource_argsStandardScheme();
      }
    }

    private static class getComputeResource_argsStandardScheme extends StandardScheme<getComputeResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComputeResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComputeResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComputeResource_argsTupleSchemeFactory implements SchemeFactory {
      public getComputeResource_argsTupleScheme getScheme() {
        return new getComputeResource_argsTupleScheme();
      }
    }

    private static class getComputeResource_argsTupleScheme extends TupleScheme<getComputeResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
      }
    }

  }

  public static class getComputeResource_result implements org.apache.thrift.TBase<getComputeResource_result, getComputeResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getComputeResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComputeResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComputeResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComputeResource_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComputeResource_result.class, metaDataMap);
    }

    public getComputeResource_result() {
    }

    public getComputeResource_result(
      org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComputeResource_result(getComputeResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getComputeResource_result deepCopy() {
      return new getComputeResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription getSuccess() {
      return this.success;
    }

    public getComputeResource_result setSuccess(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getComputeResource_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getComputeResource_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getComputeResource_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComputeResource_result)
        return this.equals((getComputeResource_result)that);
      return false;
    }

    public boolean equals(getComputeResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getComputeResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComputeResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComputeResource_resultStandardSchemeFactory implements SchemeFactory {
      public getComputeResource_resultStandardScheme getScheme() {
        return new getComputeResource_resultStandardScheme();
      }
    }

    private static class getComputeResource_resultStandardScheme extends StandardScheme<getComputeResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComputeResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComputeResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComputeResource_resultTupleSchemeFactory implements SchemeFactory {
      public getComputeResource_resultTupleScheme getScheme() {
        return new getComputeResource_resultTupleScheme();
      }
    }

    private static class getComputeResource_resultTupleScheme extends TupleScheme<getComputeResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateComputeResource_args implements org.apache.thrift.TBase<updateComputeResource_args, updateComputeResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateComputeResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateComputeResource_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceDescription", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateComputeResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateComputeResource_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      COMPUTE_RESOURCE_DESCRIPTION((short)2, "computeResourceDescription");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // COMPUTE_RESOURCE_DESCRIPTION
            return COMPUTE_RESOURCE_DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPUTE_RESOURCE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("computeResourceDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateComputeResource_args.class, metaDataMap);
    }

    public updateComputeResource_args() {
    }

    public updateComputeResource_args(
      String computeResourceId,
      org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.computeResourceDescription = computeResourceDescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateComputeResource_args(updateComputeResource_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      if (other.isSetComputeResourceDescription()) {
        this.computeResourceDescription = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription(other.computeResourceDescription);
      }
    }

    public updateComputeResource_args deepCopy() {
      return new updateComputeResource_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      this.computeResourceDescription = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public updateComputeResource_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription getComputeResourceDescription() {
      return this.computeResourceDescription;
    }

    public updateComputeResource_args setComputeResourceDescription(org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription computeResourceDescription) {
      this.computeResourceDescription = computeResourceDescription;
      return this;
    }

    public void unsetComputeResourceDescription() {
      this.computeResourceDescription = null;
    }

    /** Returns true if field computeResourceDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceDescription() {
      return this.computeResourceDescription != null;
    }

    public void setComputeResourceDescriptionIsSet(boolean value) {
      if (!value) {
        this.computeResourceDescription = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case COMPUTE_RESOURCE_DESCRIPTION:
        if (value == null) {
          unsetComputeResourceDescription();
        } else {
          setComputeResourceDescription((org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case COMPUTE_RESOURCE_DESCRIPTION:
        return getComputeResourceDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case COMPUTE_RESOURCE_DESCRIPTION:
        return isSetComputeResourceDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateComputeResource_args)
        return this.equals((updateComputeResource_args)that);
      return false;
    }

    public boolean equals(updateComputeResource_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_computeResourceDescription = true && this.isSetComputeResourceDescription();
      boolean that_present_computeResourceDescription = true && that.isSetComputeResourceDescription();
      if (this_present_computeResourceDescription || that_present_computeResourceDescription) {
        if (!(this_present_computeResourceDescription && that_present_computeResourceDescription))
          return false;
        if (!this.computeResourceDescription.equals(that.computeResourceDescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateComputeResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComputeResourceDescription()).compareTo(other.isSetComputeResourceDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceDescription, other.computeResourceDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateComputeResource_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("computeResourceDescription:");
      if (this.computeResourceDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceDescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      if (computeResourceDescription == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceDescription' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (computeResourceDescription != null) {
        computeResourceDescription.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateComputeResource_argsStandardSchemeFactory implements SchemeFactory {
      public updateComputeResource_argsStandardScheme getScheme() {
        return new updateComputeResource_argsStandardScheme();
      }
    }

    private static class updateComputeResource_argsStandardScheme extends StandardScheme<updateComputeResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateComputeResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPUTE_RESOURCE_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.computeResourceDescription = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription();
                struct.computeResourceDescription.read(iprot);
                struct.setComputeResourceDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateComputeResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        if (struct.computeResourceDescription != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC);
          struct.computeResourceDescription.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateComputeResource_argsTupleSchemeFactory implements SchemeFactory {
      public updateComputeResource_argsTupleScheme getScheme() {
        return new updateComputeResource_argsTupleScheme();
      }
    }

    private static class updateComputeResource_argsTupleScheme extends TupleScheme<updateComputeResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        struct.computeResourceDescription.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.computeResourceDescription = new org.apache.airavata.model.appcatalog.computeresource.ComputeResourceDescription();
        struct.computeResourceDescription.read(iprot);
        struct.setComputeResourceDescriptionIsSet(true);
      }
    }

  }

  public static class updateComputeResource_result implements org.apache.thrift.TBase<updateComputeResource_result, updateComputeResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateComputeResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateComputeResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateComputeResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateComputeResource_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateComputeResource_result.class, metaDataMap);
    }

    public updateComputeResource_result() {
    }

    public updateComputeResource_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateComputeResource_result(updateComputeResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateComputeResource_result deepCopy() {
      return new updateComputeResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateComputeResource_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateComputeResource_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateComputeResource_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateComputeResource_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateComputeResource_result)
        return this.equals((updateComputeResource_result)that);
      return false;
    }

    public boolean equals(updateComputeResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateComputeResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateComputeResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateComputeResource_resultStandardSchemeFactory implements SchemeFactory {
      public updateComputeResource_resultStandardScheme getScheme() {
        return new updateComputeResource_resultStandardScheme();
      }
    }

    private static class updateComputeResource_resultStandardScheme extends StandardScheme<updateComputeResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateComputeResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateComputeResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateComputeResource_resultTupleSchemeFactory implements SchemeFactory {
      public updateComputeResource_resultTupleScheme getScheme() {
        return new updateComputeResource_resultTupleScheme();
      }
    }

    private static class updateComputeResource_resultTupleScheme extends TupleScheme<updateComputeResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deleteComputeResource_args implements org.apache.thrift.TBase<deleteComputeResource_args, deleteComputeResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteComputeResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteComputeResource_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteComputeResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteComputeResource_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteComputeResource_args.class, metaDataMap);
    }

    public deleteComputeResource_args() {
    }

    public deleteComputeResource_args(
      String computeResourceId)
    {
      this();
      this.computeResourceId = computeResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteComputeResource_args(deleteComputeResource_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
    }

    public deleteComputeResource_args deepCopy() {
      return new deleteComputeResource_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public deleteComputeResource_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteComputeResource_args)
        return this.equals((deleteComputeResource_args)that);
      return false;
    }

    public boolean equals(deleteComputeResource_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteComputeResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteComputeResource_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteComputeResource_argsStandardSchemeFactory implements SchemeFactory {
      public deleteComputeResource_argsStandardScheme getScheme() {
        return new deleteComputeResource_argsStandardScheme();
      }
    }

    private static class deleteComputeResource_argsStandardScheme extends StandardScheme<deleteComputeResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteComputeResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteComputeResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteComputeResource_argsTupleSchemeFactory implements SchemeFactory {
      public deleteComputeResource_argsTupleScheme getScheme() {
        return new deleteComputeResource_argsTupleScheme();
      }
    }

    private static class deleteComputeResource_argsTupleScheme extends TupleScheme<deleteComputeResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteComputeResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
      }
    }

  }

  public static class deleteComputeResource_result implements org.apache.thrift.TBase<deleteComputeResource_result, deleteComputeResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteComputeResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteComputeResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteComputeResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteComputeResource_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteComputeResource_result.class, metaDataMap);
    }

    public deleteComputeResource_result() {
    }

    public deleteComputeResource_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteComputeResource_result(deleteComputeResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public deleteComputeResource_result deepCopy() {
      return new deleteComputeResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteComputeResource_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deleteComputeResource_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public deleteComputeResource_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public deleteComputeResource_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteComputeResource_result)
        return this.equals((deleteComputeResource_result)that);
      return false;
    }

    public boolean equals(deleteComputeResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteComputeResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteComputeResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteComputeResource_resultStandardSchemeFactory implements SchemeFactory {
      public deleteComputeResource_resultStandardScheme getScheme() {
        return new deleteComputeResource_resultStandardScheme();
      }
    }

    private static class deleteComputeResource_resultStandardScheme extends StandardScheme<deleteComputeResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteComputeResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteComputeResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteComputeResource_resultTupleSchemeFactory implements SchemeFactory {
      public deleteComputeResource_resultTupleScheme getScheme() {
        return new deleteComputeResource_resultTupleScheme();
      }
    }

    private static class deleteComputeResource_resultTupleScheme extends TupleScheme<deleteComputeResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteComputeResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addLocalSubmissionDetails_args implements org.apache.thrift.TBase<addLocalSubmissionDetails_args, addLocalSubmissionDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<addLocalSubmissionDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLocalSubmissionDetails_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIORITY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("priorityOrder", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LOCAL_SUBMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("localSubmission", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLocalSubmissionDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLocalSubmissionDetails_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public int priorityOrder; // required
    public org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      PRIORITY_ORDER((short)2, "priorityOrder"),
      LOCAL_SUBMISSION((short)3, "localSubmission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // PRIORITY_ORDER
            return PRIORITY_ORDER;
          case 3: // LOCAL_SUBMISSION
            return LOCAL_SUBMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIORITYORDER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIORITY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("priorityOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOCAL_SUBMISSION, new org.apache.thrift.meta_data.FieldMetaData("localSubmission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLocalSubmissionDetails_args.class, metaDataMap);
    }

    public addLocalSubmissionDetails_args() {
    }

    public addLocalSubmissionDetails_args(
      String computeResourceId,
      int priorityOrder,
      org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      this.localSubmission = localSubmission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLocalSubmissionDetails_args(addLocalSubmissionDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      this.priorityOrder = other.priorityOrder;
      if (other.isSetLocalSubmission()) {
        this.localSubmission = new org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission(other.localSubmission);
      }
    }

    public addLocalSubmissionDetails_args deepCopy() {
      return new addLocalSubmissionDetails_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      setPriorityOrderIsSet(false);
      this.priorityOrder = 0;
      this.localSubmission = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addLocalSubmissionDetails_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public int getPriorityOrder() {
      return this.priorityOrder;
    }

    public addLocalSubmissionDetails_args setPriorityOrder(int priorityOrder) {
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      return this;
    }

    public void unsetPriorityOrder() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    /** Returns true if field priorityOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPriorityOrder() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    public void setPriorityOrderIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID, value);
    }

    public org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission getLocalSubmission() {
      return this.localSubmission;
    }

    public addLocalSubmissionDetails_args setLocalSubmission(org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) {
      this.localSubmission = localSubmission;
      return this;
    }

    public void unsetLocalSubmission() {
      this.localSubmission = null;
    }

    /** Returns true if field localSubmission is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalSubmission() {
      return this.localSubmission != null;
    }

    public void setLocalSubmissionIsSet(boolean value) {
      if (!value) {
        this.localSubmission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case PRIORITY_ORDER:
        if (value == null) {
          unsetPriorityOrder();
        } else {
          setPriorityOrder((Integer)value);
        }
        break;

      case LOCAL_SUBMISSION:
        if (value == null) {
          unsetLocalSubmission();
        } else {
          setLocalSubmission((org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case PRIORITY_ORDER:
        return Integer.valueOf(getPriorityOrder());

      case LOCAL_SUBMISSION:
        return getLocalSubmission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case PRIORITY_ORDER:
        return isSetPriorityOrder();
      case LOCAL_SUBMISSION:
        return isSetLocalSubmission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLocalSubmissionDetails_args)
        return this.equals((addLocalSubmissionDetails_args)that);
      return false;
    }

    public boolean equals(addLocalSubmissionDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_priorityOrder = true;
      boolean that_present_priorityOrder = true;
      if (this_present_priorityOrder || that_present_priorityOrder) {
        if (!(this_present_priorityOrder && that_present_priorityOrder))
          return false;
        if (this.priorityOrder != that.priorityOrder)
          return false;
      }

      boolean this_present_localSubmission = true && this.isSetLocalSubmission();
      boolean that_present_localSubmission = true && that.isSetLocalSubmission();
      if (this_present_localSubmission || that_present_localSubmission) {
        if (!(this_present_localSubmission && that_present_localSubmission))
          return false;
        if (!this.localSubmission.equals(that.localSubmission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addLocalSubmissionDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriorityOrder()).compareTo(other.isSetPriorityOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriorityOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorityOrder, other.priorityOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocalSubmission()).compareTo(other.isSetLocalSubmission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalSubmission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localSubmission, other.localSubmission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLocalSubmissionDetails_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priorityOrder:");
      sb.append(this.priorityOrder);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localSubmission:");
      if (this.localSubmission == null) {
        sb.append("null");
      } else {
        sb.append(this.localSubmission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'priorityOrder' because it's a primitive and you chose the non-beans generator.
      if (localSubmission == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'localSubmission' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (localSubmission != null) {
        localSubmission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLocalSubmissionDetails_argsStandardSchemeFactory implements SchemeFactory {
      public addLocalSubmissionDetails_argsStandardScheme getScheme() {
        return new addLocalSubmissionDetails_argsStandardScheme();
      }
    }

    private static class addLocalSubmissionDetails_argsStandardScheme extends StandardScheme<addLocalSubmissionDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIORITY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priorityOrder = iprot.readI32();
                struct.setPriorityOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCAL_SUBMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.localSubmission = new org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission();
                struct.localSubmission.read(iprot);
                struct.setLocalSubmissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPriorityOrder()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'priorityOrder' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIORITY_ORDER_FIELD_DESC);
        oprot.writeI32(struct.priorityOrder);
        oprot.writeFieldEnd();
        if (struct.localSubmission != null) {
          oprot.writeFieldBegin(LOCAL_SUBMISSION_FIELD_DESC);
          struct.localSubmission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLocalSubmissionDetails_argsTupleSchemeFactory implements SchemeFactory {
      public addLocalSubmissionDetails_argsTupleScheme getScheme() {
        return new addLocalSubmissionDetails_argsTupleScheme();
      }
    }

    private static class addLocalSubmissionDetails_argsTupleScheme extends TupleScheme<addLocalSubmissionDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        oprot.writeI32(struct.priorityOrder);
        struct.localSubmission.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.priorityOrder = iprot.readI32();
        struct.setPriorityOrderIsSet(true);
        struct.localSubmission = new org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission();
        struct.localSubmission.read(iprot);
        struct.setLocalSubmissionIsSet(true);
      }
    }

  }

  public static class addLocalSubmissionDetails_result implements org.apache.thrift.TBase<addLocalSubmissionDetails_result, addLocalSubmissionDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<addLocalSubmissionDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLocalSubmissionDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLocalSubmissionDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLocalSubmissionDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLocalSubmissionDetails_result.class, metaDataMap);
    }

    public addLocalSubmissionDetails_result() {
    }

    public addLocalSubmissionDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLocalSubmissionDetails_result(addLocalSubmissionDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addLocalSubmissionDetails_result deepCopy() {
      return new addLocalSubmissionDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addLocalSubmissionDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addLocalSubmissionDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addLocalSubmissionDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addLocalSubmissionDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLocalSubmissionDetails_result)
        return this.equals((addLocalSubmissionDetails_result)that);
      return false;
    }

    public boolean equals(addLocalSubmissionDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addLocalSubmissionDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLocalSubmissionDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLocalSubmissionDetails_resultStandardSchemeFactory implements SchemeFactory {
      public addLocalSubmissionDetails_resultStandardScheme getScheme() {
        return new addLocalSubmissionDetails_resultStandardScheme();
      }
    }

    private static class addLocalSubmissionDetails_resultStandardScheme extends StandardScheme<addLocalSubmissionDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLocalSubmissionDetails_resultTupleSchemeFactory implements SchemeFactory {
      public addLocalSubmissionDetails_resultTupleScheme getScheme() {
        return new addLocalSubmissionDetails_resultTupleScheme();
      }
    }

    private static class addLocalSubmissionDetails_resultTupleScheme extends TupleScheme<addLocalSubmissionDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateLocalSubmissionDetails_args implements org.apache.thrift.TBase<updateLocalSubmissionDetails_args, updateLocalSubmissionDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLocalSubmissionDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLocalSubmissionDetails_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCAL_SUBMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("localSubmission", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLocalSubmissionDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLocalSubmissionDetails_argsTupleSchemeFactory());
    }

    public String jobSubmissionInterfaceId; // required
    public org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_INTERFACE_ID((short)1, "jobSubmissionInterfaceId"),
      LOCAL_SUBMISSION((short)2, "localSubmission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_INTERFACE_ID
            return JOB_SUBMISSION_INTERFACE_ID;
          case 2: // LOCAL_SUBMISSION
            return LOCAL_SUBMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCAL_SUBMISSION, new org.apache.thrift.meta_data.FieldMetaData("localSubmission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLocalSubmissionDetails_args.class, metaDataMap);
    }

    public updateLocalSubmissionDetails_args() {
    }

    public updateLocalSubmissionDetails_args(
      String jobSubmissionInterfaceId,
      org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission)
    {
      this();
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      this.localSubmission = localSubmission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLocalSubmissionDetails_args(updateLocalSubmissionDetails_args other) {
      if (other.isSetJobSubmissionInterfaceId()) {
        this.jobSubmissionInterfaceId = other.jobSubmissionInterfaceId;
      }
      if (other.isSetLocalSubmission()) {
        this.localSubmission = new org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission(other.localSubmission);
      }
    }

    public updateLocalSubmissionDetails_args deepCopy() {
      return new updateLocalSubmissionDetails_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionInterfaceId = null;
      this.localSubmission = null;
    }

    public String getJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId;
    }

    public updateLocalSubmissionDetails_args setJobSubmissionInterfaceId(String jobSubmissionInterfaceId) {
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      return this;
    }

    public void unsetJobSubmissionInterfaceId() {
      this.jobSubmissionInterfaceId = null;
    }

    /** Returns true if field jobSubmissionInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId != null;
    }

    public void setJobSubmissionInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionInterfaceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission getLocalSubmission() {
      return this.localSubmission;
    }

    public updateLocalSubmissionDetails_args setLocalSubmission(org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission localSubmission) {
      this.localSubmission = localSubmission;
      return this;
    }

    public void unsetLocalSubmission() {
      this.localSubmission = null;
    }

    /** Returns true if field localSubmission is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalSubmission() {
      return this.localSubmission != null;
    }

    public void setLocalSubmissionIsSet(boolean value) {
      if (!value) {
        this.localSubmission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        if (value == null) {
          unsetJobSubmissionInterfaceId();
        } else {
          setJobSubmissionInterfaceId((String)value);
        }
        break;

      case LOCAL_SUBMISSION:
        if (value == null) {
          unsetLocalSubmission();
        } else {
          setLocalSubmission((org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return getJobSubmissionInterfaceId();

      case LOCAL_SUBMISSION:
        return getLocalSubmission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return isSetJobSubmissionInterfaceId();
      case LOCAL_SUBMISSION:
        return isSetLocalSubmission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLocalSubmissionDetails_args)
        return this.equals((updateLocalSubmissionDetails_args)that);
      return false;
    }

    public boolean equals(updateLocalSubmissionDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionInterfaceId = true && this.isSetJobSubmissionInterfaceId();
      boolean that_present_jobSubmissionInterfaceId = true && that.isSetJobSubmissionInterfaceId();
      if (this_present_jobSubmissionInterfaceId || that_present_jobSubmissionInterfaceId) {
        if (!(this_present_jobSubmissionInterfaceId && that_present_jobSubmissionInterfaceId))
          return false;
        if (!this.jobSubmissionInterfaceId.equals(that.jobSubmissionInterfaceId))
          return false;
      }

      boolean this_present_localSubmission = true && this.isSetLocalSubmission();
      boolean that_present_localSubmission = true && that.isSetLocalSubmission();
      if (this_present_localSubmission || that_present_localSubmission) {
        if (!(this_present_localSubmission && that_present_localSubmission))
          return false;
        if (!this.localSubmission.equals(that.localSubmission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLocalSubmissionDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaceId()).compareTo(other.isSetJobSubmissionInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaceId, other.jobSubmissionInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocalSubmission()).compareTo(other.isSetLocalSubmission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalSubmission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localSubmission, other.localSubmission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLocalSubmissionDetails_args(");
      boolean first = true;

      sb.append("jobSubmissionInterfaceId:");
      if (this.jobSubmissionInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("localSubmission:");
      if (this.localSubmission == null) {
        sb.append("null");
      } else {
        sb.append(this.localSubmission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionInterfaceId' was not present! Struct: " + toString());
      }
      if (localSubmission == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'localSubmission' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (localSubmission != null) {
        localSubmission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLocalSubmissionDetails_argsStandardSchemeFactory implements SchemeFactory {
      public updateLocalSubmissionDetails_argsStandardScheme getScheme() {
        return new updateLocalSubmissionDetails_argsStandardScheme();
      }
    }

    private static class updateLocalSubmissionDetails_argsStandardScheme extends StandardScheme<updateLocalSubmissionDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobSubmissionInterfaceId = iprot.readString();
                struct.setJobSubmissionInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCAL_SUBMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.localSubmission = new org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission();
                struct.localSubmission.read(iprot);
                struct.setLocalSubmissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionInterfaceId != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.jobSubmissionInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.localSubmission != null) {
          oprot.writeFieldBegin(LOCAL_SUBMISSION_FIELD_DESC);
          struct.localSubmission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLocalSubmissionDetails_argsTupleSchemeFactory implements SchemeFactory {
      public updateLocalSubmissionDetails_argsTupleScheme getScheme() {
        return new updateLocalSubmissionDetails_argsTupleScheme();
      }
    }

    private static class updateLocalSubmissionDetails_argsTupleScheme extends TupleScheme<updateLocalSubmissionDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.jobSubmissionInterfaceId);
        struct.localSubmission.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLocalSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.jobSubmissionInterfaceId = iprot.readString();
        struct.setJobSubmissionInterfaceIdIsSet(true);
        struct.localSubmission = new org.apache.airavata.model.appcatalog.computeresource.LOCALSubmission();
        struct.localSubmission.read(iprot);
        struct.setLocalSubmissionIsSet(true);
      }
    }

  }

  public static class updateLocalSubmissionDetails_result implements org.apache.thrift.TBase<updateLocalSubmissionDetails_result, updateLocalSubmissionDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLocalSubmissionDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLocalSubmissionDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLocalSubmissionDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLocalSubmissionDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLocalSubmissionDetails_result.class, metaDataMap);
    }

    public updateLocalSubmissionDetails_result() {
    }

    public updateLocalSubmissionDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLocalSubmissionDetails_result(updateLocalSubmissionDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateLocalSubmissionDetails_result deepCopy() {
      return new updateLocalSubmissionDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateLocalSubmissionDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateLocalSubmissionDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateLocalSubmissionDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateLocalSubmissionDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLocalSubmissionDetails_result)
        return this.equals((updateLocalSubmissionDetails_result)that);
      return false;
    }

    public boolean equals(updateLocalSubmissionDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLocalSubmissionDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLocalSubmissionDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLocalSubmissionDetails_resultStandardSchemeFactory implements SchemeFactory {
      public updateLocalSubmissionDetails_resultStandardScheme getScheme() {
        return new updateLocalSubmissionDetails_resultStandardScheme();
      }
    }

    private static class updateLocalSubmissionDetails_resultStandardScheme extends StandardScheme<updateLocalSubmissionDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLocalSubmissionDetails_resultTupleSchemeFactory implements SchemeFactory {
      public updateLocalSubmissionDetails_resultTupleScheme getScheme() {
        return new updateLocalSubmissionDetails_resultTupleScheme();
      }
    }

    private static class updateLocalSubmissionDetails_resultTupleScheme extends TupleScheme<updateLocalSubmissionDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLocalSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addSSHJobSubmissionDetails_args implements org.apache.thrift.TBase<addSSHJobSubmissionDetails_args, addSSHJobSubmissionDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSSHJobSubmissionDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSSHJobSubmissionDetails_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIORITY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("priorityOrder", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SSH_JOB_SUBMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sshJobSubmission", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSSHJobSubmissionDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSSHJobSubmissionDetails_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public int priorityOrder; // required
    public org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      PRIORITY_ORDER((short)2, "priorityOrder"),
      SSH_JOB_SUBMISSION((short)3, "sshJobSubmission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // PRIORITY_ORDER
            return PRIORITY_ORDER;
          case 3: // SSH_JOB_SUBMISSION
            return SSH_JOB_SUBMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIORITYORDER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIORITY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("priorityOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SSH_JOB_SUBMISSION, new org.apache.thrift.meta_data.FieldMetaData("sshJobSubmission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSSHJobSubmissionDetails_args.class, metaDataMap);
    }

    public addSSHJobSubmissionDetails_args() {
    }

    public addSSHJobSubmissionDetails_args(
      String computeResourceId,
      int priorityOrder,
      org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      this.sshJobSubmission = sshJobSubmission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSSHJobSubmissionDetails_args(addSSHJobSubmissionDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      this.priorityOrder = other.priorityOrder;
      if (other.isSetSshJobSubmission()) {
        this.sshJobSubmission = new org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission(other.sshJobSubmission);
      }
    }

    public addSSHJobSubmissionDetails_args deepCopy() {
      return new addSSHJobSubmissionDetails_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      setPriorityOrderIsSet(false);
      this.priorityOrder = 0;
      this.sshJobSubmission = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addSSHJobSubmissionDetails_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public int getPriorityOrder() {
      return this.priorityOrder;
    }

    public addSSHJobSubmissionDetails_args setPriorityOrder(int priorityOrder) {
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      return this;
    }

    public void unsetPriorityOrder() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    /** Returns true if field priorityOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPriorityOrder() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    public void setPriorityOrderIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID, value);
    }

    public org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission getSshJobSubmission() {
      return this.sshJobSubmission;
    }

    public addSSHJobSubmissionDetails_args setSshJobSubmission(org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) {
      this.sshJobSubmission = sshJobSubmission;
      return this;
    }

    public void unsetSshJobSubmission() {
      this.sshJobSubmission = null;
    }

    /** Returns true if field sshJobSubmission is set (has been assigned a value) and false otherwise */
    public boolean isSetSshJobSubmission() {
      return this.sshJobSubmission != null;
    }

    public void setSshJobSubmissionIsSet(boolean value) {
      if (!value) {
        this.sshJobSubmission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case PRIORITY_ORDER:
        if (value == null) {
          unsetPriorityOrder();
        } else {
          setPriorityOrder((Integer)value);
        }
        break;

      case SSH_JOB_SUBMISSION:
        if (value == null) {
          unsetSshJobSubmission();
        } else {
          setSshJobSubmission((org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case PRIORITY_ORDER:
        return Integer.valueOf(getPriorityOrder());

      case SSH_JOB_SUBMISSION:
        return getSshJobSubmission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case PRIORITY_ORDER:
        return isSetPriorityOrder();
      case SSH_JOB_SUBMISSION:
        return isSetSshJobSubmission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSSHJobSubmissionDetails_args)
        return this.equals((addSSHJobSubmissionDetails_args)that);
      return false;
    }

    public boolean equals(addSSHJobSubmissionDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_priorityOrder = true;
      boolean that_present_priorityOrder = true;
      if (this_present_priorityOrder || that_present_priorityOrder) {
        if (!(this_present_priorityOrder && that_present_priorityOrder))
          return false;
        if (this.priorityOrder != that.priorityOrder)
          return false;
      }

      boolean this_present_sshJobSubmission = true && this.isSetSshJobSubmission();
      boolean that_present_sshJobSubmission = true && that.isSetSshJobSubmission();
      if (this_present_sshJobSubmission || that_present_sshJobSubmission) {
        if (!(this_present_sshJobSubmission && that_present_sshJobSubmission))
          return false;
        if (!this.sshJobSubmission.equals(that.sshJobSubmission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSSHJobSubmissionDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriorityOrder()).compareTo(other.isSetPriorityOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriorityOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorityOrder, other.priorityOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSshJobSubmission()).compareTo(other.isSetSshJobSubmission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSshJobSubmission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sshJobSubmission, other.sshJobSubmission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSSHJobSubmissionDetails_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priorityOrder:");
      sb.append(this.priorityOrder);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sshJobSubmission:");
      if (this.sshJobSubmission == null) {
        sb.append("null");
      } else {
        sb.append(this.sshJobSubmission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'priorityOrder' because it's a primitive and you chose the non-beans generator.
      if (sshJobSubmission == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sshJobSubmission' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (sshJobSubmission != null) {
        sshJobSubmission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSSHJobSubmissionDetails_argsStandardSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionDetails_argsStandardScheme getScheme() {
        return new addSSHJobSubmissionDetails_argsStandardScheme();
      }
    }

    private static class addSSHJobSubmissionDetails_argsStandardScheme extends StandardScheme<addSSHJobSubmissionDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIORITY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priorityOrder = iprot.readI32();
                struct.setPriorityOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SSH_JOB_SUBMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sshJobSubmission = new org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission();
                struct.sshJobSubmission.read(iprot);
                struct.setSshJobSubmissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPriorityOrder()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'priorityOrder' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIORITY_ORDER_FIELD_DESC);
        oprot.writeI32(struct.priorityOrder);
        oprot.writeFieldEnd();
        if (struct.sshJobSubmission != null) {
          oprot.writeFieldBegin(SSH_JOB_SUBMISSION_FIELD_DESC);
          struct.sshJobSubmission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSSHJobSubmissionDetails_argsTupleSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionDetails_argsTupleScheme getScheme() {
        return new addSSHJobSubmissionDetails_argsTupleScheme();
      }
    }

    private static class addSSHJobSubmissionDetails_argsTupleScheme extends TupleScheme<addSSHJobSubmissionDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        oprot.writeI32(struct.priorityOrder);
        struct.sshJobSubmission.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.priorityOrder = iprot.readI32();
        struct.setPriorityOrderIsSet(true);
        struct.sshJobSubmission = new org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission();
        struct.sshJobSubmission.read(iprot);
        struct.setSshJobSubmissionIsSet(true);
      }
    }

  }

  public static class addSSHJobSubmissionDetails_result implements org.apache.thrift.TBase<addSSHJobSubmissionDetails_result, addSSHJobSubmissionDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSSHJobSubmissionDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSSHJobSubmissionDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSSHJobSubmissionDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSSHJobSubmissionDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSSHJobSubmissionDetails_result.class, metaDataMap);
    }

    public addSSHJobSubmissionDetails_result() {
    }

    public addSSHJobSubmissionDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSSHJobSubmissionDetails_result(addSSHJobSubmissionDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addSSHJobSubmissionDetails_result deepCopy() {
      return new addSSHJobSubmissionDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addSSHJobSubmissionDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addSSHJobSubmissionDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addSSHJobSubmissionDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addSSHJobSubmissionDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSSHJobSubmissionDetails_result)
        return this.equals((addSSHJobSubmissionDetails_result)that);
      return false;
    }

    public boolean equals(addSSHJobSubmissionDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSSHJobSubmissionDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSSHJobSubmissionDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSSHJobSubmissionDetails_resultStandardSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionDetails_resultStandardScheme getScheme() {
        return new addSSHJobSubmissionDetails_resultStandardScheme();
      }
    }

    private static class addSSHJobSubmissionDetails_resultStandardScheme extends StandardScheme<addSSHJobSubmissionDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSSHJobSubmissionDetails_resultTupleSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionDetails_resultTupleScheme getScheme() {
        return new addSSHJobSubmissionDetails_resultTupleScheme();
      }
    }

    private static class addSSHJobSubmissionDetails_resultTupleScheme extends TupleScheme<addSSHJobSubmissionDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateSSHJobSubmissionDetails_args implements org.apache.thrift.TBase<updateSSHJobSubmissionDetails_args, updateSSHJobSubmissionDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSSHJobSubmissionDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSSHJobSubmissionDetails_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SSH_JOB_SUBMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("sshJobSubmission", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSSHJobSubmissionDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSSHJobSubmissionDetails_argsTupleSchemeFactory());
    }

    public String jobSubmissionInterfaceId; // required
    public org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_INTERFACE_ID((short)1, "jobSubmissionInterfaceId"),
      SSH_JOB_SUBMISSION((short)2, "sshJobSubmission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_INTERFACE_ID
            return JOB_SUBMISSION_INTERFACE_ID;
          case 2: // SSH_JOB_SUBMISSION
            return SSH_JOB_SUBMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SSH_JOB_SUBMISSION, new org.apache.thrift.meta_data.FieldMetaData("sshJobSubmission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSSHJobSubmissionDetails_args.class, metaDataMap);
    }

    public updateSSHJobSubmissionDetails_args() {
    }

    public updateSSHJobSubmissionDetails_args(
      String jobSubmissionInterfaceId,
      org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission)
    {
      this();
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      this.sshJobSubmission = sshJobSubmission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSSHJobSubmissionDetails_args(updateSSHJobSubmissionDetails_args other) {
      if (other.isSetJobSubmissionInterfaceId()) {
        this.jobSubmissionInterfaceId = other.jobSubmissionInterfaceId;
      }
      if (other.isSetSshJobSubmission()) {
        this.sshJobSubmission = new org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission(other.sshJobSubmission);
      }
    }

    public updateSSHJobSubmissionDetails_args deepCopy() {
      return new updateSSHJobSubmissionDetails_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionInterfaceId = null;
      this.sshJobSubmission = null;
    }

    public String getJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId;
    }

    public updateSSHJobSubmissionDetails_args setJobSubmissionInterfaceId(String jobSubmissionInterfaceId) {
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      return this;
    }

    public void unsetJobSubmissionInterfaceId() {
      this.jobSubmissionInterfaceId = null;
    }

    /** Returns true if field jobSubmissionInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId != null;
    }

    public void setJobSubmissionInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionInterfaceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission getSshJobSubmission() {
      return this.sshJobSubmission;
    }

    public updateSSHJobSubmissionDetails_args setSshJobSubmission(org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission sshJobSubmission) {
      this.sshJobSubmission = sshJobSubmission;
      return this;
    }

    public void unsetSshJobSubmission() {
      this.sshJobSubmission = null;
    }

    /** Returns true if field sshJobSubmission is set (has been assigned a value) and false otherwise */
    public boolean isSetSshJobSubmission() {
      return this.sshJobSubmission != null;
    }

    public void setSshJobSubmissionIsSet(boolean value) {
      if (!value) {
        this.sshJobSubmission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        if (value == null) {
          unsetJobSubmissionInterfaceId();
        } else {
          setJobSubmissionInterfaceId((String)value);
        }
        break;

      case SSH_JOB_SUBMISSION:
        if (value == null) {
          unsetSshJobSubmission();
        } else {
          setSshJobSubmission((org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return getJobSubmissionInterfaceId();

      case SSH_JOB_SUBMISSION:
        return getSshJobSubmission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return isSetJobSubmissionInterfaceId();
      case SSH_JOB_SUBMISSION:
        return isSetSshJobSubmission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSSHJobSubmissionDetails_args)
        return this.equals((updateSSHJobSubmissionDetails_args)that);
      return false;
    }

    public boolean equals(updateSSHJobSubmissionDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionInterfaceId = true && this.isSetJobSubmissionInterfaceId();
      boolean that_present_jobSubmissionInterfaceId = true && that.isSetJobSubmissionInterfaceId();
      if (this_present_jobSubmissionInterfaceId || that_present_jobSubmissionInterfaceId) {
        if (!(this_present_jobSubmissionInterfaceId && that_present_jobSubmissionInterfaceId))
          return false;
        if (!this.jobSubmissionInterfaceId.equals(that.jobSubmissionInterfaceId))
          return false;
      }

      boolean this_present_sshJobSubmission = true && this.isSetSshJobSubmission();
      boolean that_present_sshJobSubmission = true && that.isSetSshJobSubmission();
      if (this_present_sshJobSubmission || that_present_sshJobSubmission) {
        if (!(this_present_sshJobSubmission && that_present_sshJobSubmission))
          return false;
        if (!this.sshJobSubmission.equals(that.sshJobSubmission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateSSHJobSubmissionDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaceId()).compareTo(other.isSetJobSubmissionInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaceId, other.jobSubmissionInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSshJobSubmission()).compareTo(other.isSetSshJobSubmission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSshJobSubmission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sshJobSubmission, other.sshJobSubmission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSSHJobSubmissionDetails_args(");
      boolean first = true;

      sb.append("jobSubmissionInterfaceId:");
      if (this.jobSubmissionInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sshJobSubmission:");
      if (this.sshJobSubmission == null) {
        sb.append("null");
      } else {
        sb.append(this.sshJobSubmission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionInterfaceId' was not present! Struct: " + toString());
      }
      if (sshJobSubmission == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sshJobSubmission' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (sshJobSubmission != null) {
        sshJobSubmission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSSHJobSubmissionDetails_argsStandardSchemeFactory implements SchemeFactory {
      public updateSSHJobSubmissionDetails_argsStandardScheme getScheme() {
        return new updateSSHJobSubmissionDetails_argsStandardScheme();
      }
    }

    private static class updateSSHJobSubmissionDetails_argsStandardScheme extends StandardScheme<updateSSHJobSubmissionDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobSubmissionInterfaceId = iprot.readString();
                struct.setJobSubmissionInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SSH_JOB_SUBMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sshJobSubmission = new org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission();
                struct.sshJobSubmission.read(iprot);
                struct.setSshJobSubmissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionInterfaceId != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.jobSubmissionInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.sshJobSubmission != null) {
          oprot.writeFieldBegin(SSH_JOB_SUBMISSION_FIELD_DESC);
          struct.sshJobSubmission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSSHJobSubmissionDetails_argsTupleSchemeFactory implements SchemeFactory {
      public updateSSHJobSubmissionDetails_argsTupleScheme getScheme() {
        return new updateSSHJobSubmissionDetails_argsTupleScheme();
      }
    }

    private static class updateSSHJobSubmissionDetails_argsTupleScheme extends TupleScheme<updateSSHJobSubmissionDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.jobSubmissionInterfaceId);
        struct.sshJobSubmission.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSSHJobSubmissionDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.jobSubmissionInterfaceId = iprot.readString();
        struct.setJobSubmissionInterfaceIdIsSet(true);
        struct.sshJobSubmission = new org.apache.airavata.model.appcatalog.computeresource.SSHJobSubmission();
        struct.sshJobSubmission.read(iprot);
        struct.setSshJobSubmissionIsSet(true);
      }
    }

  }

  public static class updateSSHJobSubmissionDetails_result implements org.apache.thrift.TBase<updateSSHJobSubmissionDetails_result, updateSSHJobSubmissionDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSSHJobSubmissionDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSSHJobSubmissionDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSSHJobSubmissionDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSSHJobSubmissionDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSSHJobSubmissionDetails_result.class, metaDataMap);
    }

    public updateSSHJobSubmissionDetails_result() {
    }

    public updateSSHJobSubmissionDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSSHJobSubmissionDetails_result(updateSSHJobSubmissionDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateSSHJobSubmissionDetails_result deepCopy() {
      return new updateSSHJobSubmissionDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateSSHJobSubmissionDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateSSHJobSubmissionDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateSSHJobSubmissionDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateSSHJobSubmissionDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSSHJobSubmissionDetails_result)
        return this.equals((updateSSHJobSubmissionDetails_result)that);
      return false;
    }

    public boolean equals(updateSSHJobSubmissionDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateSSHJobSubmissionDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSSHJobSubmissionDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSSHJobSubmissionDetails_resultStandardSchemeFactory implements SchemeFactory {
      public updateSSHJobSubmissionDetails_resultStandardScheme getScheme() {
        return new updateSSHJobSubmissionDetails_resultStandardScheme();
      }
    }

    private static class updateSSHJobSubmissionDetails_resultStandardScheme extends StandardScheme<updateSSHJobSubmissionDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSSHJobSubmissionDetails_resultTupleSchemeFactory implements SchemeFactory {
      public updateSSHJobSubmissionDetails_resultTupleScheme getScheme() {
        return new updateSSHJobSubmissionDetails_resultTupleScheme();
      }
    }

    private static class updateSSHJobSubmissionDetails_resultTupleScheme extends TupleScheme<updateSSHJobSubmissionDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSSHJobSubmissionDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addLocalDataMovementDetails_args implements org.apache.thrift.TBase<addLocalDataMovementDetails_args, addLocalDataMovementDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<addLocalDataMovementDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLocalDataMovementDetails_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIORITY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("priorityOrder", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LOCAL_DATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("localDataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLocalDataMovementDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLocalDataMovementDetails_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public int priorityOrder; // required
    public org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      PRIORITY_ORDER((short)2, "priorityOrder"),
      LOCAL_DATA_MOVEMENT((short)3, "localDataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // PRIORITY_ORDER
            return PRIORITY_ORDER;
          case 3: // LOCAL_DATA_MOVEMENT
            return LOCAL_DATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIORITYORDER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIORITY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("priorityOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOCAL_DATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("localDataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLocalDataMovementDetails_args.class, metaDataMap);
    }

    public addLocalDataMovementDetails_args() {
    }

    public addLocalDataMovementDetails_args(
      String computeResourceId,
      int priorityOrder,
      org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      this.localDataMovement = localDataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLocalDataMovementDetails_args(addLocalDataMovementDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      this.priorityOrder = other.priorityOrder;
      if (other.isSetLocalDataMovement()) {
        this.localDataMovement = new org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement(other.localDataMovement);
      }
    }

    public addLocalDataMovementDetails_args deepCopy() {
      return new addLocalDataMovementDetails_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      setPriorityOrderIsSet(false);
      this.priorityOrder = 0;
      this.localDataMovement = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addLocalDataMovementDetails_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public int getPriorityOrder() {
      return this.priorityOrder;
    }

    public addLocalDataMovementDetails_args setPriorityOrder(int priorityOrder) {
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      return this;
    }

    public void unsetPriorityOrder() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    /** Returns true if field priorityOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPriorityOrder() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    public void setPriorityOrderIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID, value);
    }

    public org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement getLocalDataMovement() {
      return this.localDataMovement;
    }

    public addLocalDataMovementDetails_args setLocalDataMovement(org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) {
      this.localDataMovement = localDataMovement;
      return this;
    }

    public void unsetLocalDataMovement() {
      this.localDataMovement = null;
    }

    /** Returns true if field localDataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalDataMovement() {
      return this.localDataMovement != null;
    }

    public void setLocalDataMovementIsSet(boolean value) {
      if (!value) {
        this.localDataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case PRIORITY_ORDER:
        if (value == null) {
          unsetPriorityOrder();
        } else {
          setPriorityOrder((Integer)value);
        }
        break;

      case LOCAL_DATA_MOVEMENT:
        if (value == null) {
          unsetLocalDataMovement();
        } else {
          setLocalDataMovement((org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case PRIORITY_ORDER:
        return Integer.valueOf(getPriorityOrder());

      case LOCAL_DATA_MOVEMENT:
        return getLocalDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case PRIORITY_ORDER:
        return isSetPriorityOrder();
      case LOCAL_DATA_MOVEMENT:
        return isSetLocalDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLocalDataMovementDetails_args)
        return this.equals((addLocalDataMovementDetails_args)that);
      return false;
    }

    public boolean equals(addLocalDataMovementDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_priorityOrder = true;
      boolean that_present_priorityOrder = true;
      if (this_present_priorityOrder || that_present_priorityOrder) {
        if (!(this_present_priorityOrder && that_present_priorityOrder))
          return false;
        if (this.priorityOrder != that.priorityOrder)
          return false;
      }

      boolean this_present_localDataMovement = true && this.isSetLocalDataMovement();
      boolean that_present_localDataMovement = true && that.isSetLocalDataMovement();
      if (this_present_localDataMovement || that_present_localDataMovement) {
        if (!(this_present_localDataMovement && that_present_localDataMovement))
          return false;
        if (!this.localDataMovement.equals(that.localDataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addLocalDataMovementDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriorityOrder()).compareTo(other.isSetPriorityOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriorityOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorityOrder, other.priorityOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocalDataMovement()).compareTo(other.isSetLocalDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localDataMovement, other.localDataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLocalDataMovementDetails_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priorityOrder:");
      sb.append(this.priorityOrder);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localDataMovement:");
      if (this.localDataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.localDataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'priorityOrder' because it's a primitive and you chose the non-beans generator.
      if (localDataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'localDataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (localDataMovement != null) {
        localDataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLocalDataMovementDetails_argsStandardSchemeFactory implements SchemeFactory {
      public addLocalDataMovementDetails_argsStandardScheme getScheme() {
        return new addLocalDataMovementDetails_argsStandardScheme();
      }
    }

    private static class addLocalDataMovementDetails_argsStandardScheme extends StandardScheme<addLocalDataMovementDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIORITY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priorityOrder = iprot.readI32();
                struct.setPriorityOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCAL_DATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.localDataMovement = new org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement();
                struct.localDataMovement.read(iprot);
                struct.setLocalDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPriorityOrder()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'priorityOrder' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIORITY_ORDER_FIELD_DESC);
        oprot.writeI32(struct.priorityOrder);
        oprot.writeFieldEnd();
        if (struct.localDataMovement != null) {
          oprot.writeFieldBegin(LOCAL_DATA_MOVEMENT_FIELD_DESC);
          struct.localDataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLocalDataMovementDetails_argsTupleSchemeFactory implements SchemeFactory {
      public addLocalDataMovementDetails_argsTupleScheme getScheme() {
        return new addLocalDataMovementDetails_argsTupleScheme();
      }
    }

    private static class addLocalDataMovementDetails_argsTupleScheme extends TupleScheme<addLocalDataMovementDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        oprot.writeI32(struct.priorityOrder);
        struct.localDataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.priorityOrder = iprot.readI32();
        struct.setPriorityOrderIsSet(true);
        struct.localDataMovement = new org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement();
        struct.localDataMovement.read(iprot);
        struct.setLocalDataMovementIsSet(true);
      }
    }

  }

  public static class addLocalDataMovementDetails_result implements org.apache.thrift.TBase<addLocalDataMovementDetails_result, addLocalDataMovementDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<addLocalDataMovementDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLocalDataMovementDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLocalDataMovementDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLocalDataMovementDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLocalDataMovementDetails_result.class, metaDataMap);
    }

    public addLocalDataMovementDetails_result() {
    }

    public addLocalDataMovementDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLocalDataMovementDetails_result(addLocalDataMovementDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addLocalDataMovementDetails_result deepCopy() {
      return new addLocalDataMovementDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addLocalDataMovementDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addLocalDataMovementDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addLocalDataMovementDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addLocalDataMovementDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLocalDataMovementDetails_result)
        return this.equals((addLocalDataMovementDetails_result)that);
      return false;
    }

    public boolean equals(addLocalDataMovementDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addLocalDataMovementDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLocalDataMovementDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLocalDataMovementDetails_resultStandardSchemeFactory implements SchemeFactory {
      public addLocalDataMovementDetails_resultStandardScheme getScheme() {
        return new addLocalDataMovementDetails_resultStandardScheme();
      }
    }

    private static class addLocalDataMovementDetails_resultStandardScheme extends StandardScheme<addLocalDataMovementDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLocalDataMovementDetails_resultTupleSchemeFactory implements SchemeFactory {
      public addLocalDataMovementDetails_resultTupleScheme getScheme() {
        return new addLocalDataMovementDetails_resultTupleScheme();
      }
    }

    private static class addLocalDataMovementDetails_resultTupleScheme extends TupleScheme<addLocalDataMovementDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateLocalDataMovementDetails_args implements org.apache.thrift.TBase<updateLocalDataMovementDetails_args, updateLocalDataMovementDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateLocalDataMovementDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLocalDataMovementDetails_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCAL_DATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("localDataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLocalDataMovementDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLocalDataMovementDetails_argsTupleSchemeFactory());
    }

    public String jobSubmissionInterfaceId; // required
    public org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_INTERFACE_ID((short)1, "jobSubmissionInterfaceId"),
      LOCAL_DATA_MOVEMENT((short)2, "localDataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_INTERFACE_ID
            return JOB_SUBMISSION_INTERFACE_ID;
          case 2: // LOCAL_DATA_MOVEMENT
            return LOCAL_DATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCAL_DATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("localDataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLocalDataMovementDetails_args.class, metaDataMap);
    }

    public updateLocalDataMovementDetails_args() {
    }

    public updateLocalDataMovementDetails_args(
      String jobSubmissionInterfaceId,
      org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement)
    {
      this();
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      this.localDataMovement = localDataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLocalDataMovementDetails_args(updateLocalDataMovementDetails_args other) {
      if (other.isSetJobSubmissionInterfaceId()) {
        this.jobSubmissionInterfaceId = other.jobSubmissionInterfaceId;
      }
      if (other.isSetLocalDataMovement()) {
        this.localDataMovement = new org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement(other.localDataMovement);
      }
    }

    public updateLocalDataMovementDetails_args deepCopy() {
      return new updateLocalDataMovementDetails_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionInterfaceId = null;
      this.localDataMovement = null;
    }

    public String getJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId;
    }

    public updateLocalDataMovementDetails_args setJobSubmissionInterfaceId(String jobSubmissionInterfaceId) {
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      return this;
    }

    public void unsetJobSubmissionInterfaceId() {
      this.jobSubmissionInterfaceId = null;
    }

    /** Returns true if field jobSubmissionInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId != null;
    }

    public void setJobSubmissionInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionInterfaceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement getLocalDataMovement() {
      return this.localDataMovement;
    }

    public updateLocalDataMovementDetails_args setLocalDataMovement(org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement localDataMovement) {
      this.localDataMovement = localDataMovement;
      return this;
    }

    public void unsetLocalDataMovement() {
      this.localDataMovement = null;
    }

    /** Returns true if field localDataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalDataMovement() {
      return this.localDataMovement != null;
    }

    public void setLocalDataMovementIsSet(boolean value) {
      if (!value) {
        this.localDataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        if (value == null) {
          unsetJobSubmissionInterfaceId();
        } else {
          setJobSubmissionInterfaceId((String)value);
        }
        break;

      case LOCAL_DATA_MOVEMENT:
        if (value == null) {
          unsetLocalDataMovement();
        } else {
          setLocalDataMovement((org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return getJobSubmissionInterfaceId();

      case LOCAL_DATA_MOVEMENT:
        return getLocalDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return isSetJobSubmissionInterfaceId();
      case LOCAL_DATA_MOVEMENT:
        return isSetLocalDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLocalDataMovementDetails_args)
        return this.equals((updateLocalDataMovementDetails_args)that);
      return false;
    }

    public boolean equals(updateLocalDataMovementDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionInterfaceId = true && this.isSetJobSubmissionInterfaceId();
      boolean that_present_jobSubmissionInterfaceId = true && that.isSetJobSubmissionInterfaceId();
      if (this_present_jobSubmissionInterfaceId || that_present_jobSubmissionInterfaceId) {
        if (!(this_present_jobSubmissionInterfaceId && that_present_jobSubmissionInterfaceId))
          return false;
        if (!this.jobSubmissionInterfaceId.equals(that.jobSubmissionInterfaceId))
          return false;
      }

      boolean this_present_localDataMovement = true && this.isSetLocalDataMovement();
      boolean that_present_localDataMovement = true && that.isSetLocalDataMovement();
      if (this_present_localDataMovement || that_present_localDataMovement) {
        if (!(this_present_localDataMovement && that_present_localDataMovement))
          return false;
        if (!this.localDataMovement.equals(that.localDataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLocalDataMovementDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaceId()).compareTo(other.isSetJobSubmissionInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaceId, other.jobSubmissionInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocalDataMovement()).compareTo(other.isSetLocalDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localDataMovement, other.localDataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLocalDataMovementDetails_args(");
      boolean first = true;

      sb.append("jobSubmissionInterfaceId:");
      if (this.jobSubmissionInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("localDataMovement:");
      if (this.localDataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.localDataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionInterfaceId' was not present! Struct: " + toString());
      }
      if (localDataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'localDataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (localDataMovement != null) {
        localDataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLocalDataMovementDetails_argsStandardSchemeFactory implements SchemeFactory {
      public updateLocalDataMovementDetails_argsStandardScheme getScheme() {
        return new updateLocalDataMovementDetails_argsStandardScheme();
      }
    }

    private static class updateLocalDataMovementDetails_argsStandardScheme extends StandardScheme<updateLocalDataMovementDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobSubmissionInterfaceId = iprot.readString();
                struct.setJobSubmissionInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCAL_DATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.localDataMovement = new org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement();
                struct.localDataMovement.read(iprot);
                struct.setLocalDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionInterfaceId != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.jobSubmissionInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.localDataMovement != null) {
          oprot.writeFieldBegin(LOCAL_DATA_MOVEMENT_FIELD_DESC);
          struct.localDataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLocalDataMovementDetails_argsTupleSchemeFactory implements SchemeFactory {
      public updateLocalDataMovementDetails_argsTupleScheme getScheme() {
        return new updateLocalDataMovementDetails_argsTupleScheme();
      }
    }

    private static class updateLocalDataMovementDetails_argsTupleScheme extends TupleScheme<updateLocalDataMovementDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.jobSubmissionInterfaceId);
        struct.localDataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLocalDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.jobSubmissionInterfaceId = iprot.readString();
        struct.setJobSubmissionInterfaceIdIsSet(true);
        struct.localDataMovement = new org.apache.airavata.model.appcatalog.computeresource.LOCALDataMovement();
        struct.localDataMovement.read(iprot);
        struct.setLocalDataMovementIsSet(true);
      }
    }

  }

  public static class updateLocalDataMovementDetails_result implements org.apache.thrift.TBase<updateLocalDataMovementDetails_result, updateLocalDataMovementDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateLocalDataMovementDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLocalDataMovementDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLocalDataMovementDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLocalDataMovementDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLocalDataMovementDetails_result.class, metaDataMap);
    }

    public updateLocalDataMovementDetails_result() {
    }

    public updateLocalDataMovementDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLocalDataMovementDetails_result(updateLocalDataMovementDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateLocalDataMovementDetails_result deepCopy() {
      return new updateLocalDataMovementDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateLocalDataMovementDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateLocalDataMovementDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateLocalDataMovementDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateLocalDataMovementDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLocalDataMovementDetails_result)
        return this.equals((updateLocalDataMovementDetails_result)that);
      return false;
    }

    public boolean equals(updateLocalDataMovementDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateLocalDataMovementDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLocalDataMovementDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLocalDataMovementDetails_resultStandardSchemeFactory implements SchemeFactory {
      public updateLocalDataMovementDetails_resultStandardScheme getScheme() {
        return new updateLocalDataMovementDetails_resultStandardScheme();
      }
    }

    private static class updateLocalDataMovementDetails_resultStandardScheme extends StandardScheme<updateLocalDataMovementDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLocalDataMovementDetails_resultTupleSchemeFactory implements SchemeFactory {
      public updateLocalDataMovementDetails_resultTupleScheme getScheme() {
        return new updateLocalDataMovementDetails_resultTupleScheme();
      }
    }

    private static class updateLocalDataMovementDetails_resultTupleScheme extends TupleScheme<updateLocalDataMovementDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLocalDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addSCPDataMovementDetails_args implements org.apache.thrift.TBase<addSCPDataMovementDetails_args, addSCPDataMovementDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSCPDataMovementDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSCPDataMovementDetails_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIORITY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("priorityOrder", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SCP_DATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("scpDataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSCPDataMovementDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSCPDataMovementDetails_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public int priorityOrder; // required
    public org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      PRIORITY_ORDER((short)2, "priorityOrder"),
      SCP_DATA_MOVEMENT((short)3, "scpDataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // PRIORITY_ORDER
            return PRIORITY_ORDER;
          case 3: // SCP_DATA_MOVEMENT
            return SCP_DATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIORITYORDER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIORITY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("priorityOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCP_DATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("scpDataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSCPDataMovementDetails_args.class, metaDataMap);
    }

    public addSCPDataMovementDetails_args() {
    }

    public addSCPDataMovementDetails_args(
      String computeResourceId,
      int priorityOrder,
      org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      this.scpDataMovement = scpDataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSCPDataMovementDetails_args(addSCPDataMovementDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      this.priorityOrder = other.priorityOrder;
      if (other.isSetScpDataMovement()) {
        this.scpDataMovement = new org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement(other.scpDataMovement);
      }
    }

    public addSCPDataMovementDetails_args deepCopy() {
      return new addSCPDataMovementDetails_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      setPriorityOrderIsSet(false);
      this.priorityOrder = 0;
      this.scpDataMovement = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addSCPDataMovementDetails_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public int getPriorityOrder() {
      return this.priorityOrder;
    }

    public addSCPDataMovementDetails_args setPriorityOrder(int priorityOrder) {
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      return this;
    }

    public void unsetPriorityOrder() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    /** Returns true if field priorityOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPriorityOrder() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    public void setPriorityOrderIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID, value);
    }

    public org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement getScpDataMovement() {
      return this.scpDataMovement;
    }

    public addSCPDataMovementDetails_args setScpDataMovement(org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) {
      this.scpDataMovement = scpDataMovement;
      return this;
    }

    public void unsetScpDataMovement() {
      this.scpDataMovement = null;
    }

    /** Returns true if field scpDataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetScpDataMovement() {
      return this.scpDataMovement != null;
    }

    public void setScpDataMovementIsSet(boolean value) {
      if (!value) {
        this.scpDataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case PRIORITY_ORDER:
        if (value == null) {
          unsetPriorityOrder();
        } else {
          setPriorityOrder((Integer)value);
        }
        break;

      case SCP_DATA_MOVEMENT:
        if (value == null) {
          unsetScpDataMovement();
        } else {
          setScpDataMovement((org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case PRIORITY_ORDER:
        return Integer.valueOf(getPriorityOrder());

      case SCP_DATA_MOVEMENT:
        return getScpDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case PRIORITY_ORDER:
        return isSetPriorityOrder();
      case SCP_DATA_MOVEMENT:
        return isSetScpDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSCPDataMovementDetails_args)
        return this.equals((addSCPDataMovementDetails_args)that);
      return false;
    }

    public boolean equals(addSCPDataMovementDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_priorityOrder = true;
      boolean that_present_priorityOrder = true;
      if (this_present_priorityOrder || that_present_priorityOrder) {
        if (!(this_present_priorityOrder && that_present_priorityOrder))
          return false;
        if (this.priorityOrder != that.priorityOrder)
          return false;
      }

      boolean this_present_scpDataMovement = true && this.isSetScpDataMovement();
      boolean that_present_scpDataMovement = true && that.isSetScpDataMovement();
      if (this_present_scpDataMovement || that_present_scpDataMovement) {
        if (!(this_present_scpDataMovement && that_present_scpDataMovement))
          return false;
        if (!this.scpDataMovement.equals(that.scpDataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSCPDataMovementDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriorityOrder()).compareTo(other.isSetPriorityOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriorityOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorityOrder, other.priorityOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScpDataMovement()).compareTo(other.isSetScpDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScpDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scpDataMovement, other.scpDataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSCPDataMovementDetails_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priorityOrder:");
      sb.append(this.priorityOrder);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scpDataMovement:");
      if (this.scpDataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.scpDataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'priorityOrder' because it's a primitive and you chose the non-beans generator.
      if (scpDataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scpDataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (scpDataMovement != null) {
        scpDataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSCPDataMovementDetails_argsStandardSchemeFactory implements SchemeFactory {
      public addSCPDataMovementDetails_argsStandardScheme getScheme() {
        return new addSCPDataMovementDetails_argsStandardScheme();
      }
    }

    private static class addSCPDataMovementDetails_argsStandardScheme extends StandardScheme<addSCPDataMovementDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIORITY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priorityOrder = iprot.readI32();
                struct.setPriorityOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCP_DATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scpDataMovement = new org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement();
                struct.scpDataMovement.read(iprot);
                struct.setScpDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPriorityOrder()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'priorityOrder' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIORITY_ORDER_FIELD_DESC);
        oprot.writeI32(struct.priorityOrder);
        oprot.writeFieldEnd();
        if (struct.scpDataMovement != null) {
          oprot.writeFieldBegin(SCP_DATA_MOVEMENT_FIELD_DESC);
          struct.scpDataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSCPDataMovementDetails_argsTupleSchemeFactory implements SchemeFactory {
      public addSCPDataMovementDetails_argsTupleScheme getScheme() {
        return new addSCPDataMovementDetails_argsTupleScheme();
      }
    }

    private static class addSCPDataMovementDetails_argsTupleScheme extends TupleScheme<addSCPDataMovementDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        oprot.writeI32(struct.priorityOrder);
        struct.scpDataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.priorityOrder = iprot.readI32();
        struct.setPriorityOrderIsSet(true);
        struct.scpDataMovement = new org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement();
        struct.scpDataMovement.read(iprot);
        struct.setScpDataMovementIsSet(true);
      }
    }

  }

  public static class addSCPDataMovementDetails_result implements org.apache.thrift.TBase<addSCPDataMovementDetails_result, addSCPDataMovementDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSCPDataMovementDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSCPDataMovementDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSCPDataMovementDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSCPDataMovementDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSCPDataMovementDetails_result.class, metaDataMap);
    }

    public addSCPDataMovementDetails_result() {
    }

    public addSCPDataMovementDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSCPDataMovementDetails_result(addSCPDataMovementDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addSCPDataMovementDetails_result deepCopy() {
      return new addSCPDataMovementDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addSCPDataMovementDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addSCPDataMovementDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addSCPDataMovementDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addSCPDataMovementDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSCPDataMovementDetails_result)
        return this.equals((addSCPDataMovementDetails_result)that);
      return false;
    }

    public boolean equals(addSCPDataMovementDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSCPDataMovementDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSCPDataMovementDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSCPDataMovementDetails_resultStandardSchemeFactory implements SchemeFactory {
      public addSCPDataMovementDetails_resultStandardScheme getScheme() {
        return new addSCPDataMovementDetails_resultStandardScheme();
      }
    }

    private static class addSCPDataMovementDetails_resultStandardScheme extends StandardScheme<addSCPDataMovementDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSCPDataMovementDetails_resultTupleSchemeFactory implements SchemeFactory {
      public addSCPDataMovementDetails_resultTupleScheme getScheme() {
        return new addSCPDataMovementDetails_resultTupleScheme();
      }
    }

    private static class addSCPDataMovementDetails_resultTupleScheme extends TupleScheme<addSCPDataMovementDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateSCPDataMovementDetails_args implements org.apache.thrift.TBase<updateSCPDataMovementDetails_args, updateSCPDataMovementDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSCPDataMovementDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSCPDataMovementDetails_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCP_DATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("scpDataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSCPDataMovementDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSCPDataMovementDetails_argsTupleSchemeFactory());
    }

    public String jobSubmissionInterfaceId; // required
    public org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_INTERFACE_ID((short)1, "jobSubmissionInterfaceId"),
      SCP_DATA_MOVEMENT((short)2, "scpDataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_INTERFACE_ID
            return JOB_SUBMISSION_INTERFACE_ID;
          case 2: // SCP_DATA_MOVEMENT
            return SCP_DATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCP_DATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("scpDataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSCPDataMovementDetails_args.class, metaDataMap);
    }

    public updateSCPDataMovementDetails_args() {
    }

    public updateSCPDataMovementDetails_args(
      String jobSubmissionInterfaceId,
      org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement)
    {
      this();
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      this.scpDataMovement = scpDataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSCPDataMovementDetails_args(updateSCPDataMovementDetails_args other) {
      if (other.isSetJobSubmissionInterfaceId()) {
        this.jobSubmissionInterfaceId = other.jobSubmissionInterfaceId;
      }
      if (other.isSetScpDataMovement()) {
        this.scpDataMovement = new org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement(other.scpDataMovement);
      }
    }

    public updateSCPDataMovementDetails_args deepCopy() {
      return new updateSCPDataMovementDetails_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionInterfaceId = null;
      this.scpDataMovement = null;
    }

    public String getJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId;
    }

    public updateSCPDataMovementDetails_args setJobSubmissionInterfaceId(String jobSubmissionInterfaceId) {
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      return this;
    }

    public void unsetJobSubmissionInterfaceId() {
      this.jobSubmissionInterfaceId = null;
    }

    /** Returns true if field jobSubmissionInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId != null;
    }

    public void setJobSubmissionInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionInterfaceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement getScpDataMovement() {
      return this.scpDataMovement;
    }

    public updateSCPDataMovementDetails_args setScpDataMovement(org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement scpDataMovement) {
      this.scpDataMovement = scpDataMovement;
      return this;
    }

    public void unsetScpDataMovement() {
      this.scpDataMovement = null;
    }

    /** Returns true if field scpDataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetScpDataMovement() {
      return this.scpDataMovement != null;
    }

    public void setScpDataMovementIsSet(boolean value) {
      if (!value) {
        this.scpDataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        if (value == null) {
          unsetJobSubmissionInterfaceId();
        } else {
          setJobSubmissionInterfaceId((String)value);
        }
        break;

      case SCP_DATA_MOVEMENT:
        if (value == null) {
          unsetScpDataMovement();
        } else {
          setScpDataMovement((org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return getJobSubmissionInterfaceId();

      case SCP_DATA_MOVEMENT:
        return getScpDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return isSetJobSubmissionInterfaceId();
      case SCP_DATA_MOVEMENT:
        return isSetScpDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSCPDataMovementDetails_args)
        return this.equals((updateSCPDataMovementDetails_args)that);
      return false;
    }

    public boolean equals(updateSCPDataMovementDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionInterfaceId = true && this.isSetJobSubmissionInterfaceId();
      boolean that_present_jobSubmissionInterfaceId = true && that.isSetJobSubmissionInterfaceId();
      if (this_present_jobSubmissionInterfaceId || that_present_jobSubmissionInterfaceId) {
        if (!(this_present_jobSubmissionInterfaceId && that_present_jobSubmissionInterfaceId))
          return false;
        if (!this.jobSubmissionInterfaceId.equals(that.jobSubmissionInterfaceId))
          return false;
      }

      boolean this_present_scpDataMovement = true && this.isSetScpDataMovement();
      boolean that_present_scpDataMovement = true && that.isSetScpDataMovement();
      if (this_present_scpDataMovement || that_present_scpDataMovement) {
        if (!(this_present_scpDataMovement && that_present_scpDataMovement))
          return false;
        if (!this.scpDataMovement.equals(that.scpDataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateSCPDataMovementDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaceId()).compareTo(other.isSetJobSubmissionInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaceId, other.jobSubmissionInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScpDataMovement()).compareTo(other.isSetScpDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScpDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scpDataMovement, other.scpDataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSCPDataMovementDetails_args(");
      boolean first = true;

      sb.append("jobSubmissionInterfaceId:");
      if (this.jobSubmissionInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scpDataMovement:");
      if (this.scpDataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.scpDataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionInterfaceId' was not present! Struct: " + toString());
      }
      if (scpDataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scpDataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (scpDataMovement != null) {
        scpDataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSCPDataMovementDetails_argsStandardSchemeFactory implements SchemeFactory {
      public updateSCPDataMovementDetails_argsStandardScheme getScheme() {
        return new updateSCPDataMovementDetails_argsStandardScheme();
      }
    }

    private static class updateSCPDataMovementDetails_argsStandardScheme extends StandardScheme<updateSCPDataMovementDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobSubmissionInterfaceId = iprot.readString();
                struct.setJobSubmissionInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCP_DATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scpDataMovement = new org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement();
                struct.scpDataMovement.read(iprot);
                struct.setScpDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionInterfaceId != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.jobSubmissionInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.scpDataMovement != null) {
          oprot.writeFieldBegin(SCP_DATA_MOVEMENT_FIELD_DESC);
          struct.scpDataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSCPDataMovementDetails_argsTupleSchemeFactory implements SchemeFactory {
      public updateSCPDataMovementDetails_argsTupleScheme getScheme() {
        return new updateSCPDataMovementDetails_argsTupleScheme();
      }
    }

    private static class updateSCPDataMovementDetails_argsTupleScheme extends TupleScheme<updateSCPDataMovementDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.jobSubmissionInterfaceId);
        struct.scpDataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSCPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.jobSubmissionInterfaceId = iprot.readString();
        struct.setJobSubmissionInterfaceIdIsSet(true);
        struct.scpDataMovement = new org.apache.airavata.model.appcatalog.computeresource.SCPDataMovement();
        struct.scpDataMovement.read(iprot);
        struct.setScpDataMovementIsSet(true);
      }
    }

  }

  public static class updateSCPDataMovementDetails_result implements org.apache.thrift.TBase<updateSCPDataMovementDetails_result, updateSCPDataMovementDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSCPDataMovementDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSCPDataMovementDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSCPDataMovementDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSCPDataMovementDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSCPDataMovementDetails_result.class, metaDataMap);
    }

    public updateSCPDataMovementDetails_result() {
    }

    public updateSCPDataMovementDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSCPDataMovementDetails_result(updateSCPDataMovementDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateSCPDataMovementDetails_result deepCopy() {
      return new updateSCPDataMovementDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateSCPDataMovementDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateSCPDataMovementDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateSCPDataMovementDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateSCPDataMovementDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSCPDataMovementDetails_result)
        return this.equals((updateSCPDataMovementDetails_result)that);
      return false;
    }

    public boolean equals(updateSCPDataMovementDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateSCPDataMovementDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSCPDataMovementDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSCPDataMovementDetails_resultStandardSchemeFactory implements SchemeFactory {
      public updateSCPDataMovementDetails_resultStandardScheme getScheme() {
        return new updateSCPDataMovementDetails_resultStandardScheme();
      }
    }

    private static class updateSCPDataMovementDetails_resultStandardScheme extends StandardScheme<updateSCPDataMovementDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSCPDataMovementDetails_resultTupleSchemeFactory implements SchemeFactory {
      public updateSCPDataMovementDetails_resultTupleScheme getScheme() {
        return new updateSCPDataMovementDetails_resultTupleScheme();
      }
    }

    private static class updateSCPDataMovementDetails_resultTupleScheme extends TupleScheme<updateSCPDataMovementDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSCPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addGridFTPDataMovementDetails_args implements org.apache.thrift.TBase<addGridFTPDataMovementDetails_args, addGridFTPDataMovementDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<addGridFTPDataMovementDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGridFTPDataMovementDetails_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRIORITY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("priorityOrder", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField GRID_FTPDATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("gridFTPDataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGridFTPDataMovementDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGridFTPDataMovementDetails_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public int priorityOrder; // required
    public org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      PRIORITY_ORDER((short)2, "priorityOrder"),
      GRID_FTPDATA_MOVEMENT((short)3, "gridFTPDataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // PRIORITY_ORDER
            return PRIORITY_ORDER;
          case 3: // GRID_FTPDATA_MOVEMENT
            return GRID_FTPDATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRIORITYORDER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRIORITY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("priorityOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GRID_FTPDATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("gridFTPDataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGridFTPDataMovementDetails_args.class, metaDataMap);
    }

    public addGridFTPDataMovementDetails_args() {
    }

    public addGridFTPDataMovementDetails_args(
      String computeResourceId,
      int priorityOrder,
      org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      this.gridFTPDataMovement = gridFTPDataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGridFTPDataMovementDetails_args(addGridFTPDataMovementDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      this.priorityOrder = other.priorityOrder;
      if (other.isSetGridFTPDataMovement()) {
        this.gridFTPDataMovement = new org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement(other.gridFTPDataMovement);
      }
    }

    public addGridFTPDataMovementDetails_args deepCopy() {
      return new addGridFTPDataMovementDetails_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      setPriorityOrderIsSet(false);
      this.priorityOrder = 0;
      this.gridFTPDataMovement = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addGridFTPDataMovementDetails_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public int getPriorityOrder() {
      return this.priorityOrder;
    }

    public addGridFTPDataMovementDetails_args setPriorityOrder(int priorityOrder) {
      this.priorityOrder = priorityOrder;
      setPriorityOrderIsSet(true);
      return this;
    }

    public void unsetPriorityOrder() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    /** Returns true if field priorityOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetPriorityOrder() {
      return EncodingUtils.testBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID);
    }

    public void setPriorityOrderIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITYORDER_ISSET_ID, value);
    }

    public org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement getGridFTPDataMovement() {
      return this.gridFTPDataMovement;
    }

    public addGridFTPDataMovementDetails_args setGridFTPDataMovement(org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) {
      this.gridFTPDataMovement = gridFTPDataMovement;
      return this;
    }

    public void unsetGridFTPDataMovement() {
      this.gridFTPDataMovement = null;
    }

    /** Returns true if field gridFTPDataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetGridFTPDataMovement() {
      return this.gridFTPDataMovement != null;
    }

    public void setGridFTPDataMovementIsSet(boolean value) {
      if (!value) {
        this.gridFTPDataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case PRIORITY_ORDER:
        if (value == null) {
          unsetPriorityOrder();
        } else {
          setPriorityOrder((Integer)value);
        }
        break;

      case GRID_FTPDATA_MOVEMENT:
        if (value == null) {
          unsetGridFTPDataMovement();
        } else {
          setGridFTPDataMovement((org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case PRIORITY_ORDER:
        return Integer.valueOf(getPriorityOrder());

      case GRID_FTPDATA_MOVEMENT:
        return getGridFTPDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case PRIORITY_ORDER:
        return isSetPriorityOrder();
      case GRID_FTPDATA_MOVEMENT:
        return isSetGridFTPDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGridFTPDataMovementDetails_args)
        return this.equals((addGridFTPDataMovementDetails_args)that);
      return false;
    }

    public boolean equals(addGridFTPDataMovementDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_priorityOrder = true;
      boolean that_present_priorityOrder = true;
      if (this_present_priorityOrder || that_present_priorityOrder) {
        if (!(this_present_priorityOrder && that_present_priorityOrder))
          return false;
        if (this.priorityOrder != that.priorityOrder)
          return false;
      }

      boolean this_present_gridFTPDataMovement = true && this.isSetGridFTPDataMovement();
      boolean that_present_gridFTPDataMovement = true && that.isSetGridFTPDataMovement();
      if (this_present_gridFTPDataMovement || that_present_gridFTPDataMovement) {
        if (!(this_present_gridFTPDataMovement && that_present_gridFTPDataMovement))
          return false;
        if (!this.gridFTPDataMovement.equals(that.gridFTPDataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGridFTPDataMovementDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriorityOrder()).compareTo(other.isSetPriorityOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriorityOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorityOrder, other.priorityOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGridFTPDataMovement()).compareTo(other.isSetGridFTPDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGridFTPDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gridFTPDataMovement, other.gridFTPDataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGridFTPDataMovementDetails_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priorityOrder:");
      sb.append(this.priorityOrder);
      first = false;
      if (!first) sb.append(", ");
      sb.append("gridFTPDataMovement:");
      if (this.gridFTPDataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.gridFTPDataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'priorityOrder' because it's a primitive and you chose the non-beans generator.
      if (gridFTPDataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gridFTPDataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (gridFTPDataMovement != null) {
        gridFTPDataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGridFTPDataMovementDetails_argsStandardSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementDetails_argsStandardScheme getScheme() {
        return new addGridFTPDataMovementDetails_argsStandardScheme();
      }
    }

    private static class addGridFTPDataMovementDetails_argsStandardScheme extends StandardScheme<addGridFTPDataMovementDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRIORITY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priorityOrder = iprot.readI32();
                struct.setPriorityOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GRID_FTPDATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gridFTPDataMovement = new org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement();
                struct.gridFTPDataMovement.read(iprot);
                struct.setGridFTPDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPriorityOrder()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'priorityOrder' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRIORITY_ORDER_FIELD_DESC);
        oprot.writeI32(struct.priorityOrder);
        oprot.writeFieldEnd();
        if (struct.gridFTPDataMovement != null) {
          oprot.writeFieldBegin(GRID_FTPDATA_MOVEMENT_FIELD_DESC);
          struct.gridFTPDataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGridFTPDataMovementDetails_argsTupleSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementDetails_argsTupleScheme getScheme() {
        return new addGridFTPDataMovementDetails_argsTupleScheme();
      }
    }

    private static class addGridFTPDataMovementDetails_argsTupleScheme extends TupleScheme<addGridFTPDataMovementDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        oprot.writeI32(struct.priorityOrder);
        struct.gridFTPDataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.priorityOrder = iprot.readI32();
        struct.setPriorityOrderIsSet(true);
        struct.gridFTPDataMovement = new org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement();
        struct.gridFTPDataMovement.read(iprot);
        struct.setGridFTPDataMovementIsSet(true);
      }
    }

  }

  public static class addGridFTPDataMovementDetails_result implements org.apache.thrift.TBase<addGridFTPDataMovementDetails_result, addGridFTPDataMovementDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<addGridFTPDataMovementDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGridFTPDataMovementDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGridFTPDataMovementDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGridFTPDataMovementDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGridFTPDataMovementDetails_result.class, metaDataMap);
    }

    public addGridFTPDataMovementDetails_result() {
    }

    public addGridFTPDataMovementDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGridFTPDataMovementDetails_result(addGridFTPDataMovementDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addGridFTPDataMovementDetails_result deepCopy() {
      return new addGridFTPDataMovementDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addGridFTPDataMovementDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addGridFTPDataMovementDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addGridFTPDataMovementDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addGridFTPDataMovementDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGridFTPDataMovementDetails_result)
        return this.equals((addGridFTPDataMovementDetails_result)that);
      return false;
    }

    public boolean equals(addGridFTPDataMovementDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGridFTPDataMovementDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGridFTPDataMovementDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGridFTPDataMovementDetails_resultStandardSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementDetails_resultStandardScheme getScheme() {
        return new addGridFTPDataMovementDetails_resultStandardScheme();
      }
    }

    private static class addGridFTPDataMovementDetails_resultStandardScheme extends StandardScheme<addGridFTPDataMovementDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGridFTPDataMovementDetails_resultTupleSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementDetails_resultTupleScheme getScheme() {
        return new addGridFTPDataMovementDetails_resultTupleScheme();
      }
    }

    private static class addGridFTPDataMovementDetails_resultTupleScheme extends TupleScheme<addGridFTPDataMovementDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateGridFTPDataMovementDetails_args implements org.apache.thrift.TBase<updateGridFTPDataMovementDetails_args, updateGridFTPDataMovementDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGridFTPDataMovementDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGridFTPDataMovementDetails_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GRID_FTPDATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("gridFTPDataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGridFTPDataMovementDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGridFTPDataMovementDetails_argsTupleSchemeFactory());
    }

    public String jobSubmissionInterfaceId; // required
    public org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_INTERFACE_ID((short)1, "jobSubmissionInterfaceId"),
      GRID_FTPDATA_MOVEMENT((short)2, "gridFTPDataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_INTERFACE_ID
            return JOB_SUBMISSION_INTERFACE_ID;
          case 2: // GRID_FTPDATA_MOVEMENT
            return GRID_FTPDATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GRID_FTPDATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("gridFTPDataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGridFTPDataMovementDetails_args.class, metaDataMap);
    }

    public updateGridFTPDataMovementDetails_args() {
    }

    public updateGridFTPDataMovementDetails_args(
      String jobSubmissionInterfaceId,
      org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement)
    {
      this();
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      this.gridFTPDataMovement = gridFTPDataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGridFTPDataMovementDetails_args(updateGridFTPDataMovementDetails_args other) {
      if (other.isSetJobSubmissionInterfaceId()) {
        this.jobSubmissionInterfaceId = other.jobSubmissionInterfaceId;
      }
      if (other.isSetGridFTPDataMovement()) {
        this.gridFTPDataMovement = new org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement(other.gridFTPDataMovement);
      }
    }

    public updateGridFTPDataMovementDetails_args deepCopy() {
      return new updateGridFTPDataMovementDetails_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionInterfaceId = null;
      this.gridFTPDataMovement = null;
    }

    public String getJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId;
    }

    public updateGridFTPDataMovementDetails_args setJobSubmissionInterfaceId(String jobSubmissionInterfaceId) {
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      return this;
    }

    public void unsetJobSubmissionInterfaceId() {
      this.jobSubmissionInterfaceId = null;
    }

    /** Returns true if field jobSubmissionInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId != null;
    }

    public void setJobSubmissionInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionInterfaceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement getGridFTPDataMovement() {
      return this.gridFTPDataMovement;
    }

    public updateGridFTPDataMovementDetails_args setGridFTPDataMovement(org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement gridFTPDataMovement) {
      this.gridFTPDataMovement = gridFTPDataMovement;
      return this;
    }

    public void unsetGridFTPDataMovement() {
      this.gridFTPDataMovement = null;
    }

    /** Returns true if field gridFTPDataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetGridFTPDataMovement() {
      return this.gridFTPDataMovement != null;
    }

    public void setGridFTPDataMovementIsSet(boolean value) {
      if (!value) {
        this.gridFTPDataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        if (value == null) {
          unsetJobSubmissionInterfaceId();
        } else {
          setJobSubmissionInterfaceId((String)value);
        }
        break;

      case GRID_FTPDATA_MOVEMENT:
        if (value == null) {
          unsetGridFTPDataMovement();
        } else {
          setGridFTPDataMovement((org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return getJobSubmissionInterfaceId();

      case GRID_FTPDATA_MOVEMENT:
        return getGridFTPDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return isSetJobSubmissionInterfaceId();
      case GRID_FTPDATA_MOVEMENT:
        return isSetGridFTPDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGridFTPDataMovementDetails_args)
        return this.equals((updateGridFTPDataMovementDetails_args)that);
      return false;
    }

    public boolean equals(updateGridFTPDataMovementDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionInterfaceId = true && this.isSetJobSubmissionInterfaceId();
      boolean that_present_jobSubmissionInterfaceId = true && that.isSetJobSubmissionInterfaceId();
      if (this_present_jobSubmissionInterfaceId || that_present_jobSubmissionInterfaceId) {
        if (!(this_present_jobSubmissionInterfaceId && that_present_jobSubmissionInterfaceId))
          return false;
        if (!this.jobSubmissionInterfaceId.equals(that.jobSubmissionInterfaceId))
          return false;
      }

      boolean this_present_gridFTPDataMovement = true && this.isSetGridFTPDataMovement();
      boolean that_present_gridFTPDataMovement = true && that.isSetGridFTPDataMovement();
      if (this_present_gridFTPDataMovement || that_present_gridFTPDataMovement) {
        if (!(this_present_gridFTPDataMovement && that_present_gridFTPDataMovement))
          return false;
        if (!this.gridFTPDataMovement.equals(that.gridFTPDataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateGridFTPDataMovementDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaceId()).compareTo(other.isSetJobSubmissionInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaceId, other.jobSubmissionInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGridFTPDataMovement()).compareTo(other.isSetGridFTPDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGridFTPDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gridFTPDataMovement, other.gridFTPDataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGridFTPDataMovementDetails_args(");
      boolean first = true;

      sb.append("jobSubmissionInterfaceId:");
      if (this.jobSubmissionInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gridFTPDataMovement:");
      if (this.gridFTPDataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.gridFTPDataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionInterfaceId' was not present! Struct: " + toString());
      }
      if (gridFTPDataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gridFTPDataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (gridFTPDataMovement != null) {
        gridFTPDataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGridFTPDataMovementDetails_argsStandardSchemeFactory implements SchemeFactory {
      public updateGridFTPDataMovementDetails_argsStandardScheme getScheme() {
        return new updateGridFTPDataMovementDetails_argsStandardScheme();
      }
    }

    private static class updateGridFTPDataMovementDetails_argsStandardScheme extends StandardScheme<updateGridFTPDataMovementDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobSubmissionInterfaceId = iprot.readString();
                struct.setJobSubmissionInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GRID_FTPDATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gridFTPDataMovement = new org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement();
                struct.gridFTPDataMovement.read(iprot);
                struct.setGridFTPDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionInterfaceId != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.jobSubmissionInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.gridFTPDataMovement != null) {
          oprot.writeFieldBegin(GRID_FTPDATA_MOVEMENT_FIELD_DESC);
          struct.gridFTPDataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGridFTPDataMovementDetails_argsTupleSchemeFactory implements SchemeFactory {
      public updateGridFTPDataMovementDetails_argsTupleScheme getScheme() {
        return new updateGridFTPDataMovementDetails_argsTupleScheme();
      }
    }

    private static class updateGridFTPDataMovementDetails_argsTupleScheme extends TupleScheme<updateGridFTPDataMovementDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.jobSubmissionInterfaceId);
        struct.gridFTPDataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGridFTPDataMovementDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.jobSubmissionInterfaceId = iprot.readString();
        struct.setJobSubmissionInterfaceIdIsSet(true);
        struct.gridFTPDataMovement = new org.apache.airavata.model.appcatalog.computeresource.GridFTPDataMovement();
        struct.gridFTPDataMovement.read(iprot);
        struct.setGridFTPDataMovementIsSet(true);
      }
    }

  }

  public static class updateGridFTPDataMovementDetails_result implements org.apache.thrift.TBase<updateGridFTPDataMovementDetails_result, updateGridFTPDataMovementDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGridFTPDataMovementDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGridFTPDataMovementDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGridFTPDataMovementDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGridFTPDataMovementDetails_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGridFTPDataMovementDetails_result.class, metaDataMap);
    }

    public updateGridFTPDataMovementDetails_result() {
    }

    public updateGridFTPDataMovementDetails_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGridFTPDataMovementDetails_result(updateGridFTPDataMovementDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateGridFTPDataMovementDetails_result deepCopy() {
      return new updateGridFTPDataMovementDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateGridFTPDataMovementDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateGridFTPDataMovementDetails_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateGridFTPDataMovementDetails_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateGridFTPDataMovementDetails_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGridFTPDataMovementDetails_result)
        return this.equals((updateGridFTPDataMovementDetails_result)that);
      return false;
    }

    public boolean equals(updateGridFTPDataMovementDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateGridFTPDataMovementDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGridFTPDataMovementDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGridFTPDataMovementDetails_resultStandardSchemeFactory implements SchemeFactory {
      public updateGridFTPDataMovementDetails_resultStandardScheme getScheme() {
        return new updateGridFTPDataMovementDetails_resultStandardScheme();
      }
    }

    private static class updateGridFTPDataMovementDetails_resultStandardScheme extends StandardScheme<updateGridFTPDataMovementDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGridFTPDataMovementDetails_resultTupleSchemeFactory implements SchemeFactory {
      public updateGridFTPDataMovementDetails_resultTupleScheme getScheme() {
        return new updateGridFTPDataMovementDetails_resultTupleScheme();
      }
    }

    private static class updateGridFTPDataMovementDetails_resultTupleScheme extends TupleScheme<updateGridFTPDataMovementDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGridFTPDataMovementDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class changeJobSubmissionPriority_args implements org.apache.thrift.TBase<changeJobSubmissionPriority_args, changeJobSubmissionPriority_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeJobSubmissionPriority_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeJobSubmissionPriority_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PRIORITY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("newPriorityOrder", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeJobSubmissionPriority_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeJobSubmissionPriority_argsTupleSchemeFactory());
    }

    public String jobSubmissionInterfaceId; // required
    public int newPriorityOrder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_INTERFACE_ID((short)1, "jobSubmissionInterfaceId"),
      NEW_PRIORITY_ORDER((short)2, "newPriorityOrder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_INTERFACE_ID
            return JOB_SUBMISSION_INTERFACE_ID;
          case 2: // NEW_PRIORITY_ORDER
            return NEW_PRIORITY_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWPRIORITYORDER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PRIORITY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("newPriorityOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeJobSubmissionPriority_args.class, metaDataMap);
    }

    public changeJobSubmissionPriority_args() {
    }

    public changeJobSubmissionPriority_args(
      String jobSubmissionInterfaceId,
      int newPriorityOrder)
    {
      this();
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      this.newPriorityOrder = newPriorityOrder;
      setNewPriorityOrderIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeJobSubmissionPriority_args(changeJobSubmissionPriority_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJobSubmissionInterfaceId()) {
        this.jobSubmissionInterfaceId = other.jobSubmissionInterfaceId;
      }
      this.newPriorityOrder = other.newPriorityOrder;
    }

    public changeJobSubmissionPriority_args deepCopy() {
      return new changeJobSubmissionPriority_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionInterfaceId = null;
      setNewPriorityOrderIsSet(false);
      this.newPriorityOrder = 0;
    }

    public String getJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId;
    }

    public changeJobSubmissionPriority_args setJobSubmissionInterfaceId(String jobSubmissionInterfaceId) {
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      return this;
    }

    public void unsetJobSubmissionInterfaceId() {
      this.jobSubmissionInterfaceId = null;
    }

    /** Returns true if field jobSubmissionInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId != null;
    }

    public void setJobSubmissionInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionInterfaceId = null;
      }
    }

    public int getNewPriorityOrder() {
      return this.newPriorityOrder;
    }

    public changeJobSubmissionPriority_args setNewPriorityOrder(int newPriorityOrder) {
      this.newPriorityOrder = newPriorityOrder;
      setNewPriorityOrderIsSet(true);
      return this;
    }

    public void unsetNewPriorityOrder() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPRIORITYORDER_ISSET_ID);
    }

    /** Returns true if field newPriorityOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPriorityOrder() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWPRIORITYORDER_ISSET_ID);
    }

    public void setNewPriorityOrderIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPRIORITYORDER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        if (value == null) {
          unsetJobSubmissionInterfaceId();
        } else {
          setJobSubmissionInterfaceId((String)value);
        }
        break;

      case NEW_PRIORITY_ORDER:
        if (value == null) {
          unsetNewPriorityOrder();
        } else {
          setNewPriorityOrder((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return getJobSubmissionInterfaceId();

      case NEW_PRIORITY_ORDER:
        return Integer.valueOf(getNewPriorityOrder());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return isSetJobSubmissionInterfaceId();
      case NEW_PRIORITY_ORDER:
        return isSetNewPriorityOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeJobSubmissionPriority_args)
        return this.equals((changeJobSubmissionPriority_args)that);
      return false;
    }

    public boolean equals(changeJobSubmissionPriority_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionInterfaceId = true && this.isSetJobSubmissionInterfaceId();
      boolean that_present_jobSubmissionInterfaceId = true && that.isSetJobSubmissionInterfaceId();
      if (this_present_jobSubmissionInterfaceId || that_present_jobSubmissionInterfaceId) {
        if (!(this_present_jobSubmissionInterfaceId && that_present_jobSubmissionInterfaceId))
          return false;
        if (!this.jobSubmissionInterfaceId.equals(that.jobSubmissionInterfaceId))
          return false;
      }

      boolean this_present_newPriorityOrder = true;
      boolean that_present_newPriorityOrder = true;
      if (this_present_newPriorityOrder || that_present_newPriorityOrder) {
        if (!(this_present_newPriorityOrder && that_present_newPriorityOrder))
          return false;
        if (this.newPriorityOrder != that.newPriorityOrder)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeJobSubmissionPriority_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaceId()).compareTo(other.isSetJobSubmissionInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaceId, other.jobSubmissionInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPriorityOrder()).compareTo(other.isSetNewPriorityOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPriorityOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPriorityOrder, other.newPriorityOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeJobSubmissionPriority_args(");
      boolean first = true;

      sb.append("jobSubmissionInterfaceId:");
      if (this.jobSubmissionInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPriorityOrder:");
      sb.append(this.newPriorityOrder);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionInterfaceId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'newPriorityOrder' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeJobSubmissionPriority_argsStandardSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriority_argsStandardScheme getScheme() {
        return new changeJobSubmissionPriority_argsStandardScheme();
      }
    }

    private static class changeJobSubmissionPriority_argsStandardScheme extends StandardScheme<changeJobSubmissionPriority_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeJobSubmissionPriority_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobSubmissionInterfaceId = iprot.readString();
                struct.setJobSubmissionInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PRIORITY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newPriorityOrder = iprot.readI32();
                struct.setNewPriorityOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetNewPriorityOrder()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'newPriorityOrder' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeJobSubmissionPriority_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionInterfaceId != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.jobSubmissionInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_PRIORITY_ORDER_FIELD_DESC);
        oprot.writeI32(struct.newPriorityOrder);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeJobSubmissionPriority_argsTupleSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriority_argsTupleScheme getScheme() {
        return new changeJobSubmissionPriority_argsTupleScheme();
      }
    }

    private static class changeJobSubmissionPriority_argsTupleScheme extends TupleScheme<changeJobSubmissionPriority_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.jobSubmissionInterfaceId);
        oprot.writeI32(struct.newPriorityOrder);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.jobSubmissionInterfaceId = iprot.readString();
        struct.setJobSubmissionInterfaceIdIsSet(true);
        struct.newPriorityOrder = iprot.readI32();
        struct.setNewPriorityOrderIsSet(true);
      }
    }

  }

  public static class changeJobSubmissionPriority_result implements org.apache.thrift.TBase<changeJobSubmissionPriority_result, changeJobSubmissionPriority_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeJobSubmissionPriority_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeJobSubmissionPriority_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeJobSubmissionPriority_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeJobSubmissionPriority_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeJobSubmissionPriority_result.class, metaDataMap);
    }

    public changeJobSubmissionPriority_result() {
    }

    public changeJobSubmissionPriority_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeJobSubmissionPriority_result(changeJobSubmissionPriority_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public changeJobSubmissionPriority_result deepCopy() {
      return new changeJobSubmissionPriority_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changeJobSubmissionPriority_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public changeJobSubmissionPriority_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public changeJobSubmissionPriority_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public changeJobSubmissionPriority_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeJobSubmissionPriority_result)
        return this.equals((changeJobSubmissionPriority_result)that);
      return false;
    }

    public boolean equals(changeJobSubmissionPriority_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeJobSubmissionPriority_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeJobSubmissionPriority_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeJobSubmissionPriority_resultStandardSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriority_resultStandardScheme getScheme() {
        return new changeJobSubmissionPriority_resultStandardScheme();
      }
    }

    private static class changeJobSubmissionPriority_resultStandardScheme extends StandardScheme<changeJobSubmissionPriority_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeJobSubmissionPriority_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeJobSubmissionPriority_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeJobSubmissionPriority_resultTupleSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriority_resultTupleScheme getScheme() {
        return new changeJobSubmissionPriority_resultTupleScheme();
      }
    }

    private static class changeJobSubmissionPriority_resultTupleScheme extends TupleScheme<changeJobSubmissionPriority_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class changeDataMovementPriority_args implements org.apache.thrift.TBase<changeDataMovementPriority_args, changeDataMovementPriority_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeDataMovementPriority_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeDataMovementPriority_args");

    private static final org.apache.thrift.protocol.TField DATA_MOVEMENT_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMovementInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PRIORITY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("newPriorityOrder", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeDataMovementPriority_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeDataMovementPriority_argsTupleSchemeFactory());
    }

    public String dataMovementInterfaceId; // required
    public int newPriorityOrder; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_MOVEMENT_INTERFACE_ID((short)1, "dataMovementInterfaceId"),
      NEW_PRIORITY_ORDER((short)2, "newPriorityOrder");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_MOVEMENT_INTERFACE_ID
            return DATA_MOVEMENT_INTERFACE_ID;
          case 2: // NEW_PRIORITY_ORDER
            return NEW_PRIORITY_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWPRIORITYORDER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_MOVEMENT_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataMovementInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PRIORITY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("newPriorityOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeDataMovementPriority_args.class, metaDataMap);
    }

    public changeDataMovementPriority_args() {
    }

    public changeDataMovementPriority_args(
      String dataMovementInterfaceId,
      int newPriorityOrder)
    {
      this();
      this.dataMovementInterfaceId = dataMovementInterfaceId;
      this.newPriorityOrder = newPriorityOrder;
      setNewPriorityOrderIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeDataMovementPriority_args(changeDataMovementPriority_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDataMovementInterfaceId()) {
        this.dataMovementInterfaceId = other.dataMovementInterfaceId;
      }
      this.newPriorityOrder = other.newPriorityOrder;
    }

    public changeDataMovementPriority_args deepCopy() {
      return new changeDataMovementPriority_args(this);
    }

    @Override
    public void clear() {
      this.dataMovementInterfaceId = null;
      setNewPriorityOrderIsSet(false);
      this.newPriorityOrder = 0;
    }

    public String getDataMovementInterfaceId() {
      return this.dataMovementInterfaceId;
    }

    public changeDataMovementPriority_args setDataMovementInterfaceId(String dataMovementInterfaceId) {
      this.dataMovementInterfaceId = dataMovementInterfaceId;
      return this;
    }

    public void unsetDataMovementInterfaceId() {
      this.dataMovementInterfaceId = null;
    }

    /** Returns true if field dataMovementInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMovementInterfaceId() {
      return this.dataMovementInterfaceId != null;
    }

    public void setDataMovementInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.dataMovementInterfaceId = null;
      }
    }

    public int getNewPriorityOrder() {
      return this.newPriorityOrder;
    }

    public changeDataMovementPriority_args setNewPriorityOrder(int newPriorityOrder) {
      this.newPriorityOrder = newPriorityOrder;
      setNewPriorityOrderIsSet(true);
      return this;
    }

    public void unsetNewPriorityOrder() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPRIORITYORDER_ISSET_ID);
    }

    /** Returns true if field newPriorityOrder is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPriorityOrder() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWPRIORITYORDER_ISSET_ID);
    }

    public void setNewPriorityOrderIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPRIORITYORDER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_MOVEMENT_INTERFACE_ID:
        if (value == null) {
          unsetDataMovementInterfaceId();
        } else {
          setDataMovementInterfaceId((String)value);
        }
        break;

      case NEW_PRIORITY_ORDER:
        if (value == null) {
          unsetNewPriorityOrder();
        } else {
          setNewPriorityOrder((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_MOVEMENT_INTERFACE_ID:
        return getDataMovementInterfaceId();

      case NEW_PRIORITY_ORDER:
        return Integer.valueOf(getNewPriorityOrder());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_MOVEMENT_INTERFACE_ID:
        return isSetDataMovementInterfaceId();
      case NEW_PRIORITY_ORDER:
        return isSetNewPriorityOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeDataMovementPriority_args)
        return this.equals((changeDataMovementPriority_args)that);
      return false;
    }

    public boolean equals(changeDataMovementPriority_args that) {
      if (that == null)
        return false;

      boolean this_present_dataMovementInterfaceId = true && this.isSetDataMovementInterfaceId();
      boolean that_present_dataMovementInterfaceId = true && that.isSetDataMovementInterfaceId();
      if (this_present_dataMovementInterfaceId || that_present_dataMovementInterfaceId) {
        if (!(this_present_dataMovementInterfaceId && that_present_dataMovementInterfaceId))
          return false;
        if (!this.dataMovementInterfaceId.equals(that.dataMovementInterfaceId))
          return false;
      }

      boolean this_present_newPriorityOrder = true;
      boolean that_present_newPriorityOrder = true;
      if (this_present_newPriorityOrder || that_present_newPriorityOrder) {
        if (!(this_present_newPriorityOrder && that_present_newPriorityOrder))
          return false;
        if (this.newPriorityOrder != that.newPriorityOrder)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeDataMovementPriority_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataMovementInterfaceId()).compareTo(other.isSetDataMovementInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMovementInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMovementInterfaceId, other.dataMovementInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPriorityOrder()).compareTo(other.isSetNewPriorityOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPriorityOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPriorityOrder, other.newPriorityOrder);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeDataMovementPriority_args(");
      boolean first = true;

      sb.append("dataMovementInterfaceId:");
      if (this.dataMovementInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMovementInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPriorityOrder:");
      sb.append(this.newPriorityOrder);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (dataMovementInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataMovementInterfaceId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'newPriorityOrder' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeDataMovementPriority_argsStandardSchemeFactory implements SchemeFactory {
      public changeDataMovementPriority_argsStandardScheme getScheme() {
        return new changeDataMovementPriority_argsStandardScheme();
      }
    }

    private static class changeDataMovementPriority_argsStandardScheme extends StandardScheme<changeDataMovementPriority_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeDataMovementPriority_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_MOVEMENT_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataMovementInterfaceId = iprot.readString();
                struct.setDataMovementInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PRIORITY_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newPriorityOrder = iprot.readI32();
                struct.setNewPriorityOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetNewPriorityOrder()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'newPriorityOrder' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeDataMovementPriority_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataMovementInterfaceId != null) {
          oprot.writeFieldBegin(DATA_MOVEMENT_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.dataMovementInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_PRIORITY_ORDER_FIELD_DESC);
        oprot.writeI32(struct.newPriorityOrder);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeDataMovementPriority_argsTupleSchemeFactory implements SchemeFactory {
      public changeDataMovementPriority_argsTupleScheme getScheme() {
        return new changeDataMovementPriority_argsTupleScheme();
      }
    }

    private static class changeDataMovementPriority_argsTupleScheme extends TupleScheme<changeDataMovementPriority_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.dataMovementInterfaceId);
        oprot.writeI32(struct.newPriorityOrder);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriority_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.dataMovementInterfaceId = iprot.readString();
        struct.setDataMovementInterfaceIdIsSet(true);
        struct.newPriorityOrder = iprot.readI32();
        struct.setNewPriorityOrderIsSet(true);
      }
    }

  }

  public static class changeDataMovementPriority_result implements org.apache.thrift.TBase<changeDataMovementPriority_result, changeDataMovementPriority_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeDataMovementPriority_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeDataMovementPriority_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeDataMovementPriority_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeDataMovementPriority_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeDataMovementPriority_result.class, metaDataMap);
    }

    public changeDataMovementPriority_result() {
    }

    public changeDataMovementPriority_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeDataMovementPriority_result(changeDataMovementPriority_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public changeDataMovementPriority_result deepCopy() {
      return new changeDataMovementPriority_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changeDataMovementPriority_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public changeDataMovementPriority_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public changeDataMovementPriority_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public changeDataMovementPriority_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeDataMovementPriority_result)
        return this.equals((changeDataMovementPriority_result)that);
      return false;
    }

    public boolean equals(changeDataMovementPriority_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeDataMovementPriority_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeDataMovementPriority_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeDataMovementPriority_resultStandardSchemeFactory implements SchemeFactory {
      public changeDataMovementPriority_resultStandardScheme getScheme() {
        return new changeDataMovementPriority_resultStandardScheme();
      }
    }

    private static class changeDataMovementPriority_resultStandardScheme extends StandardScheme<changeDataMovementPriority_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeDataMovementPriority_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeDataMovementPriority_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeDataMovementPriority_resultTupleSchemeFactory implements SchemeFactory {
      public changeDataMovementPriority_resultTupleScheme getScheme() {
        return new changeDataMovementPriority_resultTupleScheme();
      }
    }

    private static class changeDataMovementPriority_resultTupleScheme extends TupleScheme<changeDataMovementPriority_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriority_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class changeJobSubmissionPriorities_args implements org.apache.thrift.TBase<changeJobSubmissionPriorities_args, changeJobSubmissionPriorities_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeJobSubmissionPriorities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeJobSubmissionPriorities_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_PRIORITY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionPriorityMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeJobSubmissionPriorities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeJobSubmissionPriorities_argsTupleSchemeFactory());
    }

    public Map<String,Integer> jobSubmissionPriorityMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_PRIORITY_MAP((short)1, "jobSubmissionPriorityMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_PRIORITY_MAP
            return JOB_SUBMISSION_PRIORITY_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_PRIORITY_MAP, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionPriorityMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeJobSubmissionPriorities_args.class, metaDataMap);
    }

    public changeJobSubmissionPriorities_args() {
    }

    public changeJobSubmissionPriorities_args(
      Map<String,Integer> jobSubmissionPriorityMap)
    {
      this();
      this.jobSubmissionPriorityMap = jobSubmissionPriorityMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeJobSubmissionPriorities_args(changeJobSubmissionPriorities_args other) {
      if (other.isSetJobSubmissionPriorityMap()) {
        Map<String,Integer> __this__jobSubmissionPriorityMap = new HashMap<String,Integer>(other.jobSubmissionPriorityMap);
        this.jobSubmissionPriorityMap = __this__jobSubmissionPriorityMap;
      }
    }

    public changeJobSubmissionPriorities_args deepCopy() {
      return new changeJobSubmissionPriorities_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionPriorityMap = null;
    }

    public int getJobSubmissionPriorityMapSize() {
      return (this.jobSubmissionPriorityMap == null) ? 0 : this.jobSubmissionPriorityMap.size();
    }

    public void putToJobSubmissionPriorityMap(String key, int val) {
      if (this.jobSubmissionPriorityMap == null) {
        this.jobSubmissionPriorityMap = new HashMap<String,Integer>();
      }
      this.jobSubmissionPriorityMap.put(key, val);
    }

    public Map<String,Integer> getJobSubmissionPriorityMap() {
      return this.jobSubmissionPriorityMap;
    }

    public changeJobSubmissionPriorities_args setJobSubmissionPriorityMap(Map<String,Integer> jobSubmissionPriorityMap) {
      this.jobSubmissionPriorityMap = jobSubmissionPriorityMap;
      return this;
    }

    public void unsetJobSubmissionPriorityMap() {
      this.jobSubmissionPriorityMap = null;
    }

    /** Returns true if field jobSubmissionPriorityMap is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionPriorityMap() {
      return this.jobSubmissionPriorityMap != null;
    }

    public void setJobSubmissionPriorityMapIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionPriorityMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_PRIORITY_MAP:
        if (value == null) {
          unsetJobSubmissionPriorityMap();
        } else {
          setJobSubmissionPriorityMap((Map<String,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_PRIORITY_MAP:
        return getJobSubmissionPriorityMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_PRIORITY_MAP:
        return isSetJobSubmissionPriorityMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeJobSubmissionPriorities_args)
        return this.equals((changeJobSubmissionPriorities_args)that);
      return false;
    }

    public boolean equals(changeJobSubmissionPriorities_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionPriorityMap = true && this.isSetJobSubmissionPriorityMap();
      boolean that_present_jobSubmissionPriorityMap = true && that.isSetJobSubmissionPriorityMap();
      if (this_present_jobSubmissionPriorityMap || that_present_jobSubmissionPriorityMap) {
        if (!(this_present_jobSubmissionPriorityMap && that_present_jobSubmissionPriorityMap))
          return false;
        if (!this.jobSubmissionPriorityMap.equals(that.jobSubmissionPriorityMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeJobSubmissionPriorities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionPriorityMap()).compareTo(other.isSetJobSubmissionPriorityMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionPriorityMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionPriorityMap, other.jobSubmissionPriorityMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeJobSubmissionPriorities_args(");
      boolean first = true;

      sb.append("jobSubmissionPriorityMap:");
      if (this.jobSubmissionPriorityMap == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionPriorityMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionPriorityMap == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionPriorityMap' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeJobSubmissionPriorities_argsStandardSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriorities_argsStandardScheme getScheme() {
        return new changeJobSubmissionPriorities_argsStandardScheme();
      }
    }

    private static class changeJobSubmissionPriorities_argsStandardScheme extends StandardScheme<changeJobSubmissionPriorities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeJobSubmissionPriorities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_PRIORITY_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                  struct.jobSubmissionPriorityMap = new HashMap<String,Integer>(2*_map106.size);
                  for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                  {
                    String _key108;
                    int _val109;
                    _key108 = iprot.readString();
                    _val109 = iprot.readI32();
                    struct.jobSubmissionPriorityMap.put(_key108, _val109);
                  }
                  iprot.readMapEnd();
                }
                struct.setJobSubmissionPriorityMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeJobSubmissionPriorities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionPriorityMap != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_PRIORITY_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.jobSubmissionPriorityMap.size()));
            for (Map.Entry<String, Integer> _iter110 : struct.jobSubmissionPriorityMap.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              oprot.writeI32(_iter110.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeJobSubmissionPriorities_argsTupleSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriorities_argsTupleScheme getScheme() {
        return new changeJobSubmissionPriorities_argsTupleScheme();
      }
    }

    private static class changeJobSubmissionPriorities_argsTupleScheme extends TupleScheme<changeJobSubmissionPriorities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriorities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.jobSubmissionPriorityMap.size());
          for (Map.Entry<String, Integer> _iter111 : struct.jobSubmissionPriorityMap.entrySet())
          {
            oprot.writeString(_iter111.getKey());
            oprot.writeI32(_iter111.getValue());
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriorities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.jobSubmissionPriorityMap = new HashMap<String,Integer>(2*_map112.size);
          for (int _i113 = 0; _i113 < _map112.size; ++_i113)
          {
            String _key114;
            int _val115;
            _key114 = iprot.readString();
            _val115 = iprot.readI32();
            struct.jobSubmissionPriorityMap.put(_key114, _val115);
          }
        }
        struct.setJobSubmissionPriorityMapIsSet(true);
      }
    }

  }

  public static class changeJobSubmissionPriorities_result implements org.apache.thrift.TBase<changeJobSubmissionPriorities_result, changeJobSubmissionPriorities_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeJobSubmissionPriorities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeJobSubmissionPriorities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeJobSubmissionPriorities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeJobSubmissionPriorities_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeJobSubmissionPriorities_result.class, metaDataMap);
    }

    public changeJobSubmissionPriorities_result() {
    }

    public changeJobSubmissionPriorities_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeJobSubmissionPriorities_result(changeJobSubmissionPriorities_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public changeJobSubmissionPriorities_result deepCopy() {
      return new changeJobSubmissionPriorities_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changeJobSubmissionPriorities_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public changeJobSubmissionPriorities_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public changeJobSubmissionPriorities_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public changeJobSubmissionPriorities_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeJobSubmissionPriorities_result)
        return this.equals((changeJobSubmissionPriorities_result)that);
      return false;
    }

    public boolean equals(changeJobSubmissionPriorities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeJobSubmissionPriorities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeJobSubmissionPriorities_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeJobSubmissionPriorities_resultStandardSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriorities_resultStandardScheme getScheme() {
        return new changeJobSubmissionPriorities_resultStandardScheme();
      }
    }

    private static class changeJobSubmissionPriorities_resultStandardScheme extends StandardScheme<changeJobSubmissionPriorities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeJobSubmissionPriorities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeJobSubmissionPriorities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeJobSubmissionPriorities_resultTupleSchemeFactory implements SchemeFactory {
      public changeJobSubmissionPriorities_resultTupleScheme getScheme() {
        return new changeJobSubmissionPriorities_resultTupleScheme();
      }
    }

    private static class changeJobSubmissionPriorities_resultTupleScheme extends TupleScheme<changeJobSubmissionPriorities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriorities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeJobSubmissionPriorities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class changeDataMovementPriorities_args implements org.apache.thrift.TBase<changeDataMovementPriorities_args, changeDataMovementPriorities_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeDataMovementPriorities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeDataMovementPriorities_args");

    private static final org.apache.thrift.protocol.TField DATA_MOVEMENT_PRIORITY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMovementPriorityMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeDataMovementPriorities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeDataMovementPriorities_argsTupleSchemeFactory());
    }

    public Map<String,Integer> dataMovementPriorityMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_MOVEMENT_PRIORITY_MAP((short)1, "dataMovementPriorityMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_MOVEMENT_PRIORITY_MAP
            return DATA_MOVEMENT_PRIORITY_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_MOVEMENT_PRIORITY_MAP, new org.apache.thrift.meta_data.FieldMetaData("dataMovementPriorityMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeDataMovementPriorities_args.class, metaDataMap);
    }

    public changeDataMovementPriorities_args() {
    }

    public changeDataMovementPriorities_args(
      Map<String,Integer> dataMovementPriorityMap)
    {
      this();
      this.dataMovementPriorityMap = dataMovementPriorityMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeDataMovementPriorities_args(changeDataMovementPriorities_args other) {
      if (other.isSetDataMovementPriorityMap()) {
        Map<String,Integer> __this__dataMovementPriorityMap = new HashMap<String,Integer>(other.dataMovementPriorityMap);
        this.dataMovementPriorityMap = __this__dataMovementPriorityMap;
      }
    }

    public changeDataMovementPriorities_args deepCopy() {
      return new changeDataMovementPriorities_args(this);
    }

    @Override
    public void clear() {
      this.dataMovementPriorityMap = null;
    }

    public int getDataMovementPriorityMapSize() {
      return (this.dataMovementPriorityMap == null) ? 0 : this.dataMovementPriorityMap.size();
    }

    public void putToDataMovementPriorityMap(String key, int val) {
      if (this.dataMovementPriorityMap == null) {
        this.dataMovementPriorityMap = new HashMap<String,Integer>();
      }
      this.dataMovementPriorityMap.put(key, val);
    }

    public Map<String,Integer> getDataMovementPriorityMap() {
      return this.dataMovementPriorityMap;
    }

    public changeDataMovementPriorities_args setDataMovementPriorityMap(Map<String,Integer> dataMovementPriorityMap) {
      this.dataMovementPriorityMap = dataMovementPriorityMap;
      return this;
    }

    public void unsetDataMovementPriorityMap() {
      this.dataMovementPriorityMap = null;
    }

    /** Returns true if field dataMovementPriorityMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMovementPriorityMap() {
      return this.dataMovementPriorityMap != null;
    }

    public void setDataMovementPriorityMapIsSet(boolean value) {
      if (!value) {
        this.dataMovementPriorityMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_MOVEMENT_PRIORITY_MAP:
        if (value == null) {
          unsetDataMovementPriorityMap();
        } else {
          setDataMovementPriorityMap((Map<String,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_MOVEMENT_PRIORITY_MAP:
        return getDataMovementPriorityMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_MOVEMENT_PRIORITY_MAP:
        return isSetDataMovementPriorityMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeDataMovementPriorities_args)
        return this.equals((changeDataMovementPriorities_args)that);
      return false;
    }

    public boolean equals(changeDataMovementPriorities_args that) {
      if (that == null)
        return false;

      boolean this_present_dataMovementPriorityMap = true && this.isSetDataMovementPriorityMap();
      boolean that_present_dataMovementPriorityMap = true && that.isSetDataMovementPriorityMap();
      if (this_present_dataMovementPriorityMap || that_present_dataMovementPriorityMap) {
        if (!(this_present_dataMovementPriorityMap && that_present_dataMovementPriorityMap))
          return false;
        if (!this.dataMovementPriorityMap.equals(that.dataMovementPriorityMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeDataMovementPriorities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataMovementPriorityMap()).compareTo(other.isSetDataMovementPriorityMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMovementPriorityMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMovementPriorityMap, other.dataMovementPriorityMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeDataMovementPriorities_args(");
      boolean first = true;

      sb.append("dataMovementPriorityMap:");
      if (this.dataMovementPriorityMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMovementPriorityMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (dataMovementPriorityMap == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataMovementPriorityMap' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeDataMovementPriorities_argsStandardSchemeFactory implements SchemeFactory {
      public changeDataMovementPriorities_argsStandardScheme getScheme() {
        return new changeDataMovementPriorities_argsStandardScheme();
      }
    }

    private static class changeDataMovementPriorities_argsStandardScheme extends StandardScheme<changeDataMovementPriorities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeDataMovementPriorities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_MOVEMENT_PRIORITY_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
                  struct.dataMovementPriorityMap = new HashMap<String,Integer>(2*_map116.size);
                  for (int _i117 = 0; _i117 < _map116.size; ++_i117)
                  {
                    String _key118;
                    int _val119;
                    _key118 = iprot.readString();
                    _val119 = iprot.readI32();
                    struct.dataMovementPriorityMap.put(_key118, _val119);
                  }
                  iprot.readMapEnd();
                }
                struct.setDataMovementPriorityMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeDataMovementPriorities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataMovementPriorityMap != null) {
          oprot.writeFieldBegin(DATA_MOVEMENT_PRIORITY_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.dataMovementPriorityMap.size()));
            for (Map.Entry<String, Integer> _iter120 : struct.dataMovementPriorityMap.entrySet())
            {
              oprot.writeString(_iter120.getKey());
              oprot.writeI32(_iter120.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeDataMovementPriorities_argsTupleSchemeFactory implements SchemeFactory {
      public changeDataMovementPriorities_argsTupleScheme getScheme() {
        return new changeDataMovementPriorities_argsTupleScheme();
      }
    }

    private static class changeDataMovementPriorities_argsTupleScheme extends TupleScheme<changeDataMovementPriorities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriorities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.dataMovementPriorityMap.size());
          for (Map.Entry<String, Integer> _iter121 : struct.dataMovementPriorityMap.entrySet())
          {
            oprot.writeString(_iter121.getKey());
            oprot.writeI32(_iter121.getValue());
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriorities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.dataMovementPriorityMap = new HashMap<String,Integer>(2*_map122.size);
          for (int _i123 = 0; _i123 < _map122.size; ++_i123)
          {
            String _key124;
            int _val125;
            _key124 = iprot.readString();
            _val125 = iprot.readI32();
            struct.dataMovementPriorityMap.put(_key124, _val125);
          }
        }
        struct.setDataMovementPriorityMapIsSet(true);
      }
    }

  }

  public static class changeDataMovementPriorities_result implements org.apache.thrift.TBase<changeDataMovementPriorities_result, changeDataMovementPriorities_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeDataMovementPriorities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeDataMovementPriorities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeDataMovementPriorities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeDataMovementPriorities_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeDataMovementPriorities_result.class, metaDataMap);
    }

    public changeDataMovementPriorities_result() {
    }

    public changeDataMovementPriorities_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeDataMovementPriorities_result(changeDataMovementPriorities_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public changeDataMovementPriorities_result deepCopy() {
      return new changeDataMovementPriorities_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changeDataMovementPriorities_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public changeDataMovementPriorities_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public changeDataMovementPriorities_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public changeDataMovementPriorities_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeDataMovementPriorities_result)
        return this.equals((changeDataMovementPriorities_result)that);
      return false;
    }

    public boolean equals(changeDataMovementPriorities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(changeDataMovementPriorities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeDataMovementPriorities_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeDataMovementPriorities_resultStandardSchemeFactory implements SchemeFactory {
      public changeDataMovementPriorities_resultStandardScheme getScheme() {
        return new changeDataMovementPriorities_resultStandardScheme();
      }
    }

    private static class changeDataMovementPriorities_resultStandardScheme extends StandardScheme<changeDataMovementPriorities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeDataMovementPriorities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeDataMovementPriorities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeDataMovementPriorities_resultTupleSchemeFactory implements SchemeFactory {
      public changeDataMovementPriorities_resultTupleScheme getScheme() {
        return new changeDataMovementPriorities_resultTupleScheme();
      }
    }

    private static class changeDataMovementPriorities_resultTupleScheme extends TupleScheme<changeDataMovementPriorities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriorities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeDataMovementPriorities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deleteJobSubmissionInterface_args implements org.apache.thrift.TBase<deleteJobSubmissionInterface_args, deleteJobSubmissionInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteJobSubmissionInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJobSubmissionInterface_args");

    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteJobSubmissionInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteJobSubmissionInterface_argsTupleSchemeFactory());
    }

    public String jobSubmissionInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_SUBMISSION_INTERFACE_ID((short)1, "jobSubmissionInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_SUBMISSION_INTERFACE_ID
            return JOB_SUBMISSION_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJobSubmissionInterface_args.class, metaDataMap);
    }

    public deleteJobSubmissionInterface_args() {
    }

    public deleteJobSubmissionInterface_args(
      String jobSubmissionInterfaceId)
    {
      this();
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteJobSubmissionInterface_args(deleteJobSubmissionInterface_args other) {
      if (other.isSetJobSubmissionInterfaceId()) {
        this.jobSubmissionInterfaceId = other.jobSubmissionInterfaceId;
      }
    }

    public deleteJobSubmissionInterface_args deepCopy() {
      return new deleteJobSubmissionInterface_args(this);
    }

    @Override
    public void clear() {
      this.jobSubmissionInterfaceId = null;
    }

    public String getJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId;
    }

    public deleteJobSubmissionInterface_args setJobSubmissionInterfaceId(String jobSubmissionInterfaceId) {
      this.jobSubmissionInterfaceId = jobSubmissionInterfaceId;
      return this;
    }

    public void unsetJobSubmissionInterfaceId() {
      this.jobSubmissionInterfaceId = null;
    }

    /** Returns true if field jobSubmissionInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmissionInterfaceId() {
      return this.jobSubmissionInterfaceId != null;
    }

    public void setJobSubmissionInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.jobSubmissionInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        if (value == null) {
          unsetJobSubmissionInterfaceId();
        } else {
          setJobSubmissionInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return getJobSubmissionInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_SUBMISSION_INTERFACE_ID:
        return isSetJobSubmissionInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteJobSubmissionInterface_args)
        return this.equals((deleteJobSubmissionInterface_args)that);
      return false;
    }

    public boolean equals(deleteJobSubmissionInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_jobSubmissionInterfaceId = true && this.isSetJobSubmissionInterfaceId();
      boolean that_present_jobSubmissionInterfaceId = true && that.isSetJobSubmissionInterfaceId();
      if (this_present_jobSubmissionInterfaceId || that_present_jobSubmissionInterfaceId) {
        if (!(this_present_jobSubmissionInterfaceId && that_present_jobSubmissionInterfaceId))
          return false;
        if (!this.jobSubmissionInterfaceId.equals(that.jobSubmissionInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteJobSubmissionInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaceId()).compareTo(other.isSetJobSubmissionInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmissionInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaceId, other.jobSubmissionInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteJobSubmissionInterface_args(");
      boolean first = true;

      sb.append("jobSubmissionInterfaceId:");
      if (this.jobSubmissionInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobSubmissionInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteJobSubmissionInterface_argsStandardSchemeFactory implements SchemeFactory {
      public deleteJobSubmissionInterface_argsStandardScheme getScheme() {
        return new deleteJobSubmissionInterface_argsStandardScheme();
      }
    }

    private static class deleteJobSubmissionInterface_argsStandardScheme extends StandardScheme<deleteJobSubmissionInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJobSubmissionInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_SUBMISSION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobSubmissionInterfaceId = iprot.readString();
                struct.setJobSubmissionInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJobSubmissionInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobSubmissionInterfaceId != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.jobSubmissionInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteJobSubmissionInterface_argsTupleSchemeFactory implements SchemeFactory {
      public deleteJobSubmissionInterface_argsTupleScheme getScheme() {
        return new deleteJobSubmissionInterface_argsTupleScheme();
      }
    }

    private static class deleteJobSubmissionInterface_argsTupleScheme extends TupleScheme<deleteJobSubmissionInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteJobSubmissionInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.jobSubmissionInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteJobSubmissionInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.jobSubmissionInterfaceId = iprot.readString();
        struct.setJobSubmissionInterfaceIdIsSet(true);
      }
    }

  }

  public static class deleteJobSubmissionInterface_result implements org.apache.thrift.TBase<deleteJobSubmissionInterface_result, deleteJobSubmissionInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteJobSubmissionInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJobSubmissionInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteJobSubmissionInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteJobSubmissionInterface_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJobSubmissionInterface_result.class, metaDataMap);
    }

    public deleteJobSubmissionInterface_result() {
    }

    public deleteJobSubmissionInterface_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteJobSubmissionInterface_result(deleteJobSubmissionInterface_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public deleteJobSubmissionInterface_result deepCopy() {
      return new deleteJobSubmissionInterface_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteJobSubmissionInterface_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deleteJobSubmissionInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public deleteJobSubmissionInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public deleteJobSubmissionInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteJobSubmissionInterface_result)
        return this.equals((deleteJobSubmissionInterface_result)that);
      return false;
    }

    public boolean equals(deleteJobSubmissionInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteJobSubmissionInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteJobSubmissionInterface_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteJobSubmissionInterface_resultStandardSchemeFactory implements SchemeFactory {
      public deleteJobSubmissionInterface_resultStandardScheme getScheme() {
        return new deleteJobSubmissionInterface_resultStandardScheme();
      }
    }

    private static class deleteJobSubmissionInterface_resultStandardScheme extends StandardScheme<deleteJobSubmissionInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJobSubmissionInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJobSubmissionInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteJobSubmissionInterface_resultTupleSchemeFactory implements SchemeFactory {
      public deleteJobSubmissionInterface_resultTupleScheme getScheme() {
        return new deleteJobSubmissionInterface_resultTupleScheme();
      }
    }

    private static class deleteJobSubmissionInterface_resultTupleScheme extends TupleScheme<deleteJobSubmissionInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteJobSubmissionInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteJobSubmissionInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deleteDataMovementInterface_args implements org.apache.thrift.TBase<deleteDataMovementInterface_args, deleteDataMovementInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDataMovementInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDataMovementInterface_args");

    private static final org.apache.thrift.protocol.TField DATA_MOVEMENT_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMovementInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDataMovementInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDataMovementInterface_argsTupleSchemeFactory());
    }

    public String dataMovementInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_MOVEMENT_INTERFACE_ID((short)1, "dataMovementInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_MOVEMENT_INTERFACE_ID
            return DATA_MOVEMENT_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_MOVEMENT_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataMovementInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDataMovementInterface_args.class, metaDataMap);
    }

    public deleteDataMovementInterface_args() {
    }

    public deleteDataMovementInterface_args(
      String dataMovementInterfaceId)
    {
      this();
      this.dataMovementInterfaceId = dataMovementInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDataMovementInterface_args(deleteDataMovementInterface_args other) {
      if (other.isSetDataMovementInterfaceId()) {
        this.dataMovementInterfaceId = other.dataMovementInterfaceId;
      }
    }

    public deleteDataMovementInterface_args deepCopy() {
      return new deleteDataMovementInterface_args(this);
    }

    @Override
    public void clear() {
      this.dataMovementInterfaceId = null;
    }

    public String getDataMovementInterfaceId() {
      return this.dataMovementInterfaceId;
    }

    public deleteDataMovementInterface_args setDataMovementInterfaceId(String dataMovementInterfaceId) {
      this.dataMovementInterfaceId = dataMovementInterfaceId;
      return this;
    }

    public void unsetDataMovementInterfaceId() {
      this.dataMovementInterfaceId = null;
    }

    /** Returns true if field dataMovementInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMovementInterfaceId() {
      return this.dataMovementInterfaceId != null;
    }

    public void setDataMovementInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.dataMovementInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_MOVEMENT_INTERFACE_ID:
        if (value == null) {
          unsetDataMovementInterfaceId();
        } else {
          setDataMovementInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_MOVEMENT_INTERFACE_ID:
        return getDataMovementInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_MOVEMENT_INTERFACE_ID:
        return isSetDataMovementInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDataMovementInterface_args)
        return this.equals((deleteDataMovementInterface_args)that);
      return false;
    }

    public boolean equals(deleteDataMovementInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_dataMovementInterfaceId = true && this.isSetDataMovementInterfaceId();
      boolean that_present_dataMovementInterfaceId = true && that.isSetDataMovementInterfaceId();
      if (this_present_dataMovementInterfaceId || that_present_dataMovementInterfaceId) {
        if (!(this_present_dataMovementInterfaceId && that_present_dataMovementInterfaceId))
          return false;
        if (!this.dataMovementInterfaceId.equals(that.dataMovementInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteDataMovementInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataMovementInterfaceId()).compareTo(other.isSetDataMovementInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMovementInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMovementInterfaceId, other.dataMovementInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDataMovementInterface_args(");
      boolean first = true;

      sb.append("dataMovementInterfaceId:");
      if (this.dataMovementInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMovementInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (dataMovementInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataMovementInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDataMovementInterface_argsStandardSchemeFactory implements SchemeFactory {
      public deleteDataMovementInterface_argsStandardScheme getScheme() {
        return new deleteDataMovementInterface_argsStandardScheme();
      }
    }

    private static class deleteDataMovementInterface_argsStandardScheme extends StandardScheme<deleteDataMovementInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDataMovementInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_MOVEMENT_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataMovementInterfaceId = iprot.readString();
                struct.setDataMovementInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDataMovementInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataMovementInterfaceId != null) {
          oprot.writeFieldBegin(DATA_MOVEMENT_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.dataMovementInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDataMovementInterface_argsTupleSchemeFactory implements SchemeFactory {
      public deleteDataMovementInterface_argsTupleScheme getScheme() {
        return new deleteDataMovementInterface_argsTupleScheme();
      }
    }

    private static class deleteDataMovementInterface_argsTupleScheme extends TupleScheme<deleteDataMovementInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDataMovementInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.dataMovementInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDataMovementInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.dataMovementInterfaceId = iprot.readString();
        struct.setDataMovementInterfaceIdIsSet(true);
      }
    }

  }

  public static class deleteDataMovementInterface_result implements org.apache.thrift.TBase<deleteDataMovementInterface_result, deleteDataMovementInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDataMovementInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDataMovementInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDataMovementInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDataMovementInterface_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDataMovementInterface_result.class, metaDataMap);
    }

    public deleteDataMovementInterface_result() {
    }

    public deleteDataMovementInterface_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDataMovementInterface_result(deleteDataMovementInterface_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public deleteDataMovementInterface_result deepCopy() {
      return new deleteDataMovementInterface_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteDataMovementInterface_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deleteDataMovementInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public deleteDataMovementInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public deleteDataMovementInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDataMovementInterface_result)
        return this.equals((deleteDataMovementInterface_result)that);
      return false;
    }

    public boolean equals(deleteDataMovementInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteDataMovementInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDataMovementInterface_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDataMovementInterface_resultStandardSchemeFactory implements SchemeFactory {
      public deleteDataMovementInterface_resultStandardScheme getScheme() {
        return new deleteDataMovementInterface_resultStandardScheme();
      }
    }

    private static class deleteDataMovementInterface_resultStandardScheme extends StandardScheme<deleteDataMovementInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDataMovementInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDataMovementInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDataMovementInterface_resultTupleSchemeFactory implements SchemeFactory {
      public deleteDataMovementInterface_resultTupleScheme getScheme() {
        return new deleteDataMovementInterface_resultTupleScheme();
      }
    }

    private static class deleteDataMovementInterface_resultTupleScheme extends TupleScheme<deleteDataMovementInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDataMovementInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDataMovementInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

}
