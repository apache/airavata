    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.api.appcatalog;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class ApplicationCatalogAPI {

  public interface Iface {

    /**
     * Query Airavata to fetch the API version
     */
    public String GetAPIVersion() throws org.apache.thrift.TException;

    /**
     * Manage Computer Resources
     * 
     * @param computeResourceDescription
     */
    public String addComputeResourceDescription(org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public String addSSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public String addGSISSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public String addGlobusJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public String addSCPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.SCPDataMovement dataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public String addGridFTPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public List<String> listComputeResourceDescriptions() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.computehost.ComputeResourceDescription getComputeResourceDescription(String computeResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.computehost.SSHJobSubmission getSSHJobSubmissionProtocol(String sshJobSubmissionProtocolResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.computehost.GSISSHJobSubmission getGSISSHJobSubmissionProtocol(String gsisshJobSubmissionProtocolResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.computehost.GlobusJobSubmission getGlobusJobSubmissionProtocol(String globusJobSubmissionProtocolResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.computehost.SCPDataMovement getSCPDataMovementProtocol(String scpDataMovementResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.computehost.GridFTPDataMovement getGridFTPDataMovementProtocol(String gridFTPDataMovementResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public boolean isComputeResourceDescriptionRegistered(String hostName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.computehost.ComputeResourceDescription getComputeResourceDescriptionFromHostName(String hostName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Manage Application Interfaces
     * 
     * @param applicationInterface
     */
    public String addApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public List<String> listApplicationInterfaceIds() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getApplicationInterface(String applicationInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Manage application modules
     * 
     * @param applicationModule
     * @param publish
     */
    public String registerAppicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, boolean publish) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getAppicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public boolean updateAppicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public boolean deleteAppicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Manage application modules
     * 
     * @param applicationInterfaceId
     * @param applicationDeployment
     */
    public String addApplicationDeployment(String applicationInterfaceId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public List<String> listApplicationDeploymentIds(String applicationInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getApplicationDeployment(String applicationInterfaceId, String applicationDeploymentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void GetAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addComputeResourceDescription(org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addGSISSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addGlobusJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSCPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.SCPDataMovement dataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addGridFTPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listComputeResourceDescriptions(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getComputeResourceDescription(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSSHJobSubmissionProtocol(String sshJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGSISSHJobSubmissionProtocol(String gsisshJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGlobusJobSubmissionProtocol(String globusJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSCPDataMovementProtocol(String scpDataMovementResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGridFTPDataMovementProtocol(String gridFTPDataMovementResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isComputeResourceDescriptionRegistered(String hostName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getComputeResourceDescriptionFromHostName(String hostName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listApplicationInterfaceIds(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationInterface(String applicationInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerAppicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, boolean publish, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAppicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAppicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteAppicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addApplicationDeployment(String applicationInterfaceId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listApplicationDeploymentIds(String applicationInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationDeployment(String applicationInterfaceId, String applicationDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String GetAPIVersion() throws org.apache.thrift.TException
    {
      send_GetAPIVersion();
      return recv_GetAPIVersion();
    }

    public void send_GetAPIVersion() throws org.apache.thrift.TException
    {
      GetAPIVersion_args args = new GetAPIVersion_args();
      sendBase("GetAPIVersion", args);
    }

    public String recv_GetAPIVersion() throws org.apache.thrift.TException
    {
      GetAPIVersion_result result = new GetAPIVersion_result();
      receiveBase(result, "GetAPIVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAPIVersion failed: unknown result");
    }

    public String addComputeResourceDescription(org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addComputeResourceDescription(computeResourceDescription);
      return recv_addComputeResourceDescription();
    }

    public void send_addComputeResourceDescription(org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription) throws org.apache.thrift.TException
    {
      addComputeResourceDescription_args args = new addComputeResourceDescription_args();
      args.setComputeResourceDescription(computeResourceDescription);
      sendBase("addComputeResourceDescription", args);
    }

    public String recv_addComputeResourceDescription() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addComputeResourceDescription_result result = new addComputeResourceDescription_result();
      receiveBase(result, "addComputeResourceDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addComputeResourceDescription failed: unknown result");
    }

    public String addSSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addSSHJobSubmissionProtocol(computeResourceId, jobSubmission);
      return recv_addSSHJobSubmissionProtocol();
    }

    public void send_addSSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission) throws org.apache.thrift.TException
    {
      addSSHJobSubmissionProtocol_args args = new addSSHJobSubmissionProtocol_args();
      args.setComputeResourceId(computeResourceId);
      args.setJobSubmission(jobSubmission);
      sendBase("addSSHJobSubmissionProtocol", args);
    }

    public String recv_addSSHJobSubmissionProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addSSHJobSubmissionProtocol_result result = new addSSHJobSubmissionProtocol_result();
      receiveBase(result, "addSSHJobSubmissionProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSSHJobSubmissionProtocol failed: unknown result");
    }

    public String addGSISSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addGSISSHJobSubmissionProtocol(computeResourceId, jobSubmission);
      return recv_addGSISSHJobSubmissionProtocol();
    }

    public void send_addGSISSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission) throws org.apache.thrift.TException
    {
      addGSISSHJobSubmissionProtocol_args args = new addGSISSHJobSubmissionProtocol_args();
      args.setComputeResourceId(computeResourceId);
      args.setJobSubmission(jobSubmission);
      sendBase("addGSISSHJobSubmissionProtocol", args);
    }

    public String recv_addGSISSHJobSubmissionProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addGSISSHJobSubmissionProtocol_result result = new addGSISSHJobSubmissionProtocol_result();
      receiveBase(result, "addGSISSHJobSubmissionProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addGSISSHJobSubmissionProtocol failed: unknown result");
    }

    public String addGlobusJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addGlobusJobSubmissionProtocol(computeResourceId, jobSubmission);
      return recv_addGlobusJobSubmissionProtocol();
    }

    public void send_addGlobusJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission) throws org.apache.thrift.TException
    {
      addGlobusJobSubmissionProtocol_args args = new addGlobusJobSubmissionProtocol_args();
      args.setComputeResourceId(computeResourceId);
      args.setJobSubmission(jobSubmission);
      sendBase("addGlobusJobSubmissionProtocol", args);
    }

    public String recv_addGlobusJobSubmissionProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addGlobusJobSubmissionProtocol_result result = new addGlobusJobSubmissionProtocol_result();
      receiveBase(result, "addGlobusJobSubmissionProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addGlobusJobSubmissionProtocol failed: unknown result");
    }

    public String addSCPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.SCPDataMovement dataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addSCPDataMovementProtocol(computeResourceId, dataMovement);
      return recv_addSCPDataMovementProtocol();
    }

    public void send_addSCPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.SCPDataMovement dataMovement) throws org.apache.thrift.TException
    {
      addSCPDataMovementProtocol_args args = new addSCPDataMovementProtocol_args();
      args.setComputeResourceId(computeResourceId);
      args.setDataMovement(dataMovement);
      sendBase("addSCPDataMovementProtocol", args);
    }

    public String recv_addSCPDataMovementProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addSCPDataMovementProtocol_result result = new addSCPDataMovementProtocol_result();
      receiveBase(result, "addSCPDataMovementProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSCPDataMovementProtocol failed: unknown result");
    }

    public String addGridFTPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addGridFTPDataMovementProtocol(computeResourceId, dataMovement);
      return recv_addGridFTPDataMovementProtocol();
    }

    public void send_addGridFTPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement) throws org.apache.thrift.TException
    {
      addGridFTPDataMovementProtocol_args args = new addGridFTPDataMovementProtocol_args();
      args.setComputeResourceId(computeResourceId);
      args.setDataMovement(dataMovement);
      sendBase("addGridFTPDataMovementProtocol", args);
    }

    public String recv_addGridFTPDataMovementProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addGridFTPDataMovementProtocol_result result = new addGridFTPDataMovementProtocol_result();
      receiveBase(result, "addGridFTPDataMovementProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addGridFTPDataMovementProtocol failed: unknown result");
    }

    public List<String> listComputeResourceDescriptions() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_listComputeResourceDescriptions();
      return recv_listComputeResourceDescriptions();
    }

    public void send_listComputeResourceDescriptions() throws org.apache.thrift.TException
    {
      listComputeResourceDescriptions_args args = new listComputeResourceDescriptions_args();
      sendBase("listComputeResourceDescriptions", args);
    }

    public List<String> recv_listComputeResourceDescriptions() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      listComputeResourceDescriptions_result result = new listComputeResourceDescriptions_result();
      receiveBase(result, "listComputeResourceDescriptions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listComputeResourceDescriptions failed: unknown result");
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription getComputeResourceDescription(String computeResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getComputeResourceDescription(computeResourceId);
      return recv_getComputeResourceDescription();
    }

    public void send_getComputeResourceDescription(String computeResourceId) throws org.apache.thrift.TException
    {
      getComputeResourceDescription_args args = new getComputeResourceDescription_args();
      args.setComputeResourceId(computeResourceId);
      sendBase("getComputeResourceDescription", args);
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription recv_getComputeResourceDescription() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getComputeResourceDescription_result result = new getComputeResourceDescription_result();
      receiveBase(result, "getComputeResourceDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getComputeResourceDescription failed: unknown result");
    }

    public org.apache.airavata.model.computehost.SSHJobSubmission getSSHJobSubmissionProtocol(String sshJobSubmissionProtocolResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getSSHJobSubmissionProtocol(sshJobSubmissionProtocolResourceId);
      return recv_getSSHJobSubmissionProtocol();
    }

    public void send_getSSHJobSubmissionProtocol(String sshJobSubmissionProtocolResourceId) throws org.apache.thrift.TException
    {
      getSSHJobSubmissionProtocol_args args = new getSSHJobSubmissionProtocol_args();
      args.setSshJobSubmissionProtocolResourceId(sshJobSubmissionProtocolResourceId);
      sendBase("getSSHJobSubmissionProtocol", args);
    }

    public org.apache.airavata.model.computehost.SSHJobSubmission recv_getSSHJobSubmissionProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getSSHJobSubmissionProtocol_result result = new getSSHJobSubmissionProtocol_result();
      receiveBase(result, "getSSHJobSubmissionProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSSHJobSubmissionProtocol failed: unknown result");
    }

    public org.apache.airavata.model.computehost.GSISSHJobSubmission getGSISSHJobSubmissionProtocol(String gsisshJobSubmissionProtocolResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getGSISSHJobSubmissionProtocol(gsisshJobSubmissionProtocolResourceId);
      return recv_getGSISSHJobSubmissionProtocol();
    }

    public void send_getGSISSHJobSubmissionProtocol(String gsisshJobSubmissionProtocolResourceId) throws org.apache.thrift.TException
    {
      getGSISSHJobSubmissionProtocol_args args = new getGSISSHJobSubmissionProtocol_args();
      args.setGsisshJobSubmissionProtocolResourceId(gsisshJobSubmissionProtocolResourceId);
      sendBase("getGSISSHJobSubmissionProtocol", args);
    }

    public org.apache.airavata.model.computehost.GSISSHJobSubmission recv_getGSISSHJobSubmissionProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getGSISSHJobSubmissionProtocol_result result = new getGSISSHJobSubmissionProtocol_result();
      receiveBase(result, "getGSISSHJobSubmissionProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGSISSHJobSubmissionProtocol failed: unknown result");
    }

    public org.apache.airavata.model.computehost.GlobusJobSubmission getGlobusJobSubmissionProtocol(String globusJobSubmissionProtocolResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getGlobusJobSubmissionProtocol(globusJobSubmissionProtocolResourceId);
      return recv_getGlobusJobSubmissionProtocol();
    }

    public void send_getGlobusJobSubmissionProtocol(String globusJobSubmissionProtocolResourceId) throws org.apache.thrift.TException
    {
      getGlobusJobSubmissionProtocol_args args = new getGlobusJobSubmissionProtocol_args();
      args.setGlobusJobSubmissionProtocolResourceId(globusJobSubmissionProtocolResourceId);
      sendBase("getGlobusJobSubmissionProtocol", args);
    }

    public org.apache.airavata.model.computehost.GlobusJobSubmission recv_getGlobusJobSubmissionProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getGlobusJobSubmissionProtocol_result result = new getGlobusJobSubmissionProtocol_result();
      receiveBase(result, "getGlobusJobSubmissionProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGlobusJobSubmissionProtocol failed: unknown result");
    }

    public org.apache.airavata.model.computehost.SCPDataMovement getSCPDataMovementProtocol(String scpDataMovementResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getSCPDataMovementProtocol(scpDataMovementResourceId);
      return recv_getSCPDataMovementProtocol();
    }

    public void send_getSCPDataMovementProtocol(String scpDataMovementResourceId) throws org.apache.thrift.TException
    {
      getSCPDataMovementProtocol_args args = new getSCPDataMovementProtocol_args();
      args.setScpDataMovementResourceId(scpDataMovementResourceId);
      sendBase("getSCPDataMovementProtocol", args);
    }

    public org.apache.airavata.model.computehost.SCPDataMovement recv_getSCPDataMovementProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getSCPDataMovementProtocol_result result = new getSCPDataMovementProtocol_result();
      receiveBase(result, "getSCPDataMovementProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSCPDataMovementProtocol failed: unknown result");
    }

    public org.apache.airavata.model.computehost.GridFTPDataMovement getGridFTPDataMovementProtocol(String gridFTPDataMovementResourceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getGridFTPDataMovementProtocol(gridFTPDataMovementResourceId);
      return recv_getGridFTPDataMovementProtocol();
    }

    public void send_getGridFTPDataMovementProtocol(String gridFTPDataMovementResourceId) throws org.apache.thrift.TException
    {
      getGridFTPDataMovementProtocol_args args = new getGridFTPDataMovementProtocol_args();
      args.setGridFTPDataMovementResourceId(gridFTPDataMovementResourceId);
      sendBase("getGridFTPDataMovementProtocol", args);
    }

    public org.apache.airavata.model.computehost.GridFTPDataMovement recv_getGridFTPDataMovementProtocol() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getGridFTPDataMovementProtocol_result result = new getGridFTPDataMovementProtocol_result();
      receiveBase(result, "getGridFTPDataMovementProtocol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGridFTPDataMovementProtocol failed: unknown result");
    }

    public boolean isComputeResourceDescriptionRegistered(String hostName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_isComputeResourceDescriptionRegistered(hostName);
      return recv_isComputeResourceDescriptionRegistered();
    }

    public void send_isComputeResourceDescriptionRegistered(String hostName) throws org.apache.thrift.TException
    {
      isComputeResourceDescriptionRegistered_args args = new isComputeResourceDescriptionRegistered_args();
      args.setHostName(hostName);
      sendBase("isComputeResourceDescriptionRegistered", args);
    }

    public boolean recv_isComputeResourceDescriptionRegistered() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      isComputeResourceDescriptionRegistered_result result = new isComputeResourceDescriptionRegistered_result();
      receiveBase(result, "isComputeResourceDescriptionRegistered");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isComputeResourceDescriptionRegistered failed: unknown result");
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription getComputeResourceDescriptionFromHostName(String hostName) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getComputeResourceDescriptionFromHostName(hostName);
      return recv_getComputeResourceDescriptionFromHostName();
    }

    public void send_getComputeResourceDescriptionFromHostName(String hostName) throws org.apache.thrift.TException
    {
      getComputeResourceDescriptionFromHostName_args args = new getComputeResourceDescriptionFromHostName_args();
      args.setHostName(hostName);
      sendBase("getComputeResourceDescriptionFromHostName", args);
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription recv_getComputeResourceDescriptionFromHostName() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getComputeResourceDescriptionFromHostName_result result = new getComputeResourceDescriptionFromHostName_result();
      receiveBase(result, "getComputeResourceDescriptionFromHostName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getComputeResourceDescriptionFromHostName failed: unknown result");
    }

    public String addApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addApplicationInterface(applicationInterface);
      return recv_addApplicationInterface();
    }

    public void send_addApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) throws org.apache.thrift.TException
    {
      addApplicationInterface_args args = new addApplicationInterface_args();
      args.setApplicationInterface(applicationInterface);
      sendBase("addApplicationInterface", args);
    }

    public String recv_addApplicationInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addApplicationInterface_result result = new addApplicationInterface_result();
      receiveBase(result, "addApplicationInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addApplicationInterface failed: unknown result");
    }

    public List<String> listApplicationInterfaceIds() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_listApplicationInterfaceIds();
      return recv_listApplicationInterfaceIds();
    }

    public void send_listApplicationInterfaceIds() throws org.apache.thrift.TException
    {
      listApplicationInterfaceIds_args args = new listApplicationInterfaceIds_args();
      sendBase("listApplicationInterfaceIds", args);
    }

    public List<String> recv_listApplicationInterfaceIds() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      listApplicationInterfaceIds_result result = new listApplicationInterfaceIds_result();
      receiveBase(result, "listApplicationInterfaceIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listApplicationInterfaceIds failed: unknown result");
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getApplicationInterface(String applicationInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getApplicationInterface(applicationInterfaceId);
      return recv_getApplicationInterface();
    }

    public void send_getApplicationInterface(String applicationInterfaceId) throws org.apache.thrift.TException
    {
      getApplicationInterface_args args = new getApplicationInterface_args();
      args.setApplicationInterfaceId(applicationInterfaceId);
      sendBase("getApplicationInterface", args);
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription recv_getApplicationInterface() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getApplicationInterface_result result = new getApplicationInterface_result();
      receiveBase(result, "getApplicationInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationInterface failed: unknown result");
    }

    public String registerAppicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, boolean publish) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_registerAppicationModule(applicationModule, publish);
      return recv_registerAppicationModule();
    }

    public void send_registerAppicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, boolean publish) throws org.apache.thrift.TException
    {
      registerAppicationModule_args args = new registerAppicationModule_args();
      args.setApplicationModule(applicationModule);
      args.setPublish(publish);
      sendBase("registerAppicationModule", args);
    }

    public String recv_registerAppicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      registerAppicationModule_result result = new registerAppicationModule_result();
      receiveBase(result, "registerAppicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerAppicationModule failed: unknown result");
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getAppicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getAppicationModule(appModuleId);
      return recv_getAppicationModule();
    }

    public void send_getAppicationModule(String appModuleId) throws org.apache.thrift.TException
    {
      getAppicationModule_args args = new getAppicationModule_args();
      args.setAppModuleId(appModuleId);
      sendBase("getAppicationModule", args);
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule recv_getAppicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getAppicationModule_result result = new getAppicationModule_result();
      receiveBase(result, "getAppicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAppicationModule failed: unknown result");
    }

    public boolean updateAppicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_updateAppicationModule(appModuleId, applicationModule);
      return recv_updateAppicationModule();
    }

    public void send_updateAppicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) throws org.apache.thrift.TException
    {
      updateAppicationModule_args args = new updateAppicationModule_args();
      args.setAppModuleId(appModuleId);
      args.setApplicationModule(applicationModule);
      sendBase("updateAppicationModule", args);
    }

    public boolean recv_updateAppicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      updateAppicationModule_result result = new updateAppicationModule_result();
      receiveBase(result, "updateAppicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAppicationModule failed: unknown result");
    }

    public boolean deleteAppicationModule(String appModuleId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_deleteAppicationModule(appModuleId);
      return recv_deleteAppicationModule();
    }

    public void send_deleteAppicationModule(String appModuleId) throws org.apache.thrift.TException
    {
      deleteAppicationModule_args args = new deleteAppicationModule_args();
      args.setAppModuleId(appModuleId);
      sendBase("deleteAppicationModule", args);
    }

    public boolean recv_deleteAppicationModule() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      deleteAppicationModule_result result = new deleteAppicationModule_result();
      receiveBase(result, "deleteAppicationModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAppicationModule failed: unknown result");
    }

    public String addApplicationDeployment(String applicationInterfaceId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_addApplicationDeployment(applicationInterfaceId, applicationDeployment);
      return recv_addApplicationDeployment();
    }

    public void send_addApplicationDeployment(String applicationInterfaceId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) throws org.apache.thrift.TException
    {
      addApplicationDeployment_args args = new addApplicationDeployment_args();
      args.setApplicationInterfaceId(applicationInterfaceId);
      args.setApplicationDeployment(applicationDeployment);
      sendBase("addApplicationDeployment", args);
    }

    public String recv_addApplicationDeployment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      addApplicationDeployment_result result = new addApplicationDeployment_result();
      receiveBase(result, "addApplicationDeployment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addApplicationDeployment failed: unknown result");
    }

    public List<String> listApplicationDeploymentIds(String applicationInterfaceId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_listApplicationDeploymentIds(applicationInterfaceId);
      return recv_listApplicationDeploymentIds();
    }

    public void send_listApplicationDeploymentIds(String applicationInterfaceId) throws org.apache.thrift.TException
    {
      listApplicationDeploymentIds_args args = new listApplicationDeploymentIds_args();
      args.setApplicationInterfaceId(applicationInterfaceId);
      sendBase("listApplicationDeploymentIds", args);
    }

    public List<String> recv_listApplicationDeploymentIds() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      listApplicationDeploymentIds_result result = new listApplicationDeploymentIds_result();
      receiveBase(result, "listApplicationDeploymentIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listApplicationDeploymentIds failed: unknown result");
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getApplicationDeployment(String applicationInterfaceId, String applicationDeploymentId) throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getApplicationDeployment(applicationInterfaceId, applicationDeploymentId);
      return recv_getApplicationDeployment();
    }

    public void send_getApplicationDeployment(String applicationInterfaceId, String applicationDeploymentId) throws org.apache.thrift.TException
    {
      getApplicationDeployment_args args = new getApplicationDeployment_args();
      args.setApplicationInterfaceId(applicationInterfaceId);
      args.setApplicationDeploymentId(applicationDeploymentId);
      sendBase("getApplicationDeployment", args);
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription recv_getApplicationDeployment() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException
    {
      getApplicationDeployment_result result = new getApplicationDeployment_result();
      receiveBase(result, "getApplicationDeployment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationDeployment failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAPIVersion_call method_call = new GetAPIVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAPIVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAPIVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAPIVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAPIVersion_args args = new GetAPIVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAPIVersion();
      }
    }

    public void addComputeResourceDescription(org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addComputeResourceDescription_call method_call = new addComputeResourceDescription_call(computeResourceDescription, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addComputeResourceDescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription;
      public addComputeResourceDescription_call(org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceDescription = computeResourceDescription;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addComputeResourceDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addComputeResourceDescription_args args = new addComputeResourceDescription_args();
        args.setComputeResourceDescription(computeResourceDescription);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addComputeResourceDescription();
      }
    }

    public void addSSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSSHJobSubmissionProtocol_call method_call = new addSSHJobSubmissionProtocol_call(computeResourceId, jobSubmission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSSHJobSubmissionProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission;
      public addSSHJobSubmissionProtocol_call(String computeResourceId, org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.jobSubmission = jobSubmission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSSHJobSubmissionProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSSHJobSubmissionProtocol_args args = new addSSHJobSubmissionProtocol_args();
        args.setComputeResourceId(computeResourceId);
        args.setJobSubmission(jobSubmission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSSHJobSubmissionProtocol();
      }
    }

    public void addGSISSHJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGSISSHJobSubmissionProtocol_call method_call = new addGSISSHJobSubmissionProtocol_call(computeResourceId, jobSubmission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGSISSHJobSubmissionProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission;
      public addGSISSHJobSubmissionProtocol_call(String computeResourceId, org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.jobSubmission = jobSubmission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGSISSHJobSubmissionProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGSISSHJobSubmissionProtocol_args args = new addGSISSHJobSubmissionProtocol_args();
        args.setComputeResourceId(computeResourceId);
        args.setJobSubmission(jobSubmission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addGSISSHJobSubmissionProtocol();
      }
    }

    public void addGlobusJobSubmissionProtocol(String computeResourceId, org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGlobusJobSubmissionProtocol_call method_call = new addGlobusJobSubmissionProtocol_call(computeResourceId, jobSubmission, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGlobusJobSubmissionProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission;
      public addGlobusJobSubmissionProtocol_call(String computeResourceId, org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.jobSubmission = jobSubmission;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGlobusJobSubmissionProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGlobusJobSubmissionProtocol_args args = new addGlobusJobSubmissionProtocol_args();
        args.setComputeResourceId(computeResourceId);
        args.setJobSubmission(jobSubmission);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addGlobusJobSubmissionProtocol();
      }
    }

    public void addSCPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.SCPDataMovement dataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSCPDataMovementProtocol_call method_call = new addSCPDataMovementProtocol_call(computeResourceId, dataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSCPDataMovementProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private org.apache.airavata.model.computehost.SCPDataMovement dataMovement;
      public addSCPDataMovementProtocol_call(String computeResourceId, org.apache.airavata.model.computehost.SCPDataMovement dataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.dataMovement = dataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSCPDataMovementProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSCPDataMovementProtocol_args args = new addSCPDataMovementProtocol_args();
        args.setComputeResourceId(computeResourceId);
        args.setDataMovement(dataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSCPDataMovementProtocol();
      }
    }

    public void addGridFTPDataMovementProtocol(String computeResourceId, org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGridFTPDataMovementProtocol_call method_call = new addGridFTPDataMovementProtocol_call(computeResourceId, dataMovement, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGridFTPDataMovementProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      private org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement;
      public addGridFTPDataMovementProtocol_call(String computeResourceId, org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
        this.dataMovement = dataMovement;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGridFTPDataMovementProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGridFTPDataMovementProtocol_args args = new addGridFTPDataMovementProtocol_args();
        args.setComputeResourceId(computeResourceId);
        args.setDataMovement(dataMovement);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addGridFTPDataMovementProtocol();
      }
    }

    public void listComputeResourceDescriptions(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listComputeResourceDescriptions_call method_call = new listComputeResourceDescriptions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listComputeResourceDescriptions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listComputeResourceDescriptions_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listComputeResourceDescriptions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listComputeResourceDescriptions_args args = new listComputeResourceDescriptions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listComputeResourceDescriptions();
      }
    }

    public void getComputeResourceDescription(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getComputeResourceDescription_call method_call = new getComputeResourceDescription_call(computeResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getComputeResourceDescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String computeResourceId;
      public getComputeResourceDescription_call(String computeResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.computeResourceId = computeResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getComputeResourceDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getComputeResourceDescription_args args = new getComputeResourceDescription_args();
        args.setComputeResourceId(computeResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.computehost.ComputeResourceDescription getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getComputeResourceDescription();
      }
    }

    public void getSSHJobSubmissionProtocol(String sshJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSSHJobSubmissionProtocol_call method_call = new getSSHJobSubmissionProtocol_call(sshJobSubmissionProtocolResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSSHJobSubmissionProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sshJobSubmissionProtocolResourceId;
      public getSSHJobSubmissionProtocol_call(String sshJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sshJobSubmissionProtocolResourceId = sshJobSubmissionProtocolResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSSHJobSubmissionProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSSHJobSubmissionProtocol_args args = new getSSHJobSubmissionProtocol_args();
        args.setSshJobSubmissionProtocolResourceId(sshJobSubmissionProtocolResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.computehost.SSHJobSubmission getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSSHJobSubmissionProtocol();
      }
    }

    public void getGSISSHJobSubmissionProtocol(String gsisshJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGSISSHJobSubmissionProtocol_call method_call = new getGSISSHJobSubmissionProtocol_call(gsisshJobSubmissionProtocolResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGSISSHJobSubmissionProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gsisshJobSubmissionProtocolResourceId;
      public getGSISSHJobSubmissionProtocol_call(String gsisshJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gsisshJobSubmissionProtocolResourceId = gsisshJobSubmissionProtocolResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGSISSHJobSubmissionProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGSISSHJobSubmissionProtocol_args args = new getGSISSHJobSubmissionProtocol_args();
        args.setGsisshJobSubmissionProtocolResourceId(gsisshJobSubmissionProtocolResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.computehost.GSISSHJobSubmission getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGSISSHJobSubmissionProtocol();
      }
    }

    public void getGlobusJobSubmissionProtocol(String globusJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGlobusJobSubmissionProtocol_call method_call = new getGlobusJobSubmissionProtocol_call(globusJobSubmissionProtocolResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGlobusJobSubmissionProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String globusJobSubmissionProtocolResourceId;
      public getGlobusJobSubmissionProtocol_call(String globusJobSubmissionProtocolResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.globusJobSubmissionProtocolResourceId = globusJobSubmissionProtocolResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGlobusJobSubmissionProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGlobusJobSubmissionProtocol_args args = new getGlobusJobSubmissionProtocol_args();
        args.setGlobusJobSubmissionProtocolResourceId(globusJobSubmissionProtocolResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.computehost.GlobusJobSubmission getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGlobusJobSubmissionProtocol();
      }
    }

    public void getSCPDataMovementProtocol(String scpDataMovementResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSCPDataMovementProtocol_call method_call = new getSCPDataMovementProtocol_call(scpDataMovementResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSCPDataMovementProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scpDataMovementResourceId;
      public getSCPDataMovementProtocol_call(String scpDataMovementResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scpDataMovementResourceId = scpDataMovementResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSCPDataMovementProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSCPDataMovementProtocol_args args = new getSCPDataMovementProtocol_args();
        args.setScpDataMovementResourceId(scpDataMovementResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.computehost.SCPDataMovement getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSCPDataMovementProtocol();
      }
    }

    public void getGridFTPDataMovementProtocol(String gridFTPDataMovementResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGridFTPDataMovementProtocol_call method_call = new getGridFTPDataMovementProtocol_call(gridFTPDataMovementResourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGridFTPDataMovementProtocol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gridFTPDataMovementResourceId;
      public getGridFTPDataMovementProtocol_call(String gridFTPDataMovementResourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gridFTPDataMovementResourceId = gridFTPDataMovementResourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGridFTPDataMovementProtocol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGridFTPDataMovementProtocol_args args = new getGridFTPDataMovementProtocol_args();
        args.setGridFTPDataMovementResourceId(gridFTPDataMovementResourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.computehost.GridFTPDataMovement getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGridFTPDataMovementProtocol();
      }
    }

    public void isComputeResourceDescriptionRegistered(String hostName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isComputeResourceDescriptionRegistered_call method_call = new isComputeResourceDescriptionRegistered_call(hostName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isComputeResourceDescriptionRegistered_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      public isComputeResourceDescriptionRegistered_call(String hostName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isComputeResourceDescriptionRegistered", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isComputeResourceDescriptionRegistered_args args = new isComputeResourceDescriptionRegistered_args();
        args.setHostName(hostName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isComputeResourceDescriptionRegistered();
      }
    }

    public void getComputeResourceDescriptionFromHostName(String hostName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getComputeResourceDescriptionFromHostName_call method_call = new getComputeResourceDescriptionFromHostName_call(hostName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getComputeResourceDescriptionFromHostName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostName;
      public getComputeResourceDescriptionFromHostName_call(String hostName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostName = hostName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getComputeResourceDescriptionFromHostName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getComputeResourceDescriptionFromHostName_args args = new getComputeResourceDescriptionFromHostName_args();
        args.setHostName(hostName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.computehost.ComputeResourceDescription getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getComputeResourceDescriptionFromHostName();
      }
    }

    public void addApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addApplicationInterface_call method_call = new addApplicationInterface_call(applicationInterface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addApplicationInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface;
      public addApplicationInterface_call(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationInterface = applicationInterface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addApplicationInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addApplicationInterface_args args = new addApplicationInterface_args();
        args.setApplicationInterface(applicationInterface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addApplicationInterface();
      }
    }

    public void listApplicationInterfaceIds(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listApplicationInterfaceIds_call method_call = new listApplicationInterfaceIds_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listApplicationInterfaceIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listApplicationInterfaceIds_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listApplicationInterfaceIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listApplicationInterfaceIds_args args = new listApplicationInterfaceIds_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listApplicationInterfaceIds();
      }
    }

    public void getApplicationInterface(String applicationInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationInterface_call method_call = new getApplicationInterface_call(applicationInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationInterfaceId;
      public getApplicationInterface_call(String applicationInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationInterfaceId = applicationInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationInterface_args args = new getApplicationInterface_args();
        args.setApplicationInterfaceId(applicationInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationInterface();
      }
    }

    public void registerAppicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, boolean publish, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerAppicationModule_call method_call = new registerAppicationModule_call(applicationModule, publish, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerAppicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule;
      private boolean publish;
      public registerAppicationModule_call(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, boolean publish, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationModule = applicationModule;
        this.publish = publish;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerAppicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerAppicationModule_args args = new registerAppicationModule_args();
        args.setApplicationModule(applicationModule);
        args.setPublish(publish);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerAppicationModule();
      }
    }

    public void getAppicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAppicationModule_call method_call = new getAppicationModule_call(appModuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAppicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appModuleId;
      public getAppicationModule_call(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appModuleId = appModuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAppicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAppicationModule_args args = new getAppicationModule_args();
        args.setAppModuleId(appModuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAppicationModule();
      }
    }

    public void updateAppicationModule(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAppicationModule_call method_call = new updateAppicationModule_call(appModuleId, applicationModule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAppicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appModuleId;
      private org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule;
      public updateAppicationModule_call(String appModuleId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appModuleId = appModuleId;
        this.applicationModule = applicationModule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAppicationModule_args args = new updateAppicationModule_args();
        args.setAppModuleId(appModuleId);
        args.setApplicationModule(applicationModule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAppicationModule();
      }
    }

    public void deleteAppicationModule(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAppicationModule_call method_call = new deleteAppicationModule_call(appModuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAppicationModule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appModuleId;
      public deleteAppicationModule_call(String appModuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appModuleId = appModuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAppicationModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAppicationModule_args args = new deleteAppicationModule_args();
        args.setAppModuleId(appModuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAppicationModule();
      }
    }

    public void addApplicationDeployment(String applicationInterfaceId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addApplicationDeployment_call method_call = new addApplicationDeployment_call(applicationInterfaceId, applicationDeployment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addApplicationDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationInterfaceId;
      private org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment;
      public addApplicationDeployment_call(String applicationInterfaceId, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationInterfaceId = applicationInterfaceId;
        this.applicationDeployment = applicationDeployment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addApplicationDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addApplicationDeployment_args args = new addApplicationDeployment_args();
        args.setApplicationInterfaceId(applicationInterfaceId);
        args.setApplicationDeployment(applicationDeployment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addApplicationDeployment();
      }
    }

    public void listApplicationDeploymentIds(String applicationInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listApplicationDeploymentIds_call method_call = new listApplicationDeploymentIds_call(applicationInterfaceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listApplicationDeploymentIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationInterfaceId;
      public listApplicationDeploymentIds_call(String applicationInterfaceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationInterfaceId = applicationInterfaceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listApplicationDeploymentIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listApplicationDeploymentIds_args args = new listApplicationDeploymentIds_args();
        args.setApplicationInterfaceId(applicationInterfaceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listApplicationDeploymentIds();
      }
    }

    public void getApplicationDeployment(String applicationInterfaceId, String applicationDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationDeployment_call method_call = new getApplicationDeployment_call(applicationInterfaceId, applicationDeploymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationInterfaceId;
      private String applicationDeploymentId;
      public getApplicationDeployment_call(String applicationInterfaceId, String applicationDeploymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationInterfaceId = applicationInterfaceId;
        this.applicationDeploymentId = applicationDeploymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationDeployment_args args = new getApplicationDeployment_args();
        args.setApplicationInterfaceId(applicationInterfaceId);
        args.setApplicationDeploymentId(applicationDeploymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getResult() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationDeployment();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetAPIVersion", new GetAPIVersion());
      processMap.put("addComputeResourceDescription", new addComputeResourceDescription());
      processMap.put("addSSHJobSubmissionProtocol", new addSSHJobSubmissionProtocol());
      processMap.put("addGSISSHJobSubmissionProtocol", new addGSISSHJobSubmissionProtocol());
      processMap.put("addGlobusJobSubmissionProtocol", new addGlobusJobSubmissionProtocol());
      processMap.put("addSCPDataMovementProtocol", new addSCPDataMovementProtocol());
      processMap.put("addGridFTPDataMovementProtocol", new addGridFTPDataMovementProtocol());
      processMap.put("listComputeResourceDescriptions", new listComputeResourceDescriptions());
      processMap.put("getComputeResourceDescription", new getComputeResourceDescription());
      processMap.put("getSSHJobSubmissionProtocol", new getSSHJobSubmissionProtocol());
      processMap.put("getGSISSHJobSubmissionProtocol", new getGSISSHJobSubmissionProtocol());
      processMap.put("getGlobusJobSubmissionProtocol", new getGlobusJobSubmissionProtocol());
      processMap.put("getSCPDataMovementProtocol", new getSCPDataMovementProtocol());
      processMap.put("getGridFTPDataMovementProtocol", new getGridFTPDataMovementProtocol());
      processMap.put("isComputeResourceDescriptionRegistered", new isComputeResourceDescriptionRegistered());
      processMap.put("getComputeResourceDescriptionFromHostName", new getComputeResourceDescriptionFromHostName());
      processMap.put("addApplicationInterface", new addApplicationInterface());
      processMap.put("listApplicationInterfaceIds", new listApplicationInterfaceIds());
      processMap.put("getApplicationInterface", new getApplicationInterface());
      processMap.put("registerAppicationModule", new registerAppicationModule());
      processMap.put("getAppicationModule", new getAppicationModule());
      processMap.put("updateAppicationModule", new updateAppicationModule());
      processMap.put("deleteAppicationModule", new deleteAppicationModule());
      processMap.put("addApplicationDeployment", new addApplicationDeployment());
      processMap.put("listApplicationDeploymentIds", new listApplicationDeploymentIds());
      processMap.put("getApplicationDeployment", new getApplicationDeployment());
      return processMap;
    }

    public static class GetAPIVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAPIVersion_args> {
      public GetAPIVersion() {
        super("GetAPIVersion");
      }

      public GetAPIVersion_args getEmptyArgsInstance() {
        return new GetAPIVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAPIVersion_result getResult(I iface, GetAPIVersion_args args) throws org.apache.thrift.TException {
        GetAPIVersion_result result = new GetAPIVersion_result();
        result.success = iface.GetAPIVersion();
        return result;
      }
    }

    public static class addComputeResourceDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addComputeResourceDescription_args> {
      public addComputeResourceDescription() {
        super("addComputeResourceDescription");
      }

      public addComputeResourceDescription_args getEmptyArgsInstance() {
        return new addComputeResourceDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addComputeResourceDescription_result getResult(I iface, addComputeResourceDescription_args args) throws org.apache.thrift.TException {
        addComputeResourceDescription_result result = new addComputeResourceDescription_result();
        try {
          result.success = iface.addComputeResourceDescription(args.computeResourceDescription);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addSSHJobSubmissionProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSSHJobSubmissionProtocol_args> {
      public addSSHJobSubmissionProtocol() {
        super("addSSHJobSubmissionProtocol");
      }

      public addSSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new addSSHJobSubmissionProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSSHJobSubmissionProtocol_result getResult(I iface, addSSHJobSubmissionProtocol_args args) throws org.apache.thrift.TException {
        addSSHJobSubmissionProtocol_result result = new addSSHJobSubmissionProtocol_result();
        try {
          result.success = iface.addSSHJobSubmissionProtocol(args.computeResourceId, args.jobSubmission);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addGSISSHJobSubmissionProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGSISSHJobSubmissionProtocol_args> {
      public addGSISSHJobSubmissionProtocol() {
        super("addGSISSHJobSubmissionProtocol");
      }

      public addGSISSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new addGSISSHJobSubmissionProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addGSISSHJobSubmissionProtocol_result getResult(I iface, addGSISSHJobSubmissionProtocol_args args) throws org.apache.thrift.TException {
        addGSISSHJobSubmissionProtocol_result result = new addGSISSHJobSubmissionProtocol_result();
        try {
          result.success = iface.addGSISSHJobSubmissionProtocol(args.computeResourceId, args.jobSubmission);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addGlobusJobSubmissionProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGlobusJobSubmissionProtocol_args> {
      public addGlobusJobSubmissionProtocol() {
        super("addGlobusJobSubmissionProtocol");
      }

      public addGlobusJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new addGlobusJobSubmissionProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addGlobusJobSubmissionProtocol_result getResult(I iface, addGlobusJobSubmissionProtocol_args args) throws org.apache.thrift.TException {
        addGlobusJobSubmissionProtocol_result result = new addGlobusJobSubmissionProtocol_result();
        try {
          result.success = iface.addGlobusJobSubmissionProtocol(args.computeResourceId, args.jobSubmission);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addSCPDataMovementProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSCPDataMovementProtocol_args> {
      public addSCPDataMovementProtocol() {
        super("addSCPDataMovementProtocol");
      }

      public addSCPDataMovementProtocol_args getEmptyArgsInstance() {
        return new addSCPDataMovementProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSCPDataMovementProtocol_result getResult(I iface, addSCPDataMovementProtocol_args args) throws org.apache.thrift.TException {
        addSCPDataMovementProtocol_result result = new addSCPDataMovementProtocol_result();
        try {
          result.success = iface.addSCPDataMovementProtocol(args.computeResourceId, args.dataMovement);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addGridFTPDataMovementProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGridFTPDataMovementProtocol_args> {
      public addGridFTPDataMovementProtocol() {
        super("addGridFTPDataMovementProtocol");
      }

      public addGridFTPDataMovementProtocol_args getEmptyArgsInstance() {
        return new addGridFTPDataMovementProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addGridFTPDataMovementProtocol_result getResult(I iface, addGridFTPDataMovementProtocol_args args) throws org.apache.thrift.TException {
        addGridFTPDataMovementProtocol_result result = new addGridFTPDataMovementProtocol_result();
        try {
          result.success = iface.addGridFTPDataMovementProtocol(args.computeResourceId, args.dataMovement);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class listComputeResourceDescriptions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listComputeResourceDescriptions_args> {
      public listComputeResourceDescriptions() {
        super("listComputeResourceDescriptions");
      }

      public listComputeResourceDescriptions_args getEmptyArgsInstance() {
        return new listComputeResourceDescriptions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listComputeResourceDescriptions_result getResult(I iface, listComputeResourceDescriptions_args args) throws org.apache.thrift.TException {
        listComputeResourceDescriptions_result result = new listComputeResourceDescriptions_result();
        try {
          result.success = iface.listComputeResourceDescriptions();
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getComputeResourceDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getComputeResourceDescription_args> {
      public getComputeResourceDescription() {
        super("getComputeResourceDescription");
      }

      public getComputeResourceDescription_args getEmptyArgsInstance() {
        return new getComputeResourceDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getComputeResourceDescription_result getResult(I iface, getComputeResourceDescription_args args) throws org.apache.thrift.TException {
        getComputeResourceDescription_result result = new getComputeResourceDescription_result();
        try {
          result.success = iface.getComputeResourceDescription(args.computeResourceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getSSHJobSubmissionProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSSHJobSubmissionProtocol_args> {
      public getSSHJobSubmissionProtocol() {
        super("getSSHJobSubmissionProtocol");
      }

      public getSSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new getSSHJobSubmissionProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSSHJobSubmissionProtocol_result getResult(I iface, getSSHJobSubmissionProtocol_args args) throws org.apache.thrift.TException {
        getSSHJobSubmissionProtocol_result result = new getSSHJobSubmissionProtocol_result();
        try {
          result.success = iface.getSSHJobSubmissionProtocol(args.sshJobSubmissionProtocolResourceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getGSISSHJobSubmissionProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGSISSHJobSubmissionProtocol_args> {
      public getGSISSHJobSubmissionProtocol() {
        super("getGSISSHJobSubmissionProtocol");
      }

      public getGSISSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new getGSISSHJobSubmissionProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGSISSHJobSubmissionProtocol_result getResult(I iface, getGSISSHJobSubmissionProtocol_args args) throws org.apache.thrift.TException {
        getGSISSHJobSubmissionProtocol_result result = new getGSISSHJobSubmissionProtocol_result();
        try {
          result.success = iface.getGSISSHJobSubmissionProtocol(args.gsisshJobSubmissionProtocolResourceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getGlobusJobSubmissionProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGlobusJobSubmissionProtocol_args> {
      public getGlobusJobSubmissionProtocol() {
        super("getGlobusJobSubmissionProtocol");
      }

      public getGlobusJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new getGlobusJobSubmissionProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGlobusJobSubmissionProtocol_result getResult(I iface, getGlobusJobSubmissionProtocol_args args) throws org.apache.thrift.TException {
        getGlobusJobSubmissionProtocol_result result = new getGlobusJobSubmissionProtocol_result();
        try {
          result.success = iface.getGlobusJobSubmissionProtocol(args.globusJobSubmissionProtocolResourceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getSCPDataMovementProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSCPDataMovementProtocol_args> {
      public getSCPDataMovementProtocol() {
        super("getSCPDataMovementProtocol");
      }

      public getSCPDataMovementProtocol_args getEmptyArgsInstance() {
        return new getSCPDataMovementProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSCPDataMovementProtocol_result getResult(I iface, getSCPDataMovementProtocol_args args) throws org.apache.thrift.TException {
        getSCPDataMovementProtocol_result result = new getSCPDataMovementProtocol_result();
        try {
          result.success = iface.getSCPDataMovementProtocol(args.scpDataMovementResourceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getGridFTPDataMovementProtocol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGridFTPDataMovementProtocol_args> {
      public getGridFTPDataMovementProtocol() {
        super("getGridFTPDataMovementProtocol");
      }

      public getGridFTPDataMovementProtocol_args getEmptyArgsInstance() {
        return new getGridFTPDataMovementProtocol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGridFTPDataMovementProtocol_result getResult(I iface, getGridFTPDataMovementProtocol_args args) throws org.apache.thrift.TException {
        getGridFTPDataMovementProtocol_result result = new getGridFTPDataMovementProtocol_result();
        try {
          result.success = iface.getGridFTPDataMovementProtocol(args.gridFTPDataMovementResourceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class isComputeResourceDescriptionRegistered<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isComputeResourceDescriptionRegistered_args> {
      public isComputeResourceDescriptionRegistered() {
        super("isComputeResourceDescriptionRegistered");
      }

      public isComputeResourceDescriptionRegistered_args getEmptyArgsInstance() {
        return new isComputeResourceDescriptionRegistered_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isComputeResourceDescriptionRegistered_result getResult(I iface, isComputeResourceDescriptionRegistered_args args) throws org.apache.thrift.TException {
        isComputeResourceDescriptionRegistered_result result = new isComputeResourceDescriptionRegistered_result();
        try {
          result.success = iface.isComputeResourceDescriptionRegistered(args.hostName);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getComputeResourceDescriptionFromHostName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getComputeResourceDescriptionFromHostName_args> {
      public getComputeResourceDescriptionFromHostName() {
        super("getComputeResourceDescriptionFromHostName");
      }

      public getComputeResourceDescriptionFromHostName_args getEmptyArgsInstance() {
        return new getComputeResourceDescriptionFromHostName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getComputeResourceDescriptionFromHostName_result getResult(I iface, getComputeResourceDescriptionFromHostName_args args) throws org.apache.thrift.TException {
        getComputeResourceDescriptionFromHostName_result result = new getComputeResourceDescriptionFromHostName_result();
        try {
          result.success = iface.getComputeResourceDescriptionFromHostName(args.hostName);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addApplicationInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addApplicationInterface_args> {
      public addApplicationInterface() {
        super("addApplicationInterface");
      }

      public addApplicationInterface_args getEmptyArgsInstance() {
        return new addApplicationInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addApplicationInterface_result getResult(I iface, addApplicationInterface_args args) throws org.apache.thrift.TException {
        addApplicationInterface_result result = new addApplicationInterface_result();
        try {
          result.success = iface.addApplicationInterface(args.applicationInterface);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class listApplicationInterfaceIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listApplicationInterfaceIds_args> {
      public listApplicationInterfaceIds() {
        super("listApplicationInterfaceIds");
      }

      public listApplicationInterfaceIds_args getEmptyArgsInstance() {
        return new listApplicationInterfaceIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listApplicationInterfaceIds_result getResult(I iface, listApplicationInterfaceIds_args args) throws org.apache.thrift.TException {
        listApplicationInterfaceIds_result result = new listApplicationInterfaceIds_result();
        try {
          result.success = iface.listApplicationInterfaceIds();
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getApplicationInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationInterface_args> {
      public getApplicationInterface() {
        super("getApplicationInterface");
      }

      public getApplicationInterface_args getEmptyArgsInstance() {
        return new getApplicationInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationInterface_result getResult(I iface, getApplicationInterface_args args) throws org.apache.thrift.TException {
        getApplicationInterface_result result = new getApplicationInterface_result();
        try {
          result.success = iface.getApplicationInterface(args.applicationInterfaceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class registerAppicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerAppicationModule_args> {
      public registerAppicationModule() {
        super("registerAppicationModule");
      }

      public registerAppicationModule_args getEmptyArgsInstance() {
        return new registerAppicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerAppicationModule_result getResult(I iface, registerAppicationModule_args args) throws org.apache.thrift.TException {
        registerAppicationModule_result result = new registerAppicationModule_result();
        try {
          result.success = iface.registerAppicationModule(args.applicationModule, args.publish);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getAppicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAppicationModule_args> {
      public getAppicationModule() {
        super("getAppicationModule");
      }

      public getAppicationModule_args getEmptyArgsInstance() {
        return new getAppicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAppicationModule_result getResult(I iface, getAppicationModule_args args) throws org.apache.thrift.TException {
        getAppicationModule_result result = new getAppicationModule_result();
        try {
          result.success = iface.getAppicationModule(args.appModuleId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateAppicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAppicationModule_args> {
      public updateAppicationModule() {
        super("updateAppicationModule");
      }

      public updateAppicationModule_args getEmptyArgsInstance() {
        return new updateAppicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAppicationModule_result getResult(I iface, updateAppicationModule_args args) throws org.apache.thrift.TException {
        updateAppicationModule_result result = new updateAppicationModule_result();
        try {
          result.success = iface.updateAppicationModule(args.appModuleId, args.applicationModule);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deleteAppicationModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAppicationModule_args> {
      public deleteAppicationModule() {
        super("deleteAppicationModule");
      }

      public deleteAppicationModule_args getEmptyArgsInstance() {
        return new deleteAppicationModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAppicationModule_result getResult(I iface, deleteAppicationModule_args args) throws org.apache.thrift.TException {
        deleteAppicationModule_result result = new deleteAppicationModule_result();
        try {
          result.success = iface.deleteAppicationModule(args.appModuleId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class addApplicationDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addApplicationDeployment_args> {
      public addApplicationDeployment() {
        super("addApplicationDeployment");
      }

      public addApplicationDeployment_args getEmptyArgsInstance() {
        return new addApplicationDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addApplicationDeployment_result getResult(I iface, addApplicationDeployment_args args) throws org.apache.thrift.TException {
        addApplicationDeployment_result result = new addApplicationDeployment_result();
        try {
          result.success = iface.addApplicationDeployment(args.applicationInterfaceId, args.applicationDeployment);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class listApplicationDeploymentIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listApplicationDeploymentIds_args> {
      public listApplicationDeploymentIds() {
        super("listApplicationDeploymentIds");
      }

      public listApplicationDeploymentIds_args getEmptyArgsInstance() {
        return new listApplicationDeploymentIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listApplicationDeploymentIds_result getResult(I iface, listApplicationDeploymentIds_args args) throws org.apache.thrift.TException {
        listApplicationDeploymentIds_result result = new listApplicationDeploymentIds_result();
        try {
          result.success = iface.listApplicationDeploymentIds(args.applicationInterfaceId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getApplicationDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationDeployment_args> {
      public getApplicationDeployment() {
        super("getApplicationDeployment");
      }

      public getApplicationDeployment_args getEmptyArgsInstance() {
        return new getApplicationDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationDeployment_result getResult(I iface, getApplicationDeployment_args args) throws org.apache.thrift.TException {
        getApplicationDeployment_result result = new getApplicationDeployment_result();
        try {
          result.success = iface.getApplicationDeployment(args.applicationInterfaceId, args.applicationDeploymentId);
        } catch (org.apache.airavata.model.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.model.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.model.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetAPIVersion", new GetAPIVersion());
      processMap.put("addComputeResourceDescription", new addComputeResourceDescription());
      processMap.put("addSSHJobSubmissionProtocol", new addSSHJobSubmissionProtocol());
      processMap.put("addGSISSHJobSubmissionProtocol", new addGSISSHJobSubmissionProtocol());
      processMap.put("addGlobusJobSubmissionProtocol", new addGlobusJobSubmissionProtocol());
      processMap.put("addSCPDataMovementProtocol", new addSCPDataMovementProtocol());
      processMap.put("addGridFTPDataMovementProtocol", new addGridFTPDataMovementProtocol());
      processMap.put("listComputeResourceDescriptions", new listComputeResourceDescriptions());
      processMap.put("getComputeResourceDescription", new getComputeResourceDescription());
      processMap.put("getSSHJobSubmissionProtocol", new getSSHJobSubmissionProtocol());
      processMap.put("getGSISSHJobSubmissionProtocol", new getGSISSHJobSubmissionProtocol());
      processMap.put("getGlobusJobSubmissionProtocol", new getGlobusJobSubmissionProtocol());
      processMap.put("getSCPDataMovementProtocol", new getSCPDataMovementProtocol());
      processMap.put("getGridFTPDataMovementProtocol", new getGridFTPDataMovementProtocol());
      processMap.put("isComputeResourceDescriptionRegistered", new isComputeResourceDescriptionRegistered());
      processMap.put("getComputeResourceDescriptionFromHostName", new getComputeResourceDescriptionFromHostName());
      processMap.put("addApplicationInterface", new addApplicationInterface());
      processMap.put("listApplicationInterfaceIds", new listApplicationInterfaceIds());
      processMap.put("getApplicationInterface", new getApplicationInterface());
      processMap.put("registerAppicationModule", new registerAppicationModule());
      processMap.put("getAppicationModule", new getAppicationModule());
      processMap.put("updateAppicationModule", new updateAppicationModule());
      processMap.put("deleteAppicationModule", new deleteAppicationModule());
      processMap.put("addApplicationDeployment", new addApplicationDeployment());
      processMap.put("listApplicationDeploymentIds", new listApplicationDeploymentIds());
      processMap.put("getApplicationDeployment", new getApplicationDeployment());
      return processMap;
    }

    public static class GetAPIVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAPIVersion_args, String> {
      public GetAPIVersion() {
        super("GetAPIVersion");
      }

      public GetAPIVersion_args getEmptyArgsInstance() {
        return new GetAPIVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            GetAPIVersion_result result = new GetAPIVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAPIVersion_result result = new GetAPIVersion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAPIVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.GetAPIVersion(resultHandler);
      }
    }

    public static class addComputeResourceDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addComputeResourceDescription_args, String> {
      public addComputeResourceDescription() {
        super("addComputeResourceDescription");
      }

      public addComputeResourceDescription_args getEmptyArgsInstance() {
        return new addComputeResourceDescription_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addComputeResourceDescription_result result = new addComputeResourceDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addComputeResourceDescription_result result = new addComputeResourceDescription_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addComputeResourceDescription_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addComputeResourceDescription(args.computeResourceDescription,resultHandler);
      }
    }

    public static class addSSHJobSubmissionProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSSHJobSubmissionProtocol_args, String> {
      public addSSHJobSubmissionProtocol() {
        super("addSSHJobSubmissionProtocol");
      }

      public addSSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new addSSHJobSubmissionProtocol_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addSSHJobSubmissionProtocol_result result = new addSSHJobSubmissionProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSSHJobSubmissionProtocol_result result = new addSSHJobSubmissionProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSSHJobSubmissionProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addSSHJobSubmissionProtocol(args.computeResourceId, args.jobSubmission,resultHandler);
      }
    }

    public static class addGSISSHJobSubmissionProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addGSISSHJobSubmissionProtocol_args, String> {
      public addGSISSHJobSubmissionProtocol() {
        super("addGSISSHJobSubmissionProtocol");
      }

      public addGSISSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new addGSISSHJobSubmissionProtocol_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addGSISSHJobSubmissionProtocol_result result = new addGSISSHJobSubmissionProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addGSISSHJobSubmissionProtocol_result result = new addGSISSHJobSubmissionProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addGSISSHJobSubmissionProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addGSISSHJobSubmissionProtocol(args.computeResourceId, args.jobSubmission,resultHandler);
      }
    }

    public static class addGlobusJobSubmissionProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addGlobusJobSubmissionProtocol_args, String> {
      public addGlobusJobSubmissionProtocol() {
        super("addGlobusJobSubmissionProtocol");
      }

      public addGlobusJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new addGlobusJobSubmissionProtocol_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addGlobusJobSubmissionProtocol_result result = new addGlobusJobSubmissionProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addGlobusJobSubmissionProtocol_result result = new addGlobusJobSubmissionProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addGlobusJobSubmissionProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addGlobusJobSubmissionProtocol(args.computeResourceId, args.jobSubmission,resultHandler);
      }
    }

    public static class addSCPDataMovementProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSCPDataMovementProtocol_args, String> {
      public addSCPDataMovementProtocol() {
        super("addSCPDataMovementProtocol");
      }

      public addSCPDataMovementProtocol_args getEmptyArgsInstance() {
        return new addSCPDataMovementProtocol_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addSCPDataMovementProtocol_result result = new addSCPDataMovementProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSCPDataMovementProtocol_result result = new addSCPDataMovementProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSCPDataMovementProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addSCPDataMovementProtocol(args.computeResourceId, args.dataMovement,resultHandler);
      }
    }

    public static class addGridFTPDataMovementProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addGridFTPDataMovementProtocol_args, String> {
      public addGridFTPDataMovementProtocol() {
        super("addGridFTPDataMovementProtocol");
      }

      public addGridFTPDataMovementProtocol_args getEmptyArgsInstance() {
        return new addGridFTPDataMovementProtocol_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addGridFTPDataMovementProtocol_result result = new addGridFTPDataMovementProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addGridFTPDataMovementProtocol_result result = new addGridFTPDataMovementProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addGridFTPDataMovementProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addGridFTPDataMovementProtocol(args.computeResourceId, args.dataMovement,resultHandler);
      }
    }

    public static class listComputeResourceDescriptions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listComputeResourceDescriptions_args, List<String>> {
      public listComputeResourceDescriptions() {
        super("listComputeResourceDescriptions");
      }

      public listComputeResourceDescriptions_args getEmptyArgsInstance() {
        return new listComputeResourceDescriptions_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            listComputeResourceDescriptions_result result = new listComputeResourceDescriptions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listComputeResourceDescriptions_result result = new listComputeResourceDescriptions_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listComputeResourceDescriptions_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.listComputeResourceDescriptions(resultHandler);
      }
    }

    public static class getComputeResourceDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getComputeResourceDescription_args, org.apache.airavata.model.computehost.ComputeResourceDescription> {
      public getComputeResourceDescription() {
        super("getComputeResourceDescription");
      }

      public getComputeResourceDescription_args getEmptyArgsInstance() {
        return new getComputeResourceDescription_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.computehost.ComputeResourceDescription> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.computehost.ComputeResourceDescription>() { 
          public void onComplete(org.apache.airavata.model.computehost.ComputeResourceDescription o) {
            getComputeResourceDescription_result result = new getComputeResourceDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getComputeResourceDescription_result result = new getComputeResourceDescription_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getComputeResourceDescription_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.computehost.ComputeResourceDescription> resultHandler) throws TException {
        iface.getComputeResourceDescription(args.computeResourceId,resultHandler);
      }
    }

    public static class getSSHJobSubmissionProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSSHJobSubmissionProtocol_args, org.apache.airavata.model.computehost.SSHJobSubmission> {
      public getSSHJobSubmissionProtocol() {
        super("getSSHJobSubmissionProtocol");
      }

      public getSSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new getSSHJobSubmissionProtocol_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.computehost.SSHJobSubmission> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.computehost.SSHJobSubmission>() { 
          public void onComplete(org.apache.airavata.model.computehost.SSHJobSubmission o) {
            getSSHJobSubmissionProtocol_result result = new getSSHJobSubmissionProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSSHJobSubmissionProtocol_result result = new getSSHJobSubmissionProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSSHJobSubmissionProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.computehost.SSHJobSubmission> resultHandler) throws TException {
        iface.getSSHJobSubmissionProtocol(args.sshJobSubmissionProtocolResourceId,resultHandler);
      }
    }

    public static class getGSISSHJobSubmissionProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGSISSHJobSubmissionProtocol_args, org.apache.airavata.model.computehost.GSISSHJobSubmission> {
      public getGSISSHJobSubmissionProtocol() {
        super("getGSISSHJobSubmissionProtocol");
      }

      public getGSISSHJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new getGSISSHJobSubmissionProtocol_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.computehost.GSISSHJobSubmission> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.computehost.GSISSHJobSubmission>() { 
          public void onComplete(org.apache.airavata.model.computehost.GSISSHJobSubmission o) {
            getGSISSHJobSubmissionProtocol_result result = new getGSISSHJobSubmissionProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGSISSHJobSubmissionProtocol_result result = new getGSISSHJobSubmissionProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGSISSHJobSubmissionProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.computehost.GSISSHJobSubmission> resultHandler) throws TException {
        iface.getGSISSHJobSubmissionProtocol(args.gsisshJobSubmissionProtocolResourceId,resultHandler);
      }
    }

    public static class getGlobusJobSubmissionProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGlobusJobSubmissionProtocol_args, org.apache.airavata.model.computehost.GlobusJobSubmission> {
      public getGlobusJobSubmissionProtocol() {
        super("getGlobusJobSubmissionProtocol");
      }

      public getGlobusJobSubmissionProtocol_args getEmptyArgsInstance() {
        return new getGlobusJobSubmissionProtocol_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.computehost.GlobusJobSubmission> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.computehost.GlobusJobSubmission>() { 
          public void onComplete(org.apache.airavata.model.computehost.GlobusJobSubmission o) {
            getGlobusJobSubmissionProtocol_result result = new getGlobusJobSubmissionProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGlobusJobSubmissionProtocol_result result = new getGlobusJobSubmissionProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGlobusJobSubmissionProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.computehost.GlobusJobSubmission> resultHandler) throws TException {
        iface.getGlobusJobSubmissionProtocol(args.globusJobSubmissionProtocolResourceId,resultHandler);
      }
    }

    public static class getSCPDataMovementProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSCPDataMovementProtocol_args, org.apache.airavata.model.computehost.SCPDataMovement> {
      public getSCPDataMovementProtocol() {
        super("getSCPDataMovementProtocol");
      }

      public getSCPDataMovementProtocol_args getEmptyArgsInstance() {
        return new getSCPDataMovementProtocol_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.computehost.SCPDataMovement> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.computehost.SCPDataMovement>() { 
          public void onComplete(org.apache.airavata.model.computehost.SCPDataMovement o) {
            getSCPDataMovementProtocol_result result = new getSCPDataMovementProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSCPDataMovementProtocol_result result = new getSCPDataMovementProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSCPDataMovementProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.computehost.SCPDataMovement> resultHandler) throws TException {
        iface.getSCPDataMovementProtocol(args.scpDataMovementResourceId,resultHandler);
      }
    }

    public static class getGridFTPDataMovementProtocol<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGridFTPDataMovementProtocol_args, org.apache.airavata.model.computehost.GridFTPDataMovement> {
      public getGridFTPDataMovementProtocol() {
        super("getGridFTPDataMovementProtocol");
      }

      public getGridFTPDataMovementProtocol_args getEmptyArgsInstance() {
        return new getGridFTPDataMovementProtocol_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.computehost.GridFTPDataMovement> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.computehost.GridFTPDataMovement>() { 
          public void onComplete(org.apache.airavata.model.computehost.GridFTPDataMovement o) {
            getGridFTPDataMovementProtocol_result result = new getGridFTPDataMovementProtocol_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGridFTPDataMovementProtocol_result result = new getGridFTPDataMovementProtocol_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGridFTPDataMovementProtocol_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.computehost.GridFTPDataMovement> resultHandler) throws TException {
        iface.getGridFTPDataMovementProtocol(args.gridFTPDataMovementResourceId,resultHandler);
      }
    }

    public static class isComputeResourceDescriptionRegistered<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isComputeResourceDescriptionRegistered_args, Boolean> {
      public isComputeResourceDescriptionRegistered() {
        super("isComputeResourceDescriptionRegistered");
      }

      public isComputeResourceDescriptionRegistered_args getEmptyArgsInstance() {
        return new isComputeResourceDescriptionRegistered_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isComputeResourceDescriptionRegistered_result result = new isComputeResourceDescriptionRegistered_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isComputeResourceDescriptionRegistered_result result = new isComputeResourceDescriptionRegistered_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isComputeResourceDescriptionRegistered_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isComputeResourceDescriptionRegistered(args.hostName,resultHandler);
      }
    }

    public static class getComputeResourceDescriptionFromHostName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getComputeResourceDescriptionFromHostName_args, org.apache.airavata.model.computehost.ComputeResourceDescription> {
      public getComputeResourceDescriptionFromHostName() {
        super("getComputeResourceDescriptionFromHostName");
      }

      public getComputeResourceDescriptionFromHostName_args getEmptyArgsInstance() {
        return new getComputeResourceDescriptionFromHostName_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.computehost.ComputeResourceDescription> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.computehost.ComputeResourceDescription>() { 
          public void onComplete(org.apache.airavata.model.computehost.ComputeResourceDescription o) {
            getComputeResourceDescriptionFromHostName_result result = new getComputeResourceDescriptionFromHostName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getComputeResourceDescriptionFromHostName_result result = new getComputeResourceDescriptionFromHostName_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getComputeResourceDescriptionFromHostName_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.computehost.ComputeResourceDescription> resultHandler) throws TException {
        iface.getComputeResourceDescriptionFromHostName(args.hostName,resultHandler);
      }
    }

    public static class addApplicationInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addApplicationInterface_args, String> {
      public addApplicationInterface() {
        super("addApplicationInterface");
      }

      public addApplicationInterface_args getEmptyArgsInstance() {
        return new addApplicationInterface_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addApplicationInterface_result result = new addApplicationInterface_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addApplicationInterface_result result = new addApplicationInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addApplicationInterface_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addApplicationInterface(args.applicationInterface,resultHandler);
      }
    }

    public static class listApplicationInterfaceIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listApplicationInterfaceIds_args, List<String>> {
      public listApplicationInterfaceIds() {
        super("listApplicationInterfaceIds");
      }

      public listApplicationInterfaceIds_args getEmptyArgsInstance() {
        return new listApplicationInterfaceIds_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            listApplicationInterfaceIds_result result = new listApplicationInterfaceIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listApplicationInterfaceIds_result result = new listApplicationInterfaceIds_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listApplicationInterfaceIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.listApplicationInterfaceIds(resultHandler);
      }
    }

    public static class getApplicationInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationInterface_args, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription> {
      public getApplicationInterface() {
        super("getApplicationInterface");
      }

      public getApplicationInterface_args getEmptyArgsInstance() {
        return new getApplicationInterface_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription>() { 
          public void onComplete(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription o) {
            getApplicationInterface_result result = new getApplicationInterface_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationInterface_result result = new getApplicationInterface_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationInterface_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription> resultHandler) throws TException {
        iface.getApplicationInterface(args.applicationInterfaceId,resultHandler);
      }
    }

    public static class registerAppicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerAppicationModule_args, String> {
      public registerAppicationModule() {
        super("registerAppicationModule");
      }

      public registerAppicationModule_args getEmptyArgsInstance() {
        return new registerAppicationModule_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            registerAppicationModule_result result = new registerAppicationModule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerAppicationModule_result result = new registerAppicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerAppicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.registerAppicationModule(args.applicationModule, args.publish,resultHandler);
      }
    }

    public static class getAppicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAppicationModule_args, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule> {
      public getAppicationModule() {
        super("getAppicationModule");
      }

      public getAppicationModule_args getEmptyArgsInstance() {
        return new getAppicationModule_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule>() { 
          public void onComplete(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule o) {
            getAppicationModule_result result = new getAppicationModule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAppicationModule_result result = new getAppicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAppicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule> resultHandler) throws TException {
        iface.getAppicationModule(args.appModuleId,resultHandler);
      }
    }

    public static class updateAppicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAppicationModule_args, Boolean> {
      public updateAppicationModule() {
        super("updateAppicationModule");
      }

      public updateAppicationModule_args getEmptyArgsInstance() {
        return new updateAppicationModule_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateAppicationModule_result result = new updateAppicationModule_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAppicationModule_result result = new updateAppicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAppicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateAppicationModule(args.appModuleId, args.applicationModule,resultHandler);
      }
    }

    public static class deleteAppicationModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAppicationModule_args, Boolean> {
      public deleteAppicationModule() {
        super("deleteAppicationModule");
      }

      public deleteAppicationModule_args getEmptyArgsInstance() {
        return new deleteAppicationModule_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteAppicationModule_result result = new deleteAppicationModule_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteAppicationModule_result result = new deleteAppicationModule_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAppicationModule_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteAppicationModule(args.appModuleId,resultHandler);
      }
    }

    public static class addApplicationDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addApplicationDeployment_args, String> {
      public addApplicationDeployment() {
        super("addApplicationDeployment");
      }

      public addApplicationDeployment_args getEmptyArgsInstance() {
        return new addApplicationDeployment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addApplicationDeployment_result result = new addApplicationDeployment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addApplicationDeployment_result result = new addApplicationDeployment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addApplicationDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addApplicationDeployment(args.applicationInterfaceId, args.applicationDeployment,resultHandler);
      }
    }

    public static class listApplicationDeploymentIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listApplicationDeploymentIds_args, List<String>> {
      public listApplicationDeploymentIds() {
        super("listApplicationDeploymentIds");
      }

      public listApplicationDeploymentIds_args getEmptyArgsInstance() {
        return new listApplicationDeploymentIds_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            listApplicationDeploymentIds_result result = new listApplicationDeploymentIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listApplicationDeploymentIds_result result = new listApplicationDeploymentIds_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listApplicationDeploymentIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.listApplicationDeploymentIds(args.applicationInterfaceId,resultHandler);
      }
    }

    public static class getApplicationDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationDeployment_args, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription> {
      public getApplicationDeployment() {
        super("getApplicationDeployment");
      }

      public getApplicationDeployment_args getEmptyArgsInstance() {
        return new getApplicationDeployment_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription>() { 
          public void onComplete(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription o) {
            getApplicationDeployment_result result = new getApplicationDeployment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationDeployment_result result = new getApplicationDeployment_result();
            if (e instanceof org.apache.airavata.model.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.model.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.model.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.model.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.model.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription> resultHandler) throws TException {
        iface.getApplicationDeployment(args.applicationInterfaceId, args.applicationDeploymentId,resultHandler);
      }
    }

  }

  public static class GetAPIVersion_args implements org.apache.thrift.TBase<GetAPIVersion_args, GetAPIVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAPIVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAPIVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_args.class, metaDataMap);
    }

    public GetAPIVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAPIVersion_args(GetAPIVersion_args other) {
    }

    public GetAPIVersion_args deepCopy() {
      return new GetAPIVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAPIVersion_args)
        return this.equals((GetAPIVersion_args)that);
      return false;
    }

    public boolean equals(GetAPIVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAPIVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAPIVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAPIVersion_argsStandardSchemeFactory implements SchemeFactory {
      public GetAPIVersion_argsStandardScheme getScheme() {
        return new GetAPIVersion_argsStandardScheme();
      }
    }

    private static class GetAPIVersion_argsStandardScheme extends StandardScheme<GetAPIVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAPIVersion_argsTupleSchemeFactory implements SchemeFactory {
      public GetAPIVersion_argsTupleScheme getScheme() {
        return new GetAPIVersion_argsTupleScheme();
      }
    }

    private static class GetAPIVersion_argsTupleScheme extends TupleScheme<GetAPIVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAPIVersion_result implements org.apache.thrift.TBase<GetAPIVersion_result, GetAPIVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAPIVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAPIVersion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_result.class, metaDataMap);
    }

    public GetAPIVersion_result() {
    }

    public GetAPIVersion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAPIVersion_result(GetAPIVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetAPIVersion_result deepCopy() {
      return new GetAPIVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetAPIVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAPIVersion_result)
        return this.equals((GetAPIVersion_result)that);
      return false;
    }

    public boolean equals(GetAPIVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAPIVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAPIVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAPIVersion_resultStandardSchemeFactory implements SchemeFactory {
      public GetAPIVersion_resultStandardScheme getScheme() {
        return new GetAPIVersion_resultStandardScheme();
      }
    }

    private static class GetAPIVersion_resultStandardScheme extends StandardScheme<GetAPIVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAPIVersion_resultTupleSchemeFactory implements SchemeFactory {
      public GetAPIVersion_resultTupleScheme getScheme() {
        return new GetAPIVersion_resultTupleScheme();
      }
    }

    private static class GetAPIVersion_resultTupleScheme extends TupleScheme<GetAPIVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addComputeResourceDescription_args implements org.apache.thrift.TBase<addComputeResourceDescription_args, addComputeResourceDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<addComputeResourceDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addComputeResourceDescription_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceDescription", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addComputeResourceDescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addComputeResourceDescription_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_DESCRIPTION((short)1, "computeResourceDescription");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_DESCRIPTION
            return COMPUTE_RESOURCE_DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("computeResourceDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.ComputeResourceDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addComputeResourceDescription_args.class, metaDataMap);
    }

    public addComputeResourceDescription_args() {
    }

    public addComputeResourceDescription_args(
      org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription)
    {
      this();
      this.computeResourceDescription = computeResourceDescription;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addComputeResourceDescription_args(addComputeResourceDescription_args other) {
      if (other.isSetComputeResourceDescription()) {
        this.computeResourceDescription = new org.apache.airavata.model.computehost.ComputeResourceDescription(other.computeResourceDescription);
      }
    }

    public addComputeResourceDescription_args deepCopy() {
      return new addComputeResourceDescription_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceDescription = null;
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription getComputeResourceDescription() {
      return this.computeResourceDescription;
    }

    public addComputeResourceDescription_args setComputeResourceDescription(org.apache.airavata.model.computehost.ComputeResourceDescription computeResourceDescription) {
      this.computeResourceDescription = computeResourceDescription;
      return this;
    }

    public void unsetComputeResourceDescription() {
      this.computeResourceDescription = null;
    }

    /** Returns true if field computeResourceDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceDescription() {
      return this.computeResourceDescription != null;
    }

    public void setComputeResourceDescriptionIsSet(boolean value) {
      if (!value) {
        this.computeResourceDescription = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_DESCRIPTION:
        if (value == null) {
          unsetComputeResourceDescription();
        } else {
          setComputeResourceDescription((org.apache.airavata.model.computehost.ComputeResourceDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_DESCRIPTION:
        return getComputeResourceDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_DESCRIPTION:
        return isSetComputeResourceDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addComputeResourceDescription_args)
        return this.equals((addComputeResourceDescription_args)that);
      return false;
    }

    public boolean equals(addComputeResourceDescription_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceDescription = true && this.isSetComputeResourceDescription();
      boolean that_present_computeResourceDescription = true && that.isSetComputeResourceDescription();
      if (this_present_computeResourceDescription || that_present_computeResourceDescription) {
        if (!(this_present_computeResourceDescription && that_present_computeResourceDescription))
          return false;
        if (!this.computeResourceDescription.equals(that.computeResourceDescription))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addComputeResourceDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceDescription()).compareTo(other.isSetComputeResourceDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceDescription, other.computeResourceDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addComputeResourceDescription_args(");
      boolean first = true;

      sb.append("computeResourceDescription:");
      if (this.computeResourceDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceDescription);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceDescription == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceDescription' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (computeResourceDescription != null) {
        computeResourceDescription.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addComputeResourceDescription_argsStandardSchemeFactory implements SchemeFactory {
      public addComputeResourceDescription_argsStandardScheme getScheme() {
        return new addComputeResourceDescription_argsStandardScheme();
      }
    }

    private static class addComputeResourceDescription_argsStandardScheme extends StandardScheme<addComputeResourceDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.computeResourceDescription = new org.apache.airavata.model.computehost.ComputeResourceDescription();
                struct.computeResourceDescription.read(iprot);
                struct.setComputeResourceDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceDescription != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC);
          struct.computeResourceDescription.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComputeResourceDescription_argsTupleSchemeFactory implements SchemeFactory {
      public addComputeResourceDescription_argsTupleScheme getScheme() {
        return new addComputeResourceDescription_argsTupleScheme();
      }
    }

    private static class addComputeResourceDescription_argsTupleScheme extends TupleScheme<addComputeResourceDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.computeResourceDescription.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceDescription = new org.apache.airavata.model.computehost.ComputeResourceDescription();
        struct.computeResourceDescription.read(iprot);
        struct.setComputeResourceDescriptionIsSet(true);
      }
    }

  }

  public static class addComputeResourceDescription_result implements org.apache.thrift.TBase<addComputeResourceDescription_result, addComputeResourceDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<addComputeResourceDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addComputeResourceDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addComputeResourceDescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addComputeResourceDescription_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addComputeResourceDescription_result.class, metaDataMap);
    }

    public addComputeResourceDescription_result() {
    }

    public addComputeResourceDescription_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addComputeResourceDescription_result(addComputeResourceDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addComputeResourceDescription_result deepCopy() {
      return new addComputeResourceDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addComputeResourceDescription_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addComputeResourceDescription_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addComputeResourceDescription_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addComputeResourceDescription_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addComputeResourceDescription_result)
        return this.equals((addComputeResourceDescription_result)that);
      return false;
    }

    public boolean equals(addComputeResourceDescription_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addComputeResourceDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addComputeResourceDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addComputeResourceDescription_resultStandardSchemeFactory implements SchemeFactory {
      public addComputeResourceDescription_resultStandardScheme getScheme() {
        return new addComputeResourceDescription_resultStandardScheme();
      }
    }

    private static class addComputeResourceDescription_resultStandardScheme extends StandardScheme<addComputeResourceDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComputeResourceDescription_resultTupleSchemeFactory implements SchemeFactory {
      public addComputeResourceDescription_resultTupleScheme getScheme() {
        return new addComputeResourceDescription_resultTupleScheme();
      }
    }

    private static class addComputeResourceDescription_resultTupleScheme extends TupleScheme<addComputeResourceDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addSSHJobSubmissionProtocol_args implements org.apache.thrift.TBase<addSSHJobSubmissionProtocol_args, addSSHJobSubmissionProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSSHJobSubmissionProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSSHJobSubmissionProtocol_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmission", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSSHJobSubmissionProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSSHJobSubmissionProtocol_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      JOB_SUBMISSION((short)2, "jobSubmission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // JOB_SUBMISSION
            return JOB_SUBMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_SUBMISSION, new org.apache.thrift.meta_data.FieldMetaData("jobSubmission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.SSHJobSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSSHJobSubmissionProtocol_args.class, metaDataMap);
    }

    public addSSHJobSubmissionProtocol_args() {
    }

    public addSSHJobSubmissionProtocol_args(
      String computeResourceId,
      org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.jobSubmission = jobSubmission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSSHJobSubmissionProtocol_args(addSSHJobSubmissionProtocol_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      if (other.isSetJobSubmission()) {
        this.jobSubmission = new org.apache.airavata.model.computehost.SSHJobSubmission(other.jobSubmission);
      }
    }

    public addSSHJobSubmissionProtocol_args deepCopy() {
      return new addSSHJobSubmissionProtocol_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      this.jobSubmission = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addSSHJobSubmissionProtocol_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public org.apache.airavata.model.computehost.SSHJobSubmission getJobSubmission() {
      return this.jobSubmission;
    }

    public addSSHJobSubmissionProtocol_args setJobSubmission(org.apache.airavata.model.computehost.SSHJobSubmission jobSubmission) {
      this.jobSubmission = jobSubmission;
      return this;
    }

    public void unsetJobSubmission() {
      this.jobSubmission = null;
    }

    /** Returns true if field jobSubmission is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmission() {
      return this.jobSubmission != null;
    }

    public void setJobSubmissionIsSet(boolean value) {
      if (!value) {
        this.jobSubmission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case JOB_SUBMISSION:
        if (value == null) {
          unsetJobSubmission();
        } else {
          setJobSubmission((org.apache.airavata.model.computehost.SSHJobSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case JOB_SUBMISSION:
        return getJobSubmission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case JOB_SUBMISSION:
        return isSetJobSubmission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSSHJobSubmissionProtocol_args)
        return this.equals((addSSHJobSubmissionProtocol_args)that);
      return false;
    }

    public boolean equals(addSSHJobSubmissionProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_jobSubmission = true && this.isSetJobSubmission();
      boolean that_present_jobSubmission = true && that.isSetJobSubmission();
      if (this_present_jobSubmission || that_present_jobSubmission) {
        if (!(this_present_jobSubmission && that_present_jobSubmission))
          return false;
        if (!this.jobSubmission.equals(that.jobSubmission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSSHJobSubmissionProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobSubmission()).compareTo(other.isSetJobSubmission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmission, other.jobSubmission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSSHJobSubmissionProtocol_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobSubmission:");
      if (this.jobSubmission == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      if (jobSubmission == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmission' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (jobSubmission != null) {
        jobSubmission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSSHJobSubmissionProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionProtocol_argsStandardScheme getScheme() {
        return new addSSHJobSubmissionProtocol_argsStandardScheme();
      }
    }

    private static class addSSHJobSubmissionProtocol_argsStandardScheme extends StandardScheme<addSSHJobSubmissionProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_SUBMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobSubmission = new org.apache.airavata.model.computehost.SSHJobSubmission();
                struct.jobSubmission.read(iprot);
                struct.setJobSubmissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        if (struct.jobSubmission != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_FIELD_DESC);
          struct.jobSubmission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSSHJobSubmissionProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionProtocol_argsTupleScheme getScheme() {
        return new addSSHJobSubmissionProtocol_argsTupleScheme();
      }
    }

    private static class addSSHJobSubmissionProtocol_argsTupleScheme extends TupleScheme<addSSHJobSubmissionProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        struct.jobSubmission.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.jobSubmission = new org.apache.airavata.model.computehost.SSHJobSubmission();
        struct.jobSubmission.read(iprot);
        struct.setJobSubmissionIsSet(true);
      }
    }

  }

  public static class addSSHJobSubmissionProtocol_result implements org.apache.thrift.TBase<addSSHJobSubmissionProtocol_result, addSSHJobSubmissionProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSSHJobSubmissionProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSSHJobSubmissionProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSSHJobSubmissionProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSSHJobSubmissionProtocol_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSSHJobSubmissionProtocol_result.class, metaDataMap);
    }

    public addSSHJobSubmissionProtocol_result() {
    }

    public addSSHJobSubmissionProtocol_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSSHJobSubmissionProtocol_result(addSSHJobSubmissionProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addSSHJobSubmissionProtocol_result deepCopy() {
      return new addSSHJobSubmissionProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addSSHJobSubmissionProtocol_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addSSHJobSubmissionProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addSSHJobSubmissionProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addSSHJobSubmissionProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSSHJobSubmissionProtocol_result)
        return this.equals((addSSHJobSubmissionProtocol_result)that);
      return false;
    }

    public boolean equals(addSSHJobSubmissionProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSSHJobSubmissionProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSSHJobSubmissionProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSSHJobSubmissionProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionProtocol_resultStandardScheme getScheme() {
        return new addSSHJobSubmissionProtocol_resultStandardScheme();
      }
    }

    private static class addSSHJobSubmissionProtocol_resultStandardScheme extends StandardScheme<addSSHJobSubmissionProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSSHJobSubmissionProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public addSSHJobSubmissionProtocol_resultTupleScheme getScheme() {
        return new addSSHJobSubmissionProtocol_resultTupleScheme();
      }
    }

    private static class addSSHJobSubmissionProtocol_resultTupleScheme extends TupleScheme<addSSHJobSubmissionProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addGSISSHJobSubmissionProtocol_args implements org.apache.thrift.TBase<addGSISSHJobSubmissionProtocol_args, addGSISSHJobSubmissionProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<addGSISSHJobSubmissionProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGSISSHJobSubmissionProtocol_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmission", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGSISSHJobSubmissionProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGSISSHJobSubmissionProtocol_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      JOB_SUBMISSION((short)2, "jobSubmission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // JOB_SUBMISSION
            return JOB_SUBMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_SUBMISSION, new org.apache.thrift.meta_data.FieldMetaData("jobSubmission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.GSISSHJobSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGSISSHJobSubmissionProtocol_args.class, metaDataMap);
    }

    public addGSISSHJobSubmissionProtocol_args() {
    }

    public addGSISSHJobSubmissionProtocol_args(
      String computeResourceId,
      org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.jobSubmission = jobSubmission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGSISSHJobSubmissionProtocol_args(addGSISSHJobSubmissionProtocol_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      if (other.isSetJobSubmission()) {
        this.jobSubmission = new org.apache.airavata.model.computehost.GSISSHJobSubmission(other.jobSubmission);
      }
    }

    public addGSISSHJobSubmissionProtocol_args deepCopy() {
      return new addGSISSHJobSubmissionProtocol_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      this.jobSubmission = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addGSISSHJobSubmissionProtocol_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public org.apache.airavata.model.computehost.GSISSHJobSubmission getJobSubmission() {
      return this.jobSubmission;
    }

    public addGSISSHJobSubmissionProtocol_args setJobSubmission(org.apache.airavata.model.computehost.GSISSHJobSubmission jobSubmission) {
      this.jobSubmission = jobSubmission;
      return this;
    }

    public void unsetJobSubmission() {
      this.jobSubmission = null;
    }

    /** Returns true if field jobSubmission is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmission() {
      return this.jobSubmission != null;
    }

    public void setJobSubmissionIsSet(boolean value) {
      if (!value) {
        this.jobSubmission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case JOB_SUBMISSION:
        if (value == null) {
          unsetJobSubmission();
        } else {
          setJobSubmission((org.apache.airavata.model.computehost.GSISSHJobSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case JOB_SUBMISSION:
        return getJobSubmission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case JOB_SUBMISSION:
        return isSetJobSubmission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGSISSHJobSubmissionProtocol_args)
        return this.equals((addGSISSHJobSubmissionProtocol_args)that);
      return false;
    }

    public boolean equals(addGSISSHJobSubmissionProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_jobSubmission = true && this.isSetJobSubmission();
      boolean that_present_jobSubmission = true && that.isSetJobSubmission();
      if (this_present_jobSubmission || that_present_jobSubmission) {
        if (!(this_present_jobSubmission && that_present_jobSubmission))
          return false;
        if (!this.jobSubmission.equals(that.jobSubmission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGSISSHJobSubmissionProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobSubmission()).compareTo(other.isSetJobSubmission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmission, other.jobSubmission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGSISSHJobSubmissionProtocol_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobSubmission:");
      if (this.jobSubmission == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      if (jobSubmission == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmission' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (jobSubmission != null) {
        jobSubmission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGSISSHJobSubmissionProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public addGSISSHJobSubmissionProtocol_argsStandardScheme getScheme() {
        return new addGSISSHJobSubmissionProtocol_argsStandardScheme();
      }
    }

    private static class addGSISSHJobSubmissionProtocol_argsStandardScheme extends StandardScheme<addGSISSHJobSubmissionProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_SUBMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobSubmission = new org.apache.airavata.model.computehost.GSISSHJobSubmission();
                struct.jobSubmission.read(iprot);
                struct.setJobSubmissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        if (struct.jobSubmission != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_FIELD_DESC);
          struct.jobSubmission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGSISSHJobSubmissionProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public addGSISSHJobSubmissionProtocol_argsTupleScheme getScheme() {
        return new addGSISSHJobSubmissionProtocol_argsTupleScheme();
      }
    }

    private static class addGSISSHJobSubmissionProtocol_argsTupleScheme extends TupleScheme<addGSISSHJobSubmissionProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        struct.jobSubmission.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.jobSubmission = new org.apache.airavata.model.computehost.GSISSHJobSubmission();
        struct.jobSubmission.read(iprot);
        struct.setJobSubmissionIsSet(true);
      }
    }

  }

  public static class addGSISSHJobSubmissionProtocol_result implements org.apache.thrift.TBase<addGSISSHJobSubmissionProtocol_result, addGSISSHJobSubmissionProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<addGSISSHJobSubmissionProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGSISSHJobSubmissionProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGSISSHJobSubmissionProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGSISSHJobSubmissionProtocol_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGSISSHJobSubmissionProtocol_result.class, metaDataMap);
    }

    public addGSISSHJobSubmissionProtocol_result() {
    }

    public addGSISSHJobSubmissionProtocol_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGSISSHJobSubmissionProtocol_result(addGSISSHJobSubmissionProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addGSISSHJobSubmissionProtocol_result deepCopy() {
      return new addGSISSHJobSubmissionProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addGSISSHJobSubmissionProtocol_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addGSISSHJobSubmissionProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addGSISSHJobSubmissionProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addGSISSHJobSubmissionProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGSISSHJobSubmissionProtocol_result)
        return this.equals((addGSISSHJobSubmissionProtocol_result)that);
      return false;
    }

    public boolean equals(addGSISSHJobSubmissionProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGSISSHJobSubmissionProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGSISSHJobSubmissionProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGSISSHJobSubmissionProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public addGSISSHJobSubmissionProtocol_resultStandardScheme getScheme() {
        return new addGSISSHJobSubmissionProtocol_resultStandardScheme();
      }
    }

    private static class addGSISSHJobSubmissionProtocol_resultStandardScheme extends StandardScheme<addGSISSHJobSubmissionProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGSISSHJobSubmissionProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public addGSISSHJobSubmissionProtocol_resultTupleScheme getScheme() {
        return new addGSISSHJobSubmissionProtocol_resultTupleScheme();
      }
    }

    private static class addGSISSHJobSubmissionProtocol_resultTupleScheme extends TupleScheme<addGSISSHJobSubmissionProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addGlobusJobSubmissionProtocol_args implements org.apache.thrift.TBase<addGlobusJobSubmissionProtocol_args, addGlobusJobSubmissionProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<addGlobusJobSubmissionProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGlobusJobSubmissionProtocol_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmission", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGlobusJobSubmissionProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGlobusJobSubmissionProtocol_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      JOB_SUBMISSION((short)2, "jobSubmission");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // JOB_SUBMISSION
            return JOB_SUBMISSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_SUBMISSION, new org.apache.thrift.meta_data.FieldMetaData("jobSubmission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.GlobusJobSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGlobusJobSubmissionProtocol_args.class, metaDataMap);
    }

    public addGlobusJobSubmissionProtocol_args() {
    }

    public addGlobusJobSubmissionProtocol_args(
      String computeResourceId,
      org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.jobSubmission = jobSubmission;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGlobusJobSubmissionProtocol_args(addGlobusJobSubmissionProtocol_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      if (other.isSetJobSubmission()) {
        this.jobSubmission = new org.apache.airavata.model.computehost.GlobusJobSubmission(other.jobSubmission);
      }
    }

    public addGlobusJobSubmissionProtocol_args deepCopy() {
      return new addGlobusJobSubmissionProtocol_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      this.jobSubmission = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addGlobusJobSubmissionProtocol_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public org.apache.airavata.model.computehost.GlobusJobSubmission getJobSubmission() {
      return this.jobSubmission;
    }

    public addGlobusJobSubmissionProtocol_args setJobSubmission(org.apache.airavata.model.computehost.GlobusJobSubmission jobSubmission) {
      this.jobSubmission = jobSubmission;
      return this;
    }

    public void unsetJobSubmission() {
      this.jobSubmission = null;
    }

    /** Returns true if field jobSubmission is set (has been assigned a value) and false otherwise */
    public boolean isSetJobSubmission() {
      return this.jobSubmission != null;
    }

    public void setJobSubmissionIsSet(boolean value) {
      if (!value) {
        this.jobSubmission = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case JOB_SUBMISSION:
        if (value == null) {
          unsetJobSubmission();
        } else {
          setJobSubmission((org.apache.airavata.model.computehost.GlobusJobSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case JOB_SUBMISSION:
        return getJobSubmission();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case JOB_SUBMISSION:
        return isSetJobSubmission();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGlobusJobSubmissionProtocol_args)
        return this.equals((addGlobusJobSubmissionProtocol_args)that);
      return false;
    }

    public boolean equals(addGlobusJobSubmissionProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_jobSubmission = true && this.isSetJobSubmission();
      boolean that_present_jobSubmission = true && that.isSetJobSubmission();
      if (this_present_jobSubmission || that_present_jobSubmission) {
        if (!(this_present_jobSubmission && that_present_jobSubmission))
          return false;
        if (!this.jobSubmission.equals(that.jobSubmission))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGlobusJobSubmissionProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobSubmission()).compareTo(other.isSetJobSubmission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobSubmission()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmission, other.jobSubmission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGlobusJobSubmissionProtocol_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobSubmission:");
      if (this.jobSubmission == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmission);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      if (jobSubmission == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmission' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (jobSubmission != null) {
        jobSubmission.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGlobusJobSubmissionProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public addGlobusJobSubmissionProtocol_argsStandardScheme getScheme() {
        return new addGlobusJobSubmissionProtocol_argsStandardScheme();
      }
    }

    private static class addGlobusJobSubmissionProtocol_argsStandardScheme extends StandardScheme<addGlobusJobSubmissionProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_SUBMISSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobSubmission = new org.apache.airavata.model.computehost.GlobusJobSubmission();
                struct.jobSubmission.read(iprot);
                struct.setJobSubmissionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        if (struct.jobSubmission != null) {
          oprot.writeFieldBegin(JOB_SUBMISSION_FIELD_DESC);
          struct.jobSubmission.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGlobusJobSubmissionProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public addGlobusJobSubmissionProtocol_argsTupleScheme getScheme() {
        return new addGlobusJobSubmissionProtocol_argsTupleScheme();
      }
    }

    private static class addGlobusJobSubmissionProtocol_argsTupleScheme extends TupleScheme<addGlobusJobSubmissionProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        struct.jobSubmission.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.jobSubmission = new org.apache.airavata.model.computehost.GlobusJobSubmission();
        struct.jobSubmission.read(iprot);
        struct.setJobSubmissionIsSet(true);
      }
    }

  }

  public static class addGlobusJobSubmissionProtocol_result implements org.apache.thrift.TBase<addGlobusJobSubmissionProtocol_result, addGlobusJobSubmissionProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<addGlobusJobSubmissionProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGlobusJobSubmissionProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGlobusJobSubmissionProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGlobusJobSubmissionProtocol_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGlobusJobSubmissionProtocol_result.class, metaDataMap);
    }

    public addGlobusJobSubmissionProtocol_result() {
    }

    public addGlobusJobSubmissionProtocol_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGlobusJobSubmissionProtocol_result(addGlobusJobSubmissionProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addGlobusJobSubmissionProtocol_result deepCopy() {
      return new addGlobusJobSubmissionProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addGlobusJobSubmissionProtocol_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addGlobusJobSubmissionProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addGlobusJobSubmissionProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addGlobusJobSubmissionProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGlobusJobSubmissionProtocol_result)
        return this.equals((addGlobusJobSubmissionProtocol_result)that);
      return false;
    }

    public boolean equals(addGlobusJobSubmissionProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGlobusJobSubmissionProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGlobusJobSubmissionProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGlobusJobSubmissionProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public addGlobusJobSubmissionProtocol_resultStandardScheme getScheme() {
        return new addGlobusJobSubmissionProtocol_resultStandardScheme();
      }
    }

    private static class addGlobusJobSubmissionProtocol_resultStandardScheme extends StandardScheme<addGlobusJobSubmissionProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGlobusJobSubmissionProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public addGlobusJobSubmissionProtocol_resultTupleScheme getScheme() {
        return new addGlobusJobSubmissionProtocol_resultTupleScheme();
      }
    }

    private static class addGlobusJobSubmissionProtocol_resultTupleScheme extends TupleScheme<addGlobusJobSubmissionProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addSCPDataMovementProtocol_args implements org.apache.thrift.TBase<addSCPDataMovementProtocol_args, addSCPDataMovementProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSCPDataMovementProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSCPDataMovementProtocol_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSCPDataMovementProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSCPDataMovementProtocol_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public org.apache.airavata.model.computehost.SCPDataMovement dataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      DATA_MOVEMENT((short)2, "dataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // DATA_MOVEMENT
            return DATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("dataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.SCPDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSCPDataMovementProtocol_args.class, metaDataMap);
    }

    public addSCPDataMovementProtocol_args() {
    }

    public addSCPDataMovementProtocol_args(
      String computeResourceId,
      org.apache.airavata.model.computehost.SCPDataMovement dataMovement)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.dataMovement = dataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSCPDataMovementProtocol_args(addSCPDataMovementProtocol_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      if (other.isSetDataMovement()) {
        this.dataMovement = new org.apache.airavata.model.computehost.SCPDataMovement(other.dataMovement);
      }
    }

    public addSCPDataMovementProtocol_args deepCopy() {
      return new addSCPDataMovementProtocol_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      this.dataMovement = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addSCPDataMovementProtocol_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public org.apache.airavata.model.computehost.SCPDataMovement getDataMovement() {
      return this.dataMovement;
    }

    public addSCPDataMovementProtocol_args setDataMovement(org.apache.airavata.model.computehost.SCPDataMovement dataMovement) {
      this.dataMovement = dataMovement;
      return this;
    }

    public void unsetDataMovement() {
      this.dataMovement = null;
    }

    /** Returns true if field dataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMovement() {
      return this.dataMovement != null;
    }

    public void setDataMovementIsSet(boolean value) {
      if (!value) {
        this.dataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case DATA_MOVEMENT:
        if (value == null) {
          unsetDataMovement();
        } else {
          setDataMovement((org.apache.airavata.model.computehost.SCPDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case DATA_MOVEMENT:
        return getDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case DATA_MOVEMENT:
        return isSetDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSCPDataMovementProtocol_args)
        return this.equals((addSCPDataMovementProtocol_args)that);
      return false;
    }

    public boolean equals(addSCPDataMovementProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_dataMovement = true && this.isSetDataMovement();
      boolean that_present_dataMovement = true && that.isSetDataMovement();
      if (this_present_dataMovement || that_present_dataMovement) {
        if (!(this_present_dataMovement && that_present_dataMovement))
          return false;
        if (!this.dataMovement.equals(that.dataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSCPDataMovementProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMovement()).compareTo(other.isSetDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMovement, other.dataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSCPDataMovementProtocol_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMovement:");
      if (this.dataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      if (dataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (dataMovement != null) {
        dataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSCPDataMovementProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public addSCPDataMovementProtocol_argsStandardScheme getScheme() {
        return new addSCPDataMovementProtocol_argsStandardScheme();
      }
    }

    private static class addSCPDataMovementProtocol_argsStandardScheme extends StandardScheme<addSCPDataMovementProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataMovement = new org.apache.airavata.model.computehost.SCPDataMovement();
                struct.dataMovement.read(iprot);
                struct.setDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        if (struct.dataMovement != null) {
          oprot.writeFieldBegin(DATA_MOVEMENT_FIELD_DESC);
          struct.dataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSCPDataMovementProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public addSCPDataMovementProtocol_argsTupleScheme getScheme() {
        return new addSCPDataMovementProtocol_argsTupleScheme();
      }
    }

    private static class addSCPDataMovementProtocol_argsTupleScheme extends TupleScheme<addSCPDataMovementProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        struct.dataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.dataMovement = new org.apache.airavata.model.computehost.SCPDataMovement();
        struct.dataMovement.read(iprot);
        struct.setDataMovementIsSet(true);
      }
    }

  }

  public static class addSCPDataMovementProtocol_result implements org.apache.thrift.TBase<addSCPDataMovementProtocol_result, addSCPDataMovementProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSCPDataMovementProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSCPDataMovementProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSCPDataMovementProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSCPDataMovementProtocol_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSCPDataMovementProtocol_result.class, metaDataMap);
    }

    public addSCPDataMovementProtocol_result() {
    }

    public addSCPDataMovementProtocol_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSCPDataMovementProtocol_result(addSCPDataMovementProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addSCPDataMovementProtocol_result deepCopy() {
      return new addSCPDataMovementProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addSCPDataMovementProtocol_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addSCPDataMovementProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addSCPDataMovementProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addSCPDataMovementProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSCPDataMovementProtocol_result)
        return this.equals((addSCPDataMovementProtocol_result)that);
      return false;
    }

    public boolean equals(addSCPDataMovementProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSCPDataMovementProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSCPDataMovementProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSCPDataMovementProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public addSCPDataMovementProtocol_resultStandardScheme getScheme() {
        return new addSCPDataMovementProtocol_resultStandardScheme();
      }
    }

    private static class addSCPDataMovementProtocol_resultStandardScheme extends StandardScheme<addSCPDataMovementProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSCPDataMovementProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public addSCPDataMovementProtocol_resultTupleScheme getScheme() {
        return new addSCPDataMovementProtocol_resultTupleScheme();
      }
    }

    private static class addSCPDataMovementProtocol_resultTupleScheme extends TupleScheme<addSCPDataMovementProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addGridFTPDataMovementProtocol_args implements org.apache.thrift.TBase<addGridFTPDataMovementProtocol_args, addGridFTPDataMovementProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<addGridFTPDataMovementProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGridFTPDataMovementProtocol_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_MOVEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMovement", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGridFTPDataMovementProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGridFTPDataMovementProtocol_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required
    public org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
      DATA_MOVEMENT((short)2, "dataMovement");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          case 2: // DATA_MOVEMENT
            return DATA_MOVEMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_MOVEMENT, new org.apache.thrift.meta_data.FieldMetaData("dataMovement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.GridFTPDataMovement.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGridFTPDataMovementProtocol_args.class, metaDataMap);
    }

    public addGridFTPDataMovementProtocol_args() {
    }

    public addGridFTPDataMovementProtocol_args(
      String computeResourceId,
      org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement)
    {
      this();
      this.computeResourceId = computeResourceId;
      this.dataMovement = dataMovement;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGridFTPDataMovementProtocol_args(addGridFTPDataMovementProtocol_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
      if (other.isSetDataMovement()) {
        this.dataMovement = new org.apache.airavata.model.computehost.GridFTPDataMovement(other.dataMovement);
      }
    }

    public addGridFTPDataMovementProtocol_args deepCopy() {
      return new addGridFTPDataMovementProtocol_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
      this.dataMovement = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public addGridFTPDataMovementProtocol_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public org.apache.airavata.model.computehost.GridFTPDataMovement getDataMovement() {
      return this.dataMovement;
    }

    public addGridFTPDataMovementProtocol_args setDataMovement(org.apache.airavata.model.computehost.GridFTPDataMovement dataMovement) {
      this.dataMovement = dataMovement;
      return this;
    }

    public void unsetDataMovement() {
      this.dataMovement = null;
    }

    /** Returns true if field dataMovement is set (has been assigned a value) and false otherwise */
    public boolean isSetDataMovement() {
      return this.dataMovement != null;
    }

    public void setDataMovementIsSet(boolean value) {
      if (!value) {
        this.dataMovement = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      case DATA_MOVEMENT:
        if (value == null) {
          unsetDataMovement();
        } else {
          setDataMovement((org.apache.airavata.model.computehost.GridFTPDataMovement)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      case DATA_MOVEMENT:
        return getDataMovement();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      case DATA_MOVEMENT:
        return isSetDataMovement();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGridFTPDataMovementProtocol_args)
        return this.equals((addGridFTPDataMovementProtocol_args)that);
      return false;
    }

    public boolean equals(addGridFTPDataMovementProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      boolean this_present_dataMovement = true && this.isSetDataMovement();
      boolean that_present_dataMovement = true && that.isSetDataMovement();
      if (this_present_dataMovement || that_present_dataMovement) {
        if (!(this_present_dataMovement && that_present_dataMovement))
          return false;
        if (!this.dataMovement.equals(that.dataMovement))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGridFTPDataMovementProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataMovement()).compareTo(other.isSetDataMovement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataMovement()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMovement, other.dataMovement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGridFTPDataMovementProtocol_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataMovement:");
      if (this.dataMovement == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMovement);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      if (dataMovement == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataMovement' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (dataMovement != null) {
        dataMovement.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGridFTPDataMovementProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementProtocol_argsStandardScheme getScheme() {
        return new addGridFTPDataMovementProtocol_argsStandardScheme();
      }
    }

    private static class addGridFTPDataMovementProtocol_argsStandardScheme extends StandardScheme<addGridFTPDataMovementProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_MOVEMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataMovement = new org.apache.airavata.model.computehost.GridFTPDataMovement();
                struct.dataMovement.read(iprot);
                struct.setDataMovementIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        if (struct.dataMovement != null) {
          oprot.writeFieldBegin(DATA_MOVEMENT_FIELD_DESC);
          struct.dataMovement.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGridFTPDataMovementProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementProtocol_argsTupleScheme getScheme() {
        return new addGridFTPDataMovementProtocol_argsTupleScheme();
      }
    }

    private static class addGridFTPDataMovementProtocol_argsTupleScheme extends TupleScheme<addGridFTPDataMovementProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
        struct.dataMovement.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
        struct.dataMovement = new org.apache.airavata.model.computehost.GridFTPDataMovement();
        struct.dataMovement.read(iprot);
        struct.setDataMovementIsSet(true);
      }
    }

  }

  public static class addGridFTPDataMovementProtocol_result implements org.apache.thrift.TBase<addGridFTPDataMovementProtocol_result, addGridFTPDataMovementProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<addGridFTPDataMovementProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGridFTPDataMovementProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGridFTPDataMovementProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGridFTPDataMovementProtocol_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGridFTPDataMovementProtocol_result.class, metaDataMap);
    }

    public addGridFTPDataMovementProtocol_result() {
    }

    public addGridFTPDataMovementProtocol_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGridFTPDataMovementProtocol_result(addGridFTPDataMovementProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addGridFTPDataMovementProtocol_result deepCopy() {
      return new addGridFTPDataMovementProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addGridFTPDataMovementProtocol_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addGridFTPDataMovementProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addGridFTPDataMovementProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addGridFTPDataMovementProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGridFTPDataMovementProtocol_result)
        return this.equals((addGridFTPDataMovementProtocol_result)that);
      return false;
    }

    public boolean equals(addGridFTPDataMovementProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGridFTPDataMovementProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGridFTPDataMovementProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGridFTPDataMovementProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementProtocol_resultStandardScheme getScheme() {
        return new addGridFTPDataMovementProtocol_resultStandardScheme();
      }
    }

    private static class addGridFTPDataMovementProtocol_resultStandardScheme extends StandardScheme<addGridFTPDataMovementProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGridFTPDataMovementProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public addGridFTPDataMovementProtocol_resultTupleScheme getScheme() {
        return new addGridFTPDataMovementProtocol_resultTupleScheme();
      }
    }

    private static class addGridFTPDataMovementProtocol_resultTupleScheme extends TupleScheme<addGridFTPDataMovementProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class listComputeResourceDescriptions_args implements org.apache.thrift.TBase<listComputeResourceDescriptions_args, listComputeResourceDescriptions_args._Fields>, java.io.Serializable, Cloneable, Comparable<listComputeResourceDescriptions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listComputeResourceDescriptions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listComputeResourceDescriptions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listComputeResourceDescriptions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listComputeResourceDescriptions_args.class, metaDataMap);
    }

    public listComputeResourceDescriptions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listComputeResourceDescriptions_args(listComputeResourceDescriptions_args other) {
    }

    public listComputeResourceDescriptions_args deepCopy() {
      return new listComputeResourceDescriptions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listComputeResourceDescriptions_args)
        return this.equals((listComputeResourceDescriptions_args)that);
      return false;
    }

    public boolean equals(listComputeResourceDescriptions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listComputeResourceDescriptions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listComputeResourceDescriptions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listComputeResourceDescriptions_argsStandardSchemeFactory implements SchemeFactory {
      public listComputeResourceDescriptions_argsStandardScheme getScheme() {
        return new listComputeResourceDescriptions_argsStandardScheme();
      }
    }

    private static class listComputeResourceDescriptions_argsStandardScheme extends StandardScheme<listComputeResourceDescriptions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listComputeResourceDescriptions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listComputeResourceDescriptions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listComputeResourceDescriptions_argsTupleSchemeFactory implements SchemeFactory {
      public listComputeResourceDescriptions_argsTupleScheme getScheme() {
        return new listComputeResourceDescriptions_argsTupleScheme();
      }
    }

    private static class listComputeResourceDescriptions_argsTupleScheme extends TupleScheme<listComputeResourceDescriptions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listComputeResourceDescriptions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listComputeResourceDescriptions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listComputeResourceDescriptions_result implements org.apache.thrift.TBase<listComputeResourceDescriptions_result, listComputeResourceDescriptions_result._Fields>, java.io.Serializable, Cloneable, Comparable<listComputeResourceDescriptions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listComputeResourceDescriptions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listComputeResourceDescriptions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listComputeResourceDescriptions_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listComputeResourceDescriptions_result.class, metaDataMap);
    }

    public listComputeResourceDescriptions_result() {
    }

    public listComputeResourceDescriptions_result(
      List<String> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listComputeResourceDescriptions_result(listComputeResourceDescriptions_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public listComputeResourceDescriptions_result deepCopy() {
      return new listComputeResourceDescriptions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listComputeResourceDescriptions_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public listComputeResourceDescriptions_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public listComputeResourceDescriptions_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public listComputeResourceDescriptions_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listComputeResourceDescriptions_result)
        return this.equals((listComputeResourceDescriptions_result)that);
      return false;
    }

    public boolean equals(listComputeResourceDescriptions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listComputeResourceDescriptions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listComputeResourceDescriptions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listComputeResourceDescriptions_resultStandardSchemeFactory implements SchemeFactory {
      public listComputeResourceDescriptions_resultStandardScheme getScheme() {
        return new listComputeResourceDescriptions_resultStandardScheme();
      }
    }

    private static class listComputeResourceDescriptions_resultStandardScheme extends StandardScheme<listComputeResourceDescriptions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listComputeResourceDescriptions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listComputeResourceDescriptions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listComputeResourceDescriptions_resultTupleSchemeFactory implements SchemeFactory {
      public listComputeResourceDescriptions_resultTupleScheme getScheme() {
        return new listComputeResourceDescriptions_resultTupleScheme();
      }
    }

    private static class listComputeResourceDescriptions_resultTupleScheme extends TupleScheme<listComputeResourceDescriptions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listComputeResourceDescriptions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listComputeResourceDescriptions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getComputeResourceDescription_args implements org.apache.thrift.TBase<getComputeResourceDescription_args, getComputeResourceDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<getComputeResourceDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComputeResourceDescription_args");

    private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComputeResourceDescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComputeResourceDescription_argsTupleSchemeFactory());
    }

    public String computeResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPUTE_RESOURCE_ID((short)1, "computeResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPUTE_RESOURCE_ID
            return COMPUTE_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComputeResourceDescription_args.class, metaDataMap);
    }

    public getComputeResourceDescription_args() {
    }

    public getComputeResourceDescription_args(
      String computeResourceId)
    {
      this();
      this.computeResourceId = computeResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComputeResourceDescription_args(getComputeResourceDescription_args other) {
      if (other.isSetComputeResourceId()) {
        this.computeResourceId = other.computeResourceId;
      }
    }

    public getComputeResourceDescription_args deepCopy() {
      return new getComputeResourceDescription_args(this);
    }

    @Override
    public void clear() {
      this.computeResourceId = null;
    }

    public String getComputeResourceId() {
      return this.computeResourceId;
    }

    public getComputeResourceDescription_args setComputeResourceId(String computeResourceId) {
      this.computeResourceId = computeResourceId;
      return this;
    }

    public void unsetComputeResourceId() {
      this.computeResourceId = null;
    }

    /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetComputeResourceId() {
      return this.computeResourceId != null;
    }

    public void setComputeResourceIdIsSet(boolean value) {
      if (!value) {
        this.computeResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        if (value == null) {
          unsetComputeResourceId();
        } else {
          setComputeResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return getComputeResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPUTE_RESOURCE_ID:
        return isSetComputeResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComputeResourceDescription_args)
        return this.equals((getComputeResourceDescription_args)that);
      return false;
    }

    public boolean equals(getComputeResourceDescription_args that) {
      if (that == null)
        return false;

      boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
      boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
      if (this_present_computeResourceId || that_present_computeResourceId) {
        if (!(this_present_computeResourceId && that_present_computeResourceId))
          return false;
        if (!this.computeResourceId.equals(that.computeResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getComputeResourceDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComputeResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComputeResourceDescription_args(");
      boolean first = true;

      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (computeResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComputeResourceDescription_argsStandardSchemeFactory implements SchemeFactory {
      public getComputeResourceDescription_argsStandardScheme getScheme() {
        return new getComputeResourceDescription_argsStandardScheme();
      }
    }

    private static class getComputeResourceDescription_argsStandardScheme extends StandardScheme<getComputeResourceDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPUTE_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.computeResourceId = iprot.readString();
                struct.setComputeResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.computeResourceId != null) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComputeResourceDescription_argsTupleSchemeFactory implements SchemeFactory {
      public getComputeResourceDescription_argsTupleScheme getScheme() {
        return new getComputeResourceDescription_argsTupleScheme();
      }
    }

    private static class getComputeResourceDescription_argsTupleScheme extends TupleScheme<getComputeResourceDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.computeResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
      }
    }

  }

  public static class getComputeResourceDescription_result implements org.apache.thrift.TBase<getComputeResourceDescription_result, getComputeResourceDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<getComputeResourceDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComputeResourceDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComputeResourceDescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComputeResourceDescription_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.ComputeResourceDescription.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComputeResourceDescription_result.class, metaDataMap);
    }

    public getComputeResourceDescription_result() {
    }

    public getComputeResourceDescription_result(
      org.apache.airavata.model.computehost.ComputeResourceDescription success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComputeResourceDescription_result(getComputeResourceDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.computehost.ComputeResourceDescription(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getComputeResourceDescription_result deepCopy() {
      return new getComputeResourceDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription getSuccess() {
      return this.success;
    }

    public getComputeResourceDescription_result setSuccess(org.apache.airavata.model.computehost.ComputeResourceDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getComputeResourceDescription_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getComputeResourceDescription_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getComputeResourceDescription_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.computehost.ComputeResourceDescription)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComputeResourceDescription_result)
        return this.equals((getComputeResourceDescription_result)that);
      return false;
    }

    public boolean equals(getComputeResourceDescription_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getComputeResourceDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComputeResourceDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComputeResourceDescription_resultStandardSchemeFactory implements SchemeFactory {
      public getComputeResourceDescription_resultStandardScheme getScheme() {
        return new getComputeResourceDescription_resultStandardScheme();
      }
    }

    private static class getComputeResourceDescription_resultStandardScheme extends StandardScheme<getComputeResourceDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.computehost.ComputeResourceDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComputeResourceDescription_resultTupleSchemeFactory implements SchemeFactory {
      public getComputeResourceDescription_resultTupleScheme getScheme() {
        return new getComputeResourceDescription_resultTupleScheme();
      }
    }

    private static class getComputeResourceDescription_resultTupleScheme extends TupleScheme<getComputeResourceDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.computehost.ComputeResourceDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getSSHJobSubmissionProtocol_args implements org.apache.thrift.TBase<getSSHJobSubmissionProtocol_args, getSSHJobSubmissionProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSSHJobSubmissionProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSSHJobSubmissionProtocol_args");

    private static final org.apache.thrift.protocol.TField SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sshJobSubmissionProtocolResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSSHJobSubmissionProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSSHJobSubmissionProtocol_argsTupleSchemeFactory());
    }

    public String sshJobSubmissionProtocolResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID((short)1, "sshJobSubmissionProtocolResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID
            return SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sshJobSubmissionProtocolResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSSHJobSubmissionProtocol_args.class, metaDataMap);
    }

    public getSSHJobSubmissionProtocol_args() {
    }

    public getSSHJobSubmissionProtocol_args(
      String sshJobSubmissionProtocolResourceId)
    {
      this();
      this.sshJobSubmissionProtocolResourceId = sshJobSubmissionProtocolResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSSHJobSubmissionProtocol_args(getSSHJobSubmissionProtocol_args other) {
      if (other.isSetSshJobSubmissionProtocolResourceId()) {
        this.sshJobSubmissionProtocolResourceId = other.sshJobSubmissionProtocolResourceId;
      }
    }

    public getSSHJobSubmissionProtocol_args deepCopy() {
      return new getSSHJobSubmissionProtocol_args(this);
    }

    @Override
    public void clear() {
      this.sshJobSubmissionProtocolResourceId = null;
    }

    public String getSshJobSubmissionProtocolResourceId() {
      return this.sshJobSubmissionProtocolResourceId;
    }

    public getSSHJobSubmissionProtocol_args setSshJobSubmissionProtocolResourceId(String sshJobSubmissionProtocolResourceId) {
      this.sshJobSubmissionProtocolResourceId = sshJobSubmissionProtocolResourceId;
      return this;
    }

    public void unsetSshJobSubmissionProtocolResourceId() {
      this.sshJobSubmissionProtocolResourceId = null;
    }

    /** Returns true if field sshJobSubmissionProtocolResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSshJobSubmissionProtocolResourceId() {
      return this.sshJobSubmissionProtocolResourceId != null;
    }

    public void setSshJobSubmissionProtocolResourceIdIsSet(boolean value) {
      if (!value) {
        this.sshJobSubmissionProtocolResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        if (value == null) {
          unsetSshJobSubmissionProtocolResourceId();
        } else {
          setSshJobSubmissionProtocolResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        return getSshJobSubmissionProtocolResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        return isSetSshJobSubmissionProtocolResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSSHJobSubmissionProtocol_args)
        return this.equals((getSSHJobSubmissionProtocol_args)that);
      return false;
    }

    public boolean equals(getSSHJobSubmissionProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_sshJobSubmissionProtocolResourceId = true && this.isSetSshJobSubmissionProtocolResourceId();
      boolean that_present_sshJobSubmissionProtocolResourceId = true && that.isSetSshJobSubmissionProtocolResourceId();
      if (this_present_sshJobSubmissionProtocolResourceId || that_present_sshJobSubmissionProtocolResourceId) {
        if (!(this_present_sshJobSubmissionProtocolResourceId && that_present_sshJobSubmissionProtocolResourceId))
          return false;
        if (!this.sshJobSubmissionProtocolResourceId.equals(that.sshJobSubmissionProtocolResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSSHJobSubmissionProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSshJobSubmissionProtocolResourceId()).compareTo(other.isSetSshJobSubmissionProtocolResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSshJobSubmissionProtocolResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sshJobSubmissionProtocolResourceId, other.sshJobSubmissionProtocolResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSSHJobSubmissionProtocol_args(");
      boolean first = true;

      sb.append("sshJobSubmissionProtocolResourceId:");
      if (this.sshJobSubmissionProtocolResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.sshJobSubmissionProtocolResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (sshJobSubmissionProtocolResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sshJobSubmissionProtocolResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSSHJobSubmissionProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public getSSHJobSubmissionProtocol_argsStandardScheme getScheme() {
        return new getSSHJobSubmissionProtocol_argsStandardScheme();
      }
    }

    private static class getSSHJobSubmissionProtocol_argsStandardScheme extends StandardScheme<getSSHJobSubmissionProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sshJobSubmissionProtocolResourceId = iprot.readString();
                struct.setSshJobSubmissionProtocolResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sshJobSubmissionProtocolResourceId != null) {
          oprot.writeFieldBegin(SSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.sshJobSubmissionProtocolResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSSHJobSubmissionProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public getSSHJobSubmissionProtocol_argsTupleScheme getScheme() {
        return new getSSHJobSubmissionProtocol_argsTupleScheme();
      }
    }

    private static class getSSHJobSubmissionProtocol_argsTupleScheme extends TupleScheme<getSSHJobSubmissionProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.sshJobSubmissionProtocolResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.sshJobSubmissionProtocolResourceId = iprot.readString();
        struct.setSshJobSubmissionProtocolResourceIdIsSet(true);
      }
    }

  }

  public static class getSSHJobSubmissionProtocol_result implements org.apache.thrift.TBase<getSSHJobSubmissionProtocol_result, getSSHJobSubmissionProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSSHJobSubmissionProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSSHJobSubmissionProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSSHJobSubmissionProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSSHJobSubmissionProtocol_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.SSHJobSubmission success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.SSHJobSubmission.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSSHJobSubmissionProtocol_result.class, metaDataMap);
    }

    public getSSHJobSubmissionProtocol_result() {
    }

    public getSSHJobSubmissionProtocol_result(
      org.apache.airavata.model.computehost.SSHJobSubmission success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSSHJobSubmissionProtocol_result(getSSHJobSubmissionProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.computehost.SSHJobSubmission(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getSSHJobSubmissionProtocol_result deepCopy() {
      return new getSSHJobSubmissionProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.computehost.SSHJobSubmission getSuccess() {
      return this.success;
    }

    public getSSHJobSubmissionProtocol_result setSuccess(org.apache.airavata.model.computehost.SSHJobSubmission success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getSSHJobSubmissionProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getSSHJobSubmissionProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getSSHJobSubmissionProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.computehost.SSHJobSubmission)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSSHJobSubmissionProtocol_result)
        return this.equals((getSSHJobSubmissionProtocol_result)that);
      return false;
    }

    public boolean equals(getSSHJobSubmissionProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSSHJobSubmissionProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSSHJobSubmissionProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSSHJobSubmissionProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public getSSHJobSubmissionProtocol_resultStandardScheme getScheme() {
        return new getSSHJobSubmissionProtocol_resultStandardScheme();
      }
    }

    private static class getSSHJobSubmissionProtocol_resultStandardScheme extends StandardScheme<getSSHJobSubmissionProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.computehost.SSHJobSubmission();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSSHJobSubmissionProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public getSSHJobSubmissionProtocol_resultTupleScheme getScheme() {
        return new getSSHJobSubmissionProtocol_resultTupleScheme();
      }
    }

    private static class getSSHJobSubmissionProtocol_resultTupleScheme extends TupleScheme<getSSHJobSubmissionProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.computehost.SSHJobSubmission();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getGSISSHJobSubmissionProtocol_args implements org.apache.thrift.TBase<getGSISSHJobSubmissionProtocol_args, getGSISSHJobSubmissionProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGSISSHJobSubmissionProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGSISSHJobSubmissionProtocol_args");

    private static final org.apache.thrift.protocol.TField GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gsisshJobSubmissionProtocolResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGSISSHJobSubmissionProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGSISSHJobSubmissionProtocol_argsTupleSchemeFactory());
    }

    public String gsisshJobSubmissionProtocolResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID((short)1, "gsisshJobSubmissionProtocolResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID
            return GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("gsisshJobSubmissionProtocolResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGSISSHJobSubmissionProtocol_args.class, metaDataMap);
    }

    public getGSISSHJobSubmissionProtocol_args() {
    }

    public getGSISSHJobSubmissionProtocol_args(
      String gsisshJobSubmissionProtocolResourceId)
    {
      this();
      this.gsisshJobSubmissionProtocolResourceId = gsisshJobSubmissionProtocolResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGSISSHJobSubmissionProtocol_args(getGSISSHJobSubmissionProtocol_args other) {
      if (other.isSetGsisshJobSubmissionProtocolResourceId()) {
        this.gsisshJobSubmissionProtocolResourceId = other.gsisshJobSubmissionProtocolResourceId;
      }
    }

    public getGSISSHJobSubmissionProtocol_args deepCopy() {
      return new getGSISSHJobSubmissionProtocol_args(this);
    }

    @Override
    public void clear() {
      this.gsisshJobSubmissionProtocolResourceId = null;
    }

    public String getGsisshJobSubmissionProtocolResourceId() {
      return this.gsisshJobSubmissionProtocolResourceId;
    }

    public getGSISSHJobSubmissionProtocol_args setGsisshJobSubmissionProtocolResourceId(String gsisshJobSubmissionProtocolResourceId) {
      this.gsisshJobSubmissionProtocolResourceId = gsisshJobSubmissionProtocolResourceId;
      return this;
    }

    public void unsetGsisshJobSubmissionProtocolResourceId() {
      this.gsisshJobSubmissionProtocolResourceId = null;
    }

    /** Returns true if field gsisshJobSubmissionProtocolResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetGsisshJobSubmissionProtocolResourceId() {
      return this.gsisshJobSubmissionProtocolResourceId != null;
    }

    public void setGsisshJobSubmissionProtocolResourceIdIsSet(boolean value) {
      if (!value) {
        this.gsisshJobSubmissionProtocolResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        if (value == null) {
          unsetGsisshJobSubmissionProtocolResourceId();
        } else {
          setGsisshJobSubmissionProtocolResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        return getGsisshJobSubmissionProtocolResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        return isSetGsisshJobSubmissionProtocolResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGSISSHJobSubmissionProtocol_args)
        return this.equals((getGSISSHJobSubmissionProtocol_args)that);
      return false;
    }

    public boolean equals(getGSISSHJobSubmissionProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_gsisshJobSubmissionProtocolResourceId = true && this.isSetGsisshJobSubmissionProtocolResourceId();
      boolean that_present_gsisshJobSubmissionProtocolResourceId = true && that.isSetGsisshJobSubmissionProtocolResourceId();
      if (this_present_gsisshJobSubmissionProtocolResourceId || that_present_gsisshJobSubmissionProtocolResourceId) {
        if (!(this_present_gsisshJobSubmissionProtocolResourceId && that_present_gsisshJobSubmissionProtocolResourceId))
          return false;
        if (!this.gsisshJobSubmissionProtocolResourceId.equals(that.gsisshJobSubmissionProtocolResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGSISSHJobSubmissionProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGsisshJobSubmissionProtocolResourceId()).compareTo(other.isSetGsisshJobSubmissionProtocolResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGsisshJobSubmissionProtocolResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gsisshJobSubmissionProtocolResourceId, other.gsisshJobSubmissionProtocolResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGSISSHJobSubmissionProtocol_args(");
      boolean first = true;

      sb.append("gsisshJobSubmissionProtocolResourceId:");
      if (this.gsisshJobSubmissionProtocolResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.gsisshJobSubmissionProtocolResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (gsisshJobSubmissionProtocolResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gsisshJobSubmissionProtocolResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGSISSHJobSubmissionProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public getGSISSHJobSubmissionProtocol_argsStandardScheme getScheme() {
        return new getGSISSHJobSubmissionProtocol_argsStandardScheme();
      }
    }

    private static class getGSISSHJobSubmissionProtocol_argsStandardScheme extends StandardScheme<getGSISSHJobSubmissionProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gsisshJobSubmissionProtocolResourceId = iprot.readString();
                struct.setGsisshJobSubmissionProtocolResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gsisshJobSubmissionProtocolResourceId != null) {
          oprot.writeFieldBegin(GSISSH_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.gsisshJobSubmissionProtocolResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGSISSHJobSubmissionProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public getGSISSHJobSubmissionProtocol_argsTupleScheme getScheme() {
        return new getGSISSHJobSubmissionProtocol_argsTupleScheme();
      }
    }

    private static class getGSISSHJobSubmissionProtocol_argsTupleScheme extends TupleScheme<getGSISSHJobSubmissionProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.gsisshJobSubmissionProtocolResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGSISSHJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.gsisshJobSubmissionProtocolResourceId = iprot.readString();
        struct.setGsisshJobSubmissionProtocolResourceIdIsSet(true);
      }
    }

  }

  public static class getGSISSHJobSubmissionProtocol_result implements org.apache.thrift.TBase<getGSISSHJobSubmissionProtocol_result, getGSISSHJobSubmissionProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGSISSHJobSubmissionProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGSISSHJobSubmissionProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGSISSHJobSubmissionProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGSISSHJobSubmissionProtocol_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.GSISSHJobSubmission success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.GSISSHJobSubmission.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGSISSHJobSubmissionProtocol_result.class, metaDataMap);
    }

    public getGSISSHJobSubmissionProtocol_result() {
    }

    public getGSISSHJobSubmissionProtocol_result(
      org.apache.airavata.model.computehost.GSISSHJobSubmission success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGSISSHJobSubmissionProtocol_result(getGSISSHJobSubmissionProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.computehost.GSISSHJobSubmission(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getGSISSHJobSubmissionProtocol_result deepCopy() {
      return new getGSISSHJobSubmissionProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.computehost.GSISSHJobSubmission getSuccess() {
      return this.success;
    }

    public getGSISSHJobSubmissionProtocol_result setSuccess(org.apache.airavata.model.computehost.GSISSHJobSubmission success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getGSISSHJobSubmissionProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getGSISSHJobSubmissionProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getGSISSHJobSubmissionProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.computehost.GSISSHJobSubmission)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGSISSHJobSubmissionProtocol_result)
        return this.equals((getGSISSHJobSubmissionProtocol_result)that);
      return false;
    }

    public boolean equals(getGSISSHJobSubmissionProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGSISSHJobSubmissionProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGSISSHJobSubmissionProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGSISSHJobSubmissionProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public getGSISSHJobSubmissionProtocol_resultStandardScheme getScheme() {
        return new getGSISSHJobSubmissionProtocol_resultStandardScheme();
      }
    }

    private static class getGSISSHJobSubmissionProtocol_resultStandardScheme extends StandardScheme<getGSISSHJobSubmissionProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.computehost.GSISSHJobSubmission();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGSISSHJobSubmissionProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public getGSISSHJobSubmissionProtocol_resultTupleScheme getScheme() {
        return new getGSISSHJobSubmissionProtocol_resultTupleScheme();
      }
    }

    private static class getGSISSHJobSubmissionProtocol_resultTupleScheme extends TupleScheme<getGSISSHJobSubmissionProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGSISSHJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.computehost.GSISSHJobSubmission();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getGlobusJobSubmissionProtocol_args implements org.apache.thrift.TBase<getGlobusJobSubmissionProtocol_args, getGlobusJobSubmissionProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGlobusJobSubmissionProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGlobusJobSubmissionProtocol_args");

    private static final org.apache.thrift.protocol.TField GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("globusJobSubmissionProtocolResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGlobusJobSubmissionProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGlobusJobSubmissionProtocol_argsTupleSchemeFactory());
    }

    public String globusJobSubmissionProtocolResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID((short)1, "globusJobSubmissionProtocolResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID
            return GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("globusJobSubmissionProtocolResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGlobusJobSubmissionProtocol_args.class, metaDataMap);
    }

    public getGlobusJobSubmissionProtocol_args() {
    }

    public getGlobusJobSubmissionProtocol_args(
      String globusJobSubmissionProtocolResourceId)
    {
      this();
      this.globusJobSubmissionProtocolResourceId = globusJobSubmissionProtocolResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGlobusJobSubmissionProtocol_args(getGlobusJobSubmissionProtocol_args other) {
      if (other.isSetGlobusJobSubmissionProtocolResourceId()) {
        this.globusJobSubmissionProtocolResourceId = other.globusJobSubmissionProtocolResourceId;
      }
    }

    public getGlobusJobSubmissionProtocol_args deepCopy() {
      return new getGlobusJobSubmissionProtocol_args(this);
    }

    @Override
    public void clear() {
      this.globusJobSubmissionProtocolResourceId = null;
    }

    public String getGlobusJobSubmissionProtocolResourceId() {
      return this.globusJobSubmissionProtocolResourceId;
    }

    public getGlobusJobSubmissionProtocol_args setGlobusJobSubmissionProtocolResourceId(String globusJobSubmissionProtocolResourceId) {
      this.globusJobSubmissionProtocolResourceId = globusJobSubmissionProtocolResourceId;
      return this;
    }

    public void unsetGlobusJobSubmissionProtocolResourceId() {
      this.globusJobSubmissionProtocolResourceId = null;
    }

    /** Returns true if field globusJobSubmissionProtocolResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetGlobusJobSubmissionProtocolResourceId() {
      return this.globusJobSubmissionProtocolResourceId != null;
    }

    public void setGlobusJobSubmissionProtocolResourceIdIsSet(boolean value) {
      if (!value) {
        this.globusJobSubmissionProtocolResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        if (value == null) {
          unsetGlobusJobSubmissionProtocolResourceId();
        } else {
          setGlobusJobSubmissionProtocolResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        return getGlobusJobSubmissionProtocolResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID:
        return isSetGlobusJobSubmissionProtocolResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGlobusJobSubmissionProtocol_args)
        return this.equals((getGlobusJobSubmissionProtocol_args)that);
      return false;
    }

    public boolean equals(getGlobusJobSubmissionProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_globusJobSubmissionProtocolResourceId = true && this.isSetGlobusJobSubmissionProtocolResourceId();
      boolean that_present_globusJobSubmissionProtocolResourceId = true && that.isSetGlobusJobSubmissionProtocolResourceId();
      if (this_present_globusJobSubmissionProtocolResourceId || that_present_globusJobSubmissionProtocolResourceId) {
        if (!(this_present_globusJobSubmissionProtocolResourceId && that_present_globusJobSubmissionProtocolResourceId))
          return false;
        if (!this.globusJobSubmissionProtocolResourceId.equals(that.globusJobSubmissionProtocolResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGlobusJobSubmissionProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGlobusJobSubmissionProtocolResourceId()).compareTo(other.isSetGlobusJobSubmissionProtocolResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGlobusJobSubmissionProtocolResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globusJobSubmissionProtocolResourceId, other.globusJobSubmissionProtocolResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGlobusJobSubmissionProtocol_args(");
      boolean first = true;

      sb.append("globusJobSubmissionProtocolResourceId:");
      if (this.globusJobSubmissionProtocolResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.globusJobSubmissionProtocolResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (globusJobSubmissionProtocolResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'globusJobSubmissionProtocolResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGlobusJobSubmissionProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public getGlobusJobSubmissionProtocol_argsStandardScheme getScheme() {
        return new getGlobusJobSubmissionProtocol_argsStandardScheme();
      }
    }

    private static class getGlobusJobSubmissionProtocol_argsStandardScheme extends StandardScheme<getGlobusJobSubmissionProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.globusJobSubmissionProtocolResourceId = iprot.readString();
                struct.setGlobusJobSubmissionProtocolResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.globusJobSubmissionProtocolResourceId != null) {
          oprot.writeFieldBegin(GLOBUS_JOB_SUBMISSION_PROTOCOL_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.globusJobSubmissionProtocolResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGlobusJobSubmissionProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public getGlobusJobSubmissionProtocol_argsTupleScheme getScheme() {
        return new getGlobusJobSubmissionProtocol_argsTupleScheme();
      }
    }

    private static class getGlobusJobSubmissionProtocol_argsTupleScheme extends TupleScheme<getGlobusJobSubmissionProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.globusJobSubmissionProtocolResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGlobusJobSubmissionProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.globusJobSubmissionProtocolResourceId = iprot.readString();
        struct.setGlobusJobSubmissionProtocolResourceIdIsSet(true);
      }
    }

  }

  public static class getGlobusJobSubmissionProtocol_result implements org.apache.thrift.TBase<getGlobusJobSubmissionProtocol_result, getGlobusJobSubmissionProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGlobusJobSubmissionProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGlobusJobSubmissionProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGlobusJobSubmissionProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGlobusJobSubmissionProtocol_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.GlobusJobSubmission success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.GlobusJobSubmission.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGlobusJobSubmissionProtocol_result.class, metaDataMap);
    }

    public getGlobusJobSubmissionProtocol_result() {
    }

    public getGlobusJobSubmissionProtocol_result(
      org.apache.airavata.model.computehost.GlobusJobSubmission success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGlobusJobSubmissionProtocol_result(getGlobusJobSubmissionProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.computehost.GlobusJobSubmission(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getGlobusJobSubmissionProtocol_result deepCopy() {
      return new getGlobusJobSubmissionProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.computehost.GlobusJobSubmission getSuccess() {
      return this.success;
    }

    public getGlobusJobSubmissionProtocol_result setSuccess(org.apache.airavata.model.computehost.GlobusJobSubmission success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getGlobusJobSubmissionProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getGlobusJobSubmissionProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getGlobusJobSubmissionProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.computehost.GlobusJobSubmission)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGlobusJobSubmissionProtocol_result)
        return this.equals((getGlobusJobSubmissionProtocol_result)that);
      return false;
    }

    public boolean equals(getGlobusJobSubmissionProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGlobusJobSubmissionProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGlobusJobSubmissionProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGlobusJobSubmissionProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public getGlobusJobSubmissionProtocol_resultStandardScheme getScheme() {
        return new getGlobusJobSubmissionProtocol_resultStandardScheme();
      }
    }

    private static class getGlobusJobSubmissionProtocol_resultStandardScheme extends StandardScheme<getGlobusJobSubmissionProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.computehost.GlobusJobSubmission();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGlobusJobSubmissionProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public getGlobusJobSubmissionProtocol_resultTupleScheme getScheme() {
        return new getGlobusJobSubmissionProtocol_resultTupleScheme();
      }
    }

    private static class getGlobusJobSubmissionProtocol_resultTupleScheme extends TupleScheme<getGlobusJobSubmissionProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGlobusJobSubmissionProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.computehost.GlobusJobSubmission();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getSCPDataMovementProtocol_args implements org.apache.thrift.TBase<getSCPDataMovementProtocol_args, getSCPDataMovementProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSCPDataMovementProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSCPDataMovementProtocol_args");

    private static final org.apache.thrift.protocol.TField SCP_DATA_MOVEMENT_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scpDataMovementResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSCPDataMovementProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSCPDataMovementProtocol_argsTupleSchemeFactory());
    }

    public String scpDataMovementResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCP_DATA_MOVEMENT_RESOURCE_ID((short)1, "scpDataMovementResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCP_DATA_MOVEMENT_RESOURCE_ID
            return SCP_DATA_MOVEMENT_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCP_DATA_MOVEMENT_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("scpDataMovementResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSCPDataMovementProtocol_args.class, metaDataMap);
    }

    public getSCPDataMovementProtocol_args() {
    }

    public getSCPDataMovementProtocol_args(
      String scpDataMovementResourceId)
    {
      this();
      this.scpDataMovementResourceId = scpDataMovementResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSCPDataMovementProtocol_args(getSCPDataMovementProtocol_args other) {
      if (other.isSetScpDataMovementResourceId()) {
        this.scpDataMovementResourceId = other.scpDataMovementResourceId;
      }
    }

    public getSCPDataMovementProtocol_args deepCopy() {
      return new getSCPDataMovementProtocol_args(this);
    }

    @Override
    public void clear() {
      this.scpDataMovementResourceId = null;
    }

    public String getScpDataMovementResourceId() {
      return this.scpDataMovementResourceId;
    }

    public getSCPDataMovementProtocol_args setScpDataMovementResourceId(String scpDataMovementResourceId) {
      this.scpDataMovementResourceId = scpDataMovementResourceId;
      return this;
    }

    public void unsetScpDataMovementResourceId() {
      this.scpDataMovementResourceId = null;
    }

    /** Returns true if field scpDataMovementResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetScpDataMovementResourceId() {
      return this.scpDataMovementResourceId != null;
    }

    public void setScpDataMovementResourceIdIsSet(boolean value) {
      if (!value) {
        this.scpDataMovementResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCP_DATA_MOVEMENT_RESOURCE_ID:
        if (value == null) {
          unsetScpDataMovementResourceId();
        } else {
          setScpDataMovementResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCP_DATA_MOVEMENT_RESOURCE_ID:
        return getScpDataMovementResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCP_DATA_MOVEMENT_RESOURCE_ID:
        return isSetScpDataMovementResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSCPDataMovementProtocol_args)
        return this.equals((getSCPDataMovementProtocol_args)that);
      return false;
    }

    public boolean equals(getSCPDataMovementProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_scpDataMovementResourceId = true && this.isSetScpDataMovementResourceId();
      boolean that_present_scpDataMovementResourceId = true && that.isSetScpDataMovementResourceId();
      if (this_present_scpDataMovementResourceId || that_present_scpDataMovementResourceId) {
        if (!(this_present_scpDataMovementResourceId && that_present_scpDataMovementResourceId))
          return false;
        if (!this.scpDataMovementResourceId.equals(that.scpDataMovementResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSCPDataMovementProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScpDataMovementResourceId()).compareTo(other.isSetScpDataMovementResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScpDataMovementResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scpDataMovementResourceId, other.scpDataMovementResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSCPDataMovementProtocol_args(");
      boolean first = true;

      sb.append("scpDataMovementResourceId:");
      if (this.scpDataMovementResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.scpDataMovementResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (scpDataMovementResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scpDataMovementResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSCPDataMovementProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public getSCPDataMovementProtocol_argsStandardScheme getScheme() {
        return new getSCPDataMovementProtocol_argsStandardScheme();
      }
    }

    private static class getSCPDataMovementProtocol_argsStandardScheme extends StandardScheme<getSCPDataMovementProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCP_DATA_MOVEMENT_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scpDataMovementResourceId = iprot.readString();
                struct.setScpDataMovementResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scpDataMovementResourceId != null) {
          oprot.writeFieldBegin(SCP_DATA_MOVEMENT_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.scpDataMovementResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSCPDataMovementProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public getSCPDataMovementProtocol_argsTupleScheme getScheme() {
        return new getSCPDataMovementProtocol_argsTupleScheme();
      }
    }

    private static class getSCPDataMovementProtocol_argsTupleScheme extends TupleScheme<getSCPDataMovementProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.scpDataMovementResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSCPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.scpDataMovementResourceId = iprot.readString();
        struct.setScpDataMovementResourceIdIsSet(true);
      }
    }

  }

  public static class getSCPDataMovementProtocol_result implements org.apache.thrift.TBase<getSCPDataMovementProtocol_result, getSCPDataMovementProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSCPDataMovementProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSCPDataMovementProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSCPDataMovementProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSCPDataMovementProtocol_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.SCPDataMovement success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.SCPDataMovement.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSCPDataMovementProtocol_result.class, metaDataMap);
    }

    public getSCPDataMovementProtocol_result() {
    }

    public getSCPDataMovementProtocol_result(
      org.apache.airavata.model.computehost.SCPDataMovement success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSCPDataMovementProtocol_result(getSCPDataMovementProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.computehost.SCPDataMovement(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getSCPDataMovementProtocol_result deepCopy() {
      return new getSCPDataMovementProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.computehost.SCPDataMovement getSuccess() {
      return this.success;
    }

    public getSCPDataMovementProtocol_result setSuccess(org.apache.airavata.model.computehost.SCPDataMovement success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getSCPDataMovementProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getSCPDataMovementProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getSCPDataMovementProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.computehost.SCPDataMovement)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSCPDataMovementProtocol_result)
        return this.equals((getSCPDataMovementProtocol_result)that);
      return false;
    }

    public boolean equals(getSCPDataMovementProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSCPDataMovementProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSCPDataMovementProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSCPDataMovementProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public getSCPDataMovementProtocol_resultStandardScheme getScheme() {
        return new getSCPDataMovementProtocol_resultStandardScheme();
      }
    }

    private static class getSCPDataMovementProtocol_resultStandardScheme extends StandardScheme<getSCPDataMovementProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.computehost.SCPDataMovement();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSCPDataMovementProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public getSCPDataMovementProtocol_resultTupleScheme getScheme() {
        return new getSCPDataMovementProtocol_resultTupleScheme();
      }
    }

    private static class getSCPDataMovementProtocol_resultTupleScheme extends TupleScheme<getSCPDataMovementProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSCPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.computehost.SCPDataMovement();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getGridFTPDataMovementProtocol_args implements org.apache.thrift.TBase<getGridFTPDataMovementProtocol_args, getGridFTPDataMovementProtocol_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGridFTPDataMovementProtocol_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGridFTPDataMovementProtocol_args");

    private static final org.apache.thrift.protocol.TField GRID_FTPDATA_MOVEMENT_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gridFTPDataMovementResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGridFTPDataMovementProtocol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGridFTPDataMovementProtocol_argsTupleSchemeFactory());
    }

    public String gridFTPDataMovementResourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GRID_FTPDATA_MOVEMENT_RESOURCE_ID((short)1, "gridFTPDataMovementResourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GRID_FTPDATA_MOVEMENT_RESOURCE_ID
            return GRID_FTPDATA_MOVEMENT_RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GRID_FTPDATA_MOVEMENT_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("gridFTPDataMovementResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGridFTPDataMovementProtocol_args.class, metaDataMap);
    }

    public getGridFTPDataMovementProtocol_args() {
    }

    public getGridFTPDataMovementProtocol_args(
      String gridFTPDataMovementResourceId)
    {
      this();
      this.gridFTPDataMovementResourceId = gridFTPDataMovementResourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGridFTPDataMovementProtocol_args(getGridFTPDataMovementProtocol_args other) {
      if (other.isSetGridFTPDataMovementResourceId()) {
        this.gridFTPDataMovementResourceId = other.gridFTPDataMovementResourceId;
      }
    }

    public getGridFTPDataMovementProtocol_args deepCopy() {
      return new getGridFTPDataMovementProtocol_args(this);
    }

    @Override
    public void clear() {
      this.gridFTPDataMovementResourceId = null;
    }

    public String getGridFTPDataMovementResourceId() {
      return this.gridFTPDataMovementResourceId;
    }

    public getGridFTPDataMovementProtocol_args setGridFTPDataMovementResourceId(String gridFTPDataMovementResourceId) {
      this.gridFTPDataMovementResourceId = gridFTPDataMovementResourceId;
      return this;
    }

    public void unsetGridFTPDataMovementResourceId() {
      this.gridFTPDataMovementResourceId = null;
    }

    /** Returns true if field gridFTPDataMovementResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetGridFTPDataMovementResourceId() {
      return this.gridFTPDataMovementResourceId != null;
    }

    public void setGridFTPDataMovementResourceIdIsSet(boolean value) {
      if (!value) {
        this.gridFTPDataMovementResourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GRID_FTPDATA_MOVEMENT_RESOURCE_ID:
        if (value == null) {
          unsetGridFTPDataMovementResourceId();
        } else {
          setGridFTPDataMovementResourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GRID_FTPDATA_MOVEMENT_RESOURCE_ID:
        return getGridFTPDataMovementResourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GRID_FTPDATA_MOVEMENT_RESOURCE_ID:
        return isSetGridFTPDataMovementResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGridFTPDataMovementProtocol_args)
        return this.equals((getGridFTPDataMovementProtocol_args)that);
      return false;
    }

    public boolean equals(getGridFTPDataMovementProtocol_args that) {
      if (that == null)
        return false;

      boolean this_present_gridFTPDataMovementResourceId = true && this.isSetGridFTPDataMovementResourceId();
      boolean that_present_gridFTPDataMovementResourceId = true && that.isSetGridFTPDataMovementResourceId();
      if (this_present_gridFTPDataMovementResourceId || that_present_gridFTPDataMovementResourceId) {
        if (!(this_present_gridFTPDataMovementResourceId && that_present_gridFTPDataMovementResourceId))
          return false;
        if (!this.gridFTPDataMovementResourceId.equals(that.gridFTPDataMovementResourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGridFTPDataMovementProtocol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGridFTPDataMovementResourceId()).compareTo(other.isSetGridFTPDataMovementResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGridFTPDataMovementResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gridFTPDataMovementResourceId, other.gridFTPDataMovementResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGridFTPDataMovementProtocol_args(");
      boolean first = true;

      sb.append("gridFTPDataMovementResourceId:");
      if (this.gridFTPDataMovementResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.gridFTPDataMovementResourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (gridFTPDataMovementResourceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gridFTPDataMovementResourceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGridFTPDataMovementProtocol_argsStandardSchemeFactory implements SchemeFactory {
      public getGridFTPDataMovementProtocol_argsStandardScheme getScheme() {
        return new getGridFTPDataMovementProtocol_argsStandardScheme();
      }
    }

    private static class getGridFTPDataMovementProtocol_argsStandardScheme extends StandardScheme<getGridFTPDataMovementProtocol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GRID_FTPDATA_MOVEMENT_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gridFTPDataMovementResourceId = iprot.readString();
                struct.setGridFTPDataMovementResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gridFTPDataMovementResourceId != null) {
          oprot.writeFieldBegin(GRID_FTPDATA_MOVEMENT_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.gridFTPDataMovementResourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGridFTPDataMovementProtocol_argsTupleSchemeFactory implements SchemeFactory {
      public getGridFTPDataMovementProtocol_argsTupleScheme getScheme() {
        return new getGridFTPDataMovementProtocol_argsTupleScheme();
      }
    }

    private static class getGridFTPDataMovementProtocol_argsTupleScheme extends TupleScheme<getGridFTPDataMovementProtocol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.gridFTPDataMovementResourceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGridFTPDataMovementProtocol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.gridFTPDataMovementResourceId = iprot.readString();
        struct.setGridFTPDataMovementResourceIdIsSet(true);
      }
    }

  }

  public static class getGridFTPDataMovementProtocol_result implements org.apache.thrift.TBase<getGridFTPDataMovementProtocol_result, getGridFTPDataMovementProtocol_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGridFTPDataMovementProtocol_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGridFTPDataMovementProtocol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGridFTPDataMovementProtocol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGridFTPDataMovementProtocol_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.GridFTPDataMovement success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.GridFTPDataMovement.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGridFTPDataMovementProtocol_result.class, metaDataMap);
    }

    public getGridFTPDataMovementProtocol_result() {
    }

    public getGridFTPDataMovementProtocol_result(
      org.apache.airavata.model.computehost.GridFTPDataMovement success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGridFTPDataMovementProtocol_result(getGridFTPDataMovementProtocol_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.computehost.GridFTPDataMovement(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getGridFTPDataMovementProtocol_result deepCopy() {
      return new getGridFTPDataMovementProtocol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.computehost.GridFTPDataMovement getSuccess() {
      return this.success;
    }

    public getGridFTPDataMovementProtocol_result setSuccess(org.apache.airavata.model.computehost.GridFTPDataMovement success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getGridFTPDataMovementProtocol_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getGridFTPDataMovementProtocol_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getGridFTPDataMovementProtocol_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.computehost.GridFTPDataMovement)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGridFTPDataMovementProtocol_result)
        return this.equals((getGridFTPDataMovementProtocol_result)that);
      return false;
    }

    public boolean equals(getGridFTPDataMovementProtocol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGridFTPDataMovementProtocol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGridFTPDataMovementProtocol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGridFTPDataMovementProtocol_resultStandardSchemeFactory implements SchemeFactory {
      public getGridFTPDataMovementProtocol_resultStandardScheme getScheme() {
        return new getGridFTPDataMovementProtocol_resultStandardScheme();
      }
    }

    private static class getGridFTPDataMovementProtocol_resultStandardScheme extends StandardScheme<getGridFTPDataMovementProtocol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.computehost.GridFTPDataMovement();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGridFTPDataMovementProtocol_resultTupleSchemeFactory implements SchemeFactory {
      public getGridFTPDataMovementProtocol_resultTupleScheme getScheme() {
        return new getGridFTPDataMovementProtocol_resultTupleScheme();
      }
    }

    private static class getGridFTPDataMovementProtocol_resultTupleScheme extends TupleScheme<getGridFTPDataMovementProtocol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGridFTPDataMovementProtocol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.computehost.GridFTPDataMovement();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class isComputeResourceDescriptionRegistered_args implements org.apache.thrift.TBase<isComputeResourceDescriptionRegistered_args, isComputeResourceDescriptionRegistered_args._Fields>, java.io.Serializable, Cloneable, Comparable<isComputeResourceDescriptionRegistered_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isComputeResourceDescriptionRegistered_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isComputeResourceDescriptionRegistered_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isComputeResourceDescriptionRegistered_argsTupleSchemeFactory());
    }

    public String hostName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isComputeResourceDescriptionRegistered_args.class, metaDataMap);
    }

    public isComputeResourceDescriptionRegistered_args() {
    }

    public isComputeResourceDescriptionRegistered_args(
      String hostName)
    {
      this();
      this.hostName = hostName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isComputeResourceDescriptionRegistered_args(isComputeResourceDescriptionRegistered_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
    }

    public isComputeResourceDescriptionRegistered_args deepCopy() {
      return new isComputeResourceDescriptionRegistered_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public isComputeResourceDescriptionRegistered_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isComputeResourceDescriptionRegistered_args)
        return this.equals((isComputeResourceDescriptionRegistered_args)that);
      return false;
    }

    public boolean equals(isComputeResourceDescriptionRegistered_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isComputeResourceDescriptionRegistered_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isComputeResourceDescriptionRegistered_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (hostName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isComputeResourceDescriptionRegistered_argsStandardSchemeFactory implements SchemeFactory {
      public isComputeResourceDescriptionRegistered_argsStandardScheme getScheme() {
        return new isComputeResourceDescriptionRegistered_argsStandardScheme();
      }
    }

    private static class isComputeResourceDescriptionRegistered_argsStandardScheme extends StandardScheme<isComputeResourceDescriptionRegistered_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isComputeResourceDescriptionRegistered_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isComputeResourceDescriptionRegistered_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isComputeResourceDescriptionRegistered_argsTupleSchemeFactory implements SchemeFactory {
      public isComputeResourceDescriptionRegistered_argsTupleScheme getScheme() {
        return new isComputeResourceDescriptionRegistered_argsTupleScheme();
      }
    }

    private static class isComputeResourceDescriptionRegistered_argsTupleScheme extends TupleScheme<isComputeResourceDescriptionRegistered_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isComputeResourceDescriptionRegistered_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.hostName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isComputeResourceDescriptionRegistered_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
    }

  }

  public static class isComputeResourceDescriptionRegistered_result implements org.apache.thrift.TBase<isComputeResourceDescriptionRegistered_result, isComputeResourceDescriptionRegistered_result._Fields>, java.io.Serializable, Cloneable, Comparable<isComputeResourceDescriptionRegistered_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isComputeResourceDescriptionRegistered_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isComputeResourceDescriptionRegistered_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isComputeResourceDescriptionRegistered_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isComputeResourceDescriptionRegistered_result.class, metaDataMap);
    }

    public isComputeResourceDescriptionRegistered_result() {
    }

    public isComputeResourceDescriptionRegistered_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isComputeResourceDescriptionRegistered_result(isComputeResourceDescriptionRegistered_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public isComputeResourceDescriptionRegistered_result deepCopy() {
      return new isComputeResourceDescriptionRegistered_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isComputeResourceDescriptionRegistered_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public isComputeResourceDescriptionRegistered_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public isComputeResourceDescriptionRegistered_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public isComputeResourceDescriptionRegistered_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isComputeResourceDescriptionRegistered_result)
        return this.equals((isComputeResourceDescriptionRegistered_result)that);
      return false;
    }

    public boolean equals(isComputeResourceDescriptionRegistered_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isComputeResourceDescriptionRegistered_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isComputeResourceDescriptionRegistered_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isComputeResourceDescriptionRegistered_resultStandardSchemeFactory implements SchemeFactory {
      public isComputeResourceDescriptionRegistered_resultStandardScheme getScheme() {
        return new isComputeResourceDescriptionRegistered_resultStandardScheme();
      }
    }

    private static class isComputeResourceDescriptionRegistered_resultStandardScheme extends StandardScheme<isComputeResourceDescriptionRegistered_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isComputeResourceDescriptionRegistered_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isComputeResourceDescriptionRegistered_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isComputeResourceDescriptionRegistered_resultTupleSchemeFactory implements SchemeFactory {
      public isComputeResourceDescriptionRegistered_resultTupleScheme getScheme() {
        return new isComputeResourceDescriptionRegistered_resultTupleScheme();
      }
    }

    private static class isComputeResourceDescriptionRegistered_resultTupleScheme extends TupleScheme<isComputeResourceDescriptionRegistered_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isComputeResourceDescriptionRegistered_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isComputeResourceDescriptionRegistered_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getComputeResourceDescriptionFromHostName_args implements org.apache.thrift.TBase<getComputeResourceDescriptionFromHostName_args, getComputeResourceDescriptionFromHostName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getComputeResourceDescriptionFromHostName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComputeResourceDescriptionFromHostName_args");

    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComputeResourceDescriptionFromHostName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComputeResourceDescriptionFromHostName_argsTupleSchemeFactory());
    }

    public String hostName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_NAME((short)1, "hostName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_NAME
            return HOST_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComputeResourceDescriptionFromHostName_args.class, metaDataMap);
    }

    public getComputeResourceDescriptionFromHostName_args() {
    }

    public getComputeResourceDescriptionFromHostName_args(
      String hostName)
    {
      this();
      this.hostName = hostName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComputeResourceDescriptionFromHostName_args(getComputeResourceDescriptionFromHostName_args other) {
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
    }

    public getComputeResourceDescriptionFromHostName_args deepCopy() {
      return new getComputeResourceDescriptionFromHostName_args(this);
    }

    @Override
    public void clear() {
      this.hostName = null;
    }

    public String getHostName() {
      return this.hostName;
    }

    public getComputeResourceDescriptionFromHostName_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_NAME:
        return getHostName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOST_NAME:
        return isSetHostName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComputeResourceDescriptionFromHostName_args)
        return this.equals((getComputeResourceDescriptionFromHostName_args)that);
      return false;
    }

    public boolean equals(getComputeResourceDescriptionFromHostName_args that) {
      if (that == null)
        return false;

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getComputeResourceDescriptionFromHostName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComputeResourceDescriptionFromHostName_args(");
      boolean first = true;

      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (hostName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComputeResourceDescriptionFromHostName_argsStandardSchemeFactory implements SchemeFactory {
      public getComputeResourceDescriptionFromHostName_argsStandardScheme getScheme() {
        return new getComputeResourceDescriptionFromHostName_argsStandardScheme();
      }
    }

    private static class getComputeResourceDescriptionFromHostName_argsStandardScheme extends StandardScheme<getComputeResourceDescriptionFromHostName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComputeResourceDescriptionFromHostName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComputeResourceDescriptionFromHostName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComputeResourceDescriptionFromHostName_argsTupleSchemeFactory implements SchemeFactory {
      public getComputeResourceDescriptionFromHostName_argsTupleScheme getScheme() {
        return new getComputeResourceDescriptionFromHostName_argsTupleScheme();
      }
    }

    private static class getComputeResourceDescriptionFromHostName_argsTupleScheme extends TupleScheme<getComputeResourceDescriptionFromHostName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescriptionFromHostName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.hostName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescriptionFromHostName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
    }

  }

  public static class getComputeResourceDescriptionFromHostName_result implements org.apache.thrift.TBase<getComputeResourceDescriptionFromHostName_result, getComputeResourceDescriptionFromHostName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getComputeResourceDescriptionFromHostName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getComputeResourceDescriptionFromHostName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getComputeResourceDescriptionFromHostName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getComputeResourceDescriptionFromHostName_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.computehost.ComputeResourceDescription.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getComputeResourceDescriptionFromHostName_result.class, metaDataMap);
    }

    public getComputeResourceDescriptionFromHostName_result() {
    }

    public getComputeResourceDescriptionFromHostName_result(
      org.apache.airavata.model.computehost.ComputeResourceDescription success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getComputeResourceDescriptionFromHostName_result(getComputeResourceDescriptionFromHostName_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.computehost.ComputeResourceDescription(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getComputeResourceDescriptionFromHostName_result deepCopy() {
      return new getComputeResourceDescriptionFromHostName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.computehost.ComputeResourceDescription getSuccess() {
      return this.success;
    }

    public getComputeResourceDescriptionFromHostName_result setSuccess(org.apache.airavata.model.computehost.ComputeResourceDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getComputeResourceDescriptionFromHostName_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getComputeResourceDescriptionFromHostName_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getComputeResourceDescriptionFromHostName_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.computehost.ComputeResourceDescription)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getComputeResourceDescriptionFromHostName_result)
        return this.equals((getComputeResourceDescriptionFromHostName_result)that);
      return false;
    }

    public boolean equals(getComputeResourceDescriptionFromHostName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getComputeResourceDescriptionFromHostName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getComputeResourceDescriptionFromHostName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getComputeResourceDescriptionFromHostName_resultStandardSchemeFactory implements SchemeFactory {
      public getComputeResourceDescriptionFromHostName_resultStandardScheme getScheme() {
        return new getComputeResourceDescriptionFromHostName_resultStandardScheme();
      }
    }

    private static class getComputeResourceDescriptionFromHostName_resultStandardScheme extends StandardScheme<getComputeResourceDescriptionFromHostName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getComputeResourceDescriptionFromHostName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.computehost.ComputeResourceDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getComputeResourceDescriptionFromHostName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getComputeResourceDescriptionFromHostName_resultTupleSchemeFactory implements SchemeFactory {
      public getComputeResourceDescriptionFromHostName_resultTupleScheme getScheme() {
        return new getComputeResourceDescriptionFromHostName_resultTupleScheme();
      }
    }

    private static class getComputeResourceDescriptionFromHostName_resultTupleScheme extends TupleScheme<getComputeResourceDescriptionFromHostName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescriptionFromHostName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getComputeResourceDescriptionFromHostName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.computehost.ComputeResourceDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addApplicationInterface_args implements org.apache.thrift.TBase<addApplicationInterface_args, addApplicationInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<addApplicationInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplicationInterface_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterface", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplicationInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplicationInterface_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_INTERFACE((short)1, "applicationInterface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_INTERFACE
            return APPLICATION_INTERFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("applicationInterface", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplicationInterface_args.class, metaDataMap);
    }

    public addApplicationInterface_args() {
    }

    public addApplicationInterface_args(
      org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface)
    {
      this();
      this.applicationInterface = applicationInterface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplicationInterface_args(addApplicationInterface_args other) {
      if (other.isSetApplicationInterface()) {
        this.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription(other.applicationInterface);
      }
    }

    public addApplicationInterface_args deepCopy() {
      return new addApplicationInterface_args(this);
    }

    @Override
    public void clear() {
      this.applicationInterface = null;
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getApplicationInterface() {
      return this.applicationInterface;
    }

    public addApplicationInterface_args setApplicationInterface(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription applicationInterface) {
      this.applicationInterface = applicationInterface;
      return this;
    }

    public void unsetApplicationInterface() {
      this.applicationInterface = null;
    }

    /** Returns true if field applicationInterface is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInterface() {
      return this.applicationInterface != null;
    }

    public void setApplicationInterfaceIsSet(boolean value) {
      if (!value) {
        this.applicationInterface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_INTERFACE:
        if (value == null) {
          unsetApplicationInterface();
        } else {
          setApplicationInterface((org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_INTERFACE:
        return getApplicationInterface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_INTERFACE:
        return isSetApplicationInterface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplicationInterface_args)
        return this.equals((addApplicationInterface_args)that);
      return false;
    }

    public boolean equals(addApplicationInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationInterface = true && this.isSetApplicationInterface();
      boolean that_present_applicationInterface = true && that.isSetApplicationInterface();
      if (this_present_applicationInterface || that_present_applicationInterface) {
        if (!(this_present_applicationInterface && that_present_applicationInterface))
          return false;
        if (!this.applicationInterface.equals(that.applicationInterface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addApplicationInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationInterface()).compareTo(other.isSetApplicationInterface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInterface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterface, other.applicationInterface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplicationInterface_args(");
      boolean first = true;

      sb.append("applicationInterface:");
      if (this.applicationInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInterface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationInterface == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterface' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationInterface != null) {
        applicationInterface.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplicationInterface_argsStandardSchemeFactory implements SchemeFactory {
      public addApplicationInterface_argsStandardScheme getScheme() {
        return new addApplicationInterface_argsStandardScheme();
      }
    }

    private static class addApplicationInterface_argsStandardScheme extends StandardScheme<addApplicationInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplicationInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_INTERFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
                struct.applicationInterface.read(iprot);
                struct.setApplicationInterfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplicationInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationInterface != null) {
          oprot.writeFieldBegin(APPLICATION_INTERFACE_FIELD_DESC);
          struct.applicationInterface.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplicationInterface_argsTupleSchemeFactory implements SchemeFactory {
      public addApplicationInterface_argsTupleScheme getScheme() {
        return new addApplicationInterface_argsTupleScheme();
      }
    }

    private static class addApplicationInterface_argsTupleScheme extends TupleScheme<addApplicationInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.applicationInterface.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationInterface = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
        struct.applicationInterface.read(iprot);
        struct.setApplicationInterfaceIsSet(true);
      }
    }

  }

  public static class addApplicationInterface_result implements org.apache.thrift.TBase<addApplicationInterface_result, addApplicationInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<addApplicationInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplicationInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplicationInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplicationInterface_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplicationInterface_result.class, metaDataMap);
    }

    public addApplicationInterface_result() {
    }

    public addApplicationInterface_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplicationInterface_result(addApplicationInterface_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addApplicationInterface_result deepCopy() {
      return new addApplicationInterface_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addApplicationInterface_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addApplicationInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addApplicationInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addApplicationInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplicationInterface_result)
        return this.equals((addApplicationInterface_result)that);
      return false;
    }

    public boolean equals(addApplicationInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addApplicationInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplicationInterface_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplicationInterface_resultStandardSchemeFactory implements SchemeFactory {
      public addApplicationInterface_resultStandardScheme getScheme() {
        return new addApplicationInterface_resultStandardScheme();
      }
    }

    private static class addApplicationInterface_resultStandardScheme extends StandardScheme<addApplicationInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplicationInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplicationInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplicationInterface_resultTupleSchemeFactory implements SchemeFactory {
      public addApplicationInterface_resultTupleScheme getScheme() {
        return new addApplicationInterface_resultTupleScheme();
      }
    }

    private static class addApplicationInterface_resultTupleScheme extends TupleScheme<addApplicationInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class listApplicationInterfaceIds_args implements org.apache.thrift.TBase<listApplicationInterfaceIds_args, listApplicationInterfaceIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<listApplicationInterfaceIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listApplicationInterfaceIds_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listApplicationInterfaceIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listApplicationInterfaceIds_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listApplicationInterfaceIds_args.class, metaDataMap);
    }

    public listApplicationInterfaceIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listApplicationInterfaceIds_args(listApplicationInterfaceIds_args other) {
    }

    public listApplicationInterfaceIds_args deepCopy() {
      return new listApplicationInterfaceIds_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listApplicationInterfaceIds_args)
        return this.equals((listApplicationInterfaceIds_args)that);
      return false;
    }

    public boolean equals(listApplicationInterfaceIds_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listApplicationInterfaceIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listApplicationInterfaceIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listApplicationInterfaceIds_argsStandardSchemeFactory implements SchemeFactory {
      public listApplicationInterfaceIds_argsStandardScheme getScheme() {
        return new listApplicationInterfaceIds_argsStandardScheme();
      }
    }

    private static class listApplicationInterfaceIds_argsStandardScheme extends StandardScheme<listApplicationInterfaceIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listApplicationInterfaceIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listApplicationInterfaceIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listApplicationInterfaceIds_argsTupleSchemeFactory implements SchemeFactory {
      public listApplicationInterfaceIds_argsTupleScheme getScheme() {
        return new listApplicationInterfaceIds_argsTupleScheme();
      }
    }

    private static class listApplicationInterfaceIds_argsTupleScheme extends TupleScheme<listApplicationInterfaceIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listApplicationInterfaceIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listApplicationInterfaceIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listApplicationInterfaceIds_result implements org.apache.thrift.TBase<listApplicationInterfaceIds_result, listApplicationInterfaceIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<listApplicationInterfaceIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listApplicationInterfaceIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listApplicationInterfaceIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listApplicationInterfaceIds_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listApplicationInterfaceIds_result.class, metaDataMap);
    }

    public listApplicationInterfaceIds_result() {
    }

    public listApplicationInterfaceIds_result(
      List<String> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listApplicationInterfaceIds_result(listApplicationInterfaceIds_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public listApplicationInterfaceIds_result deepCopy() {
      return new listApplicationInterfaceIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listApplicationInterfaceIds_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public listApplicationInterfaceIds_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public listApplicationInterfaceIds_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public listApplicationInterfaceIds_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listApplicationInterfaceIds_result)
        return this.equals((listApplicationInterfaceIds_result)that);
      return false;
    }

    public boolean equals(listApplicationInterfaceIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listApplicationInterfaceIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listApplicationInterfaceIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listApplicationInterfaceIds_resultStandardSchemeFactory implements SchemeFactory {
      public listApplicationInterfaceIds_resultStandardScheme getScheme() {
        return new listApplicationInterfaceIds_resultStandardScheme();
      }
    }

    private static class listApplicationInterfaceIds_resultStandardScheme extends StandardScheme<listApplicationInterfaceIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listApplicationInterfaceIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10;
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listApplicationInterfaceIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listApplicationInterfaceIds_resultTupleSchemeFactory implements SchemeFactory {
      public listApplicationInterfaceIds_resultTupleScheme getScheme() {
        return new listApplicationInterfaceIds_resultTupleScheme();
      }
    }

    private static class listApplicationInterfaceIds_resultTupleScheme extends TupleScheme<listApplicationInterfaceIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listApplicationInterfaceIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listApplicationInterfaceIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15;
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getApplicationInterface_args implements org.apache.thrift.TBase<getApplicationInterface_args, getApplicationInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationInterface_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationInterface_argsTupleSchemeFactory());
    }

    public String applicationInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_INTERFACE_ID((short)1, "applicationInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_INTERFACE_ID
            return APPLICATION_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationInterface_args.class, metaDataMap);
    }

    public getApplicationInterface_args() {
    }

    public getApplicationInterface_args(
      String applicationInterfaceId)
    {
      this();
      this.applicationInterfaceId = applicationInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationInterface_args(getApplicationInterface_args other) {
      if (other.isSetApplicationInterfaceId()) {
        this.applicationInterfaceId = other.applicationInterfaceId;
      }
    }

    public getApplicationInterface_args deepCopy() {
      return new getApplicationInterface_args(this);
    }

    @Override
    public void clear() {
      this.applicationInterfaceId = null;
    }

    public String getApplicationInterfaceId() {
      return this.applicationInterfaceId;
    }

    public getApplicationInterface_args setApplicationInterfaceId(String applicationInterfaceId) {
      this.applicationInterfaceId = applicationInterfaceId;
      return this;
    }

    public void unsetApplicationInterfaceId() {
      this.applicationInterfaceId = null;
    }

    /** Returns true if field applicationInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInterfaceId() {
      return this.applicationInterfaceId != null;
    }

    public void setApplicationInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.applicationInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        if (value == null) {
          unsetApplicationInterfaceId();
        } else {
          setApplicationInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return getApplicationInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return isSetApplicationInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationInterface_args)
        return this.equals((getApplicationInterface_args)that);
      return false;
    }

    public boolean equals(getApplicationInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationInterfaceId = true && this.isSetApplicationInterfaceId();
      boolean that_present_applicationInterfaceId = true && that.isSetApplicationInterfaceId();
      if (this_present_applicationInterfaceId || that_present_applicationInterfaceId) {
        if (!(this_present_applicationInterfaceId && that_present_applicationInterfaceId))
          return false;
        if (!this.applicationInterfaceId.equals(that.applicationInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationInterfaceId()).compareTo(other.isSetApplicationInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterfaceId, other.applicationInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationInterface_args(");
      boolean first = true;

      sb.append("applicationInterfaceId:");
      if (this.applicationInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationInterface_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationInterface_argsStandardScheme getScheme() {
        return new getApplicationInterface_argsStandardScheme();
      }
    }

    private static class getApplicationInterface_argsStandardScheme extends StandardScheme<getApplicationInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationInterfaceId = iprot.readString();
                struct.setApplicationInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationInterfaceId != null) {
          oprot.writeFieldBegin(APPLICATION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.applicationInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationInterface_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationInterface_argsTupleScheme getScheme() {
        return new getApplicationInterface_argsTupleScheme();
      }
    }

    private static class getApplicationInterface_argsTupleScheme extends TupleScheme<getApplicationInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.applicationInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationInterfaceId = iprot.readString();
        struct.setApplicationInterfaceIdIsSet(true);
      }
    }

  }

  public static class getApplicationInterface_result implements org.apache.thrift.TBase<getApplicationInterface_result, getApplicationInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationInterface_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationInterface_result.class, metaDataMap);
    }

    public getApplicationInterface_result() {
    }

    public getApplicationInterface_result(
      org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationInterface_result(getApplicationInterface_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getApplicationInterface_result deepCopy() {
      return new getApplicationInterface_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription getSuccess() {
      return this.success;
    }

    public getApplicationInterface_result setSuccess(org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getApplicationInterface_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getApplicationInterface_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getApplicationInterface_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationInterface_result)
        return this.equals((getApplicationInterface_result)that);
      return false;
    }

    public boolean equals(getApplicationInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationInterface_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationInterface_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationInterface_resultStandardScheme getScheme() {
        return new getApplicationInterface_resultStandardScheme();
      }
    }

    private static class getApplicationInterface_resultStandardScheme extends StandardScheme<getApplicationInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationInterface_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationInterface_resultTupleScheme getScheme() {
        return new getApplicationInterface_resultTupleScheme();
      }
    }

    private static class getApplicationInterface_resultTupleScheme extends TupleScheme<getApplicationInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class registerAppicationModule_args implements org.apache.thrift.TBase<registerAppicationModule_args, registerAppicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerAppicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerAppicationModule_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_MODULE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationModule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLISH_FIELD_DESC = new org.apache.thrift.protocol.TField("publish", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerAppicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerAppicationModule_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule; // required
    public boolean publish; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_MODULE((short)1, "applicationModule"),
      PUBLISH((short)2, "publish");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_MODULE
            return APPLICATION_MODULE;
          case 2: // PUBLISH
            return PUBLISH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PUBLISH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_MODULE, new org.apache.thrift.meta_data.FieldMetaData("applicationModule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule.class)));
      tmpMap.put(_Fields.PUBLISH, new org.apache.thrift.meta_data.FieldMetaData("publish", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerAppicationModule_args.class, metaDataMap);
    }

    public registerAppicationModule_args() {
    }

    public registerAppicationModule_args(
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule,
      boolean publish)
    {
      this();
      this.applicationModule = applicationModule;
      this.publish = publish;
      setPublishIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerAppicationModule_args(registerAppicationModule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplicationModule()) {
        this.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule(other.applicationModule);
      }
      this.publish = other.publish;
    }

    public registerAppicationModule_args deepCopy() {
      return new registerAppicationModule_args(this);
    }

    @Override
    public void clear() {
      this.applicationModule = null;
      setPublishIsSet(false);
      this.publish = false;
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getApplicationModule() {
      return this.applicationModule;
    }

    public registerAppicationModule_args setApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) {
      this.applicationModule = applicationModule;
      return this;
    }

    public void unsetApplicationModule() {
      this.applicationModule = null;
    }

    /** Returns true if field applicationModule is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationModule() {
      return this.applicationModule != null;
    }

    public void setApplicationModuleIsSet(boolean value) {
      if (!value) {
        this.applicationModule = null;
      }
    }

    public boolean isPublish() {
      return this.publish;
    }

    public registerAppicationModule_args setPublish(boolean publish) {
      this.publish = publish;
      setPublishIsSet(true);
      return this;
    }

    public void unsetPublish() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISH_ISSET_ID);
    }

    /** Returns true if field publish is set (has been assigned a value) and false otherwise */
    public boolean isSetPublish() {
      return EncodingUtils.testBit(__isset_bitfield, __PUBLISH_ISSET_ID);
    }

    public void setPublishIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_MODULE:
        if (value == null) {
          unsetApplicationModule();
        } else {
          setApplicationModule((org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule)value);
        }
        break;

      case PUBLISH:
        if (value == null) {
          unsetPublish();
        } else {
          setPublish((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_MODULE:
        return getApplicationModule();

      case PUBLISH:
        return Boolean.valueOf(isPublish());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_MODULE:
        return isSetApplicationModule();
      case PUBLISH:
        return isSetPublish();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerAppicationModule_args)
        return this.equals((registerAppicationModule_args)that);
      return false;
    }

    public boolean equals(registerAppicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationModule = true && this.isSetApplicationModule();
      boolean that_present_applicationModule = true && that.isSetApplicationModule();
      if (this_present_applicationModule || that_present_applicationModule) {
        if (!(this_present_applicationModule && that_present_applicationModule))
          return false;
        if (!this.applicationModule.equals(that.applicationModule))
          return false;
      }

      boolean this_present_publish = true;
      boolean that_present_publish = true;
      if (this_present_publish || that_present_publish) {
        if (!(this_present_publish && that_present_publish))
          return false;
        if (this.publish != that.publish)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerAppicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationModule()).compareTo(other.isSetApplicationModule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationModule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationModule, other.applicationModule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublish()).compareTo(other.isSetPublish());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublish()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish, other.publish);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerAppicationModule_args(");
      boolean first = true;

      sb.append("applicationModule:");
      if (this.applicationModule == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationModule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publish:");
      sb.append(this.publish);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationModule == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationModule' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationModule != null) {
        applicationModule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerAppicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public registerAppicationModule_argsStandardScheme getScheme() {
        return new registerAppicationModule_argsStandardScheme();
      }
    }

    private static class registerAppicationModule_argsStandardScheme extends StandardScheme<registerAppicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerAppicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_MODULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
                struct.applicationModule.read(iprot);
                struct.setApplicationModuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLISH
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.publish = iprot.readBool();
                struct.setPublishIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerAppicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationModule != null) {
          oprot.writeFieldBegin(APPLICATION_MODULE_FIELD_DESC);
          struct.applicationModule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PUBLISH_FIELD_DESC);
        oprot.writeBool(struct.publish);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerAppicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public registerAppicationModule_argsTupleScheme getScheme() {
        return new registerAppicationModule_argsTupleScheme();
      }
    }

    private static class registerAppicationModule_argsTupleScheme extends TupleScheme<registerAppicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.applicationModule.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetPublish()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPublish()) {
          oprot.writeBool(struct.publish);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
        struct.applicationModule.read(iprot);
        struct.setApplicationModuleIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.publish = iprot.readBool();
          struct.setPublishIsSet(true);
        }
      }
    }

  }

  public static class registerAppicationModule_result implements org.apache.thrift.TBase<registerAppicationModule_result, registerAppicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerAppicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerAppicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerAppicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerAppicationModule_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerAppicationModule_result.class, metaDataMap);
    }

    public registerAppicationModule_result() {
    }

    public registerAppicationModule_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerAppicationModule_result(registerAppicationModule_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public registerAppicationModule_result deepCopy() {
      return new registerAppicationModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerAppicationModule_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public registerAppicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public registerAppicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public registerAppicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerAppicationModule_result)
        return this.equals((registerAppicationModule_result)that);
      return false;
    }

    public boolean equals(registerAppicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerAppicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerAppicationModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerAppicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public registerAppicationModule_resultStandardScheme getScheme() {
        return new registerAppicationModule_resultStandardScheme();
      }
    }

    private static class registerAppicationModule_resultStandardScheme extends StandardScheme<registerAppicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerAppicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerAppicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerAppicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public registerAppicationModule_resultTupleScheme getScheme() {
        return new registerAppicationModule_resultTupleScheme();
      }
    }

    private static class registerAppicationModule_resultTupleScheme extends TupleScheme<registerAppicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getAppicationModule_args implements org.apache.thrift.TBase<getAppicationModule_args, getAppicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAppicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppicationModule_args");

    private static final org.apache.thrift.protocol.TField APP_MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appModuleId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppicationModule_argsTupleSchemeFactory());
    }

    public String appModuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_MODULE_ID((short)1, "appModuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_MODULE_ID
            return APP_MODULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("appModuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppicationModule_args.class, metaDataMap);
    }

    public getAppicationModule_args() {
    }

    public getAppicationModule_args(
      String appModuleId)
    {
      this();
      this.appModuleId = appModuleId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppicationModule_args(getAppicationModule_args other) {
      if (other.isSetAppModuleId()) {
        this.appModuleId = other.appModuleId;
      }
    }

    public getAppicationModule_args deepCopy() {
      return new getAppicationModule_args(this);
    }

    @Override
    public void clear() {
      this.appModuleId = null;
    }

    public String getAppModuleId() {
      return this.appModuleId;
    }

    public getAppicationModule_args setAppModuleId(String appModuleId) {
      this.appModuleId = appModuleId;
      return this;
    }

    public void unsetAppModuleId() {
      this.appModuleId = null;
    }

    /** Returns true if field appModuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppModuleId() {
      return this.appModuleId != null;
    }

    public void setAppModuleIdIsSet(boolean value) {
      if (!value) {
        this.appModuleId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_MODULE_ID:
        if (value == null) {
          unsetAppModuleId();
        } else {
          setAppModuleId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_MODULE_ID:
        return getAppModuleId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_MODULE_ID:
        return isSetAppModuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppicationModule_args)
        return this.equals((getAppicationModule_args)that);
      return false;
    }

    public boolean equals(getAppicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_appModuleId = true && this.isSetAppModuleId();
      boolean that_present_appModuleId = true && that.isSetAppModuleId();
      if (this_present_appModuleId || that_present_appModuleId) {
        if (!(this_present_appModuleId && that_present_appModuleId))
          return false;
        if (!this.appModuleId.equals(that.appModuleId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAppicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppModuleId()).compareTo(other.isSetAppModuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppModuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appModuleId, other.appModuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppicationModule_args(");
      boolean first = true;

      sb.append("appModuleId:");
      if (this.appModuleId == null) {
        sb.append("null");
      } else {
        sb.append(this.appModuleId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appModuleId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appModuleId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public getAppicationModule_argsStandardScheme getScheme() {
        return new getAppicationModule_argsStandardScheme();
      }
    }

    private static class getAppicationModule_argsStandardScheme extends StandardScheme<getAppicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_MODULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appModuleId = iprot.readString();
                struct.setAppModuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appModuleId != null) {
          oprot.writeFieldBegin(APP_MODULE_ID_FIELD_DESC);
          oprot.writeString(struct.appModuleId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public getAppicationModule_argsTupleScheme getScheme() {
        return new getAppicationModule_argsTupleScheme();
      }
    }

    private static class getAppicationModule_argsTupleScheme extends TupleScheme<getAppicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appModuleId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appModuleId = iprot.readString();
        struct.setAppModuleIdIsSet(true);
      }
    }

  }

  public static class getAppicationModule_result implements org.apache.thrift.TBase<getAppicationModule_result, getAppicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAppicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAppicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAppicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAppicationModule_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAppicationModule_result.class, metaDataMap);
    }

    public getAppicationModule_result() {
    }

    public getAppicationModule_result(
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAppicationModule_result(getAppicationModule_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getAppicationModule_result deepCopy() {
      return new getAppicationModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getSuccess() {
      return this.success;
    }

    public getAppicationModule_result setSuccess(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAppicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getAppicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getAppicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAppicationModule_result)
        return this.equals((getAppicationModule_result)that);
      return false;
    }

    public boolean equals(getAppicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAppicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAppicationModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAppicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public getAppicationModule_resultStandardScheme getScheme() {
        return new getAppicationModule_resultStandardScheme();
      }
    }

    private static class getAppicationModule_resultStandardScheme extends StandardScheme<getAppicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAppicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAppicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAppicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public getAppicationModule_resultTupleScheme getScheme() {
        return new getAppicationModule_resultTupleScheme();
      }
    }

    private static class getAppicationModule_resultTupleScheme extends TupleScheme<getAppicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateAppicationModule_args implements org.apache.thrift.TBase<updateAppicationModule_args, updateAppicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppicationModule_args");

    private static final org.apache.thrift.protocol.TField APP_MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appModuleId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_MODULE_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationModule", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppicationModule_argsTupleSchemeFactory());
    }

    public String appModuleId; // required
    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_MODULE_ID((short)1, "appModuleId"),
      APPLICATION_MODULE((short)2, "applicationModule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_MODULE_ID
            return APP_MODULE_ID;
          case 2: // APPLICATION_MODULE
            return APPLICATION_MODULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("appModuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_MODULE, new org.apache.thrift.meta_data.FieldMetaData("applicationModule", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppicationModule_args.class, metaDataMap);
    }

    public updateAppicationModule_args() {
    }

    public updateAppicationModule_args(
      String appModuleId,
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule)
    {
      this();
      this.appModuleId = appModuleId;
      this.applicationModule = applicationModule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppicationModule_args(updateAppicationModule_args other) {
      if (other.isSetAppModuleId()) {
        this.appModuleId = other.appModuleId;
      }
      if (other.isSetApplicationModule()) {
        this.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule(other.applicationModule);
      }
    }

    public updateAppicationModule_args deepCopy() {
      return new updateAppicationModule_args(this);
    }

    @Override
    public void clear() {
      this.appModuleId = null;
      this.applicationModule = null;
    }

    public String getAppModuleId() {
      return this.appModuleId;
    }

    public updateAppicationModule_args setAppModuleId(String appModuleId) {
      this.appModuleId = appModuleId;
      return this;
    }

    public void unsetAppModuleId() {
      this.appModuleId = null;
    }

    /** Returns true if field appModuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppModuleId() {
      return this.appModuleId != null;
    }

    public void setAppModuleIdIsSet(boolean value) {
      if (!value) {
        this.appModuleId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule getApplicationModule() {
      return this.applicationModule;
    }

    public updateAppicationModule_args setApplicationModule(org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule applicationModule) {
      this.applicationModule = applicationModule;
      return this;
    }

    public void unsetApplicationModule() {
      this.applicationModule = null;
    }

    /** Returns true if field applicationModule is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationModule() {
      return this.applicationModule != null;
    }

    public void setApplicationModuleIsSet(boolean value) {
      if (!value) {
        this.applicationModule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_MODULE_ID:
        if (value == null) {
          unsetAppModuleId();
        } else {
          setAppModuleId((String)value);
        }
        break;

      case APPLICATION_MODULE:
        if (value == null) {
          unsetApplicationModule();
        } else {
          setApplicationModule((org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_MODULE_ID:
        return getAppModuleId();

      case APPLICATION_MODULE:
        return getApplicationModule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_MODULE_ID:
        return isSetAppModuleId();
      case APPLICATION_MODULE:
        return isSetApplicationModule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppicationModule_args)
        return this.equals((updateAppicationModule_args)that);
      return false;
    }

    public boolean equals(updateAppicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_appModuleId = true && this.isSetAppModuleId();
      boolean that_present_appModuleId = true && that.isSetAppModuleId();
      if (this_present_appModuleId || that_present_appModuleId) {
        if (!(this_present_appModuleId && that_present_appModuleId))
          return false;
        if (!this.appModuleId.equals(that.appModuleId))
          return false;
      }

      boolean this_present_applicationModule = true && this.isSetApplicationModule();
      boolean that_present_applicationModule = true && that.isSetApplicationModule();
      if (this_present_applicationModule || that_present_applicationModule) {
        if (!(this_present_applicationModule && that_present_applicationModule))
          return false;
        if (!this.applicationModule.equals(that.applicationModule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppModuleId()).compareTo(other.isSetAppModuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppModuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appModuleId, other.appModuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationModule()).compareTo(other.isSetApplicationModule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationModule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationModule, other.applicationModule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppicationModule_args(");
      boolean first = true;

      sb.append("appModuleId:");
      if (this.appModuleId == null) {
        sb.append("null");
      } else {
        sb.append(this.appModuleId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationModule:");
      if (this.applicationModule == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationModule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appModuleId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appModuleId' was not present! Struct: " + toString());
      }
      if (applicationModule == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationModule' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationModule != null) {
        applicationModule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public updateAppicationModule_argsStandardScheme getScheme() {
        return new updateAppicationModule_argsStandardScheme();
      }
    }

    private static class updateAppicationModule_argsStandardScheme extends StandardScheme<updateAppicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_MODULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appModuleId = iprot.readString();
                struct.setAppModuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_MODULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
                struct.applicationModule.read(iprot);
                struct.setApplicationModuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appModuleId != null) {
          oprot.writeFieldBegin(APP_MODULE_ID_FIELD_DESC);
          oprot.writeString(struct.appModuleId);
          oprot.writeFieldEnd();
        }
        if (struct.applicationModule != null) {
          oprot.writeFieldBegin(APPLICATION_MODULE_FIELD_DESC);
          struct.applicationModule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public updateAppicationModule_argsTupleScheme getScheme() {
        return new updateAppicationModule_argsTupleScheme();
      }
    }

    private static class updateAppicationModule_argsTupleScheme extends TupleScheme<updateAppicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appModuleId);
        struct.applicationModule.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appModuleId = iprot.readString();
        struct.setAppModuleIdIsSet(true);
        struct.applicationModule = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule();
        struct.applicationModule.read(iprot);
        struct.setApplicationModuleIsSet(true);
      }
    }

  }

  public static class updateAppicationModule_result implements org.apache.thrift.TBase<updateAppicationModule_result, updateAppicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppicationModule_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppicationModule_result.class, metaDataMap);
    }

    public updateAppicationModule_result() {
    }

    public updateAppicationModule_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppicationModule_result(updateAppicationModule_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public updateAppicationModule_result deepCopy() {
      return new updateAppicationModule_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateAppicationModule_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateAppicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public updateAppicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public updateAppicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppicationModule_result)
        return this.equals((updateAppicationModule_result)that);
      return false;
    }

    public boolean equals(updateAppicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppicationModule_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public updateAppicationModule_resultStandardScheme getScheme() {
        return new updateAppicationModule_resultStandardScheme();
      }
    }

    private static class updateAppicationModule_resultStandardScheme extends StandardScheme<updateAppicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public updateAppicationModule_resultTupleScheme getScheme() {
        return new updateAppicationModule_resultTupleScheme();
      }
    }

    private static class updateAppicationModule_resultTupleScheme extends TupleScheme<updateAppicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deleteAppicationModule_args implements org.apache.thrift.TBase<deleteAppicationModule_args, deleteAppicationModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAppicationModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAppicationModule_args");

    private static final org.apache.thrift.protocol.TField APP_MODULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appModuleId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAppicationModule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAppicationModule_argsTupleSchemeFactory());
    }

    public String appModuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_MODULE_ID((short)1, "appModuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_MODULE_ID
            return APP_MODULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_MODULE_ID, new org.apache.thrift.meta_data.FieldMetaData("appModuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAppicationModule_args.class, metaDataMap);
    }

    public deleteAppicationModule_args() {
    }

    public deleteAppicationModule_args(
      String appModuleId)
    {
      this();
      this.appModuleId = appModuleId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAppicationModule_args(deleteAppicationModule_args other) {
      if (other.isSetAppModuleId()) {
        this.appModuleId = other.appModuleId;
      }
    }

    public deleteAppicationModule_args deepCopy() {
      return new deleteAppicationModule_args(this);
    }

    @Override
    public void clear() {
      this.appModuleId = null;
    }

    public String getAppModuleId() {
      return this.appModuleId;
    }

    public deleteAppicationModule_args setAppModuleId(String appModuleId) {
      this.appModuleId = appModuleId;
      return this;
    }

    public void unsetAppModuleId() {
      this.appModuleId = null;
    }

    /** Returns true if field appModuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppModuleId() {
      return this.appModuleId != null;
    }

    public void setAppModuleIdIsSet(boolean value) {
      if (!value) {
        this.appModuleId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_MODULE_ID:
        if (value == null) {
          unsetAppModuleId();
        } else {
          setAppModuleId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_MODULE_ID:
        return getAppModuleId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_MODULE_ID:
        return isSetAppModuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAppicationModule_args)
        return this.equals((deleteAppicationModule_args)that);
      return false;
    }

    public boolean equals(deleteAppicationModule_args that) {
      if (that == null)
        return false;

      boolean this_present_appModuleId = true && this.isSetAppModuleId();
      boolean that_present_appModuleId = true && that.isSetAppModuleId();
      if (this_present_appModuleId || that_present_appModuleId) {
        if (!(this_present_appModuleId && that_present_appModuleId))
          return false;
        if (!this.appModuleId.equals(that.appModuleId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteAppicationModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppModuleId()).compareTo(other.isSetAppModuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppModuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appModuleId, other.appModuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAppicationModule_args(");
      boolean first = true;

      sb.append("appModuleId:");
      if (this.appModuleId == null) {
        sb.append("null");
      } else {
        sb.append(this.appModuleId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appModuleId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appModuleId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAppicationModule_argsStandardSchemeFactory implements SchemeFactory {
      public deleteAppicationModule_argsStandardScheme getScheme() {
        return new deleteAppicationModule_argsStandardScheme();
      }
    }

    private static class deleteAppicationModule_argsStandardScheme extends StandardScheme<deleteAppicationModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAppicationModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_MODULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appModuleId = iprot.readString();
                struct.setAppModuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAppicationModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appModuleId != null) {
          oprot.writeFieldBegin(APP_MODULE_ID_FIELD_DESC);
          oprot.writeString(struct.appModuleId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAppicationModule_argsTupleSchemeFactory implements SchemeFactory {
      public deleteAppicationModule_argsTupleScheme getScheme() {
        return new deleteAppicationModule_argsTupleScheme();
      }
    }

    private static class deleteAppicationModule_argsTupleScheme extends TupleScheme<deleteAppicationModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.appModuleId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAppicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appModuleId = iprot.readString();
        struct.setAppModuleIdIsSet(true);
      }
    }

  }

  public static class deleteAppicationModule_result implements org.apache.thrift.TBase<deleteAppicationModule_result, deleteAppicationModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAppicationModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAppicationModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAppicationModule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAppicationModule_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAppicationModule_result.class, metaDataMap);
    }

    public deleteAppicationModule_result() {
    }

    public deleteAppicationModule_result(
      boolean success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAppicationModule_result(deleteAppicationModule_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public deleteAppicationModule_result deepCopy() {
      return new deleteAppicationModule_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteAppicationModule_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deleteAppicationModule_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public deleteAppicationModule_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public deleteAppicationModule_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAppicationModule_result)
        return this.equals((deleteAppicationModule_result)that);
      return false;
    }

    public boolean equals(deleteAppicationModule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteAppicationModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAppicationModule_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAppicationModule_resultStandardSchemeFactory implements SchemeFactory {
      public deleteAppicationModule_resultStandardScheme getScheme() {
        return new deleteAppicationModule_resultStandardScheme();
      }
    }

    private static class deleteAppicationModule_resultStandardScheme extends StandardScheme<deleteAppicationModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAppicationModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAppicationModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAppicationModule_resultTupleSchemeFactory implements SchemeFactory {
      public deleteAppicationModule_resultTupleScheme getScheme() {
        return new deleteAppicationModule_resultTupleScheme();
      }
    }

    private static class deleteAppicationModule_resultTupleScheme extends TupleScheme<deleteAppicationModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAppicationModule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class addApplicationDeployment_args implements org.apache.thrift.TBase<addApplicationDeployment_args, addApplicationDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addApplicationDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplicationDeployment_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_DEPLOYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDeployment", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplicationDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplicationDeployment_argsTupleSchemeFactory());
    }

    public String applicationInterfaceId; // required
    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_INTERFACE_ID((short)1, "applicationInterfaceId"),
      APPLICATION_DEPLOYMENT((short)2, "applicationDeployment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_INTERFACE_ID
            return APPLICATION_INTERFACE_ID;
          case 2: // APPLICATION_DEPLOYMENT
            return APPLICATION_DEPLOYMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_DEPLOYMENT, new org.apache.thrift.meta_data.FieldMetaData("applicationDeployment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplicationDeployment_args.class, metaDataMap);
    }

    public addApplicationDeployment_args() {
    }

    public addApplicationDeployment_args(
      String applicationInterfaceId,
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment)
    {
      this();
      this.applicationInterfaceId = applicationInterfaceId;
      this.applicationDeployment = applicationDeployment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplicationDeployment_args(addApplicationDeployment_args other) {
      if (other.isSetApplicationInterfaceId()) {
        this.applicationInterfaceId = other.applicationInterfaceId;
      }
      if (other.isSetApplicationDeployment()) {
        this.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription(other.applicationDeployment);
      }
    }

    public addApplicationDeployment_args deepCopy() {
      return new addApplicationDeployment_args(this);
    }

    @Override
    public void clear() {
      this.applicationInterfaceId = null;
      this.applicationDeployment = null;
    }

    public String getApplicationInterfaceId() {
      return this.applicationInterfaceId;
    }

    public addApplicationDeployment_args setApplicationInterfaceId(String applicationInterfaceId) {
      this.applicationInterfaceId = applicationInterfaceId;
      return this;
    }

    public void unsetApplicationInterfaceId() {
      this.applicationInterfaceId = null;
    }

    /** Returns true if field applicationInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInterfaceId() {
      return this.applicationInterfaceId != null;
    }

    public void setApplicationInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.applicationInterfaceId = null;
      }
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getApplicationDeployment() {
      return this.applicationDeployment;
    }

    public addApplicationDeployment_args setApplicationDeployment(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription applicationDeployment) {
      this.applicationDeployment = applicationDeployment;
      return this;
    }

    public void unsetApplicationDeployment() {
      this.applicationDeployment = null;
    }

    /** Returns true if field applicationDeployment is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationDeployment() {
      return this.applicationDeployment != null;
    }

    public void setApplicationDeploymentIsSet(boolean value) {
      if (!value) {
        this.applicationDeployment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        if (value == null) {
          unsetApplicationInterfaceId();
        } else {
          setApplicationInterfaceId((String)value);
        }
        break;

      case APPLICATION_DEPLOYMENT:
        if (value == null) {
          unsetApplicationDeployment();
        } else {
          setApplicationDeployment((org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return getApplicationInterfaceId();

      case APPLICATION_DEPLOYMENT:
        return getApplicationDeployment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return isSetApplicationInterfaceId();
      case APPLICATION_DEPLOYMENT:
        return isSetApplicationDeployment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplicationDeployment_args)
        return this.equals((addApplicationDeployment_args)that);
      return false;
    }

    public boolean equals(addApplicationDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationInterfaceId = true && this.isSetApplicationInterfaceId();
      boolean that_present_applicationInterfaceId = true && that.isSetApplicationInterfaceId();
      if (this_present_applicationInterfaceId || that_present_applicationInterfaceId) {
        if (!(this_present_applicationInterfaceId && that_present_applicationInterfaceId))
          return false;
        if (!this.applicationInterfaceId.equals(that.applicationInterfaceId))
          return false;
      }

      boolean this_present_applicationDeployment = true && this.isSetApplicationDeployment();
      boolean that_present_applicationDeployment = true && that.isSetApplicationDeployment();
      if (this_present_applicationDeployment || that_present_applicationDeployment) {
        if (!(this_present_applicationDeployment && that_present_applicationDeployment))
          return false;
        if (!this.applicationDeployment.equals(that.applicationDeployment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addApplicationDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationInterfaceId()).compareTo(other.isSetApplicationInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterfaceId, other.applicationInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationDeployment()).compareTo(other.isSetApplicationDeployment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationDeployment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDeployment, other.applicationDeployment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplicationDeployment_args(");
      boolean first = true;

      sb.append("applicationInterfaceId:");
      if (this.applicationInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationDeployment:");
      if (this.applicationDeployment == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationDeployment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterfaceId' was not present! Struct: " + toString());
      }
      if (applicationDeployment == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationDeployment' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (applicationDeployment != null) {
        applicationDeployment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplicationDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public addApplicationDeployment_argsStandardScheme getScheme() {
        return new addApplicationDeployment_argsStandardScheme();
      }
    }

    private static class addApplicationDeployment_argsStandardScheme extends StandardScheme<addApplicationDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplicationDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationInterfaceId = iprot.readString();
                struct.setApplicationInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_DEPLOYMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
                struct.applicationDeployment.read(iprot);
                struct.setApplicationDeploymentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplicationDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationInterfaceId != null) {
          oprot.writeFieldBegin(APPLICATION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.applicationInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.applicationDeployment != null) {
          oprot.writeFieldBegin(APPLICATION_DEPLOYMENT_FIELD_DESC);
          struct.applicationDeployment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplicationDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public addApplicationDeployment_argsTupleScheme getScheme() {
        return new addApplicationDeployment_argsTupleScheme();
      }
    }

    private static class addApplicationDeployment_argsTupleScheme extends TupleScheme<addApplicationDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.applicationInterfaceId);
        struct.applicationDeployment.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationInterfaceId = iprot.readString();
        struct.setApplicationInterfaceIdIsSet(true);
        struct.applicationDeployment = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
        struct.applicationDeployment.read(iprot);
        struct.setApplicationDeploymentIsSet(true);
      }
    }

  }

  public static class addApplicationDeployment_result implements org.apache.thrift.TBase<addApplicationDeployment_result, addApplicationDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addApplicationDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplicationDeployment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplicationDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplicationDeployment_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplicationDeployment_result.class, metaDataMap);
    }

    public addApplicationDeployment_result() {
    }

    public addApplicationDeployment_result(
      String success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplicationDeployment_result(addApplicationDeployment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public addApplicationDeployment_result deepCopy() {
      return new addApplicationDeployment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addApplicationDeployment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addApplicationDeployment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public addApplicationDeployment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public addApplicationDeployment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplicationDeployment_result)
        return this.equals((addApplicationDeployment_result)that);
      return false;
    }

    public boolean equals(addApplicationDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addApplicationDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplicationDeployment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplicationDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public addApplicationDeployment_resultStandardScheme getScheme() {
        return new addApplicationDeployment_resultStandardScheme();
      }
    }

    private static class addApplicationDeployment_resultStandardScheme extends StandardScheme<addApplicationDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplicationDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplicationDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplicationDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public addApplicationDeployment_resultTupleScheme getScheme() {
        return new addApplicationDeployment_resultTupleScheme();
      }
    }

    private static class addApplicationDeployment_resultTupleScheme extends TupleScheme<addApplicationDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class listApplicationDeploymentIds_args implements org.apache.thrift.TBase<listApplicationDeploymentIds_args, listApplicationDeploymentIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<listApplicationDeploymentIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listApplicationDeploymentIds_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listApplicationDeploymentIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listApplicationDeploymentIds_argsTupleSchemeFactory());
    }

    public String applicationInterfaceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_INTERFACE_ID((short)1, "applicationInterfaceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_INTERFACE_ID
            return APPLICATION_INTERFACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listApplicationDeploymentIds_args.class, metaDataMap);
    }

    public listApplicationDeploymentIds_args() {
    }

    public listApplicationDeploymentIds_args(
      String applicationInterfaceId)
    {
      this();
      this.applicationInterfaceId = applicationInterfaceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listApplicationDeploymentIds_args(listApplicationDeploymentIds_args other) {
      if (other.isSetApplicationInterfaceId()) {
        this.applicationInterfaceId = other.applicationInterfaceId;
      }
    }

    public listApplicationDeploymentIds_args deepCopy() {
      return new listApplicationDeploymentIds_args(this);
    }

    @Override
    public void clear() {
      this.applicationInterfaceId = null;
    }

    public String getApplicationInterfaceId() {
      return this.applicationInterfaceId;
    }

    public listApplicationDeploymentIds_args setApplicationInterfaceId(String applicationInterfaceId) {
      this.applicationInterfaceId = applicationInterfaceId;
      return this;
    }

    public void unsetApplicationInterfaceId() {
      this.applicationInterfaceId = null;
    }

    /** Returns true if field applicationInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInterfaceId() {
      return this.applicationInterfaceId != null;
    }

    public void setApplicationInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.applicationInterfaceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        if (value == null) {
          unsetApplicationInterfaceId();
        } else {
          setApplicationInterfaceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return getApplicationInterfaceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return isSetApplicationInterfaceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listApplicationDeploymentIds_args)
        return this.equals((listApplicationDeploymentIds_args)that);
      return false;
    }

    public boolean equals(listApplicationDeploymentIds_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationInterfaceId = true && this.isSetApplicationInterfaceId();
      boolean that_present_applicationInterfaceId = true && that.isSetApplicationInterfaceId();
      if (this_present_applicationInterfaceId || that_present_applicationInterfaceId) {
        if (!(this_present_applicationInterfaceId && that_present_applicationInterfaceId))
          return false;
        if (!this.applicationInterfaceId.equals(that.applicationInterfaceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listApplicationDeploymentIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationInterfaceId()).compareTo(other.isSetApplicationInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterfaceId, other.applicationInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listApplicationDeploymentIds_args(");
      boolean first = true;

      sb.append("applicationInterfaceId:");
      if (this.applicationInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInterfaceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterfaceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listApplicationDeploymentIds_argsStandardSchemeFactory implements SchemeFactory {
      public listApplicationDeploymentIds_argsStandardScheme getScheme() {
        return new listApplicationDeploymentIds_argsStandardScheme();
      }
    }

    private static class listApplicationDeploymentIds_argsStandardScheme extends StandardScheme<listApplicationDeploymentIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listApplicationDeploymentIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationInterfaceId = iprot.readString();
                struct.setApplicationInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listApplicationDeploymentIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationInterfaceId != null) {
          oprot.writeFieldBegin(APPLICATION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.applicationInterfaceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listApplicationDeploymentIds_argsTupleSchemeFactory implements SchemeFactory {
      public listApplicationDeploymentIds_argsTupleScheme getScheme() {
        return new listApplicationDeploymentIds_argsTupleScheme();
      }
    }

    private static class listApplicationDeploymentIds_argsTupleScheme extends TupleScheme<listApplicationDeploymentIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listApplicationDeploymentIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.applicationInterfaceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listApplicationDeploymentIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationInterfaceId = iprot.readString();
        struct.setApplicationInterfaceIdIsSet(true);
      }
    }

  }

  public static class listApplicationDeploymentIds_result implements org.apache.thrift.TBase<listApplicationDeploymentIds_result, listApplicationDeploymentIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<listApplicationDeploymentIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listApplicationDeploymentIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listApplicationDeploymentIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listApplicationDeploymentIds_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listApplicationDeploymentIds_result.class, metaDataMap);
    }

    public listApplicationDeploymentIds_result() {
    }

    public listApplicationDeploymentIds_result(
      List<String> success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listApplicationDeploymentIds_result(listApplicationDeploymentIds_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public listApplicationDeploymentIds_result deepCopy() {
      return new listApplicationDeploymentIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listApplicationDeploymentIds_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public listApplicationDeploymentIds_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public listApplicationDeploymentIds_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public listApplicationDeploymentIds_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listApplicationDeploymentIds_result)
        return this.equals((listApplicationDeploymentIds_result)that);
      return false;
    }

    public boolean equals(listApplicationDeploymentIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listApplicationDeploymentIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listApplicationDeploymentIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listApplicationDeploymentIds_resultStandardSchemeFactory implements SchemeFactory {
      public listApplicationDeploymentIds_resultStandardScheme getScheme() {
        return new listApplicationDeploymentIds_resultStandardScheme();
      }
    }

    private static class listApplicationDeploymentIds_resultStandardScheme extends StandardScheme<listApplicationDeploymentIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listApplicationDeploymentIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18;
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listApplicationDeploymentIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listApplicationDeploymentIds_resultTupleSchemeFactory implements SchemeFactory {
      public listApplicationDeploymentIds_resultTupleScheme getScheme() {
        return new listApplicationDeploymentIds_resultTupleScheme();
      }
    }

    private static class listApplicationDeploymentIds_resultTupleScheme extends TupleScheme<listApplicationDeploymentIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listApplicationDeploymentIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listApplicationDeploymentIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23;
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getApplicationDeployment_args implements org.apache.thrift.TBase<getApplicationDeployment_args, getApplicationDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationDeployment_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_DEPLOYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDeploymentId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationDeployment_argsTupleSchemeFactory());
    }

    public String applicationInterfaceId; // required
    public String applicationDeploymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_INTERFACE_ID((short)1, "applicationInterfaceId"),
      APPLICATION_DEPLOYMENT_ID((short)2, "applicationDeploymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_INTERFACE_ID
            return APPLICATION_INTERFACE_ID;
          case 2: // APPLICATION_DEPLOYMENT_ID
            return APPLICATION_DEPLOYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_DEPLOYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationDeploymentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationDeployment_args.class, metaDataMap);
    }

    public getApplicationDeployment_args() {
    }

    public getApplicationDeployment_args(
      String applicationInterfaceId,
      String applicationDeploymentId)
    {
      this();
      this.applicationInterfaceId = applicationInterfaceId;
      this.applicationDeploymentId = applicationDeploymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationDeployment_args(getApplicationDeployment_args other) {
      if (other.isSetApplicationInterfaceId()) {
        this.applicationInterfaceId = other.applicationInterfaceId;
      }
      if (other.isSetApplicationDeploymentId()) {
        this.applicationDeploymentId = other.applicationDeploymentId;
      }
    }

    public getApplicationDeployment_args deepCopy() {
      return new getApplicationDeployment_args(this);
    }

    @Override
    public void clear() {
      this.applicationInterfaceId = null;
      this.applicationDeploymentId = null;
    }

    public String getApplicationInterfaceId() {
      return this.applicationInterfaceId;
    }

    public getApplicationDeployment_args setApplicationInterfaceId(String applicationInterfaceId) {
      this.applicationInterfaceId = applicationInterfaceId;
      return this;
    }

    public void unsetApplicationInterfaceId() {
      this.applicationInterfaceId = null;
    }

    /** Returns true if field applicationInterfaceId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInterfaceId() {
      return this.applicationInterfaceId != null;
    }

    public void setApplicationInterfaceIdIsSet(boolean value) {
      if (!value) {
        this.applicationInterfaceId = null;
      }
    }

    public String getApplicationDeploymentId() {
      return this.applicationDeploymentId;
    }

    public getApplicationDeployment_args setApplicationDeploymentId(String applicationDeploymentId) {
      this.applicationDeploymentId = applicationDeploymentId;
      return this;
    }

    public void unsetApplicationDeploymentId() {
      this.applicationDeploymentId = null;
    }

    /** Returns true if field applicationDeploymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationDeploymentId() {
      return this.applicationDeploymentId != null;
    }

    public void setApplicationDeploymentIdIsSet(boolean value) {
      if (!value) {
        this.applicationDeploymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        if (value == null) {
          unsetApplicationInterfaceId();
        } else {
          setApplicationInterfaceId((String)value);
        }
        break;

      case APPLICATION_DEPLOYMENT_ID:
        if (value == null) {
          unsetApplicationDeploymentId();
        } else {
          setApplicationDeploymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return getApplicationInterfaceId();

      case APPLICATION_DEPLOYMENT_ID:
        return getApplicationDeploymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_INTERFACE_ID:
        return isSetApplicationInterfaceId();
      case APPLICATION_DEPLOYMENT_ID:
        return isSetApplicationDeploymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationDeployment_args)
        return this.equals((getApplicationDeployment_args)that);
      return false;
    }

    public boolean equals(getApplicationDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationInterfaceId = true && this.isSetApplicationInterfaceId();
      boolean that_present_applicationInterfaceId = true && that.isSetApplicationInterfaceId();
      if (this_present_applicationInterfaceId || that_present_applicationInterfaceId) {
        if (!(this_present_applicationInterfaceId && that_present_applicationInterfaceId))
          return false;
        if (!this.applicationInterfaceId.equals(that.applicationInterfaceId))
          return false;
      }

      boolean this_present_applicationDeploymentId = true && this.isSetApplicationDeploymentId();
      boolean that_present_applicationDeploymentId = true && that.isSetApplicationDeploymentId();
      if (this_present_applicationDeploymentId || that_present_applicationDeploymentId) {
        if (!(this_present_applicationDeploymentId && that_present_applicationDeploymentId))
          return false;
        if (!this.applicationDeploymentId.equals(that.applicationDeploymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationInterfaceId()).compareTo(other.isSetApplicationInterfaceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInterfaceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterfaceId, other.applicationInterfaceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationDeploymentId()).compareTo(other.isSetApplicationDeploymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationDeploymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDeploymentId, other.applicationDeploymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationDeployment_args(");
      boolean first = true;

      sb.append("applicationInterfaceId:");
      if (this.applicationInterfaceId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInterfaceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationDeploymentId:");
      if (this.applicationDeploymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationDeploymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (applicationInterfaceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterfaceId' was not present! Struct: " + toString());
      }
      if (applicationDeploymentId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationDeploymentId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_argsStandardScheme getScheme() {
        return new getApplicationDeployment_argsStandardScheme();
      }
    }

    private static class getApplicationDeployment_argsStandardScheme extends StandardScheme<getApplicationDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_INTERFACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationInterfaceId = iprot.readString();
                struct.setApplicationInterfaceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_DEPLOYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationDeploymentId = iprot.readString();
                struct.setApplicationDeploymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationInterfaceId != null) {
          oprot.writeFieldBegin(APPLICATION_INTERFACE_ID_FIELD_DESC);
          oprot.writeString(struct.applicationInterfaceId);
          oprot.writeFieldEnd();
        }
        if (struct.applicationDeploymentId != null) {
          oprot.writeFieldBegin(APPLICATION_DEPLOYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.applicationDeploymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_argsTupleScheme getScheme() {
        return new getApplicationDeployment_argsTupleScheme();
      }
    }

    private static class getApplicationDeployment_argsTupleScheme extends TupleScheme<getApplicationDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.applicationInterfaceId);
        oprot.writeString(struct.applicationDeploymentId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.applicationInterfaceId = iprot.readString();
        struct.setApplicationInterfaceIdIsSet(true);
        struct.applicationDeploymentId = iprot.readString();
        struct.setApplicationDeploymentIdIsSet(true);
      }
    }

  }

  public static class getApplicationDeployment_result implements org.apache.thrift.TBase<getApplicationDeployment_result, getApplicationDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationDeployment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationDeployment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription success; // required
    public org.apache.airavata.model.error.InvalidRequestException ire; // required
    public org.apache.airavata.model.error.AiravataClientException ace; // required
    public org.apache.airavata.model.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationDeployment_result.class, metaDataMap);
    }

    public getApplicationDeployment_result() {
    }

    public getApplicationDeployment_result(
      org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription success,
      org.apache.airavata.model.error.InvalidRequestException ire,
      org.apache.airavata.model.error.AiravataClientException ace,
      org.apache.airavata.model.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationDeployment_result(getApplicationDeployment_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.model.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.model.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.model.error.AiravataSystemException(other.ase);
      }
    }

    public getApplicationDeployment_result deepCopy() {
      return new getApplicationDeployment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription getSuccess() {
      return this.success;
    }

    public getApplicationDeployment_result setSuccess(org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.model.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getApplicationDeployment_result setIre(org.apache.airavata.model.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.model.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getApplicationDeployment_result setAce(org.apache.airavata.model.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.model.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getApplicationDeployment_result setAse(org.apache.airavata.model.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationDeployment_result)
        return this.equals((getApplicationDeployment_result)that);
      return false;
    }

    public boolean equals(getApplicationDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationDeployment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_resultStandardScheme getScheme() {
        return new getApplicationDeployment_resultStandardScheme();
      }
    }

    private static class getApplicationDeployment_resultStandardScheme extends StandardScheme<getApplicationDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.model.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationDeployment_resultTupleScheme getScheme() {
        return new getApplicationDeployment_resultTupleScheme();
      }
    }

    private static class getApplicationDeployment_resultTupleScheme extends TupleScheme<getApplicationDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.model.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.model.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.model.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

}
