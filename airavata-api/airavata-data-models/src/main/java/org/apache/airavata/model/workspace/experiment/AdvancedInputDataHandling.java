    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.workspace.experiment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A structure holding specified input data handling.
 * 
 */
@SuppressWarnings("all") public class AdvancedInputDataHandling implements org.apache.thrift.TBase<AdvancedInputDataHandling, AdvancedInputDataHandling._Fields>, java.io.Serializable, Cloneable, Comparable<AdvancedInputDataHandling> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdvancedInputDataHandling");

  private static final org.apache.thrift.protocol.TField STAGE_INPUT_FILES_TO_WORKING_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("stageInputFilesToWorkingDir", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_WORKING_DIRECTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("parentWorkingDirectory", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UNIQUE_WORKING_DIRECTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueWorkingDirectory", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLEAN_UP_WORKING_DIR_AFTER_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("cleanUpWorkingDirAfterJob", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdvancedInputDataHandlingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdvancedInputDataHandlingTupleSchemeFactory());
  }

  private boolean stageInputFilesToWorkingDir; // optional
  private String parentWorkingDirectory; // optional
  private String uniqueWorkingDirectory; // optional
  private boolean cleanUpWorkingDirAfterJob; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STAGE_INPUT_FILES_TO_WORKING_DIR((short)1, "stageInputFilesToWorkingDir"),
    PARENT_WORKING_DIRECTORY((short)2, "parentWorkingDirectory"),
    UNIQUE_WORKING_DIRECTORY((short)3, "uniqueWorkingDirectory"),
    CLEAN_UP_WORKING_DIR_AFTER_JOB((short)4, "cleanUpWorkingDirAfterJob");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAGE_INPUT_FILES_TO_WORKING_DIR
          return STAGE_INPUT_FILES_TO_WORKING_DIR;
        case 2: // PARENT_WORKING_DIRECTORY
          return PARENT_WORKING_DIRECTORY;
        case 3: // UNIQUE_WORKING_DIRECTORY
          return UNIQUE_WORKING_DIRECTORY;
        case 4: // CLEAN_UP_WORKING_DIR_AFTER_JOB
          return CLEAN_UP_WORKING_DIR_AFTER_JOB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STAGEINPUTFILESTOWORKINGDIR_ISSET_ID = 0;
  private static final int __CLEANUPWORKINGDIRAFTERJOB_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STAGE_INPUT_FILES_TO_WORKING_DIR,_Fields.PARENT_WORKING_DIRECTORY,_Fields.UNIQUE_WORKING_DIRECTORY,_Fields.CLEAN_UP_WORKING_DIR_AFTER_JOB};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAGE_INPUT_FILES_TO_WORKING_DIR, new org.apache.thrift.meta_data.FieldMetaData("stageInputFilesToWorkingDir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARENT_WORKING_DIRECTORY, new org.apache.thrift.meta_data.FieldMetaData("parentWorkingDirectory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIQUE_WORKING_DIRECTORY, new org.apache.thrift.meta_data.FieldMetaData("uniqueWorkingDirectory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLEAN_UP_WORKING_DIR_AFTER_JOB, new org.apache.thrift.meta_data.FieldMetaData("cleanUpWorkingDirAfterJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdvancedInputDataHandling.class, metaDataMap);
  }

  public AdvancedInputDataHandling() {
    this.stageInputFilesToWorkingDir = false;

    this.cleanUpWorkingDirAfterJob = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdvancedInputDataHandling(AdvancedInputDataHandling other) {
    __isset_bitfield = other.__isset_bitfield;
    this.stageInputFilesToWorkingDir = other.stageInputFilesToWorkingDir;
    if (other.isSetParentWorkingDirectory()) {
      this.parentWorkingDirectory = other.parentWorkingDirectory;
    }
    if (other.isSetUniqueWorkingDirectory()) {
      this.uniqueWorkingDirectory = other.uniqueWorkingDirectory;
    }
    this.cleanUpWorkingDirAfterJob = other.cleanUpWorkingDirAfterJob;
  }

  public AdvancedInputDataHandling deepCopy() {
    return new AdvancedInputDataHandling(this);
  }

  @Override
  public void clear() {
    this.stageInputFilesToWorkingDir = false;

    this.parentWorkingDirectory = null;
    this.uniqueWorkingDirectory = null;
    this.cleanUpWorkingDirAfterJob = false;

  }

  public boolean isStageInputFilesToWorkingDir() {
    return this.stageInputFilesToWorkingDir;
  }

  public void setStageInputFilesToWorkingDir(boolean stageInputFilesToWorkingDir) {
    this.stageInputFilesToWorkingDir = stageInputFilesToWorkingDir;
    setStageInputFilesToWorkingDirIsSet(true);
  }

  public void unsetStageInputFilesToWorkingDir() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAGEINPUTFILESTOWORKINGDIR_ISSET_ID);
  }

  /** Returns true if field stageInputFilesToWorkingDir is set (has been assigned a value) and false otherwise */
  public boolean isSetStageInputFilesToWorkingDir() {
    return EncodingUtils.testBit(__isset_bitfield, __STAGEINPUTFILESTOWORKINGDIR_ISSET_ID);
  }

  public void setStageInputFilesToWorkingDirIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAGEINPUTFILESTOWORKINGDIR_ISSET_ID, value);
  }

  public String getParentWorkingDirectory() {
    return this.parentWorkingDirectory;
  }

  public void setParentWorkingDirectory(String parentWorkingDirectory) {
    this.parentWorkingDirectory = parentWorkingDirectory;
  }

  public void unsetParentWorkingDirectory() {
    this.parentWorkingDirectory = null;
  }

  /** Returns true if field parentWorkingDirectory is set (has been assigned a value) and false otherwise */
  public boolean isSetParentWorkingDirectory() {
    return this.parentWorkingDirectory != null;
  }

  public void setParentWorkingDirectoryIsSet(boolean value) {
    if (!value) {
      this.parentWorkingDirectory = null;
    }
  }

  public String getUniqueWorkingDirectory() {
    return this.uniqueWorkingDirectory;
  }

  public void setUniqueWorkingDirectory(String uniqueWorkingDirectory) {
    this.uniqueWorkingDirectory = uniqueWorkingDirectory;
  }

  public void unsetUniqueWorkingDirectory() {
    this.uniqueWorkingDirectory = null;
  }

  /** Returns true if field uniqueWorkingDirectory is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueWorkingDirectory() {
    return this.uniqueWorkingDirectory != null;
  }

  public void setUniqueWorkingDirectoryIsSet(boolean value) {
    if (!value) {
      this.uniqueWorkingDirectory = null;
    }
  }

  public boolean isCleanUpWorkingDirAfterJob() {
    return this.cleanUpWorkingDirAfterJob;
  }

  public void setCleanUpWorkingDirAfterJob(boolean cleanUpWorkingDirAfterJob) {
    this.cleanUpWorkingDirAfterJob = cleanUpWorkingDirAfterJob;
    setCleanUpWorkingDirAfterJobIsSet(true);
  }

  public void unsetCleanUpWorkingDirAfterJob() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEANUPWORKINGDIRAFTERJOB_ISSET_ID);
  }

  /** Returns true if field cleanUpWorkingDirAfterJob is set (has been assigned a value) and false otherwise */
  public boolean isSetCleanUpWorkingDirAfterJob() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEANUPWORKINGDIRAFTERJOB_ISSET_ID);
  }

  public void setCleanUpWorkingDirAfterJobIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEANUPWORKINGDIRAFTERJOB_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STAGE_INPUT_FILES_TO_WORKING_DIR:
      if (value == null) {
        unsetStageInputFilesToWorkingDir();
      } else {
        setStageInputFilesToWorkingDir((Boolean)value);
      }
      break;

    case PARENT_WORKING_DIRECTORY:
      if (value == null) {
        unsetParentWorkingDirectory();
      } else {
        setParentWorkingDirectory((String)value);
      }
      break;

    case UNIQUE_WORKING_DIRECTORY:
      if (value == null) {
        unsetUniqueWorkingDirectory();
      } else {
        setUniqueWorkingDirectory((String)value);
      }
      break;

    case CLEAN_UP_WORKING_DIR_AFTER_JOB:
      if (value == null) {
        unsetCleanUpWorkingDirAfterJob();
      } else {
        setCleanUpWorkingDirAfterJob((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STAGE_INPUT_FILES_TO_WORKING_DIR:
      return Boolean.valueOf(isStageInputFilesToWorkingDir());

    case PARENT_WORKING_DIRECTORY:
      return getParentWorkingDirectory();

    case UNIQUE_WORKING_DIRECTORY:
      return getUniqueWorkingDirectory();

    case CLEAN_UP_WORKING_DIR_AFTER_JOB:
      return Boolean.valueOf(isCleanUpWorkingDirAfterJob());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STAGE_INPUT_FILES_TO_WORKING_DIR:
      return isSetStageInputFilesToWorkingDir();
    case PARENT_WORKING_DIRECTORY:
      return isSetParentWorkingDirectory();
    case UNIQUE_WORKING_DIRECTORY:
      return isSetUniqueWorkingDirectory();
    case CLEAN_UP_WORKING_DIR_AFTER_JOB:
      return isSetCleanUpWorkingDirAfterJob();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdvancedInputDataHandling)
      return this.equals((AdvancedInputDataHandling)that);
    return false;
  }

  public boolean equals(AdvancedInputDataHandling that) {
    if (that == null)
      return false;

    boolean this_present_stageInputFilesToWorkingDir = true && this.isSetStageInputFilesToWorkingDir();
    boolean that_present_stageInputFilesToWorkingDir = true && that.isSetStageInputFilesToWorkingDir();
    if (this_present_stageInputFilesToWorkingDir || that_present_stageInputFilesToWorkingDir) {
      if (!(this_present_stageInputFilesToWorkingDir && that_present_stageInputFilesToWorkingDir))
        return false;
      if (this.stageInputFilesToWorkingDir != that.stageInputFilesToWorkingDir)
        return false;
    }

    boolean this_present_parentWorkingDirectory = true && this.isSetParentWorkingDirectory();
    boolean that_present_parentWorkingDirectory = true && that.isSetParentWorkingDirectory();
    if (this_present_parentWorkingDirectory || that_present_parentWorkingDirectory) {
      if (!(this_present_parentWorkingDirectory && that_present_parentWorkingDirectory))
        return false;
      if (!this.parentWorkingDirectory.equals(that.parentWorkingDirectory))
        return false;
    }

    boolean this_present_uniqueWorkingDirectory = true && this.isSetUniqueWorkingDirectory();
    boolean that_present_uniqueWorkingDirectory = true && that.isSetUniqueWorkingDirectory();
    if (this_present_uniqueWorkingDirectory || that_present_uniqueWorkingDirectory) {
      if (!(this_present_uniqueWorkingDirectory && that_present_uniqueWorkingDirectory))
        return false;
      if (!this.uniqueWorkingDirectory.equals(that.uniqueWorkingDirectory))
        return false;
    }

    boolean this_present_cleanUpWorkingDirAfterJob = true && this.isSetCleanUpWorkingDirAfterJob();
    boolean that_present_cleanUpWorkingDirAfterJob = true && that.isSetCleanUpWorkingDirAfterJob();
    if (this_present_cleanUpWorkingDirAfterJob || that_present_cleanUpWorkingDirAfterJob) {
      if (!(this_present_cleanUpWorkingDirAfterJob && that_present_cleanUpWorkingDirAfterJob))
        return false;
      if (this.cleanUpWorkingDirAfterJob != that.cleanUpWorkingDirAfterJob)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AdvancedInputDataHandling other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStageInputFilesToWorkingDir()).compareTo(other.isSetStageInputFilesToWorkingDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageInputFilesToWorkingDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stageInputFilesToWorkingDir, other.stageInputFilesToWorkingDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentWorkingDirectory()).compareTo(other.isSetParentWorkingDirectory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentWorkingDirectory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentWorkingDirectory, other.parentWorkingDirectory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUniqueWorkingDirectory()).compareTo(other.isSetUniqueWorkingDirectory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueWorkingDirectory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueWorkingDirectory, other.uniqueWorkingDirectory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCleanUpWorkingDirAfterJob()).compareTo(other.isSetCleanUpWorkingDirAfterJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCleanUpWorkingDirAfterJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cleanUpWorkingDirAfterJob, other.cleanUpWorkingDirAfterJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdvancedInputDataHandling(");
    boolean first = true;

    if (isSetStageInputFilesToWorkingDir()) {
      sb.append("stageInputFilesToWorkingDir:");
      sb.append(this.stageInputFilesToWorkingDir);
      first = false;
    }
    if (isSetParentWorkingDirectory()) {
      if (!first) sb.append(", ");
      sb.append("parentWorkingDirectory:");
      if (this.parentWorkingDirectory == null) {
        sb.append("null");
      } else {
        sb.append(this.parentWorkingDirectory);
      }
      first = false;
    }
    if (isSetUniqueWorkingDirectory()) {
      if (!first) sb.append(", ");
      sb.append("uniqueWorkingDirectory:");
      if (this.uniqueWorkingDirectory == null) {
        sb.append("null");
      } else {
        sb.append(this.uniqueWorkingDirectory);
      }
      first = false;
    }
    if (isSetCleanUpWorkingDirAfterJob()) {
      if (!first) sb.append(", ");
      sb.append("cleanUpWorkingDirAfterJob:");
      sb.append(this.cleanUpWorkingDirAfterJob);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdvancedInputDataHandlingStandardSchemeFactory implements SchemeFactory {
    public AdvancedInputDataHandlingStandardScheme getScheme() {
      return new AdvancedInputDataHandlingStandardScheme();
    }
  }

  private static class AdvancedInputDataHandlingStandardScheme extends StandardScheme<AdvancedInputDataHandling> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdvancedInputDataHandling struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STAGE_INPUT_FILES_TO_WORKING_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stageInputFilesToWorkingDir = iprot.readBool();
              struct.setStageInputFilesToWorkingDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_WORKING_DIRECTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentWorkingDirectory = iprot.readString();
              struct.setParentWorkingDirectoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIQUE_WORKING_DIRECTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uniqueWorkingDirectory = iprot.readString();
              struct.setUniqueWorkingDirectoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLEAN_UP_WORKING_DIR_AFTER_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.cleanUpWorkingDirAfterJob = iprot.readBool();
              struct.setCleanUpWorkingDirAfterJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdvancedInputDataHandling struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetStageInputFilesToWorkingDir()) {
        oprot.writeFieldBegin(STAGE_INPUT_FILES_TO_WORKING_DIR_FIELD_DESC);
        oprot.writeBool(struct.stageInputFilesToWorkingDir);
        oprot.writeFieldEnd();
      }
      if (struct.parentWorkingDirectory != null) {
        if (struct.isSetParentWorkingDirectory()) {
          oprot.writeFieldBegin(PARENT_WORKING_DIRECTORY_FIELD_DESC);
          oprot.writeString(struct.parentWorkingDirectory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uniqueWorkingDirectory != null) {
        if (struct.isSetUniqueWorkingDirectory()) {
          oprot.writeFieldBegin(UNIQUE_WORKING_DIRECTORY_FIELD_DESC);
          oprot.writeString(struct.uniqueWorkingDirectory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCleanUpWorkingDirAfterJob()) {
        oprot.writeFieldBegin(CLEAN_UP_WORKING_DIR_AFTER_JOB_FIELD_DESC);
        oprot.writeBool(struct.cleanUpWorkingDirAfterJob);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdvancedInputDataHandlingTupleSchemeFactory implements SchemeFactory {
    public AdvancedInputDataHandlingTupleScheme getScheme() {
      return new AdvancedInputDataHandlingTupleScheme();
    }
  }

  private static class AdvancedInputDataHandlingTupleScheme extends TupleScheme<AdvancedInputDataHandling> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdvancedInputDataHandling struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStageInputFilesToWorkingDir()) {
        optionals.set(0);
      }
      if (struct.isSetParentWorkingDirectory()) {
        optionals.set(1);
      }
      if (struct.isSetUniqueWorkingDirectory()) {
        optionals.set(2);
      }
      if (struct.isSetCleanUpWorkingDirAfterJob()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStageInputFilesToWorkingDir()) {
        oprot.writeBool(struct.stageInputFilesToWorkingDir);
      }
      if (struct.isSetParentWorkingDirectory()) {
        oprot.writeString(struct.parentWorkingDirectory);
      }
      if (struct.isSetUniqueWorkingDirectory()) {
        oprot.writeString(struct.uniqueWorkingDirectory);
      }
      if (struct.isSetCleanUpWorkingDirAfterJob()) {
        oprot.writeBool(struct.cleanUpWorkingDirAfterJob);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdvancedInputDataHandling struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.stageInputFilesToWorkingDir = iprot.readBool();
        struct.setStageInputFilesToWorkingDirIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parentWorkingDirectory = iprot.readString();
        struct.setParentWorkingDirectoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uniqueWorkingDirectory = iprot.readString();
        struct.setUniqueWorkingDirectoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cleanUpWorkingDirAfterJob = iprot.readBool();
        struct.setCleanUpWorkingDirAfterJobIsSet(true);
      }
    }
  }

}

