/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.workflow;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class AiravataWorkflow implements org.apache.thrift.TBase<AiravataWorkflow, AiravataWorkflow._Fields>, java.io.Serializable, Cloneable, Comparable<AiravataWorkflow> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AiravataWorkflow");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GATEWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gatewayId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STORAGE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("storageResourceId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENABLE_EMAIL_NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("enableEmailNotification", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_EMAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationEmails", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField APPLICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("applications", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField HANDLERS_FIELD_DESC = new org.apache.thrift.protocol.TField("handlers", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField CONNECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("connections", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("errors", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AiravataWorkflowStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AiravataWorkflowTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String name; // required
  private java.lang.String gatewayId; // required
  private java.lang.String userName; // required
  private java.lang.String storageResourceId; // required
  private java.lang.String description; // optional
  private boolean enableEmailNotification; // optional
  private java.util.List<NotificationEmail> notificationEmails; // optional
  private java.util.List<WorkflowApplication> applications; // optional
  private java.util.List<WorkflowHandler> handlers; // optional
  private java.util.List<WorkflowConnection> connections; // optional
  private java.util.List<WorkflowStatus> statuses; // optional
  private java.util.List<org.apache.airavata.model.commons.ErrorModel> errors; // optional
  private long createdAt; // optional
  private long updatedAt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    GATEWAY_ID((short)3, "gatewayId"),
    USER_NAME((short)4, "userName"),
    STORAGE_RESOURCE_ID((short)5, "storageResourceId"),
    DESCRIPTION((short)6, "description"),
    ENABLE_EMAIL_NOTIFICATION((short)7, "enableEmailNotification"),
    NOTIFICATION_EMAILS((short)8, "notificationEmails"),
    APPLICATIONS((short)9, "applications"),
    HANDLERS((short)10, "handlers"),
    CONNECTIONS((short)11, "connections"),
    STATUSES((short)12, "statuses"),
    ERRORS((short)13, "errors"),
    CREATED_AT((short)14, "createdAt"),
    UPDATED_AT((short)15, "updatedAt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // GATEWAY_ID
          return GATEWAY_ID;
        case 4: // USER_NAME
          return USER_NAME;
        case 5: // STORAGE_RESOURCE_ID
          return STORAGE_RESOURCE_ID;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // ENABLE_EMAIL_NOTIFICATION
          return ENABLE_EMAIL_NOTIFICATION;
        case 8: // NOTIFICATION_EMAILS
          return NOTIFICATION_EMAILS;
        case 9: // APPLICATIONS
          return APPLICATIONS;
        case 10: // HANDLERS
          return HANDLERS;
        case 11: // CONNECTIONS
          return CONNECTIONS;
        case 12: // STATUSES
          return STATUSES;
        case 13: // ERRORS
          return ERRORS;
        case 14: // CREATED_AT
          return CREATED_AT;
        case 15: // UPDATED_AT
          return UPDATED_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLEEMAILNOTIFICATION_ISSET_ID = 0;
  private static final int __CREATEDAT_ISSET_ID = 1;
  private static final int __UPDATEDAT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESCRIPTION,_Fields.ENABLE_EMAIL_NOTIFICATION,_Fields.NOTIFICATION_EMAILS,_Fields.APPLICATIONS,_Fields.HANDLERS,_Fields.CONNECTIONS,_Fields.STATUSES,_Fields.ERRORS,_Fields.CREATED_AT,_Fields.UPDATED_AT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GATEWAY_ID, new org.apache.thrift.meta_data.FieldMetaData("gatewayId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORAGE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("storageResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_EMAIL_NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("enableEmailNotification", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_EMAILS, new org.apache.thrift.meta_data.FieldMetaData("notificationEmails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationEmail.class))));
    tmpMap.put(_Fields.APPLICATIONS, new org.apache.thrift.meta_data.FieldMetaData("applications", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkflowApplication.class))));
    tmpMap.put(_Fields.HANDLERS, new org.apache.thrift.meta_data.FieldMetaData("handlers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkflowHandler.class))));
    tmpMap.put(_Fields.CONNECTIONS, new org.apache.thrift.meta_data.FieldMetaData("connections", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkflowConnection.class))));
    tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkflowStatus.class))));
    tmpMap.put(_Fields.ERRORS, new org.apache.thrift.meta_data.FieldMetaData("errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.commons.ErrorModel.class))));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AiravataWorkflow.class, metaDataMap);
  }

  public AiravataWorkflow() {
    this.id = "DO_NOT_SET_AT_CLIENTS";

  }

  public AiravataWorkflow(
    java.lang.String id,
    java.lang.String name,
    java.lang.String gatewayId,
    java.lang.String userName,
    java.lang.String storageResourceId)
  {
    this();
    this.id = id;
    this.name = name;
    this.gatewayId = gatewayId;
    this.userName = userName;
    this.storageResourceId = storageResourceId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AiravataWorkflow(AiravataWorkflow other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetGatewayId()) {
      this.gatewayId = other.gatewayId;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetStorageResourceId()) {
      this.storageResourceId = other.storageResourceId;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.enableEmailNotification = other.enableEmailNotification;
    if (other.isSetNotificationEmails()) {
      java.util.List<NotificationEmail> __this__notificationEmails = new java.util.ArrayList<NotificationEmail>(other.notificationEmails.size());
      for (NotificationEmail other_element : other.notificationEmails) {
        __this__notificationEmails.add(new NotificationEmail(other_element));
      }
      this.notificationEmails = __this__notificationEmails;
    }
    if (other.isSetApplications()) {
      java.util.List<WorkflowApplication> __this__applications = new java.util.ArrayList<WorkflowApplication>(other.applications.size());
      for (WorkflowApplication other_element : other.applications) {
        __this__applications.add(new WorkflowApplication(other_element));
      }
      this.applications = __this__applications;
    }
    if (other.isSetHandlers()) {
      java.util.List<WorkflowHandler> __this__handlers = new java.util.ArrayList<WorkflowHandler>(other.handlers.size());
      for (WorkflowHandler other_element : other.handlers) {
        __this__handlers.add(new WorkflowHandler(other_element));
      }
      this.handlers = __this__handlers;
    }
    if (other.isSetConnections()) {
      java.util.List<WorkflowConnection> __this__connections = new java.util.ArrayList<WorkflowConnection>(other.connections.size());
      for (WorkflowConnection other_element : other.connections) {
        __this__connections.add(new WorkflowConnection(other_element));
      }
      this.connections = __this__connections;
    }
    if (other.isSetStatuses()) {
      java.util.List<WorkflowStatus> __this__statuses = new java.util.ArrayList<WorkflowStatus>(other.statuses.size());
      for (WorkflowStatus other_element : other.statuses) {
        __this__statuses.add(new WorkflowStatus(other_element));
      }
      this.statuses = __this__statuses;
    }
    if (other.isSetErrors()) {
      java.util.List<org.apache.airavata.model.commons.ErrorModel> __this__errors = new java.util.ArrayList<org.apache.airavata.model.commons.ErrorModel>(other.errors.size());
      for (org.apache.airavata.model.commons.ErrorModel other_element : other.errors) {
        __this__errors.add(new org.apache.airavata.model.commons.ErrorModel(other_element));
      }
      this.errors = __this__errors;
    }
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
  }

  public AiravataWorkflow deepCopy() {
    return new AiravataWorkflow(this);
  }

  @Override
  public void clear() {
    this.id = "DO_NOT_SET_AT_CLIENTS";

    this.name = null;
    this.gatewayId = null;
    this.userName = null;
    this.storageResourceId = null;
    this.description = null;
    setEnableEmailNotificationIsSet(false);
    this.enableEmailNotification = false;
    this.notificationEmails = null;
    this.applications = null;
    this.handlers = null;
    this.connections = null;
    this.statuses = null;
    this.errors = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public void setName(java.lang.String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getGatewayId() {
    return this.gatewayId;
  }

  public void setGatewayId(java.lang.String gatewayId) {
    this.gatewayId = gatewayId;
  }

  public void unsetGatewayId() {
    this.gatewayId = null;
  }

  /** Returns true if field gatewayId is set (has been assigned a value) and false otherwise */
  public boolean isSetGatewayId() {
    return this.gatewayId != null;
  }

  public void setGatewayIdIsSet(boolean value) {
    if (!value) {
      this.gatewayId = null;
    }
  }

  public java.lang.String getUserName() {
    return this.userName;
  }

  public void setUserName(java.lang.String userName) {
    this.userName = userName;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public java.lang.String getStorageResourceId() {
    return this.storageResourceId;
  }

  public void setStorageResourceId(java.lang.String storageResourceId) {
    this.storageResourceId = storageResourceId;
  }

  public void unsetStorageResourceId() {
    this.storageResourceId = null;
  }

  /** Returns true if field storageResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageResourceId() {
    return this.storageResourceId != null;
  }

  public void setStorageResourceIdIsSet(boolean value) {
    if (!value) {
      this.storageResourceId = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public void setDescription(java.lang.String description) {
    this.description = description;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public boolean isEnableEmailNotification() {
    return this.enableEmailNotification;
  }

  public void setEnableEmailNotification(boolean enableEmailNotification) {
    this.enableEmailNotification = enableEmailNotification;
    setEnableEmailNotificationIsSet(true);
  }

  public void unsetEnableEmailNotification() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLEEMAILNOTIFICATION_ISSET_ID);
  }

  /** Returns true if field enableEmailNotification is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableEmailNotification() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLEEMAILNOTIFICATION_ISSET_ID);
  }

  public void setEnableEmailNotificationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLEEMAILNOTIFICATION_ISSET_ID, value);
  }

  public int getNotificationEmailsSize() {
    return (this.notificationEmails == null) ? 0 : this.notificationEmails.size();
  }

  public java.util.Iterator<NotificationEmail> getNotificationEmailsIterator() {
    return (this.notificationEmails == null) ? null : this.notificationEmails.iterator();
  }

  public void addToNotificationEmails(NotificationEmail elem) {
    if (this.notificationEmails == null) {
      this.notificationEmails = new java.util.ArrayList<NotificationEmail>();
    }
    this.notificationEmails.add(elem);
  }

  public java.util.List<NotificationEmail> getNotificationEmails() {
    return this.notificationEmails;
  }

  public void setNotificationEmails(java.util.List<NotificationEmail> notificationEmails) {
    this.notificationEmails = notificationEmails;
  }

  public void unsetNotificationEmails() {
    this.notificationEmails = null;
  }

  /** Returns true if field notificationEmails is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationEmails() {
    return this.notificationEmails != null;
  }

  public void setNotificationEmailsIsSet(boolean value) {
    if (!value) {
      this.notificationEmails = null;
    }
  }

  public int getApplicationsSize() {
    return (this.applications == null) ? 0 : this.applications.size();
  }

  public java.util.Iterator<WorkflowApplication> getApplicationsIterator() {
    return (this.applications == null) ? null : this.applications.iterator();
  }

  public void addToApplications(WorkflowApplication elem) {
    if (this.applications == null) {
      this.applications = new java.util.ArrayList<WorkflowApplication>();
    }
    this.applications.add(elem);
  }

  public java.util.List<WorkflowApplication> getApplications() {
    return this.applications;
  }

  public void setApplications(java.util.List<WorkflowApplication> applications) {
    this.applications = applications;
  }

  public void unsetApplications() {
    this.applications = null;
  }

  /** Returns true if field applications is set (has been assigned a value) and false otherwise */
  public boolean isSetApplications() {
    return this.applications != null;
  }

  public void setApplicationsIsSet(boolean value) {
    if (!value) {
      this.applications = null;
    }
  }

  public int getHandlersSize() {
    return (this.handlers == null) ? 0 : this.handlers.size();
  }

  public java.util.Iterator<WorkflowHandler> getHandlersIterator() {
    return (this.handlers == null) ? null : this.handlers.iterator();
  }

  public void addToHandlers(WorkflowHandler elem) {
    if (this.handlers == null) {
      this.handlers = new java.util.ArrayList<WorkflowHandler>();
    }
    this.handlers.add(elem);
  }

  public java.util.List<WorkflowHandler> getHandlers() {
    return this.handlers;
  }

  public void setHandlers(java.util.List<WorkflowHandler> handlers) {
    this.handlers = handlers;
  }

  public void unsetHandlers() {
    this.handlers = null;
  }

  /** Returns true if field handlers is set (has been assigned a value) and false otherwise */
  public boolean isSetHandlers() {
    return this.handlers != null;
  }

  public void setHandlersIsSet(boolean value) {
    if (!value) {
      this.handlers = null;
    }
  }

  public int getConnectionsSize() {
    return (this.connections == null) ? 0 : this.connections.size();
  }

  public java.util.Iterator<WorkflowConnection> getConnectionsIterator() {
    return (this.connections == null) ? null : this.connections.iterator();
  }

  public void addToConnections(WorkflowConnection elem) {
    if (this.connections == null) {
      this.connections = new java.util.ArrayList<WorkflowConnection>();
    }
    this.connections.add(elem);
  }

  public java.util.List<WorkflowConnection> getConnections() {
    return this.connections;
  }

  public void setConnections(java.util.List<WorkflowConnection> connections) {
    this.connections = connections;
  }

  public void unsetConnections() {
    this.connections = null;
  }

  /** Returns true if field connections is set (has been assigned a value) and false otherwise */
  public boolean isSetConnections() {
    return this.connections != null;
  }

  public void setConnectionsIsSet(boolean value) {
    if (!value) {
      this.connections = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  public java.util.Iterator<WorkflowStatus> getStatusesIterator() {
    return (this.statuses == null) ? null : this.statuses.iterator();
  }

  public void addToStatuses(WorkflowStatus elem) {
    if (this.statuses == null) {
      this.statuses = new java.util.ArrayList<WorkflowStatus>();
    }
    this.statuses.add(elem);
  }

  public java.util.List<WorkflowStatus> getStatuses() {
    return this.statuses;
  }

  public void setStatuses(java.util.List<WorkflowStatus> statuses) {
    this.statuses = statuses;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  public int getErrorsSize() {
    return (this.errors == null) ? 0 : this.errors.size();
  }

  public java.util.Iterator<org.apache.airavata.model.commons.ErrorModel> getErrorsIterator() {
    return (this.errors == null) ? null : this.errors.iterator();
  }

  public void addToErrors(org.apache.airavata.model.commons.ErrorModel elem) {
    if (this.errors == null) {
      this.errors = new java.util.ArrayList<org.apache.airavata.model.commons.ErrorModel>();
    }
    this.errors.add(elem);
  }

  public java.util.List<org.apache.airavata.model.commons.ErrorModel> getErrors() {
    return this.errors;
  }

  public void setErrors(java.util.List<org.apache.airavata.model.commons.ErrorModel> errors) {
    this.errors = errors;
  }

  public void unsetErrors() {
    this.errors = null;
  }

  /** Returns true if field errors is set (has been assigned a value) and false otherwise */
  public boolean isSetErrors() {
    return this.errors != null;
  }

  public void setErrorsIsSet(boolean value) {
    if (!value) {
      this.errors = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
  }

  public void unsetCreatedAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public void setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case GATEWAY_ID:
      if (value == null) {
        unsetGatewayId();
      } else {
        setGatewayId((java.lang.String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((java.lang.String)value);
      }
      break;

    case STORAGE_RESOURCE_ID:
      if (value == null) {
        unsetStorageResourceId();
      } else {
        setStorageResourceId((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case ENABLE_EMAIL_NOTIFICATION:
      if (value == null) {
        unsetEnableEmailNotification();
      } else {
        setEnableEmailNotification((java.lang.Boolean)value);
      }
      break;

    case NOTIFICATION_EMAILS:
      if (value == null) {
        unsetNotificationEmails();
      } else {
        setNotificationEmails((java.util.List<NotificationEmail>)value);
      }
      break;

    case APPLICATIONS:
      if (value == null) {
        unsetApplications();
      } else {
        setApplications((java.util.List<WorkflowApplication>)value);
      }
      break;

    case HANDLERS:
      if (value == null) {
        unsetHandlers();
      } else {
        setHandlers((java.util.List<WorkflowHandler>)value);
      }
      break;

    case CONNECTIONS:
      if (value == null) {
        unsetConnections();
      } else {
        setConnections((java.util.List<WorkflowConnection>)value);
      }
      break;

    case STATUSES:
      if (value == null) {
        unsetStatuses();
      } else {
        setStatuses((java.util.List<WorkflowStatus>)value);
      }
      break;

    case ERRORS:
      if (value == null) {
        unsetErrors();
      } else {
        setErrors((java.util.List<org.apache.airavata.model.commons.ErrorModel>)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((java.lang.Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case GATEWAY_ID:
      return getGatewayId();

    case USER_NAME:
      return getUserName();

    case STORAGE_RESOURCE_ID:
      return getStorageResourceId();

    case DESCRIPTION:
      return getDescription();

    case ENABLE_EMAIL_NOTIFICATION:
      return isEnableEmailNotification();

    case NOTIFICATION_EMAILS:
      return getNotificationEmails();

    case APPLICATIONS:
      return getApplications();

    case HANDLERS:
      return getHandlers();

    case CONNECTIONS:
      return getConnections();

    case STATUSES:
      return getStatuses();

    case ERRORS:
      return getErrors();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case GATEWAY_ID:
      return isSetGatewayId();
    case USER_NAME:
      return isSetUserName();
    case STORAGE_RESOURCE_ID:
      return isSetStorageResourceId();
    case DESCRIPTION:
      return isSetDescription();
    case ENABLE_EMAIL_NOTIFICATION:
      return isSetEnableEmailNotification();
    case NOTIFICATION_EMAILS:
      return isSetNotificationEmails();
    case APPLICATIONS:
      return isSetApplications();
    case HANDLERS:
      return isSetHandlers();
    case CONNECTIONS:
      return isSetConnections();
    case STATUSES:
      return isSetStatuses();
    case ERRORS:
      return isSetErrors();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AiravataWorkflow)
      return this.equals((AiravataWorkflow)that);
    return false;
  }

  public boolean equals(AiravataWorkflow that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_gatewayId = true && this.isSetGatewayId();
    boolean that_present_gatewayId = true && that.isSetGatewayId();
    if (this_present_gatewayId || that_present_gatewayId) {
      if (!(this_present_gatewayId && that_present_gatewayId))
        return false;
      if (!this.gatewayId.equals(that.gatewayId))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_storageResourceId = true && this.isSetStorageResourceId();
    boolean that_present_storageResourceId = true && that.isSetStorageResourceId();
    if (this_present_storageResourceId || that_present_storageResourceId) {
      if (!(this_present_storageResourceId && that_present_storageResourceId))
        return false;
      if (!this.storageResourceId.equals(that.storageResourceId))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_enableEmailNotification = true && this.isSetEnableEmailNotification();
    boolean that_present_enableEmailNotification = true && that.isSetEnableEmailNotification();
    if (this_present_enableEmailNotification || that_present_enableEmailNotification) {
      if (!(this_present_enableEmailNotification && that_present_enableEmailNotification))
        return false;
      if (this.enableEmailNotification != that.enableEmailNotification)
        return false;
    }

    boolean this_present_notificationEmails = true && this.isSetNotificationEmails();
    boolean that_present_notificationEmails = true && that.isSetNotificationEmails();
    if (this_present_notificationEmails || that_present_notificationEmails) {
      if (!(this_present_notificationEmails && that_present_notificationEmails))
        return false;
      if (!this.notificationEmails.equals(that.notificationEmails))
        return false;
    }

    boolean this_present_applications = true && this.isSetApplications();
    boolean that_present_applications = true && that.isSetApplications();
    if (this_present_applications || that_present_applications) {
      if (!(this_present_applications && that_present_applications))
        return false;
      if (!this.applications.equals(that.applications))
        return false;
    }

    boolean this_present_handlers = true && this.isSetHandlers();
    boolean that_present_handlers = true && that.isSetHandlers();
    if (this_present_handlers || that_present_handlers) {
      if (!(this_present_handlers && that_present_handlers))
        return false;
      if (!this.handlers.equals(that.handlers))
        return false;
    }

    boolean this_present_connections = true && this.isSetConnections();
    boolean that_present_connections = true && that.isSetConnections();
    if (this_present_connections || that_present_connections) {
      if (!(this_present_connections && that_present_connections))
        return false;
      if (!this.connections.equals(that.connections))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    boolean this_present_errors = true && this.isSetErrors();
    boolean that_present_errors = true && that.isSetErrors();
    if (this_present_errors || that_present_errors) {
      if (!(this_present_errors && that_present_errors))
        return false;
      if (!this.errors.equals(that.errors))
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true && this.isSetUpdatedAt();
    boolean that_present_updatedAt = true && that.isSetUpdatedAt();
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetGatewayId()) ? 131071 : 524287);
    if (isSetGatewayId())
      hashCode = hashCode * 8191 + gatewayId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
    if (isSetUserName())
      hashCode = hashCode * 8191 + userName.hashCode();

    hashCode = hashCode * 8191 + ((isSetStorageResourceId()) ? 131071 : 524287);
    if (isSetStorageResourceId())
      hashCode = hashCode * 8191 + storageResourceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnableEmailNotification()) ? 131071 : 524287);
    if (isSetEnableEmailNotification())
      hashCode = hashCode * 8191 + ((enableEmailNotification) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNotificationEmails()) ? 131071 : 524287);
    if (isSetNotificationEmails())
      hashCode = hashCode * 8191 + notificationEmails.hashCode();

    hashCode = hashCode * 8191 + ((isSetApplications()) ? 131071 : 524287);
    if (isSetApplications())
      hashCode = hashCode * 8191 + applications.hashCode();

    hashCode = hashCode * 8191 + ((isSetHandlers()) ? 131071 : 524287);
    if (isSetHandlers())
      hashCode = hashCode * 8191 + handlers.hashCode();

    hashCode = hashCode * 8191 + ((isSetConnections()) ? 131071 : 524287);
    if (isSetConnections())
      hashCode = hashCode * 8191 + connections.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatuses()) ? 131071 : 524287);
    if (isSetStatuses())
      hashCode = hashCode * 8191 + statuses.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrors()) ? 131071 : 524287);
    if (isSetErrors())
      hashCode = hashCode * 8191 + errors.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedAt()) ? 131071 : 524287);
    if (isSetCreatedAt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createdAt);

    hashCode = hashCode * 8191 + ((isSetUpdatedAt()) ? 131071 : 524287);
    if (isSetUpdatedAt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updatedAt);

    return hashCode;
  }

  @Override
  public int compareTo(AiravataWorkflow other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGatewayId()).compareTo(other.isSetGatewayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGatewayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatewayId, other.gatewayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStorageResourceId()).compareTo(other.isSetStorageResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storageResourceId, other.storageResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnableEmailNotification()).compareTo(other.isSetEnableEmailNotification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableEmailNotification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableEmailNotification, other.enableEmailNotification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationEmails()).compareTo(other.isSetNotificationEmails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationEmails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationEmails, other.notificationEmails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplications()).compareTo(other.isSetApplications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applications, other.applications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHandlers()).compareTo(other.isSetHandlers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandlers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handlers, other.handlers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConnections()).compareTo(other.isSetConnections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connections, other.connections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrors()).compareTo(other.isSetErrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errors, other.errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AiravataWorkflow(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gatewayId:");
    if (this.gatewayId == null) {
      sb.append("null");
    } else {
      sb.append(this.gatewayId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storageResourceId:");
    if (this.storageResourceId == null) {
      sb.append("null");
    } else {
      sb.append(this.storageResourceId);
    }
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetEnableEmailNotification()) {
      if (!first) sb.append(", ");
      sb.append("enableEmailNotification:");
      sb.append(this.enableEmailNotification);
      first = false;
    }
    if (isSetNotificationEmails()) {
      if (!first) sb.append(", ");
      sb.append("notificationEmails:");
      if (this.notificationEmails == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationEmails);
      }
      first = false;
    }
    if (isSetApplications()) {
      if (!first) sb.append(", ");
      sb.append("applications:");
      if (this.applications == null) {
        sb.append("null");
      } else {
        sb.append(this.applications);
      }
      first = false;
    }
    if (isSetHandlers()) {
      if (!first) sb.append(", ");
      sb.append("handlers:");
      if (this.handlers == null) {
        sb.append("null");
      } else {
        sb.append(this.handlers);
      }
      first = false;
    }
    if (isSetConnections()) {
      if (!first) sb.append(", ");
      sb.append("connections:");
      if (this.connections == null) {
        sb.append("null");
      } else {
        sb.append(this.connections);
      }
      first = false;
    }
    if (isSetStatuses()) {
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
    }
    if (isSetErrors()) {
      if (!first) sb.append(", ");
      sb.append("errors:");
      if (this.errors == null) {
        sb.append("null");
      } else {
        sb.append(this.errors);
      }
      first = false;
    }
    if (isSetCreatedAt()) {
      if (!first) sb.append(", ");
      sb.append("createdAt:");
      sb.append(this.createdAt);
      first = false;
    }
    if (isSetUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("updatedAt:");
      sb.append(this.updatedAt);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!isSetName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!isSetGatewayId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gatewayId' is unset! Struct:" + toString());
    }

    if (!isSetUserName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' is unset! Struct:" + toString());
    }

    if (!isSetStorageResourceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storageResourceId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AiravataWorkflowStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AiravataWorkflowStandardScheme getScheme() {
      return new AiravataWorkflowStandardScheme();
    }
  }

  private static class AiravataWorkflowStandardScheme extends org.apache.thrift.scheme.StandardScheme<AiravataWorkflow> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AiravataWorkflow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GATEWAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gatewayId = iprot.readString();
              struct.setGatewayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STORAGE_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storageResourceId = iprot.readString();
              struct.setStorageResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENABLE_EMAIL_NOTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableEmailNotification = iprot.readBool();
              struct.setEnableEmailNotificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NOTIFICATION_EMAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.notificationEmails = new java.util.ArrayList<NotificationEmail>(_list64.size);
                NotificationEmail _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new NotificationEmail();
                  _elem65.read(iprot);
                  struct.notificationEmails.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setNotificationEmailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APPLICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.applications = new java.util.ArrayList<WorkflowApplication>(_list67.size);
                WorkflowApplication _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = new WorkflowApplication();
                  _elem68.read(iprot);
                  struct.applications.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setApplicationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HANDLERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.handlers = new java.util.ArrayList<WorkflowHandler>(_list70.size);
                WorkflowHandler _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = new WorkflowHandler();
                  _elem71.read(iprot);
                  struct.handlers.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setHandlersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONNECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                struct.connections = new java.util.ArrayList<WorkflowConnection>(_list73.size);
                WorkflowConnection _elem74;
                for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                {
                  _elem74 = new WorkflowConnection();
                  _elem74.read(iprot);
                  struct.connections.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setConnectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.statuses = new java.util.ArrayList<WorkflowStatus>(_list76.size);
                WorkflowStatus _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = new WorkflowStatus();
                  _elem77.read(iprot);
                  struct.statuses.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
                struct.errors = new java.util.ArrayList<org.apache.airavata.model.commons.ErrorModel>(_list79.size);
                org.apache.airavata.model.commons.ErrorModel _elem80;
                for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                {
                  _elem80 = new org.apache.airavata.model.commons.ErrorModel();
                  _elem80.read(iprot);
                  struct.errors.add(_elem80);
                }
                iprot.readListEnd();
              }
              struct.setErrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AiravataWorkflow struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.gatewayId != null) {
        oprot.writeFieldBegin(GATEWAY_ID_FIELD_DESC);
        oprot.writeString(struct.gatewayId);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.storageResourceId != null) {
        oprot.writeFieldBegin(STORAGE_RESOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.storageResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnableEmailNotification()) {
        oprot.writeFieldBegin(ENABLE_EMAIL_NOTIFICATION_FIELD_DESC);
        oprot.writeBool(struct.enableEmailNotification);
        oprot.writeFieldEnd();
      }
      if (struct.notificationEmails != null) {
        if (struct.isSetNotificationEmails()) {
          oprot.writeFieldBegin(NOTIFICATION_EMAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.notificationEmails.size()));
            for (NotificationEmail _iter82 : struct.notificationEmails)
            {
              _iter82.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.applications != null) {
        if (struct.isSetApplications()) {
          oprot.writeFieldBegin(APPLICATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.applications.size()));
            for (WorkflowApplication _iter83 : struct.applications)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.handlers != null) {
        if (struct.isSetHandlers()) {
          oprot.writeFieldBegin(HANDLERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.handlers.size()));
            for (WorkflowHandler _iter84 : struct.handlers)
            {
              _iter84.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.connections != null) {
        if (struct.isSetConnections()) {
          oprot.writeFieldBegin(CONNECTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.connections.size()));
            for (WorkflowConnection _iter85 : struct.connections)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.statuses != null) {
        if (struct.isSetStatuses()) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.statuses.size()));
            for (WorkflowStatus _iter86 : struct.statuses)
            {
              _iter86.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.errors != null) {
        if (struct.isSetErrors()) {
          oprot.writeFieldBegin(ERRORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.errors.size()));
            for (org.apache.airavata.model.commons.ErrorModel _iter87 : struct.errors)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeI64(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.updatedAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AiravataWorkflowTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AiravataWorkflowTupleScheme getScheme() {
      return new AiravataWorkflowTupleScheme();
    }
  }

  private static class AiravataWorkflowTupleScheme extends org.apache.thrift.scheme.TupleScheme<AiravataWorkflow> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AiravataWorkflow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.name);
      oprot.writeString(struct.gatewayId);
      oprot.writeString(struct.userName);
      oprot.writeString(struct.storageResourceId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDescription()) {
        optionals.set(0);
      }
      if (struct.isSetEnableEmailNotification()) {
        optionals.set(1);
      }
      if (struct.isSetNotificationEmails()) {
        optionals.set(2);
      }
      if (struct.isSetApplications()) {
        optionals.set(3);
      }
      if (struct.isSetHandlers()) {
        optionals.set(4);
      }
      if (struct.isSetConnections()) {
        optionals.set(5);
      }
      if (struct.isSetStatuses()) {
        optionals.set(6);
      }
      if (struct.isSetErrors()) {
        optionals.set(7);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(8);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetEnableEmailNotification()) {
        oprot.writeBool(struct.enableEmailNotification);
      }
      if (struct.isSetNotificationEmails()) {
        {
          oprot.writeI32(struct.notificationEmails.size());
          for (NotificationEmail _iter88 : struct.notificationEmails)
          {
            _iter88.write(oprot);
          }
        }
      }
      if (struct.isSetApplications()) {
        {
          oprot.writeI32(struct.applications.size());
          for (WorkflowApplication _iter89 : struct.applications)
          {
            _iter89.write(oprot);
          }
        }
      }
      if (struct.isSetHandlers()) {
        {
          oprot.writeI32(struct.handlers.size());
          for (WorkflowHandler _iter90 : struct.handlers)
          {
            _iter90.write(oprot);
          }
        }
      }
      if (struct.isSetConnections()) {
        {
          oprot.writeI32(struct.connections.size());
          for (WorkflowConnection _iter91 : struct.connections)
          {
            _iter91.write(oprot);
          }
        }
      }
      if (struct.isSetStatuses()) {
        {
          oprot.writeI32(struct.statuses.size());
          for (WorkflowStatus _iter92 : struct.statuses)
          {
            _iter92.write(oprot);
          }
        }
      }
      if (struct.isSetErrors()) {
        {
          oprot.writeI32(struct.errors.size());
          for (org.apache.airavata.model.commons.ErrorModel _iter93 : struct.errors)
          {
            _iter93.write(oprot);
          }
        }
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeI64(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeI64(struct.updatedAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AiravataWorkflow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.gatewayId = iprot.readString();
      struct.setGatewayIdIsSet(true);
      struct.userName = iprot.readString();
      struct.setUserNameIsSet(true);
      struct.storageResourceId = iprot.readString();
      struct.setStorageResourceIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.enableEmailNotification = iprot.readBool();
        struct.setEnableEmailNotificationIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.notificationEmails = new java.util.ArrayList<NotificationEmail>(_list94.size);
          NotificationEmail _elem95;
          for (int _i96 = 0; _i96 < _list94.size; ++_i96)
          {
            _elem95 = new NotificationEmail();
            _elem95.read(iprot);
            struct.notificationEmails.add(_elem95);
          }
        }
        struct.setNotificationEmailsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.applications = new java.util.ArrayList<WorkflowApplication>(_list97.size);
          WorkflowApplication _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = new WorkflowApplication();
            _elem98.read(iprot);
            struct.applications.add(_elem98);
          }
        }
        struct.setApplicationsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.handlers = new java.util.ArrayList<WorkflowHandler>(_list100.size);
          WorkflowHandler _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = new WorkflowHandler();
            _elem101.read(iprot);
            struct.handlers.add(_elem101);
          }
        }
        struct.setHandlersIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.connections = new java.util.ArrayList<WorkflowConnection>(_list103.size);
          WorkflowConnection _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = new WorkflowConnection();
            _elem104.read(iprot);
            struct.connections.add(_elem104);
          }
        }
        struct.setConnectionsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.statuses = new java.util.ArrayList<WorkflowStatus>(_list106.size);
          WorkflowStatus _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = new WorkflowStatus();
            _elem107.read(iprot);
            struct.statuses.add(_elem107);
          }
        }
        struct.setStatusesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.errors = new java.util.ArrayList<org.apache.airavata.model.commons.ErrorModel>(_list109.size);
          org.apache.airavata.model.commons.ErrorModel _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = new org.apache.airavata.model.commons.ErrorModel();
            _elem110.read(iprot);
            struct.errors.add(_elem110);
          }
        }
        struct.setErrorsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createdAt = iprot.readI64();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updatedAt = iprot.readI64();
        struct.setUpdatedAtIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

