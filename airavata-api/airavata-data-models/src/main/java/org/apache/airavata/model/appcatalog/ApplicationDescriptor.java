    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Following structs are added for completeness of the application catalog
 */
@SuppressWarnings("all") public class ApplicationDescriptor implements org.apache.thrift.TBase<ApplicationDescriptor, ApplicationDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationDescriptor");

  private static final org.apache.thrift.protocol.TField APPLICATION_DESCRIPTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDescriptorId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_DESCRIPTOR_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDescriptorData", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplicationDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplicationDescriptorTupleSchemeFactory());
  }

  private String applicationDescriptorId; // required
  private String applicationDescriptorData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_DESCRIPTOR_ID((short)1, "applicationDescriptorId"),
    APPLICATION_DESCRIPTOR_DATA((short)2, "applicationDescriptorData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_DESCRIPTOR_ID
          return APPLICATION_DESCRIPTOR_ID;
        case 2: // APPLICATION_DESCRIPTOR_DATA
          return APPLICATION_DESCRIPTOR_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.APPLICATION_DESCRIPTOR_DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_DESCRIPTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationDescriptorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_DESCRIPTOR_DATA, new org.apache.thrift.meta_data.FieldMetaData("applicationDescriptorData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationDescriptor.class, metaDataMap);
  }

  public ApplicationDescriptor() {
    this.applicationDescriptorId = "DO_NOT_SET_AT_CLIENTS";

  }

  public ApplicationDescriptor(
    String applicationDescriptorId)
  {
    this();
    this.applicationDescriptorId = applicationDescriptorId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationDescriptor(ApplicationDescriptor other) {
    if (other.isSetApplicationDescriptorId()) {
      this.applicationDescriptorId = other.applicationDescriptorId;
    }
    if (other.isSetApplicationDescriptorData()) {
      this.applicationDescriptorData = other.applicationDescriptorData;
    }
  }

  public ApplicationDescriptor deepCopy() {
    return new ApplicationDescriptor(this);
  }

  @Override
  public void clear() {
    this.applicationDescriptorId = "DO_NOT_SET_AT_CLIENTS";

    this.applicationDescriptorData = null;
  }

  public String getApplicationDescriptorId() {
    return this.applicationDescriptorId;
  }

  public void setApplicationDescriptorId(String applicationDescriptorId) {
    this.applicationDescriptorId = applicationDescriptorId;
  }

  public void unsetApplicationDescriptorId() {
    this.applicationDescriptorId = null;
  }

  /** Returns true if field applicationDescriptorId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationDescriptorId() {
    return this.applicationDescriptorId != null;
  }

  public void setApplicationDescriptorIdIsSet(boolean value) {
    if (!value) {
      this.applicationDescriptorId = null;
    }
  }

  public String getApplicationDescriptorData() {
    return this.applicationDescriptorData;
  }

  public void setApplicationDescriptorData(String applicationDescriptorData) {
    this.applicationDescriptorData = applicationDescriptorData;
  }

  public void unsetApplicationDescriptorData() {
    this.applicationDescriptorData = null;
  }

  /** Returns true if field applicationDescriptorData is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationDescriptorData() {
    return this.applicationDescriptorData != null;
  }

  public void setApplicationDescriptorDataIsSet(boolean value) {
    if (!value) {
      this.applicationDescriptorData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_DESCRIPTOR_ID:
      if (value == null) {
        unsetApplicationDescriptorId();
      } else {
        setApplicationDescriptorId((String)value);
      }
      break;

    case APPLICATION_DESCRIPTOR_DATA:
      if (value == null) {
        unsetApplicationDescriptorData();
      } else {
        setApplicationDescriptorData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_DESCRIPTOR_ID:
      return getApplicationDescriptorId();

    case APPLICATION_DESCRIPTOR_DATA:
      return getApplicationDescriptorData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_DESCRIPTOR_ID:
      return isSetApplicationDescriptorId();
    case APPLICATION_DESCRIPTOR_DATA:
      return isSetApplicationDescriptorData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationDescriptor)
      return this.equals((ApplicationDescriptor)that);
    return false;
  }

  public boolean equals(ApplicationDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_applicationDescriptorId = true && this.isSetApplicationDescriptorId();
    boolean that_present_applicationDescriptorId = true && that.isSetApplicationDescriptorId();
    if (this_present_applicationDescriptorId || that_present_applicationDescriptorId) {
      if (!(this_present_applicationDescriptorId && that_present_applicationDescriptorId))
        return false;
      if (!this.applicationDescriptorId.equals(that.applicationDescriptorId))
        return false;
    }

    boolean this_present_applicationDescriptorData = true && this.isSetApplicationDescriptorData();
    boolean that_present_applicationDescriptorData = true && that.isSetApplicationDescriptorData();
    if (this_present_applicationDescriptorData || that_present_applicationDescriptorData) {
      if (!(this_present_applicationDescriptorData && that_present_applicationDescriptorData))
        return false;
      if (!this.applicationDescriptorData.equals(that.applicationDescriptorData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ApplicationDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplicationDescriptorId()).compareTo(other.isSetApplicationDescriptorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationDescriptorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDescriptorId, other.applicationDescriptorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationDescriptorData()).compareTo(other.isSetApplicationDescriptorData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationDescriptorData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDescriptorData, other.applicationDescriptorData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplicationDescriptor(");
    boolean first = true;

    sb.append("applicationDescriptorId:");
    if (this.applicationDescriptorId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationDescriptorId);
    }
    first = false;
    if (isSetApplicationDescriptorData()) {
      if (!first) sb.append(", ");
      sb.append("applicationDescriptorData:");
      if (this.applicationDescriptorData == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationDescriptorData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetApplicationDescriptorId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationDescriptorId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationDescriptorStandardSchemeFactory implements SchemeFactory {
    public ApplicationDescriptorStandardScheme getScheme() {
      return new ApplicationDescriptorStandardScheme();
    }
  }

  private static class ApplicationDescriptorStandardScheme extends StandardScheme<ApplicationDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_DESCRIPTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationDescriptorId = iprot.readString();
              struct.setApplicationDescriptorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_DESCRIPTOR_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationDescriptorData = iprot.readString();
              struct.setApplicationDescriptorDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationDescriptorId != null) {
        oprot.writeFieldBegin(APPLICATION_DESCRIPTOR_ID_FIELD_DESC);
        oprot.writeString(struct.applicationDescriptorId);
        oprot.writeFieldEnd();
      }
      if (struct.applicationDescriptorData != null) {
        if (struct.isSetApplicationDescriptorData()) {
          oprot.writeFieldBegin(APPLICATION_DESCRIPTOR_DATA_FIELD_DESC);
          oprot.writeString(struct.applicationDescriptorData);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationDescriptorTupleSchemeFactory implements SchemeFactory {
    public ApplicationDescriptorTupleScheme getScheme() {
      return new ApplicationDescriptorTupleScheme();
    }
  }

  private static class ApplicationDescriptorTupleScheme extends TupleScheme<ApplicationDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.applicationDescriptorId);
      BitSet optionals = new BitSet();
      if (struct.isSetApplicationDescriptorData()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetApplicationDescriptorData()) {
        oprot.writeString(struct.applicationDescriptorData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.applicationDescriptorId = iprot.readString();
      struct.setApplicationDescriptorIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.applicationDescriptorData = iprot.readString();
        struct.setApplicationDescriptorDataIsSet(true);
      }
    }
  }

}

