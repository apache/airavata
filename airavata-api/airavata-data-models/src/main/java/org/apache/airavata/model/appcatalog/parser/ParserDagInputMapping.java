/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog.parser;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ParserDagInputMapping implements org.apache.thrift.TBase<ParserDagInputMapping, ParserDagInputMapping._Fields>, java.io.Serializable, Cloneable, Comparable<ParserDagInputMapping> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParserDagInputMapping");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INPUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inputId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_OUTPUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentOutputId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARSER_DAG_ELEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parserDagElementId", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ParserDagInputMappingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ParserDagInputMappingTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String inputId; // required
  private java.lang.String parentOutputId; // required
  private java.lang.String value; // required
  private java.lang.String parserDagElementId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    INPUT_ID((short)2, "inputId"),
    PARENT_OUTPUT_ID((short)3, "parentOutputId"),
    VALUE((short)4, "value"),
    PARSER_DAG_ELEMENT_ID((short)5, "parserDagElementId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INPUT_ID
          return INPUT_ID;
        case 3: // PARENT_OUTPUT_ID
          return PARENT_OUTPUT_ID;
        case 4: // VALUE
          return VALUE;
        case 5: // PARSER_DAG_ELEMENT_ID
          return PARSER_DAG_ELEMENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT_ID, new org.apache.thrift.meta_data.FieldMetaData("inputId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_OUTPUT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentOutputId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARSER_DAG_ELEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parserDagElementId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ParserDagInputMapping.class, metaDataMap);
  }

  public ParserDagInputMapping() {
  }

  public ParserDagInputMapping(
    java.lang.String id,
    java.lang.String inputId,
    java.lang.String parentOutputId,
    java.lang.String value,
    java.lang.String parserDagElementId)
  {
    this();
    this.id = id;
    this.inputId = inputId;
    this.parentOutputId = parentOutputId;
    this.value = value;
    this.parserDagElementId = parserDagElementId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ParserDagInputMapping(ParserDagInputMapping other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetInputId()) {
      this.inputId = other.inputId;
    }
    if (other.isSetParentOutputId()) {
      this.parentOutputId = other.parentOutputId;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetParserDagElementId()) {
      this.parserDagElementId = other.parserDagElementId;
    }
  }

  public ParserDagInputMapping deepCopy() {
    return new ParserDagInputMapping(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.inputId = null;
    this.parentOutputId = null;
    this.value = null;
    this.parserDagElementId = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getInputId() {
    return this.inputId;
  }

  public void setInputId(java.lang.String inputId) {
    this.inputId = inputId;
  }

  public void unsetInputId() {
    this.inputId = null;
  }

  /** Returns true if field inputId is set (has been assigned a value) and false otherwise */
  public boolean isSetInputId() {
    return this.inputId != null;
  }

  public void setInputIdIsSet(boolean value) {
    if (!value) {
      this.inputId = null;
    }
  }

  public java.lang.String getParentOutputId() {
    return this.parentOutputId;
  }

  public void setParentOutputId(java.lang.String parentOutputId) {
    this.parentOutputId = parentOutputId;
  }

  public void unsetParentOutputId() {
    this.parentOutputId = null;
  }

  /** Returns true if field parentOutputId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentOutputId() {
    return this.parentOutputId != null;
  }

  public void setParentOutputIdIsSet(boolean value) {
    if (!value) {
      this.parentOutputId = null;
    }
  }

  public java.lang.String getValue() {
    return this.value;
  }

  public void setValue(java.lang.String value) {
    this.value = value;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public java.lang.String getParserDagElementId() {
    return this.parserDagElementId;
  }

  public void setParserDagElementId(java.lang.String parserDagElementId) {
    this.parserDagElementId = parserDagElementId;
  }

  public void unsetParserDagElementId() {
    this.parserDagElementId = null;
  }

  /** Returns true if field parserDagElementId is set (has been assigned a value) and false otherwise */
  public boolean isSetParserDagElementId() {
    return this.parserDagElementId != null;
  }

  public void setParserDagElementIdIsSet(boolean value) {
    if (!value) {
      this.parserDagElementId = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case INPUT_ID:
      if (value == null) {
        unsetInputId();
      } else {
        setInputId((java.lang.String)value);
      }
      break;

    case PARENT_OUTPUT_ID:
      if (value == null) {
        unsetParentOutputId();
      } else {
        setParentOutputId((java.lang.String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((java.lang.String)value);
      }
      break;

    case PARSER_DAG_ELEMENT_ID:
      if (value == null) {
        unsetParserDagElementId();
      } else {
        setParserDagElementId((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case INPUT_ID:
      return getInputId();

    case PARENT_OUTPUT_ID:
      return getParentOutputId();

    case VALUE:
      return getValue();

    case PARSER_DAG_ELEMENT_ID:
      return getParserDagElementId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case INPUT_ID:
      return isSetInputId();
    case PARENT_OUTPUT_ID:
      return isSetParentOutputId();
    case VALUE:
      return isSetValue();
    case PARSER_DAG_ELEMENT_ID:
      return isSetParserDagElementId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ParserDagInputMapping)
      return this.equals((ParserDagInputMapping)that);
    return false;
  }

  public boolean equals(ParserDagInputMapping that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_inputId = true && this.isSetInputId();
    boolean that_present_inputId = true && that.isSetInputId();
    if (this_present_inputId || that_present_inputId) {
      if (!(this_present_inputId && that_present_inputId))
        return false;
      if (!this.inputId.equals(that.inputId))
        return false;
    }

    boolean this_present_parentOutputId = true && this.isSetParentOutputId();
    boolean that_present_parentOutputId = true && that.isSetParentOutputId();
    if (this_present_parentOutputId || that_present_parentOutputId) {
      if (!(this_present_parentOutputId && that_present_parentOutputId))
        return false;
      if (!this.parentOutputId.equals(that.parentOutputId))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_parserDagElementId = true && this.isSetParserDagElementId();
    boolean that_present_parserDagElementId = true && that.isSetParserDagElementId();
    if (this_present_parserDagElementId || that_present_parserDagElementId) {
      if (!(this_present_parserDagElementId && that_present_parserDagElementId))
        return false;
      if (!this.parserDagElementId.equals(that.parserDagElementId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetInputId()) ? 131071 : 524287);
    if (isSetInputId())
      hashCode = hashCode * 8191 + inputId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentOutputId()) ? 131071 : 524287);
    if (isSetParentOutputId())
      hashCode = hashCode * 8191 + parentOutputId.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetParserDagElementId()) ? 131071 : 524287);
    if (isSetParserDagElementId())
      hashCode = hashCode * 8191 + parserDagElementId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ParserDagInputMapping other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInputId()).compareTo(other.isSetInputId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputId, other.inputId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentOutputId()).compareTo(other.isSetParentOutputId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentOutputId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentOutputId, other.parentOutputId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParserDagElementId()).compareTo(other.isSetParserDagElementId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParserDagElementId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parserDagElementId, other.parserDagElementId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ParserDagInputMapping(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputId:");
    if (this.inputId == null) {
      sb.append("null");
    } else {
      sb.append(this.inputId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentOutputId:");
    if (this.parentOutputId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentOutputId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parserDagElementId:");
    if (this.parserDagElementId == null) {
      sb.append("null");
    } else {
      sb.append(this.parserDagElementId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!isSetInputId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'inputId' is unset! Struct:" + toString());
    }

    if (!isSetParserDagElementId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parserDagElementId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParserDagInputMappingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ParserDagInputMappingStandardScheme getScheme() {
      return new ParserDagInputMappingStandardScheme();
    }
  }

  private static class ParserDagInputMappingStandardScheme extends org.apache.thrift.scheme.StandardScheme<ParserDagInputMapping> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ParserDagInputMapping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INPUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inputId = iprot.readString();
              struct.setInputIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_OUTPUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentOutputId = iprot.readString();
              struct.setParentOutputIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARSER_DAG_ELEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parserDagElementId = iprot.readString();
              struct.setParserDagElementIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ParserDagInputMapping struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.inputId != null) {
        oprot.writeFieldBegin(INPUT_ID_FIELD_DESC);
        oprot.writeString(struct.inputId);
        oprot.writeFieldEnd();
      }
      if (struct.parentOutputId != null) {
        oprot.writeFieldBegin(PARENT_OUTPUT_ID_FIELD_DESC);
        oprot.writeString(struct.parentOutputId);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.parserDagElementId != null) {
        oprot.writeFieldBegin(PARSER_DAG_ELEMENT_ID_FIELD_DESC);
        oprot.writeString(struct.parserDagElementId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParserDagInputMappingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ParserDagInputMappingTupleScheme getScheme() {
      return new ParserDagInputMappingTupleScheme();
    }
  }

  private static class ParserDagInputMappingTupleScheme extends org.apache.thrift.scheme.TupleScheme<ParserDagInputMapping> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ParserDagInputMapping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.inputId);
      oprot.writeString(struct.parserDagElementId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParentOutputId()) {
        optionals.set(0);
      }
      if (struct.isSetValue()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetParentOutputId()) {
        oprot.writeString(struct.parentOutputId);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ParserDagInputMapping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.inputId = iprot.readString();
      struct.setInputIdIsSet(true);
      struct.parserDagElementId = iprot.readString();
      struct.setParserDagElementIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.parentOutputId = iprot.readString();
        struct.setParentOutputIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

