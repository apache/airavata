/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog.gatewaygroups;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class GatewayGroups implements org.apache.thrift.TBase<GatewayGroups, GatewayGroups._Fields>, java.io.Serializable, Cloneable, Comparable<GatewayGroups> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GatewayGroups");

  private static final org.apache.thrift.protocol.TField GATEWAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gatewayId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ADMINS_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adminsGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField READ_ONLY_ADMINS_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("readOnlyAdminsGroupId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEFAULT_GATEWAY_USERS_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultGatewayUsersGroupId", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GatewayGroupsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GatewayGroupsTupleSchemeFactory();

  private java.lang.String gatewayId; // required
  private java.lang.String adminsGroupId; // required
  private java.lang.String readOnlyAdminsGroupId; // required
  private java.lang.String defaultGatewayUsersGroupId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GATEWAY_ID((short)1, "gatewayId"),
    ADMINS_GROUP_ID((short)2, "adminsGroupId"),
    READ_ONLY_ADMINS_GROUP_ID((short)3, "readOnlyAdminsGroupId"),
    DEFAULT_GATEWAY_USERS_GROUP_ID((short)4, "defaultGatewayUsersGroupId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GATEWAY_ID
          return GATEWAY_ID;
        case 2: // ADMINS_GROUP_ID
          return ADMINS_GROUP_ID;
        case 3: // READ_ONLY_ADMINS_GROUP_ID
          return READ_ONLY_ADMINS_GROUP_ID;
        case 4: // DEFAULT_GATEWAY_USERS_GROUP_ID
          return DEFAULT_GATEWAY_USERS_GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GATEWAY_ID, new org.apache.thrift.meta_data.FieldMetaData("gatewayId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADMINS_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("adminsGroupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ_ONLY_ADMINS_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("readOnlyAdminsGroupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_GATEWAY_USERS_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("defaultGatewayUsersGroupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GatewayGroups.class, metaDataMap);
  }

  public GatewayGroups() {
  }

  public GatewayGroups(
    java.lang.String gatewayId,
    java.lang.String adminsGroupId,
    java.lang.String readOnlyAdminsGroupId,
    java.lang.String defaultGatewayUsersGroupId)
  {
    this();
    this.gatewayId = gatewayId;
    this.adminsGroupId = adminsGroupId;
    this.readOnlyAdminsGroupId = readOnlyAdminsGroupId;
    this.defaultGatewayUsersGroupId = defaultGatewayUsersGroupId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GatewayGroups(GatewayGroups other) {
    if (other.isSetGatewayId()) {
      this.gatewayId = other.gatewayId;
    }
    if (other.isSetAdminsGroupId()) {
      this.adminsGroupId = other.adminsGroupId;
    }
    if (other.isSetReadOnlyAdminsGroupId()) {
      this.readOnlyAdminsGroupId = other.readOnlyAdminsGroupId;
    }
    if (other.isSetDefaultGatewayUsersGroupId()) {
      this.defaultGatewayUsersGroupId = other.defaultGatewayUsersGroupId;
    }
  }

  public GatewayGroups deepCopy() {
    return new GatewayGroups(this);
  }

  @Override
  public void clear() {
    this.gatewayId = null;
    this.adminsGroupId = null;
    this.readOnlyAdminsGroupId = null;
    this.defaultGatewayUsersGroupId = null;
  }

  public java.lang.String getGatewayId() {
    return this.gatewayId;
  }

  public void setGatewayId(java.lang.String gatewayId) {
    this.gatewayId = gatewayId;
  }

  public void unsetGatewayId() {
    this.gatewayId = null;
  }

  /** Returns true if field gatewayId is set (has been assigned a value) and false otherwise */
  public boolean isSetGatewayId() {
    return this.gatewayId != null;
  }

  public void setGatewayIdIsSet(boolean value) {
    if (!value) {
      this.gatewayId = null;
    }
  }

  public java.lang.String getAdminsGroupId() {
    return this.adminsGroupId;
  }

  public void setAdminsGroupId(java.lang.String adminsGroupId) {
    this.adminsGroupId = adminsGroupId;
  }

  public void unsetAdminsGroupId() {
    this.adminsGroupId = null;
  }

  /** Returns true if field adminsGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminsGroupId() {
    return this.adminsGroupId != null;
  }

  public void setAdminsGroupIdIsSet(boolean value) {
    if (!value) {
      this.adminsGroupId = null;
    }
  }

  public java.lang.String getReadOnlyAdminsGroupId() {
    return this.readOnlyAdminsGroupId;
  }

  public void setReadOnlyAdminsGroupId(java.lang.String readOnlyAdminsGroupId) {
    this.readOnlyAdminsGroupId = readOnlyAdminsGroupId;
  }

  public void unsetReadOnlyAdminsGroupId() {
    this.readOnlyAdminsGroupId = null;
  }

  /** Returns true if field readOnlyAdminsGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetReadOnlyAdminsGroupId() {
    return this.readOnlyAdminsGroupId != null;
  }

  public void setReadOnlyAdminsGroupIdIsSet(boolean value) {
    if (!value) {
      this.readOnlyAdminsGroupId = null;
    }
  }

  public java.lang.String getDefaultGatewayUsersGroupId() {
    return this.defaultGatewayUsersGroupId;
  }

  public void setDefaultGatewayUsersGroupId(java.lang.String defaultGatewayUsersGroupId) {
    this.defaultGatewayUsersGroupId = defaultGatewayUsersGroupId;
  }

  public void unsetDefaultGatewayUsersGroupId() {
    this.defaultGatewayUsersGroupId = null;
  }

  /** Returns true if field defaultGatewayUsersGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultGatewayUsersGroupId() {
    return this.defaultGatewayUsersGroupId != null;
  }

  public void setDefaultGatewayUsersGroupIdIsSet(boolean value) {
    if (!value) {
      this.defaultGatewayUsersGroupId = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case GATEWAY_ID:
      if (value == null) {
        unsetGatewayId();
      } else {
        setGatewayId((java.lang.String)value);
      }
      break;

    case ADMINS_GROUP_ID:
      if (value == null) {
        unsetAdminsGroupId();
      } else {
        setAdminsGroupId((java.lang.String)value);
      }
      break;

    case READ_ONLY_ADMINS_GROUP_ID:
      if (value == null) {
        unsetReadOnlyAdminsGroupId();
      } else {
        setReadOnlyAdminsGroupId((java.lang.String)value);
      }
      break;

    case DEFAULT_GATEWAY_USERS_GROUP_ID:
      if (value == null) {
        unsetDefaultGatewayUsersGroupId();
      } else {
        setDefaultGatewayUsersGroupId((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GATEWAY_ID:
      return getGatewayId();

    case ADMINS_GROUP_ID:
      return getAdminsGroupId();

    case READ_ONLY_ADMINS_GROUP_ID:
      return getReadOnlyAdminsGroupId();

    case DEFAULT_GATEWAY_USERS_GROUP_ID:
      return getDefaultGatewayUsersGroupId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GATEWAY_ID:
      return isSetGatewayId();
    case ADMINS_GROUP_ID:
      return isSetAdminsGroupId();
    case READ_ONLY_ADMINS_GROUP_ID:
      return isSetReadOnlyAdminsGroupId();
    case DEFAULT_GATEWAY_USERS_GROUP_ID:
      return isSetDefaultGatewayUsersGroupId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GatewayGroups)
      return this.equals((GatewayGroups)that);
    return false;
  }

  public boolean equals(GatewayGroups that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_gatewayId = true && this.isSetGatewayId();
    boolean that_present_gatewayId = true && that.isSetGatewayId();
    if (this_present_gatewayId || that_present_gatewayId) {
      if (!(this_present_gatewayId && that_present_gatewayId))
        return false;
      if (!this.gatewayId.equals(that.gatewayId))
        return false;
    }

    boolean this_present_adminsGroupId = true && this.isSetAdminsGroupId();
    boolean that_present_adminsGroupId = true && that.isSetAdminsGroupId();
    if (this_present_adminsGroupId || that_present_adminsGroupId) {
      if (!(this_present_adminsGroupId && that_present_adminsGroupId))
        return false;
      if (!this.adminsGroupId.equals(that.adminsGroupId))
        return false;
    }

    boolean this_present_readOnlyAdminsGroupId = true && this.isSetReadOnlyAdminsGroupId();
    boolean that_present_readOnlyAdminsGroupId = true && that.isSetReadOnlyAdminsGroupId();
    if (this_present_readOnlyAdminsGroupId || that_present_readOnlyAdminsGroupId) {
      if (!(this_present_readOnlyAdminsGroupId && that_present_readOnlyAdminsGroupId))
        return false;
      if (!this.readOnlyAdminsGroupId.equals(that.readOnlyAdminsGroupId))
        return false;
    }

    boolean this_present_defaultGatewayUsersGroupId = true && this.isSetDefaultGatewayUsersGroupId();
    boolean that_present_defaultGatewayUsersGroupId = true && that.isSetDefaultGatewayUsersGroupId();
    if (this_present_defaultGatewayUsersGroupId || that_present_defaultGatewayUsersGroupId) {
      if (!(this_present_defaultGatewayUsersGroupId && that_present_defaultGatewayUsersGroupId))
        return false;
      if (!this.defaultGatewayUsersGroupId.equals(that.defaultGatewayUsersGroupId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGatewayId()) ? 131071 : 524287);
    if (isSetGatewayId())
      hashCode = hashCode * 8191 + gatewayId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdminsGroupId()) ? 131071 : 524287);
    if (isSetAdminsGroupId())
      hashCode = hashCode * 8191 + adminsGroupId.hashCode();

    hashCode = hashCode * 8191 + ((isSetReadOnlyAdminsGroupId()) ? 131071 : 524287);
    if (isSetReadOnlyAdminsGroupId())
      hashCode = hashCode * 8191 + readOnlyAdminsGroupId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultGatewayUsersGroupId()) ? 131071 : 524287);
    if (isSetDefaultGatewayUsersGroupId())
      hashCode = hashCode * 8191 + defaultGatewayUsersGroupId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GatewayGroups other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGatewayId()).compareTo(other.isSetGatewayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGatewayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gatewayId, other.gatewayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdminsGroupId()).compareTo(other.isSetAdminsGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminsGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminsGroupId, other.adminsGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadOnlyAdminsGroupId()).compareTo(other.isSetReadOnlyAdminsGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadOnlyAdminsGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readOnlyAdminsGroupId, other.readOnlyAdminsGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultGatewayUsersGroupId()).compareTo(other.isSetDefaultGatewayUsersGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultGatewayUsersGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultGatewayUsersGroupId, other.defaultGatewayUsersGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GatewayGroups(");
    boolean first = true;

    sb.append("gatewayId:");
    if (this.gatewayId == null) {
      sb.append("null");
    } else {
      sb.append(this.gatewayId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adminsGroupId:");
    if (this.adminsGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.adminsGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readOnlyAdminsGroupId:");
    if (this.readOnlyAdminsGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.readOnlyAdminsGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultGatewayUsersGroupId:");
    if (this.defaultGatewayUsersGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultGatewayUsersGroupId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetGatewayId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gatewayId' is unset! Struct:" + toString());
    }

    if (!isSetAdminsGroupId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adminsGroupId' is unset! Struct:" + toString());
    }

    if (!isSetReadOnlyAdminsGroupId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'readOnlyAdminsGroupId' is unset! Struct:" + toString());
    }

    if (!isSetDefaultGatewayUsersGroupId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultGatewayUsersGroupId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GatewayGroupsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GatewayGroupsStandardScheme getScheme() {
      return new GatewayGroupsStandardScheme();
    }
  }

  private static class GatewayGroupsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GatewayGroups> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GatewayGroups struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GATEWAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gatewayId = iprot.readString();
              struct.setGatewayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADMINS_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adminsGroupId = iprot.readString();
              struct.setAdminsGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READ_ONLY_ADMINS_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.readOnlyAdminsGroupId = iprot.readString();
              struct.setReadOnlyAdminsGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEFAULT_GATEWAY_USERS_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.defaultGatewayUsersGroupId = iprot.readString();
              struct.setDefaultGatewayUsersGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GatewayGroups struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gatewayId != null) {
        oprot.writeFieldBegin(GATEWAY_ID_FIELD_DESC);
        oprot.writeString(struct.gatewayId);
        oprot.writeFieldEnd();
      }
      if (struct.adminsGroupId != null) {
        oprot.writeFieldBegin(ADMINS_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.adminsGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.readOnlyAdminsGroupId != null) {
        oprot.writeFieldBegin(READ_ONLY_ADMINS_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.readOnlyAdminsGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.defaultGatewayUsersGroupId != null) {
        oprot.writeFieldBegin(DEFAULT_GATEWAY_USERS_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.defaultGatewayUsersGroupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GatewayGroupsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GatewayGroupsTupleScheme getScheme() {
      return new GatewayGroupsTupleScheme();
    }
  }

  private static class GatewayGroupsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GatewayGroups> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GatewayGroups struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.gatewayId);
      oprot.writeString(struct.adminsGroupId);
      oprot.writeString(struct.readOnlyAdminsGroupId);
      oprot.writeString(struct.defaultGatewayUsersGroupId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GatewayGroups struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.gatewayId = iprot.readString();
      struct.setGatewayIdIsSet(true);
      struct.adminsGroupId = iprot.readString();
      struct.setAdminsGroupIdIsSet(true);
      struct.readOnlyAdminsGroupId = iprot.readString();
      struct.setReadOnlyAdminsGroupIdIsSet(true);
      struct.defaultGatewayUsersGroupId = iprot.readString();
      struct.setDefaultGatewayUsersGroupIdIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

