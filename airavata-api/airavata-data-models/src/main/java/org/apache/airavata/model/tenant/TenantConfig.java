/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.tenant;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TenantConfig implements org.apache.thrift.TBase<TenantConfig, TenantConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TenantConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TenantConfig");

  private static final org.apache.thrift.protocol.TField OAUTH_CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oauthClientId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField OAUTH_CLIENT_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("oauthClientSecret", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField IDENTITY_SERVER_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("identityServerUserName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IDENTITY_SERVER_PASSWORD_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("identityServerPasswordToken", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TenantConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TenantConfigTupleSchemeFactory());
  }

  private String oauthClientId; // optional
  private String oauthClientSecret; // optional
  private String identityServerUserName; // optional
  private String identityServerPasswordToken; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OAUTH_CLIENT_ID((short)16, "oauthClientId"),
    OAUTH_CLIENT_SECRET((short)17, "oauthClientSecret"),
    IDENTITY_SERVER_USER_NAME((short)13, "identityServerUserName"),
    IDENTITY_SERVER_PASSWORD_TOKEN((short)14, "identityServerPasswordToken");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 16: // OAUTH_CLIENT_ID
          return OAUTH_CLIENT_ID;
        case 17: // OAUTH_CLIENT_SECRET
          return OAUTH_CLIENT_SECRET;
        case 13: // IDENTITY_SERVER_USER_NAME
          return IDENTITY_SERVER_USER_NAME;
        case 14: // IDENTITY_SERVER_PASSWORD_TOKEN
          return IDENTITY_SERVER_PASSWORD_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.OAUTH_CLIENT_ID,_Fields.OAUTH_CLIENT_SECRET,_Fields.IDENTITY_SERVER_USER_NAME,_Fields.IDENTITY_SERVER_PASSWORD_TOKEN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OAUTH_CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("oauthClientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OAUTH_CLIENT_SECRET, new org.apache.thrift.meta_data.FieldMetaData("oauthClientSecret", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_SERVER_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("identityServerUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_SERVER_PASSWORD_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("identityServerPasswordToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TenantConfig.class, metaDataMap);
  }

  public TenantConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TenantConfig(TenantConfig other) {
    if (other.isSetOauthClientId()) {
      this.oauthClientId = other.oauthClientId;
    }
    if (other.isSetOauthClientSecret()) {
      this.oauthClientSecret = other.oauthClientSecret;
    }
    if (other.isSetIdentityServerUserName()) {
      this.identityServerUserName = other.identityServerUserName;
    }
    if (other.isSetIdentityServerPasswordToken()) {
      this.identityServerPasswordToken = other.identityServerPasswordToken;
    }
  }

  public TenantConfig deepCopy() {
    return new TenantConfig(this);
  }

  @Override
  public void clear() {
    this.oauthClientId = null;
    this.oauthClientSecret = null;
    this.identityServerUserName = null;
    this.identityServerPasswordToken = null;
  }

  public String getOauthClientId() {
    return this.oauthClientId;
  }

  public void setOauthClientId(String oauthClientId) {
    this.oauthClientId = oauthClientId;
  }

  public void unsetOauthClientId() {
    this.oauthClientId = null;
  }

  /** Returns true if field oauthClientId is set (has been assigned a value) and false otherwise */
  public boolean isSetOauthClientId() {
    return this.oauthClientId != null;
  }

  public void setOauthClientIdIsSet(boolean value) {
    if (!value) {
      this.oauthClientId = null;
    }
  }

  public String getOauthClientSecret() {
    return this.oauthClientSecret;
  }

  public void setOauthClientSecret(String oauthClientSecret) {
    this.oauthClientSecret = oauthClientSecret;
  }

  public void unsetOauthClientSecret() {
    this.oauthClientSecret = null;
  }

  /** Returns true if field oauthClientSecret is set (has been assigned a value) and false otherwise */
  public boolean isSetOauthClientSecret() {
    return this.oauthClientSecret != null;
  }

  public void setOauthClientSecretIsSet(boolean value) {
    if (!value) {
      this.oauthClientSecret = null;
    }
  }

  public String getIdentityServerUserName() {
    return this.identityServerUserName;
  }

  public void setIdentityServerUserName(String identityServerUserName) {
    this.identityServerUserName = identityServerUserName;
  }

  public void unsetIdentityServerUserName() {
    this.identityServerUserName = null;
  }

  /** Returns true if field identityServerUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityServerUserName() {
    return this.identityServerUserName != null;
  }

  public void setIdentityServerUserNameIsSet(boolean value) {
    if (!value) {
      this.identityServerUserName = null;
    }
  }

  public String getIdentityServerPasswordToken() {
    return this.identityServerPasswordToken;
  }

  public void setIdentityServerPasswordToken(String identityServerPasswordToken) {
    this.identityServerPasswordToken = identityServerPasswordToken;
  }

  public void unsetIdentityServerPasswordToken() {
    this.identityServerPasswordToken = null;
  }

  /** Returns true if field identityServerPasswordToken is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityServerPasswordToken() {
    return this.identityServerPasswordToken != null;
  }

  public void setIdentityServerPasswordTokenIsSet(boolean value) {
    if (!value) {
      this.identityServerPasswordToken = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OAUTH_CLIENT_ID:
      if (value == null) {
        unsetOauthClientId();
      } else {
        setOauthClientId((String)value);
      }
      break;

    case OAUTH_CLIENT_SECRET:
      if (value == null) {
        unsetOauthClientSecret();
      } else {
        setOauthClientSecret((String)value);
      }
      break;

    case IDENTITY_SERVER_USER_NAME:
      if (value == null) {
        unsetIdentityServerUserName();
      } else {
        setIdentityServerUserName((String)value);
      }
      break;

    case IDENTITY_SERVER_PASSWORD_TOKEN:
      if (value == null) {
        unsetIdentityServerPasswordToken();
      } else {
        setIdentityServerPasswordToken((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OAUTH_CLIENT_ID:
      return getOauthClientId();

    case OAUTH_CLIENT_SECRET:
      return getOauthClientSecret();

    case IDENTITY_SERVER_USER_NAME:
      return getIdentityServerUserName();

    case IDENTITY_SERVER_PASSWORD_TOKEN:
      return getIdentityServerPasswordToken();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OAUTH_CLIENT_ID:
      return isSetOauthClientId();
    case OAUTH_CLIENT_SECRET:
      return isSetOauthClientSecret();
    case IDENTITY_SERVER_USER_NAME:
      return isSetIdentityServerUserName();
    case IDENTITY_SERVER_PASSWORD_TOKEN:
      return isSetIdentityServerPasswordToken();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TenantConfig)
      return this.equals((TenantConfig)that);
    return false;
  }

  public boolean equals(TenantConfig that) {
    if (that == null)
      return false;

    boolean this_present_oauthClientId = true && this.isSetOauthClientId();
    boolean that_present_oauthClientId = true && that.isSetOauthClientId();
    if (this_present_oauthClientId || that_present_oauthClientId) {
      if (!(this_present_oauthClientId && that_present_oauthClientId))
        return false;
      if (!this.oauthClientId.equals(that.oauthClientId))
        return false;
    }

    boolean this_present_oauthClientSecret = true && this.isSetOauthClientSecret();
    boolean that_present_oauthClientSecret = true && that.isSetOauthClientSecret();
    if (this_present_oauthClientSecret || that_present_oauthClientSecret) {
      if (!(this_present_oauthClientSecret && that_present_oauthClientSecret))
        return false;
      if (!this.oauthClientSecret.equals(that.oauthClientSecret))
        return false;
    }

    boolean this_present_identityServerUserName = true && this.isSetIdentityServerUserName();
    boolean that_present_identityServerUserName = true && that.isSetIdentityServerUserName();
    if (this_present_identityServerUserName || that_present_identityServerUserName) {
      if (!(this_present_identityServerUserName && that_present_identityServerUserName))
        return false;
      if (!this.identityServerUserName.equals(that.identityServerUserName))
        return false;
    }

    boolean this_present_identityServerPasswordToken = true && this.isSetIdentityServerPasswordToken();
    boolean that_present_identityServerPasswordToken = true && that.isSetIdentityServerPasswordToken();
    if (this_present_identityServerPasswordToken || that_present_identityServerPasswordToken) {
      if (!(this_present_identityServerPasswordToken && that_present_identityServerPasswordToken))
        return false;
      if (!this.identityServerPasswordToken.equals(that.identityServerPasswordToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_oauthClientId = true && (isSetOauthClientId());
    list.add(present_oauthClientId);
    if (present_oauthClientId)
      list.add(oauthClientId);

    boolean present_oauthClientSecret = true && (isSetOauthClientSecret());
    list.add(present_oauthClientSecret);
    if (present_oauthClientSecret)
      list.add(oauthClientSecret);

    boolean present_identityServerUserName = true && (isSetIdentityServerUserName());
    list.add(present_identityServerUserName);
    if (present_identityServerUserName)
      list.add(identityServerUserName);

    boolean present_identityServerPasswordToken = true && (isSetIdentityServerPasswordToken());
    list.add(present_identityServerPasswordToken);
    if (present_identityServerPasswordToken)
      list.add(identityServerPasswordToken);

    return list.hashCode();
  }

  @Override
  public int compareTo(TenantConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOauthClientId()).compareTo(other.isSetOauthClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOauthClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oauthClientId, other.oauthClientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOauthClientSecret()).compareTo(other.isSetOauthClientSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOauthClientSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oauthClientSecret, other.oauthClientSecret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityServerUserName()).compareTo(other.isSetIdentityServerUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityServerUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityServerUserName, other.identityServerUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityServerPasswordToken()).compareTo(other.isSetIdentityServerPasswordToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityServerPasswordToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityServerPasswordToken, other.identityServerPasswordToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TenantConfig(");
    boolean first = true;

    if (isSetOauthClientId()) {
      sb.append("oauthClientId:");
      if (this.oauthClientId == null) {
        sb.append("null");
      } else {
        sb.append(this.oauthClientId);
      }
      first = false;
    }
    if (isSetOauthClientSecret()) {
      if (!first) sb.append(", ");
      sb.append("oauthClientSecret:");
      if (this.oauthClientSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.oauthClientSecret);
      }
      first = false;
    }
    if (isSetIdentityServerUserName()) {
      if (!first) sb.append(", ");
      sb.append("identityServerUserName:");
      if (this.identityServerUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.identityServerUserName);
      }
      first = false;
    }
    if (isSetIdentityServerPasswordToken()) {
      if (!first) sb.append(", ");
      sb.append("identityServerPasswordToken:");
      if (this.identityServerPasswordToken == null) {
        sb.append("null");
      } else {
        sb.append(this.identityServerPasswordToken);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TenantConfigStandardSchemeFactory implements SchemeFactory {
    public TenantConfigStandardScheme getScheme() {
      return new TenantConfigStandardScheme();
    }
  }

  private static class TenantConfigStandardScheme extends StandardScheme<TenantConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TenantConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 16: // OAUTH_CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oauthClientId = iprot.readString();
              struct.setOauthClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OAUTH_CLIENT_SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oauthClientSecret = iprot.readString();
              struct.setOauthClientSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IDENTITY_SERVER_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityServerUserName = iprot.readString();
              struct.setIdentityServerUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IDENTITY_SERVER_PASSWORD_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityServerPasswordToken = iprot.readString();
              struct.setIdentityServerPasswordTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TenantConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.identityServerUserName != null) {
        if (struct.isSetIdentityServerUserName()) {
          oprot.writeFieldBegin(IDENTITY_SERVER_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.identityServerUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.identityServerPasswordToken != null) {
        if (struct.isSetIdentityServerPasswordToken()) {
          oprot.writeFieldBegin(IDENTITY_SERVER_PASSWORD_TOKEN_FIELD_DESC);
          oprot.writeString(struct.identityServerPasswordToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.oauthClientId != null) {
        if (struct.isSetOauthClientId()) {
          oprot.writeFieldBegin(OAUTH_CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.oauthClientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.oauthClientSecret != null) {
        if (struct.isSetOauthClientSecret()) {
          oprot.writeFieldBegin(OAUTH_CLIENT_SECRET_FIELD_DESC);
          oprot.writeString(struct.oauthClientSecret);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TenantConfigTupleSchemeFactory implements SchemeFactory {
    public TenantConfigTupleScheme getScheme() {
      return new TenantConfigTupleScheme();
    }
  }

  private static class TenantConfigTupleScheme extends TupleScheme<TenantConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TenantConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOauthClientId()) {
        optionals.set(0);
      }
      if (struct.isSetOauthClientSecret()) {
        optionals.set(1);
      }
      if (struct.isSetIdentityServerUserName()) {
        optionals.set(2);
      }
      if (struct.isSetIdentityServerPasswordToken()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOauthClientId()) {
        oprot.writeString(struct.oauthClientId);
      }
      if (struct.isSetOauthClientSecret()) {
        oprot.writeString(struct.oauthClientSecret);
      }
      if (struct.isSetIdentityServerUserName()) {
        oprot.writeString(struct.identityServerUserName);
      }
      if (struct.isSetIdentityServerPasswordToken()) {
        oprot.writeString(struct.identityServerPasswordToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TenantConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.oauthClientId = iprot.readString();
        struct.setOauthClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.oauthClientSecret = iprot.readString();
        struct.setOauthClientSecretIsSet(true);
      }
      if (incoming.get(2)) {
        struct.identityServerUserName = iprot.readString();
        struct.setIdentityServerUserNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.identityServerPasswordToken = iprot.readString();
        struct.setIdentityServerPasswordTokenIsSet(true);
      }
    }
  }

}

