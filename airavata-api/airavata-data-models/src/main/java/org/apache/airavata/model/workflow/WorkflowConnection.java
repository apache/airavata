/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.workflow;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class WorkflowConnection implements org.apache.thrift.TBase<WorkflowConnection, WorkflowConnection._Fields>, java.io.Serializable, Cloneable, Comparable<WorkflowConnection> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkflowConnection");

  private static final org.apache.thrift.protocol.TField BELONGS_TO_MAIN_WORKFLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("belongsToMainWorkflow", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_OUTPUT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromOutputName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TO_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("toType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TO_INPUT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toInputName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WorkflowConnectionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WorkflowConnectionTupleSchemeFactory();

  private boolean belongsToMainWorkflow; // required
  private org.apache.airavata.model.workflow.core.ComponentType fromType; // required
  private java.lang.String fromId; // required
  private java.lang.String fromOutputName; // required
  private org.apache.airavata.model.workflow.core.ComponentType toType; // required
  private java.lang.String toId; // required
  private java.lang.String toInputName; // required
  private long createdAt; // optional
  private long updatedAt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BELONGS_TO_MAIN_WORKFLOW((short)1, "belongsToMainWorkflow"),
    /**
     * 
     * @see org.apache.airavata.model.workflow.core.ComponentType
     */
    FROM_TYPE((short)2, "fromType"),
    FROM_ID((short)3, "fromId"),
    FROM_OUTPUT_NAME((short)4, "fromOutputName"),
    /**
     * 
     * @see org.apache.airavata.model.workflow.core.ComponentType
     */
    TO_TYPE((short)5, "toType"),
    TO_ID((short)6, "toId"),
    TO_INPUT_NAME((short)7, "toInputName"),
    CREATED_AT((short)8, "createdAt"),
    UPDATED_AT((short)9, "updatedAt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BELONGS_TO_MAIN_WORKFLOW
          return BELONGS_TO_MAIN_WORKFLOW;
        case 2: // FROM_TYPE
          return FROM_TYPE;
        case 3: // FROM_ID
          return FROM_ID;
        case 4: // FROM_OUTPUT_NAME
          return FROM_OUTPUT_NAME;
        case 5: // TO_TYPE
          return TO_TYPE;
        case 6: // TO_ID
          return TO_ID;
        case 7: // TO_INPUT_NAME
          return TO_INPUT_NAME;
        case 8: // CREATED_AT
          return CREATED_AT;
        case 9: // UPDATED_AT
          return UPDATED_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BELONGSTOMAINWORKFLOW_ISSET_ID = 0;
  private static final int __CREATEDAT_ISSET_ID = 1;
  private static final int __UPDATEDAT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CREATED_AT,_Fields.UPDATED_AT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BELONGS_TO_MAIN_WORKFLOW, new org.apache.thrift.meta_data.FieldMetaData("belongsToMainWorkflow", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FROM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fromType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.airavata.model.workflow.core.ComponentType.class)));
    tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_OUTPUT_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromOutputName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_TYPE, new org.apache.thrift.meta_data.FieldMetaData("toType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.airavata.model.workflow.core.ComponentType.class)));
    tmpMap.put(_Fields.TO_ID, new org.apache.thrift.meta_data.FieldMetaData("toId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_INPUT_NAME, new org.apache.thrift.meta_data.FieldMetaData("toInputName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkflowConnection.class, metaDataMap);
  }

  public WorkflowConnection() {
  }

  public WorkflowConnection(
    boolean belongsToMainWorkflow,
    org.apache.airavata.model.workflow.core.ComponentType fromType,
    java.lang.String fromId,
    java.lang.String fromOutputName,
    org.apache.airavata.model.workflow.core.ComponentType toType,
    java.lang.String toId,
    java.lang.String toInputName)
  {
    this();
    this.belongsToMainWorkflow = belongsToMainWorkflow;
    setBelongsToMainWorkflowIsSet(true);
    this.fromType = fromType;
    this.fromId = fromId;
    this.fromOutputName = fromOutputName;
    this.toType = toType;
    this.toId = toId;
    this.toInputName = toInputName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkflowConnection(WorkflowConnection other) {
    __isset_bitfield = other.__isset_bitfield;
    this.belongsToMainWorkflow = other.belongsToMainWorkflow;
    if (other.isSetFromType()) {
      this.fromType = other.fromType;
    }
    if (other.isSetFromId()) {
      this.fromId = other.fromId;
    }
    if (other.isSetFromOutputName()) {
      this.fromOutputName = other.fromOutputName;
    }
    if (other.isSetToType()) {
      this.toType = other.toType;
    }
    if (other.isSetToId()) {
      this.toId = other.toId;
    }
    if (other.isSetToInputName()) {
      this.toInputName = other.toInputName;
    }
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
  }

  public WorkflowConnection deepCopy() {
    return new WorkflowConnection(this);
  }

  @Override
  public void clear() {
    setBelongsToMainWorkflowIsSet(false);
    this.belongsToMainWorkflow = false;
    this.fromType = null;
    this.fromId = null;
    this.fromOutputName = null;
    this.toType = null;
    this.toId = null;
    this.toInputName = null;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
  }

  public boolean isBelongsToMainWorkflow() {
    return this.belongsToMainWorkflow;
  }

  public void setBelongsToMainWorkflow(boolean belongsToMainWorkflow) {
    this.belongsToMainWorkflow = belongsToMainWorkflow;
    setBelongsToMainWorkflowIsSet(true);
  }

  public void unsetBelongsToMainWorkflow() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BELONGSTOMAINWORKFLOW_ISSET_ID);
  }

  /** Returns true if field belongsToMainWorkflow is set (has been assigned a value) and false otherwise */
  public boolean isSetBelongsToMainWorkflow() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BELONGSTOMAINWORKFLOW_ISSET_ID);
  }

  public void setBelongsToMainWorkflowIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BELONGSTOMAINWORKFLOW_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.airavata.model.workflow.core.ComponentType
   */
  public org.apache.airavata.model.workflow.core.ComponentType getFromType() {
    return this.fromType;
  }

  /**
   * 
   * @see org.apache.airavata.model.workflow.core.ComponentType
   */
  public void setFromType(org.apache.airavata.model.workflow.core.ComponentType fromType) {
    this.fromType = fromType;
  }

  public void unsetFromType() {
    this.fromType = null;
  }

  /** Returns true if field fromType is set (has been assigned a value) and false otherwise */
  public boolean isSetFromType() {
    return this.fromType != null;
  }

  public void setFromTypeIsSet(boolean value) {
    if (!value) {
      this.fromType = null;
    }
  }

  public java.lang.String getFromId() {
    return this.fromId;
  }

  public void setFromId(java.lang.String fromId) {
    this.fromId = fromId;
  }

  public void unsetFromId() {
    this.fromId = null;
  }

  /** Returns true if field fromId is set (has been assigned a value) and false otherwise */
  public boolean isSetFromId() {
    return this.fromId != null;
  }

  public void setFromIdIsSet(boolean value) {
    if (!value) {
      this.fromId = null;
    }
  }

  public java.lang.String getFromOutputName() {
    return this.fromOutputName;
  }

  public void setFromOutputName(java.lang.String fromOutputName) {
    this.fromOutputName = fromOutputName;
  }

  public void unsetFromOutputName() {
    this.fromOutputName = null;
  }

  /** Returns true if field fromOutputName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromOutputName() {
    return this.fromOutputName != null;
  }

  public void setFromOutputNameIsSet(boolean value) {
    if (!value) {
      this.fromOutputName = null;
    }
  }

  /**
   * 
   * @see org.apache.airavata.model.workflow.core.ComponentType
   */
  public org.apache.airavata.model.workflow.core.ComponentType getToType() {
    return this.toType;
  }

  /**
   * 
   * @see org.apache.airavata.model.workflow.core.ComponentType
   */
  public void setToType(org.apache.airavata.model.workflow.core.ComponentType toType) {
    this.toType = toType;
  }

  public void unsetToType() {
    this.toType = null;
  }

  /** Returns true if field toType is set (has been assigned a value) and false otherwise */
  public boolean isSetToType() {
    return this.toType != null;
  }

  public void setToTypeIsSet(boolean value) {
    if (!value) {
      this.toType = null;
    }
  }

  public java.lang.String getToId() {
    return this.toId;
  }

  public void setToId(java.lang.String toId) {
    this.toId = toId;
  }

  public void unsetToId() {
    this.toId = null;
  }

  /** Returns true if field toId is set (has been assigned a value) and false otherwise */
  public boolean isSetToId() {
    return this.toId != null;
  }

  public void setToIdIsSet(boolean value) {
    if (!value) {
      this.toId = null;
    }
  }

  public java.lang.String getToInputName() {
    return this.toInputName;
  }

  public void setToInputName(java.lang.String toInputName) {
    this.toInputName = toInputName;
  }

  public void unsetToInputName() {
    this.toInputName = null;
  }

  /** Returns true if field toInputName is set (has been assigned a value) and false otherwise */
  public boolean isSetToInputName() {
    return this.toInputName != null;
  }

  public void setToInputNameIsSet(boolean value) {
    if (!value) {
      this.toInputName = null;
    }
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
  }

  public void unsetCreatedAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public void setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BELONGS_TO_MAIN_WORKFLOW:
      if (value == null) {
        unsetBelongsToMainWorkflow();
      } else {
        setBelongsToMainWorkflow((java.lang.Boolean)value);
      }
      break;

    case FROM_TYPE:
      if (value == null) {
        unsetFromType();
      } else {
        setFromType((org.apache.airavata.model.workflow.core.ComponentType)value);
      }
      break;

    case FROM_ID:
      if (value == null) {
        unsetFromId();
      } else {
        setFromId((java.lang.String)value);
      }
      break;

    case FROM_OUTPUT_NAME:
      if (value == null) {
        unsetFromOutputName();
      } else {
        setFromOutputName((java.lang.String)value);
      }
      break;

    case TO_TYPE:
      if (value == null) {
        unsetToType();
      } else {
        setToType((org.apache.airavata.model.workflow.core.ComponentType)value);
      }
      break;

    case TO_ID:
      if (value == null) {
        unsetToId();
      } else {
        setToId((java.lang.String)value);
      }
      break;

    case TO_INPUT_NAME:
      if (value == null) {
        unsetToInputName();
      } else {
        setToInputName((java.lang.String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((java.lang.Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BELONGS_TO_MAIN_WORKFLOW:
      return isBelongsToMainWorkflow();

    case FROM_TYPE:
      return getFromType();

    case FROM_ID:
      return getFromId();

    case FROM_OUTPUT_NAME:
      return getFromOutputName();

    case TO_TYPE:
      return getToType();

    case TO_ID:
      return getToId();

    case TO_INPUT_NAME:
      return getToInputName();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BELONGS_TO_MAIN_WORKFLOW:
      return isSetBelongsToMainWorkflow();
    case FROM_TYPE:
      return isSetFromType();
    case FROM_ID:
      return isSetFromId();
    case FROM_OUTPUT_NAME:
      return isSetFromOutputName();
    case TO_TYPE:
      return isSetToType();
    case TO_ID:
      return isSetToId();
    case TO_INPUT_NAME:
      return isSetToInputName();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkflowConnection)
      return this.equals((WorkflowConnection)that);
    return false;
  }

  public boolean equals(WorkflowConnection that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_belongsToMainWorkflow = true;
    boolean that_present_belongsToMainWorkflow = true;
    if (this_present_belongsToMainWorkflow || that_present_belongsToMainWorkflow) {
      if (!(this_present_belongsToMainWorkflow && that_present_belongsToMainWorkflow))
        return false;
      if (this.belongsToMainWorkflow != that.belongsToMainWorkflow)
        return false;
    }

    boolean this_present_fromType = true && this.isSetFromType();
    boolean that_present_fromType = true && that.isSetFromType();
    if (this_present_fromType || that_present_fromType) {
      if (!(this_present_fromType && that_present_fromType))
        return false;
      if (!this.fromType.equals(that.fromType))
        return false;
    }

    boolean this_present_fromId = true && this.isSetFromId();
    boolean that_present_fromId = true && that.isSetFromId();
    if (this_present_fromId || that_present_fromId) {
      if (!(this_present_fromId && that_present_fromId))
        return false;
      if (!this.fromId.equals(that.fromId))
        return false;
    }

    boolean this_present_fromOutputName = true && this.isSetFromOutputName();
    boolean that_present_fromOutputName = true && that.isSetFromOutputName();
    if (this_present_fromOutputName || that_present_fromOutputName) {
      if (!(this_present_fromOutputName && that_present_fromOutputName))
        return false;
      if (!this.fromOutputName.equals(that.fromOutputName))
        return false;
    }

    boolean this_present_toType = true && this.isSetToType();
    boolean that_present_toType = true && that.isSetToType();
    if (this_present_toType || that_present_toType) {
      if (!(this_present_toType && that_present_toType))
        return false;
      if (!this.toType.equals(that.toType))
        return false;
    }

    boolean this_present_toId = true && this.isSetToId();
    boolean that_present_toId = true && that.isSetToId();
    if (this_present_toId || that_present_toId) {
      if (!(this_present_toId && that_present_toId))
        return false;
      if (!this.toId.equals(that.toId))
        return false;
    }

    boolean this_present_toInputName = true && this.isSetToInputName();
    boolean that_present_toInputName = true && that.isSetToInputName();
    if (this_present_toInputName || that_present_toInputName) {
      if (!(this_present_toInputName && that_present_toInputName))
        return false;
      if (!this.toInputName.equals(that.toInputName))
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true && this.isSetUpdatedAt();
    boolean that_present_updatedAt = true && that.isSetUpdatedAt();
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((belongsToMainWorkflow) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFromType()) ? 131071 : 524287);
    if (isSetFromType())
      hashCode = hashCode * 8191 + fromType.getValue();

    hashCode = hashCode * 8191 + ((isSetFromId()) ? 131071 : 524287);
    if (isSetFromId())
      hashCode = hashCode * 8191 + fromId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromOutputName()) ? 131071 : 524287);
    if (isSetFromOutputName())
      hashCode = hashCode * 8191 + fromOutputName.hashCode();

    hashCode = hashCode * 8191 + ((isSetToType()) ? 131071 : 524287);
    if (isSetToType())
      hashCode = hashCode * 8191 + toType.getValue();

    hashCode = hashCode * 8191 + ((isSetToId()) ? 131071 : 524287);
    if (isSetToId())
      hashCode = hashCode * 8191 + toId.hashCode();

    hashCode = hashCode * 8191 + ((isSetToInputName()) ? 131071 : 524287);
    if (isSetToInputName())
      hashCode = hashCode * 8191 + toInputName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedAt()) ? 131071 : 524287);
    if (isSetCreatedAt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createdAt);

    hashCode = hashCode * 8191 + ((isSetUpdatedAt()) ? 131071 : 524287);
    if (isSetUpdatedAt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updatedAt);

    return hashCode;
  }

  @Override
  public int compareTo(WorkflowConnection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBelongsToMainWorkflow()).compareTo(other.isSetBelongsToMainWorkflow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBelongsToMainWorkflow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belongsToMainWorkflow, other.belongsToMainWorkflow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromType()).compareTo(other.isSetFromType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromType, other.fromType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromOutputName()).compareTo(other.isSetFromOutputName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromOutputName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromOutputName, other.fromOutputName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToType()).compareTo(other.isSetToType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toType, other.toType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToId()).compareTo(other.isSetToId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toId, other.toId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToInputName()).compareTo(other.isSetToInputName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToInputName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toInputName, other.toInputName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedAt()).compareTo(other.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, other.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WorkflowConnection(");
    boolean first = true;

    sb.append("belongsToMainWorkflow:");
    sb.append(this.belongsToMainWorkflow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromType:");
    if (this.fromType == null) {
      sb.append("null");
    } else {
      sb.append(this.fromType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromId:");
    if (this.fromId == null) {
      sb.append("null");
    } else {
      sb.append(this.fromId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromOutputName:");
    if (this.fromOutputName == null) {
      sb.append("null");
    } else {
      sb.append(this.fromOutputName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toType:");
    if (this.toType == null) {
      sb.append("null");
    } else {
      sb.append(this.toType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toId:");
    if (this.toId == null) {
      sb.append("null");
    } else {
      sb.append(this.toId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toInputName:");
    if (this.toInputName == null) {
      sb.append("null");
    } else {
      sb.append(this.toInputName);
    }
    first = false;
    if (isSetCreatedAt()) {
      if (!first) sb.append(", ");
      sb.append("createdAt:");
      sb.append(this.createdAt);
      first = false;
    }
    if (isSetUpdatedAt()) {
      if (!first) sb.append(", ");
      sb.append("updatedAt:");
      sb.append(this.updatedAt);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetBelongsToMainWorkflow()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'belongsToMainWorkflow' is unset! Struct:" + toString());
    }

    if (!isSetFromType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromType' is unset! Struct:" + toString());
    }

    if (!isSetFromId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromId' is unset! Struct:" + toString());
    }

    if (!isSetFromOutputName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromOutputName' is unset! Struct:" + toString());
    }

    if (!isSetToType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toType' is unset! Struct:" + toString());
    }

    if (!isSetToId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toId' is unset! Struct:" + toString());
    }

    if (!isSetToInputName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toInputName' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkflowConnectionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WorkflowConnectionStandardScheme getScheme() {
      return new WorkflowConnectionStandardScheme();
    }
  }

  private static class WorkflowConnectionStandardScheme extends org.apache.thrift.scheme.StandardScheme<WorkflowConnection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkflowConnection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BELONGS_TO_MAIN_WORKFLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.belongsToMainWorkflow = iprot.readBool();
              struct.setBelongsToMainWorkflowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fromType = org.apache.airavata.model.workflow.core.ComponentType.findByValue(iprot.readI32());
              struct.setFromTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromId = iprot.readString();
              struct.setFromIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_OUTPUT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromOutputName = iprot.readString();
              struct.setFromOutputNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.toType = org.apache.airavata.model.workflow.core.ComponentType.findByValue(iprot.readI32());
              struct.setToTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toId = iprot.readString();
              struct.setToIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TO_INPUT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toInputName = iprot.readString();
              struct.setToInputNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkflowConnection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BELONGS_TO_MAIN_WORKFLOW_FIELD_DESC);
      oprot.writeBool(struct.belongsToMainWorkflow);
      oprot.writeFieldEnd();
      if (struct.fromType != null) {
        oprot.writeFieldBegin(FROM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fromType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fromId != null) {
        oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
        oprot.writeString(struct.fromId);
        oprot.writeFieldEnd();
      }
      if (struct.fromOutputName != null) {
        oprot.writeFieldBegin(FROM_OUTPUT_NAME_FIELD_DESC);
        oprot.writeString(struct.fromOutputName);
        oprot.writeFieldEnd();
      }
      if (struct.toType != null) {
        oprot.writeFieldBegin(TO_TYPE_FIELD_DESC);
        oprot.writeI32(struct.toType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.toId != null) {
        oprot.writeFieldBegin(TO_ID_FIELD_DESC);
        oprot.writeString(struct.toId);
        oprot.writeFieldEnd();
      }
      if (struct.toInputName != null) {
        oprot.writeFieldBegin(TO_INPUT_NAME_FIELD_DESC);
        oprot.writeString(struct.toInputName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeI64(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
        oprot.writeI64(struct.updatedAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkflowConnectionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WorkflowConnectionTupleScheme getScheme() {
      return new WorkflowConnectionTupleScheme();
    }
  }

  private static class WorkflowConnectionTupleScheme extends org.apache.thrift.scheme.TupleScheme<WorkflowConnection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkflowConnection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.belongsToMainWorkflow);
      oprot.writeI32(struct.fromType.getValue());
      oprot.writeString(struct.fromId);
      oprot.writeString(struct.fromOutputName);
      oprot.writeI32(struct.toType.getValue());
      oprot.writeString(struct.toId);
      oprot.writeString(struct.toInputName);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCreatedAt()) {
        optionals.set(0);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCreatedAt()) {
        oprot.writeI64(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeI64(struct.updatedAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkflowConnection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.belongsToMainWorkflow = iprot.readBool();
      struct.setBelongsToMainWorkflowIsSet(true);
      struct.fromType = org.apache.airavata.model.workflow.core.ComponentType.findByValue(iprot.readI32());
      struct.setFromTypeIsSet(true);
      struct.fromId = iprot.readString();
      struct.setFromIdIsSet(true);
      struct.fromOutputName = iprot.readString();
      struct.setFromOutputNameIsSet(true);
      struct.toType = org.apache.airavata.model.workflow.core.ComponentType.findByValue(iprot.readI32());
      struct.setToTypeIsSet(true);
      struct.toId = iprot.readString();
      struct.setToIdIsSet(true);
      struct.toInputName = iprot.readString();
      struct.setToInputNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.createdAt = iprot.readI64();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.updatedAt = iprot.readI64();
        struct.setUpdatedAtIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

