/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.workflow;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ApplicationConfig implements org.apache.thrift.TBase<ApplicationConfig, ApplicationConfig._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationConfig");

  private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queue_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CORE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("coreCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WALL_TIME_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("wallTimeLimit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PHYSICAL_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("physicalMemory", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplicationConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplicationConfigTupleSchemeFactory();

  private java.lang.String computeResourceId; // optional
  private java.lang.String queue_name; // optional
  private int nodeCount; // optional
  private int coreCount; // optional
  private int wallTimeLimit; // optional
  private int physicalMemory; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPUTE_RESOURCE_ID((short)1, "computeResourceId"),
    QUEUE_NAME((short)2, "queue_name"),
    NODE_COUNT((short)3, "nodeCount"),
    CORE_COUNT((short)4, "coreCount"),
    WALL_TIME_LIMIT((short)5, "wallTimeLimit"),
    PHYSICAL_MEMORY((short)6, "physicalMemory");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPUTE_RESOURCE_ID
          return COMPUTE_RESOURCE_ID;
        case 2: // QUEUE_NAME
          return QUEUE_NAME;
        case 3: // NODE_COUNT
          return NODE_COUNT;
        case 4: // CORE_COUNT
          return CORE_COUNT;
        case 5: // WALL_TIME_LIMIT
          return WALL_TIME_LIMIT;
        case 6: // PHYSICAL_MEMORY
          return PHYSICAL_MEMORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODECOUNT_ISSET_ID = 0;
  private static final int __CORECOUNT_ISSET_ID = 1;
  private static final int __WALLTIMELIMIT_ISSET_ID = 2;
  private static final int __PHYSICALMEMORY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPUTE_RESOURCE_ID,_Fields.QUEUE_NAME,_Fields.NODE_COUNT,_Fields.CORE_COUNT,_Fields.WALL_TIME_LIMIT,_Fields.PHYSICAL_MEMORY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queue_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("nodeCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("coreCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WALL_TIME_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("wallTimeLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHYSICAL_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("physicalMemory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationConfig.class, metaDataMap);
  }

  public ApplicationConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationConfig(ApplicationConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetComputeResourceId()) {
      this.computeResourceId = other.computeResourceId;
    }
    if (other.isSetQueue_name()) {
      this.queue_name = other.queue_name;
    }
    this.nodeCount = other.nodeCount;
    this.coreCount = other.coreCount;
    this.wallTimeLimit = other.wallTimeLimit;
    this.physicalMemory = other.physicalMemory;
  }

  public ApplicationConfig deepCopy() {
    return new ApplicationConfig(this);
  }

  @Override
  public void clear() {
    this.computeResourceId = null;
    this.queue_name = null;
    setNodeCountIsSet(false);
    this.nodeCount = 0;
    setCoreCountIsSet(false);
    this.coreCount = 0;
    setWallTimeLimitIsSet(false);
    this.wallTimeLimit = 0;
    setPhysicalMemoryIsSet(false);
    this.physicalMemory = 0;
  }

  public java.lang.String getComputeResourceId() {
    return this.computeResourceId;
  }

  public void setComputeResourceId(java.lang.String computeResourceId) {
    this.computeResourceId = computeResourceId;
  }

  public void unsetComputeResourceId() {
    this.computeResourceId = null;
  }

  /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetComputeResourceId() {
    return this.computeResourceId != null;
  }

  public void setComputeResourceIdIsSet(boolean value) {
    if (!value) {
      this.computeResourceId = null;
    }
  }

  public java.lang.String getQueue_name() {
    return this.queue_name;
  }

  public void setQueue_name(java.lang.String queue_name) {
    this.queue_name = queue_name;
  }

  public void unsetQueue_name() {
    this.queue_name = null;
  }

  /** Returns true if field queue_name is set (has been assigned a value) and false otherwise */
  public boolean isSetQueue_name() {
    return this.queue_name != null;
  }

  public void setQueue_nameIsSet(boolean value) {
    if (!value) {
      this.queue_name = null;
    }
  }

  public int getNodeCount() {
    return this.nodeCount;
  }

  public void setNodeCount(int nodeCount) {
    this.nodeCount = nodeCount;
    setNodeCountIsSet(true);
  }

  public void unsetNodeCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODECOUNT_ISSET_ID);
  }

  /** Returns true if field nodeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODECOUNT_ISSET_ID);
  }

  public void setNodeCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODECOUNT_ISSET_ID, value);
  }

  public int getCoreCount() {
    return this.coreCount;
  }

  public void setCoreCount(int coreCount) {
    this.coreCount = coreCount;
    setCoreCountIsSet(true);
  }

  public void unsetCoreCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CORECOUNT_ISSET_ID);
  }

  /** Returns true if field coreCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CORECOUNT_ISSET_ID);
  }

  public void setCoreCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CORECOUNT_ISSET_ID, value);
  }

  public int getWallTimeLimit() {
    return this.wallTimeLimit;
  }

  public void setWallTimeLimit(int wallTimeLimit) {
    this.wallTimeLimit = wallTimeLimit;
    setWallTimeLimitIsSet(true);
  }

  public void unsetWallTimeLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WALLTIMELIMIT_ISSET_ID);
  }

  /** Returns true if field wallTimeLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetWallTimeLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WALLTIMELIMIT_ISSET_ID);
  }

  public void setWallTimeLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WALLTIMELIMIT_ISSET_ID, value);
  }

  public int getPhysicalMemory() {
    return this.physicalMemory;
  }

  public void setPhysicalMemory(int physicalMemory) {
    this.physicalMemory = physicalMemory;
    setPhysicalMemoryIsSet(true);
  }

  public void unsetPhysicalMemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PHYSICALMEMORY_ISSET_ID);
  }

  /** Returns true if field physicalMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetPhysicalMemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PHYSICALMEMORY_ISSET_ID);
  }

  public void setPhysicalMemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PHYSICALMEMORY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMPUTE_RESOURCE_ID:
      if (value == null) {
        unsetComputeResourceId();
      } else {
        setComputeResourceId((java.lang.String)value);
      }
      break;

    case QUEUE_NAME:
      if (value == null) {
        unsetQueue_name();
      } else {
        setQueue_name((java.lang.String)value);
      }
      break;

    case NODE_COUNT:
      if (value == null) {
        unsetNodeCount();
      } else {
        setNodeCount((java.lang.Integer)value);
      }
      break;

    case CORE_COUNT:
      if (value == null) {
        unsetCoreCount();
      } else {
        setCoreCount((java.lang.Integer)value);
      }
      break;

    case WALL_TIME_LIMIT:
      if (value == null) {
        unsetWallTimeLimit();
      } else {
        setWallTimeLimit((java.lang.Integer)value);
      }
      break;

    case PHYSICAL_MEMORY:
      if (value == null) {
        unsetPhysicalMemory();
      } else {
        setPhysicalMemory((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPUTE_RESOURCE_ID:
      return getComputeResourceId();

    case QUEUE_NAME:
      return getQueue_name();

    case NODE_COUNT:
      return getNodeCount();

    case CORE_COUNT:
      return getCoreCount();

    case WALL_TIME_LIMIT:
      return getWallTimeLimit();

    case PHYSICAL_MEMORY:
      return getPhysicalMemory();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMPUTE_RESOURCE_ID:
      return isSetComputeResourceId();
    case QUEUE_NAME:
      return isSetQueue_name();
    case NODE_COUNT:
      return isSetNodeCount();
    case CORE_COUNT:
      return isSetCoreCount();
    case WALL_TIME_LIMIT:
      return isSetWallTimeLimit();
    case PHYSICAL_MEMORY:
      return isSetPhysicalMemory();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationConfig)
      return this.equals((ApplicationConfig)that);
    return false;
  }

  public boolean equals(ApplicationConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
    boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
    if (this_present_computeResourceId || that_present_computeResourceId) {
      if (!(this_present_computeResourceId && that_present_computeResourceId))
        return false;
      if (!this.computeResourceId.equals(that.computeResourceId))
        return false;
    }

    boolean this_present_queue_name = true && this.isSetQueue_name();
    boolean that_present_queue_name = true && that.isSetQueue_name();
    if (this_present_queue_name || that_present_queue_name) {
      if (!(this_present_queue_name && that_present_queue_name))
        return false;
      if (!this.queue_name.equals(that.queue_name))
        return false;
    }

    boolean this_present_nodeCount = true && this.isSetNodeCount();
    boolean that_present_nodeCount = true && that.isSetNodeCount();
    if (this_present_nodeCount || that_present_nodeCount) {
      if (!(this_present_nodeCount && that_present_nodeCount))
        return false;
      if (this.nodeCount != that.nodeCount)
        return false;
    }

    boolean this_present_coreCount = true && this.isSetCoreCount();
    boolean that_present_coreCount = true && that.isSetCoreCount();
    if (this_present_coreCount || that_present_coreCount) {
      if (!(this_present_coreCount && that_present_coreCount))
        return false;
      if (this.coreCount != that.coreCount)
        return false;
    }

    boolean this_present_wallTimeLimit = true && this.isSetWallTimeLimit();
    boolean that_present_wallTimeLimit = true && that.isSetWallTimeLimit();
    if (this_present_wallTimeLimit || that_present_wallTimeLimit) {
      if (!(this_present_wallTimeLimit && that_present_wallTimeLimit))
        return false;
      if (this.wallTimeLimit != that.wallTimeLimit)
        return false;
    }

    boolean this_present_physicalMemory = true && this.isSetPhysicalMemory();
    boolean that_present_physicalMemory = true && that.isSetPhysicalMemory();
    if (this_present_physicalMemory || that_present_physicalMemory) {
      if (!(this_present_physicalMemory && that_present_physicalMemory))
        return false;
      if (this.physicalMemory != that.physicalMemory)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetComputeResourceId()) ? 131071 : 524287);
    if (isSetComputeResourceId())
      hashCode = hashCode * 8191 + computeResourceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueue_name()) ? 131071 : 524287);
    if (isSetQueue_name())
      hashCode = hashCode * 8191 + queue_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodeCount()) ? 131071 : 524287);
    if (isSetNodeCount())
      hashCode = hashCode * 8191 + nodeCount;

    hashCode = hashCode * 8191 + ((isSetCoreCount()) ? 131071 : 524287);
    if (isSetCoreCount())
      hashCode = hashCode * 8191 + coreCount;

    hashCode = hashCode * 8191 + ((isSetWallTimeLimit()) ? 131071 : 524287);
    if (isSetWallTimeLimit())
      hashCode = hashCode * 8191 + wallTimeLimit;

    hashCode = hashCode * 8191 + ((isSetPhysicalMemory()) ? 131071 : 524287);
    if (isSetPhysicalMemory())
      hashCode = hashCode * 8191 + physicalMemory;

    return hashCode;
  }

  @Override
  public int compareTo(ApplicationConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComputeResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueue_name()).compareTo(other.isSetQueue_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueue_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queue_name, other.queue_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeCount()).compareTo(other.isSetNodeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeCount, other.nodeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCoreCount()).compareTo(other.isSetCoreCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreCount, other.coreCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWallTimeLimit()).compareTo(other.isSetWallTimeLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWallTimeLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wallTimeLimit, other.wallTimeLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhysicalMemory()).compareTo(other.isSetPhysicalMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhysicalMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.physicalMemory, other.physicalMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ApplicationConfig(");
    boolean first = true;

    if (isSetComputeResourceId()) {
      sb.append("computeResourceId:");
      if (this.computeResourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.computeResourceId);
      }
      first = false;
    }
    if (isSetQueue_name()) {
      if (!first) sb.append(", ");
      sb.append("queue_name:");
      if (this.queue_name == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_name);
      }
      first = false;
    }
    if (isSetNodeCount()) {
      if (!first) sb.append(", ");
      sb.append("nodeCount:");
      sb.append(this.nodeCount);
      first = false;
    }
    if (isSetCoreCount()) {
      if (!first) sb.append(", ");
      sb.append("coreCount:");
      sb.append(this.coreCount);
      first = false;
    }
    if (isSetWallTimeLimit()) {
      if (!first) sb.append(", ");
      sb.append("wallTimeLimit:");
      sb.append(this.wallTimeLimit);
      first = false;
    }
    if (isSetPhysicalMemory()) {
      if (!first) sb.append(", ");
      sb.append("physicalMemory:");
      sb.append(this.physicalMemory);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationConfigStandardScheme getScheme() {
      return new ApplicationConfigStandardScheme();
    }
  }

  private static class ApplicationConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApplicationConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPUTE_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.computeResourceId = iprot.readString();
              struct.setComputeResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUEUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queue_name = iprot.readString();
              struct.setQueue_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeCount = iprot.readI32();
              struct.setNodeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CORE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coreCount = iprot.readI32();
              struct.setCoreCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WALL_TIME_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wallTimeLimit = iprot.readI32();
              struct.setWallTimeLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHYSICAL_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.physicalMemory = iprot.readI32();
              struct.setPhysicalMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.computeResourceId != null) {
        if (struct.isSetComputeResourceId()) {
          oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.computeResourceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queue_name != null) {
        if (struct.isSetQueue_name()) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queue_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNodeCount()) {
        oprot.writeFieldBegin(NODE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.nodeCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoreCount()) {
        oprot.writeFieldBegin(CORE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.coreCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWallTimeLimit()) {
        oprot.writeFieldBegin(WALL_TIME_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.wallTimeLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPhysicalMemory()) {
        oprot.writeFieldBegin(PHYSICAL_MEMORY_FIELD_DESC);
        oprot.writeI32(struct.physicalMemory);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationConfigTupleScheme getScheme() {
      return new ApplicationConfigTupleScheme();
    }
  }

  private static class ApplicationConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApplicationConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetComputeResourceId()) {
        optionals.set(0);
      }
      if (struct.isSetQueue_name()) {
        optionals.set(1);
      }
      if (struct.isSetNodeCount()) {
        optionals.set(2);
      }
      if (struct.isSetCoreCount()) {
        optionals.set(3);
      }
      if (struct.isSetWallTimeLimit()) {
        optionals.set(4);
      }
      if (struct.isSetPhysicalMemory()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetComputeResourceId()) {
        oprot.writeString(struct.computeResourceId);
      }
      if (struct.isSetQueue_name()) {
        oprot.writeString(struct.queue_name);
      }
      if (struct.isSetNodeCount()) {
        oprot.writeI32(struct.nodeCount);
      }
      if (struct.isSetCoreCount()) {
        oprot.writeI32(struct.coreCount);
      }
      if (struct.isSetWallTimeLimit()) {
        oprot.writeI32(struct.wallTimeLimit);
      }
      if (struct.isSetPhysicalMemory()) {
        oprot.writeI32(struct.physicalMemory);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.computeResourceId = iprot.readString();
        struct.setComputeResourceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queue_name = iprot.readString();
        struct.setQueue_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nodeCount = iprot.readI32();
        struct.setNodeCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coreCount = iprot.readI32();
        struct.setCoreCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wallTimeLimit = iprot.readI32();
        struct.setWallTimeLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.physicalMemory = iprot.readI32();
        struct.setPhysicalMemoryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

