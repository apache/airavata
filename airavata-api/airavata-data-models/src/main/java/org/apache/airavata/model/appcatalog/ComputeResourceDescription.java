    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Computational Resource Description
 * 
 * resourceId:
 * 
 * hostName:
 *   Fully Qualified Host Name.
 * 
 * ipAddress:
 *   IP Addresse of the Hostname.
 * 
 * resourceDescription:
 *  A user friendly description of the hostname.
 * 
 * JobSubmissionProtocols:
 *  A computational resources may have one or more ways of submitting Jobs. This structure
 *  will hold all available mechanisms to interact with the resource.
 * 
 * DataMovementProtocol:
 *  Option to specify a prefered data movement mechanism of the available options.
 * 
 */
@SuppressWarnings("all") public class ComputeResourceDescription implements org.apache.thrift.TBase<ComputeResourceDescription, ComputeResourceDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeResourceDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeResourceDescription");

  private static final org.apache.thrift.protocol.TField IS_EMPTY_FIELD_DESC = new org.apache.thrift.protocol.TField("isEmpty", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOST_ALIASES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostAliases", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField IP_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddresses", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceDescription", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SCRATCH_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("scratchLocation", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PREFERRED_JOB_SUBMISSION_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("preferredJobSubmissionProtocol", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_PROTOCOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionProtocols", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField DATA_MOVEMENT_PROTOCOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMovementProtocols", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComputeResourceDescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComputeResourceDescriptionTupleSchemeFactory());
  }

  private boolean isEmpty; // required
  private String resourceId; // required
  private String hostName; // required
  private Set<String> hostAliases; // optional
  private Set<String> ipAddresses; // optional
  private String resourceDescription; // optional
  private String scratchLocation; // optional
  private String preferredJobSubmissionProtocol; // optional
  private Map<String,JobSubmissionProtocol> jobSubmissionProtocols; // required
  private Map<String,DataMovementProtocol> dataMovementProtocols; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_EMPTY((short)1, "isEmpty"),
    RESOURCE_ID((short)2, "resourceId"),
    HOST_NAME((short)3, "hostName"),
    HOST_ALIASES((short)4, "hostAliases"),
    IP_ADDRESSES((short)5, "ipAddresses"),
    RESOURCE_DESCRIPTION((short)6, "resourceDescription"),
    SCRATCH_LOCATION((short)7, "scratchLocation"),
    PREFERRED_JOB_SUBMISSION_PROTOCOL((short)8, "preferredJobSubmissionProtocol"),
    JOB_SUBMISSION_PROTOCOLS((short)9, "jobSubmissionProtocols"),
    DATA_MOVEMENT_PROTOCOLS((short)10, "dataMovementProtocols");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_EMPTY
          return IS_EMPTY;
        case 2: // RESOURCE_ID
          return RESOURCE_ID;
        case 3: // HOST_NAME
          return HOST_NAME;
        case 4: // HOST_ALIASES
          return HOST_ALIASES;
        case 5: // IP_ADDRESSES
          return IP_ADDRESSES;
        case 6: // RESOURCE_DESCRIPTION
          return RESOURCE_DESCRIPTION;
        case 7: // SCRATCH_LOCATION
          return SCRATCH_LOCATION;
        case 8: // PREFERRED_JOB_SUBMISSION_PROTOCOL
          return PREFERRED_JOB_SUBMISSION_PROTOCOL;
        case 9: // JOB_SUBMISSION_PROTOCOLS
          return JOB_SUBMISSION_PROTOCOLS;
        case 10: // DATA_MOVEMENT_PROTOCOLS
          return DATA_MOVEMENT_PROTOCOLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISEMPTY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HOST_ALIASES,_Fields.IP_ADDRESSES,_Fields.RESOURCE_DESCRIPTION,_Fields.SCRATCH_LOCATION,_Fields.PREFERRED_JOB_SUBMISSION_PROTOCOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_EMPTY, new org.apache.thrift.meta_data.FieldMetaData("isEmpty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_ALIASES, new org.apache.thrift.meta_data.FieldMetaData("hostAliases", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IP_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("ipAddresses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESOURCE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("resourceDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRATCH_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("scratchLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREFERRED_JOB_SUBMISSION_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("preferredJobSubmissionProtocol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_SUBMISSION_PROTOCOLS, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionProtocols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobSubmissionProtocol.class))));
    tmpMap.put(_Fields.DATA_MOVEMENT_PROTOCOLS, new org.apache.thrift.meta_data.FieldMetaData("dataMovementProtocols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataMovementProtocol.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeResourceDescription.class, metaDataMap);
  }

  public ComputeResourceDescription() {
    this.isEmpty = false;

    this.resourceId = "DO_NOT_SET_AT_CLIENTS";

  }

  public ComputeResourceDescription(
    boolean isEmpty,
    String resourceId,
    String hostName,
    Map<String,JobSubmissionProtocol> jobSubmissionProtocols,
    Map<String,DataMovementProtocol> dataMovementProtocols)
  {
    this();
    this.isEmpty = isEmpty;
    setIsEmptyIsSet(true);
    this.resourceId = resourceId;
    this.hostName = hostName;
    this.jobSubmissionProtocols = jobSubmissionProtocols;
    this.dataMovementProtocols = dataMovementProtocols;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComputeResourceDescription(ComputeResourceDescription other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isEmpty = other.isEmpty;
    if (other.isSetResourceId()) {
      this.resourceId = other.resourceId;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    if (other.isSetHostAliases()) {
      Set<String> __this__hostAliases = new HashSet<String>(other.hostAliases);
      this.hostAliases = __this__hostAliases;
    }
    if (other.isSetIpAddresses()) {
      Set<String> __this__ipAddresses = new HashSet<String>(other.ipAddresses);
      this.ipAddresses = __this__ipAddresses;
    }
    if (other.isSetResourceDescription()) {
      this.resourceDescription = other.resourceDescription;
    }
    if (other.isSetScratchLocation()) {
      this.scratchLocation = other.scratchLocation;
    }
    if (other.isSetPreferredJobSubmissionProtocol()) {
      this.preferredJobSubmissionProtocol = other.preferredJobSubmissionProtocol;
    }
    if (other.isSetJobSubmissionProtocols()) {
      Map<String,JobSubmissionProtocol> __this__jobSubmissionProtocols = new HashMap<String,JobSubmissionProtocol>(other.jobSubmissionProtocols.size());
      for (Map.Entry<String, JobSubmissionProtocol> other_element : other.jobSubmissionProtocols.entrySet()) {

        String other_element_key = other_element.getKey();
        JobSubmissionProtocol other_element_value = other_element.getValue();

        String __this__jobSubmissionProtocols_copy_key = other_element_key;

        JobSubmissionProtocol __this__jobSubmissionProtocols_copy_value = other_element_value;

        __this__jobSubmissionProtocols.put(__this__jobSubmissionProtocols_copy_key, __this__jobSubmissionProtocols_copy_value);
      }
      this.jobSubmissionProtocols = __this__jobSubmissionProtocols;
    }
    if (other.isSetDataMovementProtocols()) {
      Map<String,DataMovementProtocol> __this__dataMovementProtocols = new HashMap<String,DataMovementProtocol>(other.dataMovementProtocols.size());
      for (Map.Entry<String, DataMovementProtocol> other_element : other.dataMovementProtocols.entrySet()) {

        String other_element_key = other_element.getKey();
        DataMovementProtocol other_element_value = other_element.getValue();

        String __this__dataMovementProtocols_copy_key = other_element_key;

        DataMovementProtocol __this__dataMovementProtocols_copy_value = other_element_value;

        __this__dataMovementProtocols.put(__this__dataMovementProtocols_copy_key, __this__dataMovementProtocols_copy_value);
      }
      this.dataMovementProtocols = __this__dataMovementProtocols;
    }
  }

  public ComputeResourceDescription deepCopy() {
    return new ComputeResourceDescription(this);
  }

  @Override
  public void clear() {
    this.isEmpty = false;

    this.resourceId = "DO_NOT_SET_AT_CLIENTS";

    this.hostName = null;
    this.hostAliases = null;
    this.ipAddresses = null;
    this.resourceDescription = null;
    this.scratchLocation = null;
    this.preferredJobSubmissionProtocol = null;
    this.jobSubmissionProtocols = null;
    this.dataMovementProtocols = null;
  }

  public boolean isIsEmpty() {
    return this.isEmpty;
  }

  public void setIsEmpty(boolean isEmpty) {
    this.isEmpty = isEmpty;
    setIsEmptyIsSet(true);
  }

  public void unsetIsEmpty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEMPTY_ISSET_ID);
  }

  /** Returns true if field isEmpty is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEmpty() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEMPTY_ISSET_ID);
  }

  public void setIsEmptyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEMPTY_ISSET_ID, value);
  }

  public String getResourceId() {
    return this.resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }

  public void unsetResourceId() {
    this.resourceId = null;
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return this.resourceId != null;
  }

  public void setResourceIdIsSet(boolean value) {
    if (!value) {
      this.resourceId = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getHostAliasesSize() {
    return (this.hostAliases == null) ? 0 : this.hostAliases.size();
  }

  public java.util.Iterator<String> getHostAliasesIterator() {
    return (this.hostAliases == null) ? null : this.hostAliases.iterator();
  }

  public void addToHostAliases(String elem) {
    if (this.hostAliases == null) {
      this.hostAliases = new HashSet<String>();
    }
    this.hostAliases.add(elem);
  }

  public Set<String> getHostAliases() {
    return this.hostAliases;
  }

  public void setHostAliases(Set<String> hostAliases) {
    this.hostAliases = hostAliases;
  }

  public void unsetHostAliases() {
    this.hostAliases = null;
  }

  /** Returns true if field hostAliases is set (has been assigned a value) and false otherwise */
  public boolean isSetHostAliases() {
    return this.hostAliases != null;
  }

  public void setHostAliasesIsSet(boolean value) {
    if (!value) {
      this.hostAliases = null;
    }
  }

  public int getIpAddressesSize() {
    return (this.ipAddresses == null) ? 0 : this.ipAddresses.size();
  }

  public java.util.Iterator<String> getIpAddressesIterator() {
    return (this.ipAddresses == null) ? null : this.ipAddresses.iterator();
  }

  public void addToIpAddresses(String elem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new HashSet<String>();
    }
    this.ipAddresses.add(elem);
  }

  public Set<String> getIpAddresses() {
    return this.ipAddresses;
  }

  public void setIpAddresses(Set<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }

  public void unsetIpAddresses() {
    this.ipAddresses = null;
  }

  /** Returns true if field ipAddresses is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddresses() {
    return this.ipAddresses != null;
  }

  public void setIpAddressesIsSet(boolean value) {
    if (!value) {
      this.ipAddresses = null;
    }
  }

  public String getResourceDescription() {
    return this.resourceDescription;
  }

  public void setResourceDescription(String resourceDescription) {
    this.resourceDescription = resourceDescription;
  }

  public void unsetResourceDescription() {
    this.resourceDescription = null;
  }

  /** Returns true if field resourceDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceDescription() {
    return this.resourceDescription != null;
  }

  public void setResourceDescriptionIsSet(boolean value) {
    if (!value) {
      this.resourceDescription = null;
    }
  }

  public String getScratchLocation() {
    return this.scratchLocation;
  }

  public void setScratchLocation(String scratchLocation) {
    this.scratchLocation = scratchLocation;
  }

  public void unsetScratchLocation() {
    this.scratchLocation = null;
  }

  /** Returns true if field scratchLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetScratchLocation() {
    return this.scratchLocation != null;
  }

  public void setScratchLocationIsSet(boolean value) {
    if (!value) {
      this.scratchLocation = null;
    }
  }

  public String getPreferredJobSubmissionProtocol() {
    return this.preferredJobSubmissionProtocol;
  }

  public void setPreferredJobSubmissionProtocol(String preferredJobSubmissionProtocol) {
    this.preferredJobSubmissionProtocol = preferredJobSubmissionProtocol;
  }

  public void unsetPreferredJobSubmissionProtocol() {
    this.preferredJobSubmissionProtocol = null;
  }

  /** Returns true if field preferredJobSubmissionProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferredJobSubmissionProtocol() {
    return this.preferredJobSubmissionProtocol != null;
  }

  public void setPreferredJobSubmissionProtocolIsSet(boolean value) {
    if (!value) {
      this.preferredJobSubmissionProtocol = null;
    }
  }

  public int getJobSubmissionProtocolsSize() {
    return (this.jobSubmissionProtocols == null) ? 0 : this.jobSubmissionProtocols.size();
  }

  public void putToJobSubmissionProtocols(String key, JobSubmissionProtocol val) {
    if (this.jobSubmissionProtocols == null) {
      this.jobSubmissionProtocols = new HashMap<String,JobSubmissionProtocol>();
    }
    this.jobSubmissionProtocols.put(key, val);
  }

  public Map<String,JobSubmissionProtocol> getJobSubmissionProtocols() {
    return this.jobSubmissionProtocols;
  }

  public void setJobSubmissionProtocols(Map<String,JobSubmissionProtocol> jobSubmissionProtocols) {
    this.jobSubmissionProtocols = jobSubmissionProtocols;
  }

  public void unsetJobSubmissionProtocols() {
    this.jobSubmissionProtocols = null;
  }

  /** Returns true if field jobSubmissionProtocols is set (has been assigned a value) and false otherwise */
  public boolean isSetJobSubmissionProtocols() {
    return this.jobSubmissionProtocols != null;
  }

  public void setJobSubmissionProtocolsIsSet(boolean value) {
    if (!value) {
      this.jobSubmissionProtocols = null;
    }
  }

  public int getDataMovementProtocolsSize() {
    return (this.dataMovementProtocols == null) ? 0 : this.dataMovementProtocols.size();
  }

  public void putToDataMovementProtocols(String key, DataMovementProtocol val) {
    if (this.dataMovementProtocols == null) {
      this.dataMovementProtocols = new HashMap<String,DataMovementProtocol>();
    }
    this.dataMovementProtocols.put(key, val);
  }

  public Map<String,DataMovementProtocol> getDataMovementProtocols() {
    return this.dataMovementProtocols;
  }

  public void setDataMovementProtocols(Map<String,DataMovementProtocol> dataMovementProtocols) {
    this.dataMovementProtocols = dataMovementProtocols;
  }

  public void unsetDataMovementProtocols() {
    this.dataMovementProtocols = null;
  }

  /** Returns true if field dataMovementProtocols is set (has been assigned a value) and false otherwise */
  public boolean isSetDataMovementProtocols() {
    return this.dataMovementProtocols != null;
  }

  public void setDataMovementProtocolsIsSet(boolean value) {
    if (!value) {
      this.dataMovementProtocols = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_EMPTY:
      if (value == null) {
        unsetIsEmpty();
      } else {
        setIsEmpty((Boolean)value);
      }
      break;

    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case HOST_ALIASES:
      if (value == null) {
        unsetHostAliases();
      } else {
        setHostAliases((Set<String>)value);
      }
      break;

    case IP_ADDRESSES:
      if (value == null) {
        unsetIpAddresses();
      } else {
        setIpAddresses((Set<String>)value);
      }
      break;

    case RESOURCE_DESCRIPTION:
      if (value == null) {
        unsetResourceDescription();
      } else {
        setResourceDescription((String)value);
      }
      break;

    case SCRATCH_LOCATION:
      if (value == null) {
        unsetScratchLocation();
      } else {
        setScratchLocation((String)value);
      }
      break;

    case PREFERRED_JOB_SUBMISSION_PROTOCOL:
      if (value == null) {
        unsetPreferredJobSubmissionProtocol();
      } else {
        setPreferredJobSubmissionProtocol((String)value);
      }
      break;

    case JOB_SUBMISSION_PROTOCOLS:
      if (value == null) {
        unsetJobSubmissionProtocols();
      } else {
        setJobSubmissionProtocols((Map<String,JobSubmissionProtocol>)value);
      }
      break;

    case DATA_MOVEMENT_PROTOCOLS:
      if (value == null) {
        unsetDataMovementProtocols();
      } else {
        setDataMovementProtocols((Map<String,DataMovementProtocol>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_EMPTY:
      return Boolean.valueOf(isIsEmpty());

    case RESOURCE_ID:
      return getResourceId();

    case HOST_NAME:
      return getHostName();

    case HOST_ALIASES:
      return getHostAliases();

    case IP_ADDRESSES:
      return getIpAddresses();

    case RESOURCE_DESCRIPTION:
      return getResourceDescription();

    case SCRATCH_LOCATION:
      return getScratchLocation();

    case PREFERRED_JOB_SUBMISSION_PROTOCOL:
      return getPreferredJobSubmissionProtocol();

    case JOB_SUBMISSION_PROTOCOLS:
      return getJobSubmissionProtocols();

    case DATA_MOVEMENT_PROTOCOLS:
      return getDataMovementProtocols();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_EMPTY:
      return isSetIsEmpty();
    case RESOURCE_ID:
      return isSetResourceId();
    case HOST_NAME:
      return isSetHostName();
    case HOST_ALIASES:
      return isSetHostAliases();
    case IP_ADDRESSES:
      return isSetIpAddresses();
    case RESOURCE_DESCRIPTION:
      return isSetResourceDescription();
    case SCRATCH_LOCATION:
      return isSetScratchLocation();
    case PREFERRED_JOB_SUBMISSION_PROTOCOL:
      return isSetPreferredJobSubmissionProtocol();
    case JOB_SUBMISSION_PROTOCOLS:
      return isSetJobSubmissionProtocols();
    case DATA_MOVEMENT_PROTOCOLS:
      return isSetDataMovementProtocols();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComputeResourceDescription)
      return this.equals((ComputeResourceDescription)that);
    return false;
  }

  public boolean equals(ComputeResourceDescription that) {
    if (that == null)
      return false;

    boolean this_present_isEmpty = true;
    boolean that_present_isEmpty = true;
    if (this_present_isEmpty || that_present_isEmpty) {
      if (!(this_present_isEmpty && that_present_isEmpty))
        return false;
      if (this.isEmpty != that.isEmpty)
        return false;
    }

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (!this.resourceId.equals(that.resourceId))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_hostAliases = true && this.isSetHostAliases();
    boolean that_present_hostAliases = true && that.isSetHostAliases();
    if (this_present_hostAliases || that_present_hostAliases) {
      if (!(this_present_hostAliases && that_present_hostAliases))
        return false;
      if (!this.hostAliases.equals(that.hostAliases))
        return false;
    }

    boolean this_present_ipAddresses = true && this.isSetIpAddresses();
    boolean that_present_ipAddresses = true && that.isSetIpAddresses();
    if (this_present_ipAddresses || that_present_ipAddresses) {
      if (!(this_present_ipAddresses && that_present_ipAddresses))
        return false;
      if (!this.ipAddresses.equals(that.ipAddresses))
        return false;
    }

    boolean this_present_resourceDescription = true && this.isSetResourceDescription();
    boolean that_present_resourceDescription = true && that.isSetResourceDescription();
    if (this_present_resourceDescription || that_present_resourceDescription) {
      if (!(this_present_resourceDescription && that_present_resourceDescription))
        return false;
      if (!this.resourceDescription.equals(that.resourceDescription))
        return false;
    }

    boolean this_present_scratchLocation = true && this.isSetScratchLocation();
    boolean that_present_scratchLocation = true && that.isSetScratchLocation();
    if (this_present_scratchLocation || that_present_scratchLocation) {
      if (!(this_present_scratchLocation && that_present_scratchLocation))
        return false;
      if (!this.scratchLocation.equals(that.scratchLocation))
        return false;
    }

    boolean this_present_preferredJobSubmissionProtocol = true && this.isSetPreferredJobSubmissionProtocol();
    boolean that_present_preferredJobSubmissionProtocol = true && that.isSetPreferredJobSubmissionProtocol();
    if (this_present_preferredJobSubmissionProtocol || that_present_preferredJobSubmissionProtocol) {
      if (!(this_present_preferredJobSubmissionProtocol && that_present_preferredJobSubmissionProtocol))
        return false;
      if (!this.preferredJobSubmissionProtocol.equals(that.preferredJobSubmissionProtocol))
        return false;
    }

    boolean this_present_jobSubmissionProtocols = true && this.isSetJobSubmissionProtocols();
    boolean that_present_jobSubmissionProtocols = true && that.isSetJobSubmissionProtocols();
    if (this_present_jobSubmissionProtocols || that_present_jobSubmissionProtocols) {
      if (!(this_present_jobSubmissionProtocols && that_present_jobSubmissionProtocols))
        return false;
      if (!this.jobSubmissionProtocols.equals(that.jobSubmissionProtocols))
        return false;
    }

    boolean this_present_dataMovementProtocols = true && this.isSetDataMovementProtocols();
    boolean that_present_dataMovementProtocols = true && that.isSetDataMovementProtocols();
    if (this_present_dataMovementProtocols || that_present_dataMovementProtocols) {
      if (!(this_present_dataMovementProtocols && that_present_dataMovementProtocols))
        return false;
      if (!this.dataMovementProtocols.equals(that.dataMovementProtocols))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ComputeResourceDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsEmpty()).compareTo(other.isSetIsEmpty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEmpty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEmpty, other.isEmpty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostAliases()).compareTo(other.isSetHostAliases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostAliases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostAliases, other.hostAliases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddresses()).compareTo(other.isSetIpAddresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddresses, other.ipAddresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceDescription()).compareTo(other.isSetResourceDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceDescription, other.resourceDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScratchLocation()).compareTo(other.isSetScratchLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScratchLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scratchLocation, other.scratchLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferredJobSubmissionProtocol()).compareTo(other.isSetPreferredJobSubmissionProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferredJobSubmissionProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferredJobSubmissionProtocol, other.preferredJobSubmissionProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobSubmissionProtocols()).compareTo(other.isSetJobSubmissionProtocols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobSubmissionProtocols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionProtocols, other.jobSubmissionProtocols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataMovementProtocols()).compareTo(other.isSetDataMovementProtocols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataMovementProtocols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMovementProtocols, other.dataMovementProtocols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComputeResourceDescription(");
    boolean first = true;

    sb.append("isEmpty:");
    sb.append(this.isEmpty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceId:");
    if (this.resourceId == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (isSetHostAliases()) {
      if (!first) sb.append(", ");
      sb.append("hostAliases:");
      if (this.hostAliases == null) {
        sb.append("null");
      } else {
        sb.append(this.hostAliases);
      }
      first = false;
    }
    if (isSetIpAddresses()) {
      if (!first) sb.append(", ");
      sb.append("ipAddresses:");
      if (this.ipAddresses == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAddresses);
      }
      first = false;
    }
    if (isSetResourceDescription()) {
      if (!first) sb.append(", ");
      sb.append("resourceDescription:");
      if (this.resourceDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceDescription);
      }
      first = false;
    }
    if (isSetScratchLocation()) {
      if (!first) sb.append(", ");
      sb.append("scratchLocation:");
      if (this.scratchLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.scratchLocation);
      }
      first = false;
    }
    if (isSetPreferredJobSubmissionProtocol()) {
      if (!first) sb.append(", ");
      sb.append("preferredJobSubmissionProtocol:");
      if (this.preferredJobSubmissionProtocol == null) {
        sb.append("null");
      } else {
        sb.append(this.preferredJobSubmissionProtocol);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("jobSubmissionProtocols:");
    if (this.jobSubmissionProtocols == null) {
      sb.append("null");
    } else {
      sb.append(this.jobSubmissionProtocols);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataMovementProtocols:");
    if (this.dataMovementProtocols == null) {
      sb.append("null");
    } else {
      sb.append(this.dataMovementProtocols);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetIsEmpty()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isEmpty' is unset! Struct:" + toString());
    }

    if (!isSetResourceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceId' is unset! Struct:" + toString());
    }

    if (!isSetHostName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostName' is unset! Struct:" + toString());
    }

    if (!isSetJobSubmissionProtocols()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobSubmissionProtocols' is unset! Struct:" + toString());
    }

    if (!isSetDataMovementProtocols()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataMovementProtocols' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComputeResourceDescriptionStandardSchemeFactory implements SchemeFactory {
    public ComputeResourceDescriptionStandardScheme getScheme() {
      return new ComputeResourceDescriptionStandardScheme();
    }
  }

  private static class ComputeResourceDescriptionStandardScheme extends StandardScheme<ComputeResourceDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_EMPTY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEmpty = iprot.readBool();
              struct.setIsEmptyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceId = iprot.readString();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOST_ALIASES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                struct.hostAliases = new HashSet<String>(2*_set32.size);
                for (int _i33 = 0; _i33 < _set32.size; ++_i33)
                {
                  String _elem34;
                  _elem34 = iprot.readString();
                  struct.hostAliases.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setHostAliasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IP_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
                struct.ipAddresses = new HashSet<String>(2*_set35.size);
                for (int _i36 = 0; _i36 < _set35.size; ++_i36)
                {
                  String _elem37;
                  _elem37 = iprot.readString();
                  struct.ipAddresses.add(_elem37);
                }
                iprot.readSetEnd();
              }
              struct.setIpAddressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceDescription = iprot.readString();
              struct.setResourceDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCRATCH_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scratchLocation = iprot.readString();
              struct.setScratchLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PREFERRED_JOB_SUBMISSION_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preferredJobSubmissionProtocol = iprot.readString();
              struct.setPreferredJobSubmissionProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JOB_SUBMISSION_PROTOCOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.jobSubmissionProtocols = new HashMap<String,JobSubmissionProtocol>(2*_map38.size);
                for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                {
                  String _key40;
                  JobSubmissionProtocol _val41;
                  _key40 = iprot.readString();
                  _val41 = JobSubmissionProtocol.findByValue(iprot.readI32());
                  struct.jobSubmissionProtocols.put(_key40, _val41);
                }
                iprot.readMapEnd();
              }
              struct.setJobSubmissionProtocolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATA_MOVEMENT_PROTOCOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                struct.dataMovementProtocols = new HashMap<String,DataMovementProtocol>(2*_map42.size);
                for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                {
                  String _key44;
                  DataMovementProtocol _val45;
                  _key44 = iprot.readString();
                  _val45 = DataMovementProtocol.findByValue(iprot.readI32());
                  struct.dataMovementProtocols.put(_key44, _val45);
                }
                iprot.readMapEnd();
              }
              struct.setDataMovementProtocolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_EMPTY_FIELD_DESC);
      oprot.writeBool(struct.isEmpty);
      oprot.writeFieldEnd();
      if (struct.resourceId != null) {
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.resourceId);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      if (struct.hostAliases != null) {
        if (struct.isSetHostAliases()) {
          oprot.writeFieldBegin(HOST_ALIASES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.hostAliases.size()));
            for (String _iter46 : struct.hostAliases)
            {
              oprot.writeString(_iter46);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ipAddresses != null) {
        if (struct.isSetIpAddresses()) {
          oprot.writeFieldBegin(IP_ADDRESSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.ipAddresses.size()));
            for (String _iter47 : struct.ipAddresses)
            {
              oprot.writeString(_iter47);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceDescription != null) {
        if (struct.isSetResourceDescription()) {
          oprot.writeFieldBegin(RESOURCE_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.resourceDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.scratchLocation != null) {
        if (struct.isSetScratchLocation()) {
          oprot.writeFieldBegin(SCRATCH_LOCATION_FIELD_DESC);
          oprot.writeString(struct.scratchLocation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preferredJobSubmissionProtocol != null) {
        if (struct.isSetPreferredJobSubmissionProtocol()) {
          oprot.writeFieldBegin(PREFERRED_JOB_SUBMISSION_PROTOCOL_FIELD_DESC);
          oprot.writeString(struct.preferredJobSubmissionProtocol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobSubmissionProtocols != null) {
        oprot.writeFieldBegin(JOB_SUBMISSION_PROTOCOLS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.jobSubmissionProtocols.size()));
          for (Map.Entry<String, JobSubmissionProtocol> _iter48 : struct.jobSubmissionProtocols.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            oprot.writeI32(_iter48.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dataMovementProtocols != null) {
        oprot.writeFieldBegin(DATA_MOVEMENT_PROTOCOLS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.dataMovementProtocols.size()));
          for (Map.Entry<String, DataMovementProtocol> _iter49 : struct.dataMovementProtocols.entrySet())
          {
            oprot.writeString(_iter49.getKey());
            oprot.writeI32(_iter49.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComputeResourceDescriptionTupleSchemeFactory implements SchemeFactory {
    public ComputeResourceDescriptionTupleScheme getScheme() {
      return new ComputeResourceDescriptionTupleScheme();
    }
  }

  private static class ComputeResourceDescriptionTupleScheme extends TupleScheme<ComputeResourceDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.isEmpty);
      oprot.writeString(struct.resourceId);
      oprot.writeString(struct.hostName);
      {
        oprot.writeI32(struct.jobSubmissionProtocols.size());
        for (Map.Entry<String, JobSubmissionProtocol> _iter50 : struct.jobSubmissionProtocols.entrySet())
        {
          oprot.writeString(_iter50.getKey());
          oprot.writeI32(_iter50.getValue().getValue());
        }
      }
      {
        oprot.writeI32(struct.dataMovementProtocols.size());
        for (Map.Entry<String, DataMovementProtocol> _iter51 : struct.dataMovementProtocols.entrySet())
        {
          oprot.writeString(_iter51.getKey());
          oprot.writeI32(_iter51.getValue().getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetHostAliases()) {
        optionals.set(0);
      }
      if (struct.isSetIpAddresses()) {
        optionals.set(1);
      }
      if (struct.isSetResourceDescription()) {
        optionals.set(2);
      }
      if (struct.isSetScratchLocation()) {
        optionals.set(3);
      }
      if (struct.isSetPreferredJobSubmissionProtocol()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHostAliases()) {
        {
          oprot.writeI32(struct.hostAliases.size());
          for (String _iter52 : struct.hostAliases)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetIpAddresses()) {
        {
          oprot.writeI32(struct.ipAddresses.size());
          for (String _iter53 : struct.ipAddresses)
          {
            oprot.writeString(_iter53);
          }
        }
      }
      if (struct.isSetResourceDescription()) {
        oprot.writeString(struct.resourceDescription);
      }
      if (struct.isSetScratchLocation()) {
        oprot.writeString(struct.scratchLocation);
      }
      if (struct.isSetPreferredJobSubmissionProtocol()) {
        oprot.writeString(struct.preferredJobSubmissionProtocol);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.isEmpty = iprot.readBool();
      struct.setIsEmptyIsSet(true);
      struct.resourceId = iprot.readString();
      struct.setResourceIdIsSet(true);
      struct.hostName = iprot.readString();
      struct.setHostNameIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.jobSubmissionProtocols = new HashMap<String,JobSubmissionProtocol>(2*_map54.size);
        for (int _i55 = 0; _i55 < _map54.size; ++_i55)
        {
          String _key56;
          JobSubmissionProtocol _val57;
          _key56 = iprot.readString();
          _val57 = JobSubmissionProtocol.findByValue(iprot.readI32());
          struct.jobSubmissionProtocols.put(_key56, _val57);
        }
      }
      struct.setJobSubmissionProtocolsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.dataMovementProtocols = new HashMap<String,DataMovementProtocol>(2*_map58.size);
        for (int _i59 = 0; _i59 < _map58.size; ++_i59)
        {
          String _key60;
          DataMovementProtocol _val61;
          _key60 = iprot.readString();
          _val61 = DataMovementProtocol.findByValue(iprot.readI32());
          struct.dataMovementProtocols.put(_key60, _val61);
        }
      }
      struct.setDataMovementProtocolsIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set62 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hostAliases = new HashSet<String>(2*_set62.size);
          for (int _i63 = 0; _i63 < _set62.size; ++_i63)
          {
            String _elem64;
            _elem64 = iprot.readString();
            struct.hostAliases.add(_elem64);
          }
        }
        struct.setHostAliasesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set65 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ipAddresses = new HashSet<String>(2*_set65.size);
          for (int _i66 = 0; _i66 < _set65.size; ++_i66)
          {
            String _elem67;
            _elem67 = iprot.readString();
            struct.ipAddresses.add(_elem67);
          }
        }
        struct.setIpAddressesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceDescription = iprot.readString();
        struct.setResourceDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.scratchLocation = iprot.readString();
        struct.setScratchLocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.preferredJobSubmissionProtocol = iprot.readString();
        struct.setPreferredJobSubmissionProtocolIsSet(true);
      }
    }
  }

}

