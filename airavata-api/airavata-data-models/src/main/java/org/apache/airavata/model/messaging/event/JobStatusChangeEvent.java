/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.messaging.event;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class JobStatusChangeEvent implements org.apache.thrift.TBase<JobStatusChangeEvent, JobStatusChangeEvent._Fields>, java.io.Serializable, Cloneable, Comparable<JobStatusChangeEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobStatusChangeEvent");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobIdentity", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_MONITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("jobMonitor", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobStatusChangeEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobStatusChangeEventTupleSchemeFactory());
  }

  private org.apache.airavata.model.workspace.experiment.JobState state; // required
  private JobIdentity jobIdentity; // required
  private JobMonitor jobMonitor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see org.apache.airavata.model.workspace.experiment.JobState
     */
    STATE((short)1, "state"),
    JOB_IDENTITY((short)2, "jobIdentity"),
    JOB_MONITOR((short)3, "jobMonitor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // JOB_IDENTITY
          return JOB_IDENTITY;
        case 3: // JOB_MONITOR
          return JOB_MONITOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.airavata.model.workspace.experiment.JobState.class)));
    tmpMap.put(_Fields.JOB_IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("jobIdentity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobIdentity.class)));
    tmpMap.put(_Fields.JOB_MONITOR, new org.apache.thrift.meta_data.FieldMetaData("jobMonitor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobMonitor.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobStatusChangeEvent.class, metaDataMap);
  }

  public JobStatusChangeEvent() {
  }

  public JobStatusChangeEvent(
    org.apache.airavata.model.workspace.experiment.JobState state,
    JobIdentity jobIdentity,
    JobMonitor jobMonitor)
  {
    this();
    this.state = state;
    this.jobIdentity = jobIdentity;
    this.jobMonitor = jobMonitor;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobStatusChangeEvent(JobStatusChangeEvent other) {
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetJobIdentity()) {
      this.jobIdentity = new JobIdentity(other.jobIdentity);
    }
    if (other.isSetJobMonitor()) {
      this.jobMonitor = new JobMonitor(other.jobMonitor);
    }
  }

  public JobStatusChangeEvent deepCopy() {
    return new JobStatusChangeEvent(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.jobIdentity = null;
    this.jobMonitor = null;
  }

  /**
   * 
   * @see org.apache.airavata.model.workspace.experiment.JobState
   */
  public org.apache.airavata.model.workspace.experiment.JobState getState() {
    return this.state;
  }

  /**
   * 
   * @see org.apache.airavata.model.workspace.experiment.JobState
   */
  public void setState(org.apache.airavata.model.workspace.experiment.JobState state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public JobIdentity getJobIdentity() {
    return this.jobIdentity;
  }

  public void setJobIdentity(JobIdentity jobIdentity) {
    this.jobIdentity = jobIdentity;
  }

  public void unsetJobIdentity() {
    this.jobIdentity = null;
  }

  /** Returns true if field jobIdentity is set (has been assigned a value) and false otherwise */
  public boolean isSetJobIdentity() {
    return this.jobIdentity != null;
  }

  public void setJobIdentityIsSet(boolean value) {
    if (!value) {
      this.jobIdentity = null;
    }
  }

  public JobMonitor getJobMonitor() {
    return this.jobMonitor;
  }

  public void setJobMonitor(JobMonitor jobMonitor) {
    this.jobMonitor = jobMonitor;
  }

  public void unsetJobMonitor() {
    this.jobMonitor = null;
  }

  /** Returns true if field jobMonitor is set (has been assigned a value) and false otherwise */
  public boolean isSetJobMonitor() {
    return this.jobMonitor != null;
  }

  public void setJobMonitorIsSet(boolean value) {
    if (!value) {
      this.jobMonitor = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((org.apache.airavata.model.workspace.experiment.JobState)value);
      }
      break;

    case JOB_IDENTITY:
      if (value == null) {
        unsetJobIdentity();
      } else {
        setJobIdentity((JobIdentity)value);
      }
      break;

    case JOB_MONITOR:
      if (value == null) {
        unsetJobMonitor();
      } else {
        setJobMonitor((JobMonitor)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case JOB_IDENTITY:
      return getJobIdentity();

    case JOB_MONITOR:
      return getJobMonitor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case JOB_IDENTITY:
      return isSetJobIdentity();
    case JOB_MONITOR:
      return isSetJobMonitor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobStatusChangeEvent)
      return this.equals((JobStatusChangeEvent)that);
    return false;
  }

  public boolean equals(JobStatusChangeEvent that) {
    if (that == null)
      return false;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_jobIdentity = true && this.isSetJobIdentity();
    boolean that_present_jobIdentity = true && that.isSetJobIdentity();
    if (this_present_jobIdentity || that_present_jobIdentity) {
      if (!(this_present_jobIdentity && that_present_jobIdentity))
        return false;
      if (!this.jobIdentity.equals(that.jobIdentity))
        return false;
    }

    boolean this_present_jobMonitor = true && this.isSetJobMonitor();
    boolean that_present_jobMonitor = true && that.isSetJobMonitor();
    if (this_present_jobMonitor || that_present_jobMonitor) {
      if (!(this_present_jobMonitor && that_present_jobMonitor))
        return false;
      if (!this.jobMonitor.equals(that.jobMonitor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JobStatusChangeEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobIdentity()).compareTo(other.isSetJobIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobIdentity, other.jobIdentity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobMonitor()).compareTo(other.isSetJobMonitor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobMonitor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobMonitor, other.jobMonitor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobStatusChangeEvent(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobIdentity:");
    if (this.jobIdentity == null) {
      sb.append("null");
    } else {
      sb.append(this.jobIdentity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobMonitor:");
    if (this.jobMonitor == null) {
      sb.append("null");
    } else {
      sb.append(this.jobMonitor);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetState()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' is unset! Struct:" + toString());
    }

    if (!isSetJobIdentity()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobIdentity' is unset! Struct:" + toString());
    }

    if (!isSetJobMonitor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobMonitor' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (jobIdentity != null) {
      jobIdentity.validate();
    }
    if (jobMonitor != null) {
      jobMonitor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStatusChangeEventStandardSchemeFactory implements SchemeFactory {
    public JobStatusChangeEventStandardScheme getScheme() {
      return new JobStatusChangeEventStandardScheme();
    }
  }

  private static class JobStatusChangeEventStandardScheme extends StandardScheme<JobStatusChangeEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobStatusChangeEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = org.apache.airavata.model.workspace.experiment.JobState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jobIdentity = new JobIdentity();
              struct.jobIdentity.read(iprot);
              struct.setJobIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_MONITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jobMonitor = new JobMonitor();
              struct.jobMonitor.read(iprot);
              struct.setJobMonitorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobStatusChangeEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.jobIdentity != null) {
        oprot.writeFieldBegin(JOB_IDENTITY_FIELD_DESC);
        struct.jobIdentity.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.jobMonitor != null) {
        oprot.writeFieldBegin(JOB_MONITOR_FIELD_DESC);
        struct.jobMonitor.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobStatusChangeEventTupleSchemeFactory implements SchemeFactory {
    public JobStatusChangeEventTupleScheme getScheme() {
      return new JobStatusChangeEventTupleScheme();
    }
  }

  private static class JobStatusChangeEventTupleScheme extends TupleScheme<JobStatusChangeEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobStatusChangeEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.state.getValue());
      struct.jobIdentity.write(oprot);
      struct.jobMonitor.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobStatusChangeEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.state = org.apache.airavata.model.workspace.experiment.JobState.findByValue(iprot.readI32());
      struct.setStateIsSet(true);
      struct.jobIdentity = new JobIdentity();
      struct.jobIdentity.read(iprot);
      struct.setJobIdentityIsSet(true);
      struct.jobMonitor = new JobMonitor();
      struct.jobMonitor.read(iprot);
      struct.setJobMonitorIsSet(true);
    }
  }

}

