    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class ApplicationDeployment implements org.apache.thrift.TBase<ApplicationDeployment, ApplicationDeployment._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationDeployment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationDeployment");

  private static final org.apache.thrift.protocol.TField DEPLOYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deploymentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceDescription", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField APPLICATION_DESCRIPTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDescriptor", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplicationDeploymentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplicationDeploymentTupleSchemeFactory());
  }

  private String deploymentId; // required
  private ComputeResourceDescription computeResourceDescription; // required
  private ApplicationDescriptor applicationDescriptor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPLOYMENT_ID((short)1, "deploymentId"),
    COMPUTE_RESOURCE_DESCRIPTION((short)2, "computeResourceDescription"),
    APPLICATION_DESCRIPTOR((short)3, "applicationDescriptor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPLOYMENT_ID
          return DEPLOYMENT_ID;
        case 2: // COMPUTE_RESOURCE_DESCRIPTION
          return COMPUTE_RESOURCE_DESCRIPTION;
        case 3: // APPLICATION_DESCRIPTOR
          return APPLICATION_DESCRIPTOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPLOYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("deploymentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPUTE_RESOURCE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("computeResourceDescription", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComputeResourceDescription.class)));
    tmpMap.put(_Fields.APPLICATION_DESCRIPTOR, new org.apache.thrift.meta_data.FieldMetaData("applicationDescriptor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplicationDescriptor.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationDeployment.class, metaDataMap);
  }

  public ApplicationDeployment() {
    this.deploymentId = "DO_NOT_SET_AT_CLIENTS";

  }

  public ApplicationDeployment(
    String deploymentId,
    ComputeResourceDescription computeResourceDescription,
    ApplicationDescriptor applicationDescriptor)
  {
    this();
    this.deploymentId = deploymentId;
    this.computeResourceDescription = computeResourceDescription;
    this.applicationDescriptor = applicationDescriptor;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationDeployment(ApplicationDeployment other) {
    if (other.isSetDeploymentId()) {
      this.deploymentId = other.deploymentId;
    }
    if (other.isSetComputeResourceDescription()) {
      this.computeResourceDescription = new ComputeResourceDescription(other.computeResourceDescription);
    }
    if (other.isSetApplicationDescriptor()) {
      this.applicationDescriptor = new ApplicationDescriptor(other.applicationDescriptor);
    }
  }

  public ApplicationDeployment deepCopy() {
    return new ApplicationDeployment(this);
  }

  @Override
  public void clear() {
    this.deploymentId = "DO_NOT_SET_AT_CLIENTS";

    this.computeResourceDescription = null;
    this.applicationDescriptor = null;
  }

  public String getDeploymentId() {
    return this.deploymentId;
  }

  public void setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
  }

  public void unsetDeploymentId() {
    this.deploymentId = null;
  }

  /** Returns true if field deploymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeploymentId() {
    return this.deploymentId != null;
  }

  public void setDeploymentIdIsSet(boolean value) {
    if (!value) {
      this.deploymentId = null;
    }
  }

  public ComputeResourceDescription getComputeResourceDescription() {
    return this.computeResourceDescription;
  }

  public void setComputeResourceDescription(ComputeResourceDescription computeResourceDescription) {
    this.computeResourceDescription = computeResourceDescription;
  }

  public void unsetComputeResourceDescription() {
    this.computeResourceDescription = null;
  }

  /** Returns true if field computeResourceDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetComputeResourceDescription() {
    return this.computeResourceDescription != null;
  }

  public void setComputeResourceDescriptionIsSet(boolean value) {
    if (!value) {
      this.computeResourceDescription = null;
    }
  }

  public ApplicationDescriptor getApplicationDescriptor() {
    return this.applicationDescriptor;
  }

  public void setApplicationDescriptor(ApplicationDescriptor applicationDescriptor) {
    this.applicationDescriptor = applicationDescriptor;
  }

  public void unsetApplicationDescriptor() {
    this.applicationDescriptor = null;
  }

  /** Returns true if field applicationDescriptor is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationDescriptor() {
    return this.applicationDescriptor != null;
  }

  public void setApplicationDescriptorIsSet(boolean value) {
    if (!value) {
      this.applicationDescriptor = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEPLOYMENT_ID:
      if (value == null) {
        unsetDeploymentId();
      } else {
        setDeploymentId((String)value);
      }
      break;

    case COMPUTE_RESOURCE_DESCRIPTION:
      if (value == null) {
        unsetComputeResourceDescription();
      } else {
        setComputeResourceDescription((ComputeResourceDescription)value);
      }
      break;

    case APPLICATION_DESCRIPTOR:
      if (value == null) {
        unsetApplicationDescriptor();
      } else {
        setApplicationDescriptor((ApplicationDescriptor)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEPLOYMENT_ID:
      return getDeploymentId();

    case COMPUTE_RESOURCE_DESCRIPTION:
      return getComputeResourceDescription();

    case APPLICATION_DESCRIPTOR:
      return getApplicationDescriptor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEPLOYMENT_ID:
      return isSetDeploymentId();
    case COMPUTE_RESOURCE_DESCRIPTION:
      return isSetComputeResourceDescription();
    case APPLICATION_DESCRIPTOR:
      return isSetApplicationDescriptor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationDeployment)
      return this.equals((ApplicationDeployment)that);
    return false;
  }

  public boolean equals(ApplicationDeployment that) {
    if (that == null)
      return false;

    boolean this_present_deploymentId = true && this.isSetDeploymentId();
    boolean that_present_deploymentId = true && that.isSetDeploymentId();
    if (this_present_deploymentId || that_present_deploymentId) {
      if (!(this_present_deploymentId && that_present_deploymentId))
        return false;
      if (!this.deploymentId.equals(that.deploymentId))
        return false;
    }

    boolean this_present_computeResourceDescription = true && this.isSetComputeResourceDescription();
    boolean that_present_computeResourceDescription = true && that.isSetComputeResourceDescription();
    if (this_present_computeResourceDescription || that_present_computeResourceDescription) {
      if (!(this_present_computeResourceDescription && that_present_computeResourceDescription))
        return false;
      if (!this.computeResourceDescription.equals(that.computeResourceDescription))
        return false;
    }

    boolean this_present_applicationDescriptor = true && this.isSetApplicationDescriptor();
    boolean that_present_applicationDescriptor = true && that.isSetApplicationDescriptor();
    if (this_present_applicationDescriptor || that_present_applicationDescriptor) {
      if (!(this_present_applicationDescriptor && that_present_applicationDescriptor))
        return false;
      if (!this.applicationDescriptor.equals(that.applicationDescriptor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ApplicationDeployment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeploymentId()).compareTo(other.isSetDeploymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeploymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deploymentId, other.deploymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComputeResourceDescription()).compareTo(other.isSetComputeResourceDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComputeResourceDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceDescription, other.computeResourceDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationDescriptor()).compareTo(other.isSetApplicationDescriptor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationDescriptor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDescriptor, other.applicationDescriptor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplicationDeployment(");
    boolean first = true;

    sb.append("deploymentId:");
    if (this.deploymentId == null) {
      sb.append("null");
    } else {
      sb.append(this.deploymentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("computeResourceDescription:");
    if (this.computeResourceDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.computeResourceDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationDescriptor:");
    if (this.applicationDescriptor == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationDescriptor);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetDeploymentId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deploymentId' is unset! Struct:" + toString());
    }

    if (!isSetComputeResourceDescription()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceDescription' is unset! Struct:" + toString());
    }

    if (!isSetApplicationDescriptor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationDescriptor' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (computeResourceDescription != null) {
      computeResourceDescription.validate();
    }
    if (applicationDescriptor != null) {
      applicationDescriptor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationDeploymentStandardSchemeFactory implements SchemeFactory {
    public ApplicationDeploymentStandardScheme getScheme() {
      return new ApplicationDeploymentStandardScheme();
    }
  }

  private static class ApplicationDeploymentStandardScheme extends StandardScheme<ApplicationDeployment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationDeployment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEPLOYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deploymentId = iprot.readString();
              struct.setDeploymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPUTE_RESOURCE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.computeResourceDescription = new ComputeResourceDescription();
              struct.computeResourceDescription.read(iprot);
              struct.setComputeResourceDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLICATION_DESCRIPTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.applicationDescriptor = new ApplicationDescriptor();
              struct.applicationDescriptor.read(iprot);
              struct.setApplicationDescriptorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationDeployment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deploymentId != null) {
        oprot.writeFieldBegin(DEPLOYMENT_ID_FIELD_DESC);
        oprot.writeString(struct.deploymentId);
        oprot.writeFieldEnd();
      }
      if (struct.computeResourceDescription != null) {
        oprot.writeFieldBegin(COMPUTE_RESOURCE_DESCRIPTION_FIELD_DESC);
        struct.computeResourceDescription.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.applicationDescriptor != null) {
        oprot.writeFieldBegin(APPLICATION_DESCRIPTOR_FIELD_DESC);
        struct.applicationDescriptor.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationDeploymentTupleSchemeFactory implements SchemeFactory {
    public ApplicationDeploymentTupleScheme getScheme() {
      return new ApplicationDeploymentTupleScheme();
    }
  }

  private static class ApplicationDeploymentTupleScheme extends TupleScheme<ApplicationDeployment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationDeployment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.deploymentId);
      struct.computeResourceDescription.write(oprot);
      struct.applicationDescriptor.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationDeployment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.deploymentId = iprot.readString();
      struct.setDeploymentIdIsSet(true);
      struct.computeResourceDescription = new ComputeResourceDescription();
      struct.computeResourceDescription.read(iprot);
      struct.setComputeResourceDescriptionIsSet(true);
      struct.applicationDescriptor = new ApplicationDescriptor();
      struct.applicationDescriptor.read(iprot);
      struct.setApplicationDescriptorIsSet(true);
    }
  }

}

