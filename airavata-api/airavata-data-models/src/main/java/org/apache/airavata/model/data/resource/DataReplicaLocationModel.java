/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.data.resource;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-2")
public class DataReplicaLocationModel implements org.apache.thrift.TBase<DataReplicaLocationModel, DataReplicaLocationModel._Fields>, java.io.Serializable, Cloneable, Comparable<DataReplicaLocationModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataReplicaLocationModel");

  private static final org.apache.thrift.protocol.TField REPLICA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REPLICA_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaDescription", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("creationTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifiedTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_LOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLocations", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataReplicaLocationModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataReplicaLocationModelTupleSchemeFactory());
  }

  private String replicaId; // optional
  private String resourceId; // optional
  private String replicaName; // optional
  private String replicaDescription; // optional
  private long creationTime; // optional
  private long lastModifiedTime; // optional
  private List<String> dataLocations; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLICA_ID((short)1, "replicaId"),
    RESOURCE_ID((short)2, "resourceId"),
    REPLICA_NAME((short)3, "replicaName"),
    REPLICA_DESCRIPTION((short)4, "replicaDescription"),
    CREATION_TIME((short)5, "creationTime"),
    LAST_MODIFIED_TIME((short)6, "lastModifiedTime"),
    DATA_LOCATIONS((short)7, "dataLocations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLICA_ID
          return REPLICA_ID;
        case 2: // RESOURCE_ID
          return RESOURCE_ID;
        case 3: // REPLICA_NAME
          return REPLICA_NAME;
        case 4: // REPLICA_DESCRIPTION
          return REPLICA_DESCRIPTION;
        case 5: // CREATION_TIME
          return CREATION_TIME;
        case 6: // LAST_MODIFIED_TIME
          return LAST_MODIFIED_TIME;
        case 7: // DATA_LOCATIONS
          return DATA_LOCATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATIONTIME_ISSET_ID = 0;
  private static final int __LASTMODIFIEDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLICA_ID,_Fields.RESOURCE_ID,_Fields.REPLICA_NAME,_Fields.REPLICA_DESCRIPTION,_Fields.CREATION_TIME,_Fields.LAST_MODIFIED_TIME,_Fields.DATA_LOCATIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLICA_ID, new org.apache.thrift.meta_data.FieldMetaData("replicaId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLICA_NAME, new org.apache.thrift.meta_data.FieldMetaData("replicaName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLICA_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("replicaDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("creationTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFIED_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastModifiedTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_LOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("dataLocations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataReplicaLocationModel.class, metaDataMap);
  }

  public DataReplicaLocationModel() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataReplicaLocationModel(DataReplicaLocationModel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReplicaId()) {
      this.replicaId = other.replicaId;
    }
    if (other.isSetResourceId()) {
      this.resourceId = other.resourceId;
    }
    if (other.isSetReplicaName()) {
      this.replicaName = other.replicaName;
    }
    if (other.isSetReplicaDescription()) {
      this.replicaDescription = other.replicaDescription;
    }
    this.creationTime = other.creationTime;
    this.lastModifiedTime = other.lastModifiedTime;
    if (other.isSetDataLocations()) {
      List<String> __this__dataLocations = new ArrayList<String>(other.dataLocations);
      this.dataLocations = __this__dataLocations;
    }
  }

  public DataReplicaLocationModel deepCopy() {
    return new DataReplicaLocationModel(this);
  }

  @Override
  public void clear() {
    this.replicaId = null;
    this.resourceId = null;
    this.replicaName = null;
    this.replicaDescription = null;
    setCreationTimeIsSet(false);
    this.creationTime = 0;
    setLastModifiedTimeIsSet(false);
    this.lastModifiedTime = 0;
    this.dataLocations = null;
  }

  public String getReplicaId() {
    return this.replicaId;
  }

  public void setReplicaId(String replicaId) {
    this.replicaId = replicaId;
  }

  public void unsetReplicaId() {
    this.replicaId = null;
  }

  /** Returns true if field replicaId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaId() {
    return this.replicaId != null;
  }

  public void setReplicaIdIsSet(boolean value) {
    if (!value) {
      this.replicaId = null;
    }
  }

  public String getResourceId() {
    return this.resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }

  public void unsetResourceId() {
    this.resourceId = null;
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return this.resourceId != null;
  }

  public void setResourceIdIsSet(boolean value) {
    if (!value) {
      this.resourceId = null;
    }
  }

  public String getReplicaName() {
    return this.replicaName;
  }

  public void setReplicaName(String replicaName) {
    this.replicaName = replicaName;
  }

  public void unsetReplicaName() {
    this.replicaName = null;
  }

  /** Returns true if field replicaName is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaName() {
    return this.replicaName != null;
  }

  public void setReplicaNameIsSet(boolean value) {
    if (!value) {
      this.replicaName = null;
    }
  }

  public String getReplicaDescription() {
    return this.replicaDescription;
  }

  public void setReplicaDescription(String replicaDescription) {
    this.replicaDescription = replicaDescription;
  }

  public void unsetReplicaDescription() {
    this.replicaDescription = null;
  }

  /** Returns true if field replicaDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaDescription() {
    return this.replicaDescription != null;
  }

  public void setReplicaDescriptionIsSet(boolean value) {
    if (!value) {
      this.replicaDescription = null;
    }
  }

  public long getCreationTime() {
    return this.creationTime;
  }

  public void setCreationTime(long creationTime) {
    this.creationTime = creationTime;
    setCreationTimeIsSet(true);
  }

  public void unsetCreationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  /** Returns true if field creationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  public void setCreationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONTIME_ISSET_ID, value);
  }

  public long getLastModifiedTime() {
    return this.lastModifiedTime;
  }

  public void setLastModifiedTime(long lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    setLastModifiedTimeIsSet(true);
  }

  public void unsetLastModifiedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFIEDTIME_ISSET_ID);
  }

  /** Returns true if field lastModifiedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifiedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFIEDTIME_ISSET_ID);
  }

  public void setLastModifiedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFIEDTIME_ISSET_ID, value);
  }

  public int getDataLocationsSize() {
    return (this.dataLocations == null) ? 0 : this.dataLocations.size();
  }

  public java.util.Iterator<String> getDataLocationsIterator() {
    return (this.dataLocations == null) ? null : this.dataLocations.iterator();
  }

  public void addToDataLocations(String elem) {
    if (this.dataLocations == null) {
      this.dataLocations = new ArrayList<String>();
    }
    this.dataLocations.add(elem);
  }

  public List<String> getDataLocations() {
    return this.dataLocations;
  }

  public void setDataLocations(List<String> dataLocations) {
    this.dataLocations = dataLocations;
  }

  public void unsetDataLocations() {
    this.dataLocations = null;
  }

  /** Returns true if field dataLocations is set (has been assigned a value) and false otherwise */
  public boolean isSetDataLocations() {
    return this.dataLocations != null;
  }

  public void setDataLocationsIsSet(boolean value) {
    if (!value) {
      this.dataLocations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLICA_ID:
      if (value == null) {
        unsetReplicaId();
      } else {
        setReplicaId((String)value);
      }
      break;

    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((String)value);
      }
      break;

    case REPLICA_NAME:
      if (value == null) {
        unsetReplicaName();
      } else {
        setReplicaName((String)value);
      }
      break;

    case REPLICA_DESCRIPTION:
      if (value == null) {
        unsetReplicaDescription();
      } else {
        setReplicaDescription((String)value);
      }
      break;

    case CREATION_TIME:
      if (value == null) {
        unsetCreationTime();
      } else {
        setCreationTime((Long)value);
      }
      break;

    case LAST_MODIFIED_TIME:
      if (value == null) {
        unsetLastModifiedTime();
      } else {
        setLastModifiedTime((Long)value);
      }
      break;

    case DATA_LOCATIONS:
      if (value == null) {
        unsetDataLocations();
      } else {
        setDataLocations((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLICA_ID:
      return getReplicaId();

    case RESOURCE_ID:
      return getResourceId();

    case REPLICA_NAME:
      return getReplicaName();

    case REPLICA_DESCRIPTION:
      return getReplicaDescription();

    case CREATION_TIME:
      return Long.valueOf(getCreationTime());

    case LAST_MODIFIED_TIME:
      return Long.valueOf(getLastModifiedTime());

    case DATA_LOCATIONS:
      return getDataLocations();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLICA_ID:
      return isSetReplicaId();
    case RESOURCE_ID:
      return isSetResourceId();
    case REPLICA_NAME:
      return isSetReplicaName();
    case REPLICA_DESCRIPTION:
      return isSetReplicaDescription();
    case CREATION_TIME:
      return isSetCreationTime();
    case LAST_MODIFIED_TIME:
      return isSetLastModifiedTime();
    case DATA_LOCATIONS:
      return isSetDataLocations();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataReplicaLocationModel)
      return this.equals((DataReplicaLocationModel)that);
    return false;
  }

  public boolean equals(DataReplicaLocationModel that) {
    if (that == null)
      return false;

    boolean this_present_replicaId = true && this.isSetReplicaId();
    boolean that_present_replicaId = true && that.isSetReplicaId();
    if (this_present_replicaId || that_present_replicaId) {
      if (!(this_present_replicaId && that_present_replicaId))
        return false;
      if (!this.replicaId.equals(that.replicaId))
        return false;
    }

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (!this.resourceId.equals(that.resourceId))
        return false;
    }

    boolean this_present_replicaName = true && this.isSetReplicaName();
    boolean that_present_replicaName = true && that.isSetReplicaName();
    if (this_present_replicaName || that_present_replicaName) {
      if (!(this_present_replicaName && that_present_replicaName))
        return false;
      if (!this.replicaName.equals(that.replicaName))
        return false;
    }

    boolean this_present_replicaDescription = true && this.isSetReplicaDescription();
    boolean that_present_replicaDescription = true && that.isSetReplicaDescription();
    if (this_present_replicaDescription || that_present_replicaDescription) {
      if (!(this_present_replicaDescription && that_present_replicaDescription))
        return false;
      if (!this.replicaDescription.equals(that.replicaDescription))
        return false;
    }

    boolean this_present_creationTime = true && this.isSetCreationTime();
    boolean that_present_creationTime = true && that.isSetCreationTime();
    if (this_present_creationTime || that_present_creationTime) {
      if (!(this_present_creationTime && that_present_creationTime))
        return false;
      if (this.creationTime != that.creationTime)
        return false;
    }

    boolean this_present_lastModifiedTime = true && this.isSetLastModifiedTime();
    boolean that_present_lastModifiedTime = true && that.isSetLastModifiedTime();
    if (this_present_lastModifiedTime || that_present_lastModifiedTime) {
      if (!(this_present_lastModifiedTime && that_present_lastModifiedTime))
        return false;
      if (this.lastModifiedTime != that.lastModifiedTime)
        return false;
    }

    boolean this_present_dataLocations = true && this.isSetDataLocations();
    boolean that_present_dataLocations = true && that.isSetDataLocations();
    if (this_present_dataLocations || that_present_dataLocations) {
      if (!(this_present_dataLocations && that_present_dataLocations))
        return false;
      if (!this.dataLocations.equals(that.dataLocations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_replicaId = true && (isSetReplicaId());
    list.add(present_replicaId);
    if (present_replicaId)
      list.add(replicaId);

    boolean present_resourceId = true && (isSetResourceId());
    list.add(present_resourceId);
    if (present_resourceId)
      list.add(resourceId);

    boolean present_replicaName = true && (isSetReplicaName());
    list.add(present_replicaName);
    if (present_replicaName)
      list.add(replicaName);

    boolean present_replicaDescription = true && (isSetReplicaDescription());
    list.add(present_replicaDescription);
    if (present_replicaDescription)
      list.add(replicaDescription);

    boolean present_creationTime = true && (isSetCreationTime());
    list.add(present_creationTime);
    if (present_creationTime)
      list.add(creationTime);

    boolean present_lastModifiedTime = true && (isSetLastModifiedTime());
    list.add(present_lastModifiedTime);
    if (present_lastModifiedTime)
      list.add(lastModifiedTime);

    boolean present_dataLocations = true && (isSetDataLocations());
    list.add(present_dataLocations);
    if (present_dataLocations)
      list.add(dataLocations);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataReplicaLocationModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReplicaId()).compareTo(other.isSetReplicaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaId, other.replicaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicaName()).compareTo(other.isSetReplicaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaName, other.replicaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicaDescription()).compareTo(other.isSetReplicaDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaDescription, other.replicaDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationTime()).compareTo(other.isSetCreationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationTime, other.creationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifiedTime()).compareTo(other.isSetLastModifiedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifiedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifiedTime, other.lastModifiedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataLocations()).compareTo(other.isSetDataLocations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataLocations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLocations, other.dataLocations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataReplicaLocationModel(");
    boolean first = true;

    if (isSetReplicaId()) {
      sb.append("replicaId:");
      if (this.replicaId == null) {
        sb.append("null");
      } else {
        sb.append(this.replicaId);
      }
      first = false;
    }
    if (isSetResourceId()) {
      if (!first) sb.append(", ");
      sb.append("resourceId:");
      if (this.resourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceId);
      }
      first = false;
    }
    if (isSetReplicaName()) {
      if (!first) sb.append(", ");
      sb.append("replicaName:");
      if (this.replicaName == null) {
        sb.append("null");
      } else {
        sb.append(this.replicaName);
      }
      first = false;
    }
    if (isSetReplicaDescription()) {
      if (!first) sb.append(", ");
      sb.append("replicaDescription:");
      if (this.replicaDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.replicaDescription);
      }
      first = false;
    }
    if (isSetCreationTime()) {
      if (!first) sb.append(", ");
      sb.append("creationTime:");
      sb.append(this.creationTime);
      first = false;
    }
    if (isSetLastModifiedTime()) {
      if (!first) sb.append(", ");
      sb.append("lastModifiedTime:");
      sb.append(this.lastModifiedTime);
      first = false;
    }
    if (isSetDataLocations()) {
      if (!first) sb.append(", ");
      sb.append("dataLocations:");
      if (this.dataLocations == null) {
        sb.append("null");
      } else {
        sb.append(this.dataLocations);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataReplicaLocationModelStandardSchemeFactory implements SchemeFactory {
    public DataReplicaLocationModelStandardScheme getScheme() {
      return new DataReplicaLocationModelStandardScheme();
    }
  }

  private static class DataReplicaLocationModelStandardScheme extends StandardScheme<DataReplicaLocationModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataReplicaLocationModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLICA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replicaId = iprot.readString();
              struct.setReplicaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceId = iprot.readString();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replicaName = iprot.readString();
              struct.setReplicaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLICA_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replicaDescription = iprot.readString();
              struct.setReplicaDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creationTime = iprot.readI64();
              struct.setCreationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_MODIFIED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifiedTime = iprot.readI64();
              struct.setLastModifiedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_LOCATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.dataLocations = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.dataLocations.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDataLocationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataReplicaLocationModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.replicaId != null) {
        if (struct.isSetReplicaId()) {
          oprot.writeFieldBegin(REPLICA_ID_FIELD_DESC);
          oprot.writeString(struct.replicaId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceId != null) {
        if (struct.isSetResourceId()) {
          oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.resourceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.replicaName != null) {
        if (struct.isSetReplicaName()) {
          oprot.writeFieldBegin(REPLICA_NAME_FIELD_DESC);
          oprot.writeString(struct.replicaName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.replicaDescription != null) {
        if (struct.isSetReplicaDescription()) {
          oprot.writeFieldBegin(REPLICA_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.replicaDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreationTime()) {
        oprot.writeFieldBegin(CREATION_TIME_FIELD_DESC);
        oprot.writeI64(struct.creationTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifiedTime()) {
        oprot.writeFieldBegin(LAST_MODIFIED_TIME_FIELD_DESC);
        oprot.writeI64(struct.lastModifiedTime);
        oprot.writeFieldEnd();
      }
      if (struct.dataLocations != null) {
        if (struct.isSetDataLocations()) {
          oprot.writeFieldBegin(DATA_LOCATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dataLocations.size()));
            for (String _iter11 : struct.dataLocations)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataReplicaLocationModelTupleSchemeFactory implements SchemeFactory {
    public DataReplicaLocationModelTupleScheme getScheme() {
      return new DataReplicaLocationModelTupleScheme();
    }
  }

  private static class DataReplicaLocationModelTupleScheme extends TupleScheme<DataReplicaLocationModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataReplicaLocationModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReplicaId()) {
        optionals.set(0);
      }
      if (struct.isSetResourceId()) {
        optionals.set(1);
      }
      if (struct.isSetReplicaName()) {
        optionals.set(2);
      }
      if (struct.isSetReplicaDescription()) {
        optionals.set(3);
      }
      if (struct.isSetCreationTime()) {
        optionals.set(4);
      }
      if (struct.isSetLastModifiedTime()) {
        optionals.set(5);
      }
      if (struct.isSetDataLocations()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetReplicaId()) {
        oprot.writeString(struct.replicaId);
      }
      if (struct.isSetResourceId()) {
        oprot.writeString(struct.resourceId);
      }
      if (struct.isSetReplicaName()) {
        oprot.writeString(struct.replicaName);
      }
      if (struct.isSetReplicaDescription()) {
        oprot.writeString(struct.replicaDescription);
      }
      if (struct.isSetCreationTime()) {
        oprot.writeI64(struct.creationTime);
      }
      if (struct.isSetLastModifiedTime()) {
        oprot.writeI64(struct.lastModifiedTime);
      }
      if (struct.isSetDataLocations()) {
        {
          oprot.writeI32(struct.dataLocations.size());
          for (String _iter12 : struct.dataLocations)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataReplicaLocationModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.replicaId = iprot.readString();
        struct.setReplicaIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceId = iprot.readString();
        struct.setResourceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.replicaName = iprot.readString();
        struct.setReplicaNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.replicaDescription = iprot.readString();
        struct.setReplicaDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.creationTime = iprot.readI64();
        struct.setCreationTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastModifiedTime = iprot.readI64();
        struct.setLastModifiedTimeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.dataLocations = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.dataLocations.add(_elem14);
          }
        }
        struct.setDataLocationsIsSet(true);
      }
    }
  }

}

