/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog.appinterface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Application Interface Description
 * 
 * applicationModules:
 *   Associate all application modules with versions which interface is applicable to.
 * 
 * applicationInputs:
 *   Inputs to be passed to the application
 * 
 * applicationOutputs:
 *   Outputs generated from the application
 * 
 */
@SuppressWarnings("all") public class ApplicationInterfaceDescription implements org.apache.thrift.TBase<ApplicationInterfaceDescription, ApplicationInterfaceDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationInterfaceDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationInterfaceDescription");

  private static final org.apache.thrift.protocol.TField APPLICATION_INTERFACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInterfaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APPLICATION_DESRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationDesription", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APPLICATION_MODULES_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationModules", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField APPLICATION_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInputs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField APPLICATION_OUTPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationOutputs", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplicationInterfaceDescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplicationInterfaceDescriptionTupleSchemeFactory());
  }

  private String applicationInterfaceId; // required
  private String applicationName; // required
  private String applicationDesription; // optional
  private List<String> applicationModules; // optional
  private List<InputDataObjectType> applicationInputs; // optional
  private List<OutputDataObjectType> applicationOutputs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_INTERFACE_ID((short)1, "applicationInterfaceId"),
    APPLICATION_NAME((short)2, "applicationName"),
    APPLICATION_DESRIPTION((short)3, "applicationDesription"),
    APPLICATION_MODULES((short)4, "applicationModules"),
    APPLICATION_INPUTS((short)5, "applicationInputs"),
    APPLICATION_OUTPUTS((short)6, "applicationOutputs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_INTERFACE_ID
          return APPLICATION_INTERFACE_ID;
        case 2: // APPLICATION_NAME
          return APPLICATION_NAME;
        case 3: // APPLICATION_DESRIPTION
          return APPLICATION_DESRIPTION;
        case 4: // APPLICATION_MODULES
          return APPLICATION_MODULES;
        case 5: // APPLICATION_INPUTS
          return APPLICATION_INPUTS;
        case 6: // APPLICATION_OUTPUTS
          return APPLICATION_OUTPUTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.APPLICATION_DESRIPTION,_Fields.APPLICATION_MODULES,_Fields.APPLICATION_INPUTS,_Fields.APPLICATION_OUTPUTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_INTERFACE_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationInterfaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_DESRIPTION, new org.apache.thrift.meta_data.FieldMetaData("applicationDesription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_MODULES, new org.apache.thrift.meta_data.FieldMetaData("applicationModules", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APPLICATION_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("applicationInputs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InputDataObjectType.class))));
    tmpMap.put(_Fields.APPLICATION_OUTPUTS, new org.apache.thrift.meta_data.FieldMetaData("applicationOutputs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutputDataObjectType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationInterfaceDescription.class, metaDataMap);
  }

  public ApplicationInterfaceDescription() {
    this.applicationInterfaceId = "DO_NOT_SET_AT_CLIENTS";

  }

  public ApplicationInterfaceDescription(
    String applicationInterfaceId,
    String applicationName)
  {
    this();
    this.applicationInterfaceId = applicationInterfaceId;
    this.applicationName = applicationName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationInterfaceDescription(ApplicationInterfaceDescription other) {
    if (other.isSetApplicationInterfaceId()) {
      this.applicationInterfaceId = other.applicationInterfaceId;
    }
    if (other.isSetApplicationName()) {
      this.applicationName = other.applicationName;
    }
    if (other.isSetApplicationDesription()) {
      this.applicationDesription = other.applicationDesription;
    }
    if (other.isSetApplicationModules()) {
      List<String> __this__applicationModules = new ArrayList<String>(other.applicationModules);
      this.applicationModules = __this__applicationModules;
    }
    if (other.isSetApplicationInputs()) {
      List<InputDataObjectType> __this__applicationInputs = new ArrayList<InputDataObjectType>(other.applicationInputs.size());
      for (InputDataObjectType other_element : other.applicationInputs) {
        __this__applicationInputs.add(new InputDataObjectType(other_element));
      }
      this.applicationInputs = __this__applicationInputs;
    }
    if (other.isSetApplicationOutputs()) {
      List<OutputDataObjectType> __this__applicationOutputs = new ArrayList<OutputDataObjectType>(other.applicationOutputs.size());
      for (OutputDataObjectType other_element : other.applicationOutputs) {
        __this__applicationOutputs.add(new OutputDataObjectType(other_element));
      }
      this.applicationOutputs = __this__applicationOutputs;
    }
  }

  public ApplicationInterfaceDescription deepCopy() {
    return new ApplicationInterfaceDescription(this);
  }

  @Override
  public void clear() {
    this.applicationInterfaceId = "DO_NOT_SET_AT_CLIENTS";

    this.applicationName = null;
    this.applicationDesription = null;
    this.applicationModules = null;
    this.applicationInputs = null;
    this.applicationOutputs = null;
  }

  public String getApplicationInterfaceId() {
    return this.applicationInterfaceId;
  }

  public void setApplicationInterfaceId(String applicationInterfaceId) {
    this.applicationInterfaceId = applicationInterfaceId;
  }

  public void unsetApplicationInterfaceId() {
    this.applicationInterfaceId = null;
  }

  /** Returns true if field applicationInterfaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationInterfaceId() {
    return this.applicationInterfaceId != null;
  }

  public void setApplicationInterfaceIdIsSet(boolean value) {
    if (!value) {
      this.applicationInterfaceId = null;
    }
  }

  public String getApplicationName() {
    return this.applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public void unsetApplicationName() {
    this.applicationName = null;
  }

  /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationName() {
    return this.applicationName != null;
  }

  public void setApplicationNameIsSet(boolean value) {
    if (!value) {
      this.applicationName = null;
    }
  }

  public String getApplicationDesription() {
    return this.applicationDesription;
  }

  public void setApplicationDesription(String applicationDesription) {
    this.applicationDesription = applicationDesription;
  }

  public void unsetApplicationDesription() {
    this.applicationDesription = null;
  }

  /** Returns true if field applicationDesription is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationDesription() {
    return this.applicationDesription != null;
  }

  public void setApplicationDesriptionIsSet(boolean value) {
    if (!value) {
      this.applicationDesription = null;
    }
  }

  public int getApplicationModulesSize() {
    return (this.applicationModules == null) ? 0 : this.applicationModules.size();
  }

  public java.util.Iterator<String> getApplicationModulesIterator() {
    return (this.applicationModules == null) ? null : this.applicationModules.iterator();
  }

  public void addToApplicationModules(String elem) {
    if (this.applicationModules == null) {
      this.applicationModules = new ArrayList<String>();
    }
    this.applicationModules.add(elem);
  }

  public List<String> getApplicationModules() {
    return this.applicationModules;
  }

  public void setApplicationModules(List<String> applicationModules) {
    this.applicationModules = applicationModules;
  }

  public void unsetApplicationModules() {
    this.applicationModules = null;
  }

  /** Returns true if field applicationModules is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationModules() {
    return this.applicationModules != null;
  }

  public void setApplicationModulesIsSet(boolean value) {
    if (!value) {
      this.applicationModules = null;
    }
  }

  public int getApplicationInputsSize() {
    return (this.applicationInputs == null) ? 0 : this.applicationInputs.size();
  }

  public java.util.Iterator<InputDataObjectType> getApplicationInputsIterator() {
    return (this.applicationInputs == null) ? null : this.applicationInputs.iterator();
  }

  public void addToApplicationInputs(InputDataObjectType elem) {
    if (this.applicationInputs == null) {
      this.applicationInputs = new ArrayList<InputDataObjectType>();
    }
    this.applicationInputs.add(elem);
  }

  public List<InputDataObjectType> getApplicationInputs() {
    return this.applicationInputs;
  }

  public void setApplicationInputs(List<InputDataObjectType> applicationInputs) {
    this.applicationInputs = applicationInputs;
  }

  public void unsetApplicationInputs() {
    this.applicationInputs = null;
  }

  /** Returns true if field applicationInputs is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationInputs() {
    return this.applicationInputs != null;
  }

  public void setApplicationInputsIsSet(boolean value) {
    if (!value) {
      this.applicationInputs = null;
    }
  }

  public int getApplicationOutputsSize() {
    return (this.applicationOutputs == null) ? 0 : this.applicationOutputs.size();
  }

  public java.util.Iterator<OutputDataObjectType> getApplicationOutputsIterator() {
    return (this.applicationOutputs == null) ? null : this.applicationOutputs.iterator();
  }

  public void addToApplicationOutputs(OutputDataObjectType elem) {
    if (this.applicationOutputs == null) {
      this.applicationOutputs = new ArrayList<OutputDataObjectType>();
    }
    this.applicationOutputs.add(elem);
  }

  public List<OutputDataObjectType> getApplicationOutputs() {
    return this.applicationOutputs;
  }

  public void setApplicationOutputs(List<OutputDataObjectType> applicationOutputs) {
    this.applicationOutputs = applicationOutputs;
  }

  public void unsetApplicationOutputs() {
    this.applicationOutputs = null;
  }

  /** Returns true if field applicationOutputs is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationOutputs() {
    return this.applicationOutputs != null;
  }

  public void setApplicationOutputsIsSet(boolean value) {
    if (!value) {
      this.applicationOutputs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_INTERFACE_ID:
      if (value == null) {
        unsetApplicationInterfaceId();
      } else {
        setApplicationInterfaceId((String)value);
      }
      break;

    case APPLICATION_NAME:
      if (value == null) {
        unsetApplicationName();
      } else {
        setApplicationName((String)value);
      }
      break;

    case APPLICATION_DESRIPTION:
      if (value == null) {
        unsetApplicationDesription();
      } else {
        setApplicationDesription((String)value);
      }
      break;

    case APPLICATION_MODULES:
      if (value == null) {
        unsetApplicationModules();
      } else {
        setApplicationModules((List<String>)value);
      }
      break;

    case APPLICATION_INPUTS:
      if (value == null) {
        unsetApplicationInputs();
      } else {
        setApplicationInputs((List<InputDataObjectType>)value);
      }
      break;

    case APPLICATION_OUTPUTS:
      if (value == null) {
        unsetApplicationOutputs();
      } else {
        setApplicationOutputs((List<OutputDataObjectType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_INTERFACE_ID:
      return getApplicationInterfaceId();

    case APPLICATION_NAME:
      return getApplicationName();

    case APPLICATION_DESRIPTION:
      return getApplicationDesription();

    case APPLICATION_MODULES:
      return getApplicationModules();

    case APPLICATION_INPUTS:
      return getApplicationInputs();

    case APPLICATION_OUTPUTS:
      return getApplicationOutputs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_INTERFACE_ID:
      return isSetApplicationInterfaceId();
    case APPLICATION_NAME:
      return isSetApplicationName();
    case APPLICATION_DESRIPTION:
      return isSetApplicationDesription();
    case APPLICATION_MODULES:
      return isSetApplicationModules();
    case APPLICATION_INPUTS:
      return isSetApplicationInputs();
    case APPLICATION_OUTPUTS:
      return isSetApplicationOutputs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationInterfaceDescription)
      return this.equals((ApplicationInterfaceDescription)that);
    return false;
  }

  public boolean equals(ApplicationInterfaceDescription that) {
    if (that == null)
      return false;

    boolean this_present_applicationInterfaceId = true && this.isSetApplicationInterfaceId();
    boolean that_present_applicationInterfaceId = true && that.isSetApplicationInterfaceId();
    if (this_present_applicationInterfaceId || that_present_applicationInterfaceId) {
      if (!(this_present_applicationInterfaceId && that_present_applicationInterfaceId))
        return false;
      if (!this.applicationInterfaceId.equals(that.applicationInterfaceId))
        return false;
    }

    boolean this_present_applicationName = true && this.isSetApplicationName();
    boolean that_present_applicationName = true && that.isSetApplicationName();
    if (this_present_applicationName || that_present_applicationName) {
      if (!(this_present_applicationName && that_present_applicationName))
        return false;
      if (!this.applicationName.equals(that.applicationName))
        return false;
    }

    boolean this_present_applicationDesription = true && this.isSetApplicationDesription();
    boolean that_present_applicationDesription = true && that.isSetApplicationDesription();
    if (this_present_applicationDesription || that_present_applicationDesription) {
      if (!(this_present_applicationDesription && that_present_applicationDesription))
        return false;
      if (!this.applicationDesription.equals(that.applicationDesription))
        return false;
    }

    boolean this_present_applicationModules = true && this.isSetApplicationModules();
    boolean that_present_applicationModules = true && that.isSetApplicationModules();
    if (this_present_applicationModules || that_present_applicationModules) {
      if (!(this_present_applicationModules && that_present_applicationModules))
        return false;
      if (!this.applicationModules.equals(that.applicationModules))
        return false;
    }

    boolean this_present_applicationInputs = true && this.isSetApplicationInputs();
    boolean that_present_applicationInputs = true && that.isSetApplicationInputs();
    if (this_present_applicationInputs || that_present_applicationInputs) {
      if (!(this_present_applicationInputs && that_present_applicationInputs))
        return false;
      if (!this.applicationInputs.equals(that.applicationInputs))
        return false;
    }

    boolean this_present_applicationOutputs = true && this.isSetApplicationOutputs();
    boolean that_present_applicationOutputs = true && that.isSetApplicationOutputs();
    if (this_present_applicationOutputs || that_present_applicationOutputs) {
      if (!(this_present_applicationOutputs && that_present_applicationOutputs))
        return false;
      if (!this.applicationOutputs.equals(that.applicationOutputs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ApplicationInterfaceDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplicationInterfaceId()).compareTo(other.isSetApplicationInterfaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationInterfaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInterfaceId, other.applicationInterfaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationDesription()).compareTo(other.isSetApplicationDesription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationDesription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationDesription, other.applicationDesription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationModules()).compareTo(other.isSetApplicationModules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationModules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationModules, other.applicationModules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationInputs()).compareTo(other.isSetApplicationInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInputs, other.applicationInputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationOutputs()).compareTo(other.isSetApplicationOutputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationOutputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationOutputs, other.applicationOutputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplicationInterfaceDescription(");
    boolean first = true;

    sb.append("applicationInterfaceId:");
    if (this.applicationInterfaceId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationInterfaceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationName:");
    if (this.applicationName == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationName);
    }
    first = false;
    if (isSetApplicationDesription()) {
      if (!first) sb.append(", ");
      sb.append("applicationDesription:");
      if (this.applicationDesription == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationDesription);
      }
      first = false;
    }
    if (isSetApplicationModules()) {
      if (!first) sb.append(", ");
      sb.append("applicationModules:");
      if (this.applicationModules == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationModules);
      }
      first = false;
    }
    if (isSetApplicationInputs()) {
      if (!first) sb.append(", ");
      sb.append("applicationInputs:");
      if (this.applicationInputs == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInputs);
      }
      first = false;
    }
    if (isSetApplicationOutputs()) {
      if (!first) sb.append(", ");
      sb.append("applicationOutputs:");
      if (this.applicationOutputs == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationOutputs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetApplicationInterfaceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationInterfaceId' is unset! Struct:" + toString());
    }

    if (!isSetApplicationName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationName' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationInterfaceDescriptionStandardSchemeFactory implements SchemeFactory {
    public ApplicationInterfaceDescriptionStandardScheme getScheme() {
      return new ApplicationInterfaceDescriptionStandardScheme();
    }
  }

  private static class ApplicationInterfaceDescriptionStandardScheme extends StandardScheme<ApplicationInterfaceDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationInterfaceDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_INTERFACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationInterfaceId = iprot.readString();
              struct.setApplicationInterfaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationName = iprot.readString();
              struct.setApplicationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLICATION_DESRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationDesription = iprot.readString();
              struct.setApplicationDesriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPLICATION_MODULES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.applicationModules = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.applicationModules.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setApplicationModulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPLICATION_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.applicationInputs = new ArrayList<InputDataObjectType>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  InputDataObjectType _elem5;
                  _elem5 = new InputDataObjectType();
                  _elem5.read(iprot);
                  struct.applicationInputs.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setApplicationInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPLICATION_OUTPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.applicationOutputs = new ArrayList<OutputDataObjectType>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  OutputDataObjectType _elem8;
                  _elem8 = new OutputDataObjectType();
                  _elem8.read(iprot);
                  struct.applicationOutputs.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setApplicationOutputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationInterfaceDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationInterfaceId != null) {
        oprot.writeFieldBegin(APPLICATION_INTERFACE_ID_FIELD_DESC);
        oprot.writeString(struct.applicationInterfaceId);
        oprot.writeFieldEnd();
      }
      if (struct.applicationName != null) {
        oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
        oprot.writeString(struct.applicationName);
        oprot.writeFieldEnd();
      }
      if (struct.applicationDesription != null) {
        if (struct.isSetApplicationDesription()) {
          oprot.writeFieldBegin(APPLICATION_DESRIPTION_FIELD_DESC);
          oprot.writeString(struct.applicationDesription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.applicationModules != null) {
        if (struct.isSetApplicationModules()) {
          oprot.writeFieldBegin(APPLICATION_MODULES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.applicationModules.size()));
            for (String _iter9 : struct.applicationModules)
            {
              oprot.writeString(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.applicationInputs != null) {
        if (struct.isSetApplicationInputs()) {
          oprot.writeFieldBegin(APPLICATION_INPUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.applicationInputs.size()));
            for (InputDataObjectType _iter10 : struct.applicationInputs)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.applicationOutputs != null) {
        if (struct.isSetApplicationOutputs()) {
          oprot.writeFieldBegin(APPLICATION_OUTPUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.applicationOutputs.size()));
            for (OutputDataObjectType _iter11 : struct.applicationOutputs)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationInterfaceDescriptionTupleSchemeFactory implements SchemeFactory {
    public ApplicationInterfaceDescriptionTupleScheme getScheme() {
      return new ApplicationInterfaceDescriptionTupleScheme();
    }
  }

  private static class ApplicationInterfaceDescriptionTupleScheme extends TupleScheme<ApplicationInterfaceDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationInterfaceDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.applicationInterfaceId);
      oprot.writeString(struct.applicationName);
      BitSet optionals = new BitSet();
      if (struct.isSetApplicationDesription()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationModules()) {
        optionals.set(1);
      }
      if (struct.isSetApplicationInputs()) {
        optionals.set(2);
      }
      if (struct.isSetApplicationOutputs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetApplicationDesription()) {
        oprot.writeString(struct.applicationDesription);
      }
      if (struct.isSetApplicationModules()) {
        {
          oprot.writeI32(struct.applicationModules.size());
          for (String _iter12 : struct.applicationModules)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetApplicationInputs()) {
        {
          oprot.writeI32(struct.applicationInputs.size());
          for (InputDataObjectType _iter13 : struct.applicationInputs)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetApplicationOutputs()) {
        {
          oprot.writeI32(struct.applicationOutputs.size());
          for (OutputDataObjectType _iter14 : struct.applicationOutputs)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationInterfaceDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.applicationInterfaceId = iprot.readString();
      struct.setApplicationInterfaceIdIsSet(true);
      struct.applicationName = iprot.readString();
      struct.setApplicationNameIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.applicationDesription = iprot.readString();
        struct.setApplicationDesriptionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.applicationModules = new ArrayList<String>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            String _elem17;
            _elem17 = iprot.readString();
            struct.applicationModules.add(_elem17);
          }
        }
        struct.setApplicationModulesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.applicationInputs = new ArrayList<InputDataObjectType>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            InputDataObjectType _elem20;
            _elem20 = new InputDataObjectType();
            _elem20.read(iprot);
            struct.applicationInputs.add(_elem20);
          }
        }
        struct.setApplicationInputsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.applicationOutputs = new ArrayList<OutputDataObjectType>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            OutputDataObjectType _elem23;
            _elem23 = new OutputDataObjectType();
            _elem23.read(iprot);
            struct.applicationOutputs.add(_elem23);
          }
        }
        struct.setApplicationOutputsIsSet(true);
      }
    }
  }

}

