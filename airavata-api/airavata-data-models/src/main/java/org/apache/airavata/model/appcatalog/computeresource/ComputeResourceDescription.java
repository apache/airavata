    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.appcatalog.computeresource;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Computational Resource Description
 * 
 * computeResourceId: Airavata Internal Unique Identifier to distinguish Compute Resource.
 * 
 * hostName:
 *   Fully Qualified Host Name.
 * 
 * ipAddress:
 *   IP Addresses of the Resource.
 * 
 * resourceDescription:
 *  A user friendly description of the resource.
 * 
 * JobSubmissionProtocols:
 *  A computational resources may have one or more ways of submitting Jobs. This structure
 *    will hold all available mechanisms to interact with the resource.
 *  The key is the priority
 * 
 * DataMovementProtocol:
 *  Option to specify a prefered data movement mechanism of the available options.
 * 
 * fileSystems:
 *  Map of file systems type and the path.
 * 
 */
@SuppressWarnings("all") public class ComputeResourceDescription implements org.apache.thrift.TBase<ComputeResourceDescription, ComputeResourceDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeResourceDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeResourceDescription");

  private static final org.apache.thrift.protocol.TField IS_EMPTY_FIELD_DESC = new org.apache.thrift.protocol.TField("isEmpty", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("computeResourceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOST_ALIASES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostAliases", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField IP_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddresses", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceDescription", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BATCH_QUEUES_FIELD_DESC = new org.apache.thrift.protocol.TField("batchQueues", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_SYSTEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSystems", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField JOB_SUBMISSION_INTERFACES_FIELD_DESC = new org.apache.thrift.protocol.TField("jobSubmissionInterfaces", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField DATA_MOVEMENET_INTERFACES_FIELD_DESC = new org.apache.thrift.protocol.TField("dataMovemenetInterfaces", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComputeResourceDescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComputeResourceDescriptionTupleSchemeFactory());
  }

  private boolean isEmpty; // required
  private String computeResourceId; // required
  private String hostName; // required
  private Set<String> hostAliases; // optional
  private Set<String> ipAddresses; // optional
  private String resourceDescription; // optional
  private List<BatchQueue> batchQueues; // optional
  private Map<FileSystems,String> fileSystems; // optional
  private List<JobSubmissionInterface> jobSubmissionInterfaces; // optional
  private List<DataMovementInterface> dataMovemenetInterfaces; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_EMPTY((short)1, "isEmpty"),
    COMPUTE_RESOURCE_ID((short)2, "computeResourceId"),
    HOST_NAME((short)3, "hostName"),
    HOST_ALIASES((short)4, "hostAliases"),
    IP_ADDRESSES((short)5, "ipAddresses"),
    RESOURCE_DESCRIPTION((short)6, "resourceDescription"),
    BATCH_QUEUES((short)7, "batchQueues"),
    FILE_SYSTEMS((short)8, "fileSystems"),
    JOB_SUBMISSION_INTERFACES((short)9, "jobSubmissionInterfaces"),
    DATA_MOVEMENET_INTERFACES((short)10, "dataMovemenetInterfaces");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_EMPTY
          return IS_EMPTY;
        case 2: // COMPUTE_RESOURCE_ID
          return COMPUTE_RESOURCE_ID;
        case 3: // HOST_NAME
          return HOST_NAME;
        case 4: // HOST_ALIASES
          return HOST_ALIASES;
        case 5: // IP_ADDRESSES
          return IP_ADDRESSES;
        case 6: // RESOURCE_DESCRIPTION
          return RESOURCE_DESCRIPTION;
        case 7: // BATCH_QUEUES
          return BATCH_QUEUES;
        case 8: // FILE_SYSTEMS
          return FILE_SYSTEMS;
        case 9: // JOB_SUBMISSION_INTERFACES
          return JOB_SUBMISSION_INTERFACES;
        case 10: // DATA_MOVEMENET_INTERFACES
          return DATA_MOVEMENET_INTERFACES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISEMPTY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HOST_ALIASES,_Fields.IP_ADDRESSES,_Fields.RESOURCE_DESCRIPTION,_Fields.BATCH_QUEUES,_Fields.FILE_SYSTEMS,_Fields.JOB_SUBMISSION_INTERFACES,_Fields.DATA_MOVEMENET_INTERFACES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_EMPTY, new org.apache.thrift.meta_data.FieldMetaData("isEmpty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPUTE_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("computeResourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_ALIASES, new org.apache.thrift.meta_data.FieldMetaData("hostAliases", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IP_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("ipAddresses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESOURCE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("resourceDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH_QUEUES, new org.apache.thrift.meta_data.FieldMetaData("batchQueues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchQueue.class))));
    tmpMap.put(_Fields.FILE_SYSTEMS, new org.apache.thrift.meta_data.FieldMetaData("fileSystems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileSystems.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.JOB_SUBMISSION_INTERFACES, new org.apache.thrift.meta_data.FieldMetaData("jobSubmissionInterfaces", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobSubmissionInterface.class))));
    tmpMap.put(_Fields.DATA_MOVEMENET_INTERFACES, new org.apache.thrift.meta_data.FieldMetaData("dataMovemenetInterfaces", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataMovementInterface.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeResourceDescription.class, metaDataMap);
  }

  public ComputeResourceDescription() {
    this.isEmpty = false;

    this.computeResourceId = "DO_NOT_SET_AT_CLIENTS";

  }

  public ComputeResourceDescription(
    boolean isEmpty,
    String computeResourceId,
    String hostName)
  {
    this();
    this.isEmpty = isEmpty;
    setIsEmptyIsSet(true);
    this.computeResourceId = computeResourceId;
    this.hostName = hostName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComputeResourceDescription(ComputeResourceDescription other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isEmpty = other.isEmpty;
    if (other.isSetComputeResourceId()) {
      this.computeResourceId = other.computeResourceId;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    if (other.isSetHostAliases()) {
      Set<String> __this__hostAliases = new HashSet<String>(other.hostAliases);
      this.hostAliases = __this__hostAliases;
    }
    if (other.isSetIpAddresses()) {
      Set<String> __this__ipAddresses = new HashSet<String>(other.ipAddresses);
      this.ipAddresses = __this__ipAddresses;
    }
    if (other.isSetResourceDescription()) {
      this.resourceDescription = other.resourceDescription;
    }
    if (other.isSetBatchQueues()) {
      List<BatchQueue> __this__batchQueues = new ArrayList<BatchQueue>(other.batchQueues.size());
      for (BatchQueue other_element : other.batchQueues) {
        __this__batchQueues.add(new BatchQueue(other_element));
      }
      this.batchQueues = __this__batchQueues;
    }
    if (other.isSetFileSystems()) {
      Map<FileSystems,String> __this__fileSystems = new HashMap<FileSystems,String>(other.fileSystems.size());
      for (Map.Entry<FileSystems, String> other_element : other.fileSystems.entrySet()) {

        FileSystems other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        FileSystems __this__fileSystems_copy_key = other_element_key;

        String __this__fileSystems_copy_value = other_element_value;

        __this__fileSystems.put(__this__fileSystems_copy_key, __this__fileSystems_copy_value);
      }
      this.fileSystems = __this__fileSystems;
    }
    if (other.isSetJobSubmissionInterfaces()) {
      List<JobSubmissionInterface> __this__jobSubmissionInterfaces = new ArrayList<JobSubmissionInterface>(other.jobSubmissionInterfaces.size());
      for (JobSubmissionInterface other_element : other.jobSubmissionInterfaces) {
        __this__jobSubmissionInterfaces.add(new JobSubmissionInterface(other_element));
      }
      this.jobSubmissionInterfaces = __this__jobSubmissionInterfaces;
    }
    if (other.isSetDataMovemenetInterfaces()) {
      List<DataMovementInterface> __this__dataMovemenetInterfaces = new ArrayList<DataMovementInterface>(other.dataMovemenetInterfaces.size());
      for (DataMovementInterface other_element : other.dataMovemenetInterfaces) {
        __this__dataMovemenetInterfaces.add(new DataMovementInterface(other_element));
      }
      this.dataMovemenetInterfaces = __this__dataMovemenetInterfaces;
    }
  }

  public ComputeResourceDescription deepCopy() {
    return new ComputeResourceDescription(this);
  }

  @Override
  public void clear() {
    this.isEmpty = false;

    this.computeResourceId = "DO_NOT_SET_AT_CLIENTS";

    this.hostName = null;
    this.hostAliases = null;
    this.ipAddresses = null;
    this.resourceDescription = null;
    this.batchQueues = null;
    this.fileSystems = null;
    this.jobSubmissionInterfaces = null;
    this.dataMovemenetInterfaces = null;
  }

  public boolean isIsEmpty() {
    return this.isEmpty;
  }

  public void setIsEmpty(boolean isEmpty) {
    this.isEmpty = isEmpty;
    setIsEmptyIsSet(true);
  }

  public void unsetIsEmpty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEMPTY_ISSET_ID);
  }

  /** Returns true if field isEmpty is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEmpty() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEMPTY_ISSET_ID);
  }

  public void setIsEmptyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEMPTY_ISSET_ID, value);
  }

  public String getComputeResourceId() {
    return this.computeResourceId;
  }

  public void setComputeResourceId(String computeResourceId) {
    this.computeResourceId = computeResourceId;
  }

  public void unsetComputeResourceId() {
    this.computeResourceId = null;
  }

  /** Returns true if field computeResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetComputeResourceId() {
    return this.computeResourceId != null;
  }

  public void setComputeResourceIdIsSet(boolean value) {
    if (!value) {
      this.computeResourceId = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getHostAliasesSize() {
    return (this.hostAliases == null) ? 0 : this.hostAliases.size();
  }

  public java.util.Iterator<String> getHostAliasesIterator() {
    return (this.hostAliases == null) ? null : this.hostAliases.iterator();
  }

  public void addToHostAliases(String elem) {
    if (this.hostAliases == null) {
      this.hostAliases = new HashSet<String>();
    }
    this.hostAliases.add(elem);
  }

  public Set<String> getHostAliases() {
    return this.hostAliases;
  }

  public void setHostAliases(Set<String> hostAliases) {
    this.hostAliases = hostAliases;
  }

  public void unsetHostAliases() {
    this.hostAliases = null;
  }

  /** Returns true if field hostAliases is set (has been assigned a value) and false otherwise */
  public boolean isSetHostAliases() {
    return this.hostAliases != null;
  }

  public void setHostAliasesIsSet(boolean value) {
    if (!value) {
      this.hostAliases = null;
    }
  }

  public int getIpAddressesSize() {
    return (this.ipAddresses == null) ? 0 : this.ipAddresses.size();
  }

  public java.util.Iterator<String> getIpAddressesIterator() {
    return (this.ipAddresses == null) ? null : this.ipAddresses.iterator();
  }

  public void addToIpAddresses(String elem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new HashSet<String>();
    }
    this.ipAddresses.add(elem);
  }

  public Set<String> getIpAddresses() {
    return this.ipAddresses;
  }

  public void setIpAddresses(Set<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }

  public void unsetIpAddresses() {
    this.ipAddresses = null;
  }

  /** Returns true if field ipAddresses is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddresses() {
    return this.ipAddresses != null;
  }

  public void setIpAddressesIsSet(boolean value) {
    if (!value) {
      this.ipAddresses = null;
    }
  }

  public String getResourceDescription() {
    return this.resourceDescription;
  }

  public void setResourceDescription(String resourceDescription) {
    this.resourceDescription = resourceDescription;
  }

  public void unsetResourceDescription() {
    this.resourceDescription = null;
  }

  /** Returns true if field resourceDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceDescription() {
    return this.resourceDescription != null;
  }

  public void setResourceDescriptionIsSet(boolean value) {
    if (!value) {
      this.resourceDescription = null;
    }
  }

  public int getBatchQueuesSize() {
    return (this.batchQueues == null) ? 0 : this.batchQueues.size();
  }

  public java.util.Iterator<BatchQueue> getBatchQueuesIterator() {
    return (this.batchQueues == null) ? null : this.batchQueues.iterator();
  }

  public void addToBatchQueues(BatchQueue elem) {
    if (this.batchQueues == null) {
      this.batchQueues = new ArrayList<BatchQueue>();
    }
    this.batchQueues.add(elem);
  }

  public List<BatchQueue> getBatchQueues() {
    return this.batchQueues;
  }

  public void setBatchQueues(List<BatchQueue> batchQueues) {
    this.batchQueues = batchQueues;
  }

  public void unsetBatchQueues() {
    this.batchQueues = null;
  }

  /** Returns true if field batchQueues is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchQueues() {
    return this.batchQueues != null;
  }

  public void setBatchQueuesIsSet(boolean value) {
    if (!value) {
      this.batchQueues = null;
    }
  }

  public int getFileSystemsSize() {
    return (this.fileSystems == null) ? 0 : this.fileSystems.size();
  }

  public void putToFileSystems(FileSystems key, String val) {
    if (this.fileSystems == null) {
      this.fileSystems = new HashMap<FileSystems,String>();
    }
    this.fileSystems.put(key, val);
  }

  public Map<FileSystems,String> getFileSystems() {
    return this.fileSystems;
  }

  public void setFileSystems(Map<FileSystems,String> fileSystems) {
    this.fileSystems = fileSystems;
  }

  public void unsetFileSystems() {
    this.fileSystems = null;
  }

  /** Returns true if field fileSystems is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSystems() {
    return this.fileSystems != null;
  }

  public void setFileSystemsIsSet(boolean value) {
    if (!value) {
      this.fileSystems = null;
    }
  }

  public int getJobSubmissionInterfacesSize() {
    return (this.jobSubmissionInterfaces == null) ? 0 : this.jobSubmissionInterfaces.size();
  }

  public java.util.Iterator<JobSubmissionInterface> getJobSubmissionInterfacesIterator() {
    return (this.jobSubmissionInterfaces == null) ? null : this.jobSubmissionInterfaces.iterator();
  }

  public void addToJobSubmissionInterfaces(JobSubmissionInterface elem) {
    if (this.jobSubmissionInterfaces == null) {
      this.jobSubmissionInterfaces = new ArrayList<JobSubmissionInterface>();
    }
    this.jobSubmissionInterfaces.add(elem);
  }

  public List<JobSubmissionInterface> getJobSubmissionInterfaces() {
    return this.jobSubmissionInterfaces;
  }

  public void setJobSubmissionInterfaces(List<JobSubmissionInterface> jobSubmissionInterfaces) {
    this.jobSubmissionInterfaces = jobSubmissionInterfaces;
  }

  public void unsetJobSubmissionInterfaces() {
    this.jobSubmissionInterfaces = null;
  }

  /** Returns true if field jobSubmissionInterfaces is set (has been assigned a value) and false otherwise */
  public boolean isSetJobSubmissionInterfaces() {
    return this.jobSubmissionInterfaces != null;
  }

  public void setJobSubmissionInterfacesIsSet(boolean value) {
    if (!value) {
      this.jobSubmissionInterfaces = null;
    }
  }

  public int getDataMovemenetInterfacesSize() {
    return (this.dataMovemenetInterfaces == null) ? 0 : this.dataMovemenetInterfaces.size();
  }

  public java.util.Iterator<DataMovementInterface> getDataMovemenetInterfacesIterator() {
    return (this.dataMovemenetInterfaces == null) ? null : this.dataMovemenetInterfaces.iterator();
  }

  public void addToDataMovemenetInterfaces(DataMovementInterface elem) {
    if (this.dataMovemenetInterfaces == null) {
      this.dataMovemenetInterfaces = new ArrayList<DataMovementInterface>();
    }
    this.dataMovemenetInterfaces.add(elem);
  }

  public List<DataMovementInterface> getDataMovemenetInterfaces() {
    return this.dataMovemenetInterfaces;
  }

  public void setDataMovemenetInterfaces(List<DataMovementInterface> dataMovemenetInterfaces) {
    this.dataMovemenetInterfaces = dataMovemenetInterfaces;
  }

  public void unsetDataMovemenetInterfaces() {
    this.dataMovemenetInterfaces = null;
  }

  /** Returns true if field dataMovemenetInterfaces is set (has been assigned a value) and false otherwise */
  public boolean isSetDataMovemenetInterfaces() {
    return this.dataMovemenetInterfaces != null;
  }

  public void setDataMovemenetInterfacesIsSet(boolean value) {
    if (!value) {
      this.dataMovemenetInterfaces = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_EMPTY:
      if (value == null) {
        unsetIsEmpty();
      } else {
        setIsEmpty((Boolean)value);
      }
      break;

    case COMPUTE_RESOURCE_ID:
      if (value == null) {
        unsetComputeResourceId();
      } else {
        setComputeResourceId((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case HOST_ALIASES:
      if (value == null) {
        unsetHostAliases();
      } else {
        setHostAliases((Set<String>)value);
      }
      break;

    case IP_ADDRESSES:
      if (value == null) {
        unsetIpAddresses();
      } else {
        setIpAddresses((Set<String>)value);
      }
      break;

    case RESOURCE_DESCRIPTION:
      if (value == null) {
        unsetResourceDescription();
      } else {
        setResourceDescription((String)value);
      }
      break;

    case BATCH_QUEUES:
      if (value == null) {
        unsetBatchQueues();
      } else {
        setBatchQueues((List<BatchQueue>)value);
      }
      break;

    case FILE_SYSTEMS:
      if (value == null) {
        unsetFileSystems();
      } else {
        setFileSystems((Map<FileSystems,String>)value);
      }
      break;

    case JOB_SUBMISSION_INTERFACES:
      if (value == null) {
        unsetJobSubmissionInterfaces();
      } else {
        setJobSubmissionInterfaces((List<JobSubmissionInterface>)value);
      }
      break;

    case DATA_MOVEMENET_INTERFACES:
      if (value == null) {
        unsetDataMovemenetInterfaces();
      } else {
        setDataMovemenetInterfaces((List<DataMovementInterface>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_EMPTY:
      return Boolean.valueOf(isIsEmpty());

    case COMPUTE_RESOURCE_ID:
      return getComputeResourceId();

    case HOST_NAME:
      return getHostName();

    case HOST_ALIASES:
      return getHostAliases();

    case IP_ADDRESSES:
      return getIpAddresses();

    case RESOURCE_DESCRIPTION:
      return getResourceDescription();

    case BATCH_QUEUES:
      return getBatchQueues();

    case FILE_SYSTEMS:
      return getFileSystems();

    case JOB_SUBMISSION_INTERFACES:
      return getJobSubmissionInterfaces();

    case DATA_MOVEMENET_INTERFACES:
      return getDataMovemenetInterfaces();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_EMPTY:
      return isSetIsEmpty();
    case COMPUTE_RESOURCE_ID:
      return isSetComputeResourceId();
    case HOST_NAME:
      return isSetHostName();
    case HOST_ALIASES:
      return isSetHostAliases();
    case IP_ADDRESSES:
      return isSetIpAddresses();
    case RESOURCE_DESCRIPTION:
      return isSetResourceDescription();
    case BATCH_QUEUES:
      return isSetBatchQueues();
    case FILE_SYSTEMS:
      return isSetFileSystems();
    case JOB_SUBMISSION_INTERFACES:
      return isSetJobSubmissionInterfaces();
    case DATA_MOVEMENET_INTERFACES:
      return isSetDataMovemenetInterfaces();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComputeResourceDescription)
      return this.equals((ComputeResourceDescription)that);
    return false;
  }

  public boolean equals(ComputeResourceDescription that) {
    if (that == null)
      return false;

    boolean this_present_isEmpty = true;
    boolean that_present_isEmpty = true;
    if (this_present_isEmpty || that_present_isEmpty) {
      if (!(this_present_isEmpty && that_present_isEmpty))
        return false;
      if (this.isEmpty != that.isEmpty)
        return false;
    }

    boolean this_present_computeResourceId = true && this.isSetComputeResourceId();
    boolean that_present_computeResourceId = true && that.isSetComputeResourceId();
    if (this_present_computeResourceId || that_present_computeResourceId) {
      if (!(this_present_computeResourceId && that_present_computeResourceId))
        return false;
      if (!this.computeResourceId.equals(that.computeResourceId))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_hostAliases = true && this.isSetHostAliases();
    boolean that_present_hostAliases = true && that.isSetHostAliases();
    if (this_present_hostAliases || that_present_hostAliases) {
      if (!(this_present_hostAliases && that_present_hostAliases))
        return false;
      if (!this.hostAliases.equals(that.hostAliases))
        return false;
    }

    boolean this_present_ipAddresses = true && this.isSetIpAddresses();
    boolean that_present_ipAddresses = true && that.isSetIpAddresses();
    if (this_present_ipAddresses || that_present_ipAddresses) {
      if (!(this_present_ipAddresses && that_present_ipAddresses))
        return false;
      if (!this.ipAddresses.equals(that.ipAddresses))
        return false;
    }

    boolean this_present_resourceDescription = true && this.isSetResourceDescription();
    boolean that_present_resourceDescription = true && that.isSetResourceDescription();
    if (this_present_resourceDescription || that_present_resourceDescription) {
      if (!(this_present_resourceDescription && that_present_resourceDescription))
        return false;
      if (!this.resourceDescription.equals(that.resourceDescription))
        return false;
    }

    boolean this_present_batchQueues = true && this.isSetBatchQueues();
    boolean that_present_batchQueues = true && that.isSetBatchQueues();
    if (this_present_batchQueues || that_present_batchQueues) {
      if (!(this_present_batchQueues && that_present_batchQueues))
        return false;
      if (!this.batchQueues.equals(that.batchQueues))
        return false;
    }

    boolean this_present_fileSystems = true && this.isSetFileSystems();
    boolean that_present_fileSystems = true && that.isSetFileSystems();
    if (this_present_fileSystems || that_present_fileSystems) {
      if (!(this_present_fileSystems && that_present_fileSystems))
        return false;
      if (!this.fileSystems.equals(that.fileSystems))
        return false;
    }

    boolean this_present_jobSubmissionInterfaces = true && this.isSetJobSubmissionInterfaces();
    boolean that_present_jobSubmissionInterfaces = true && that.isSetJobSubmissionInterfaces();
    if (this_present_jobSubmissionInterfaces || that_present_jobSubmissionInterfaces) {
      if (!(this_present_jobSubmissionInterfaces && that_present_jobSubmissionInterfaces))
        return false;
      if (!this.jobSubmissionInterfaces.equals(that.jobSubmissionInterfaces))
        return false;
    }

    boolean this_present_dataMovemenetInterfaces = true && this.isSetDataMovemenetInterfaces();
    boolean that_present_dataMovemenetInterfaces = true && that.isSetDataMovemenetInterfaces();
    if (this_present_dataMovemenetInterfaces || that_present_dataMovemenetInterfaces) {
      if (!(this_present_dataMovemenetInterfaces && that_present_dataMovemenetInterfaces))
        return false;
      if (!this.dataMovemenetInterfaces.equals(that.dataMovemenetInterfaces))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ComputeResourceDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsEmpty()).compareTo(other.isSetIsEmpty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEmpty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEmpty, other.isEmpty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComputeResourceId()).compareTo(other.isSetComputeResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComputeResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computeResourceId, other.computeResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostAliases()).compareTo(other.isSetHostAliases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostAliases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostAliases, other.hostAliases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddresses()).compareTo(other.isSetIpAddresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddresses, other.ipAddresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceDescription()).compareTo(other.isSetResourceDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceDescription, other.resourceDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchQueues()).compareTo(other.isSetBatchQueues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchQueues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchQueues, other.batchQueues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSystems()).compareTo(other.isSetFileSystems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSystems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSystems, other.fileSystems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobSubmissionInterfaces()).compareTo(other.isSetJobSubmissionInterfaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobSubmissionInterfaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobSubmissionInterfaces, other.jobSubmissionInterfaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataMovemenetInterfaces()).compareTo(other.isSetDataMovemenetInterfaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataMovemenetInterfaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataMovemenetInterfaces, other.dataMovemenetInterfaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComputeResourceDescription(");
    boolean first = true;

    sb.append("isEmpty:");
    sb.append(this.isEmpty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("computeResourceId:");
    if (this.computeResourceId == null) {
      sb.append("null");
    } else {
      sb.append(this.computeResourceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (isSetHostAliases()) {
      if (!first) sb.append(", ");
      sb.append("hostAliases:");
      if (this.hostAliases == null) {
        sb.append("null");
      } else {
        sb.append(this.hostAliases);
      }
      first = false;
    }
    if (isSetIpAddresses()) {
      if (!first) sb.append(", ");
      sb.append("ipAddresses:");
      if (this.ipAddresses == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAddresses);
      }
      first = false;
    }
    if (isSetResourceDescription()) {
      if (!first) sb.append(", ");
      sb.append("resourceDescription:");
      if (this.resourceDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceDescription);
      }
      first = false;
    }
    if (isSetBatchQueues()) {
      if (!first) sb.append(", ");
      sb.append("batchQueues:");
      if (this.batchQueues == null) {
        sb.append("null");
      } else {
        sb.append(this.batchQueues);
      }
      first = false;
    }
    if (isSetFileSystems()) {
      if (!first) sb.append(", ");
      sb.append("fileSystems:");
      if (this.fileSystems == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSystems);
      }
      first = false;
    }
    if (isSetJobSubmissionInterfaces()) {
      if (!first) sb.append(", ");
      sb.append("jobSubmissionInterfaces:");
      if (this.jobSubmissionInterfaces == null) {
        sb.append("null");
      } else {
        sb.append(this.jobSubmissionInterfaces);
      }
      first = false;
    }
    if (isSetDataMovemenetInterfaces()) {
      if (!first) sb.append(", ");
      sb.append("dataMovemenetInterfaces:");
      if (this.dataMovemenetInterfaces == null) {
        sb.append("null");
      } else {
        sb.append(this.dataMovemenetInterfaces);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetIsEmpty()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isEmpty' is unset! Struct:" + toString());
    }

    if (!isSetComputeResourceId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'computeResourceId' is unset! Struct:" + toString());
    }

    if (!isSetHostName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostName' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComputeResourceDescriptionStandardSchemeFactory implements SchemeFactory {
    public ComputeResourceDescriptionStandardScheme getScheme() {
      return new ComputeResourceDescriptionStandardScheme();
    }
  }

  private static class ComputeResourceDescriptionStandardScheme extends StandardScheme<ComputeResourceDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_EMPTY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEmpty = iprot.readBool();
              struct.setIsEmptyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPUTE_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.computeResourceId = iprot.readString();
              struct.setComputeResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOST_ALIASES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set26 = iprot.readSetBegin();
                struct.hostAliases = new HashSet<String>(2*_set26.size);
                for (int _i27 = 0; _i27 < _set26.size; ++_i27)
                {
                  String _elem28;
                  _elem28 = iprot.readString();
                  struct.hostAliases.add(_elem28);
                }
                iprot.readSetEnd();
              }
              struct.setHostAliasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IP_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set29 = iprot.readSetBegin();
                struct.ipAddresses = new HashSet<String>(2*_set29.size);
                for (int _i30 = 0; _i30 < _set29.size; ++_i30)
                {
                  String _elem31;
                  _elem31 = iprot.readString();
                  struct.ipAddresses.add(_elem31);
                }
                iprot.readSetEnd();
              }
              struct.setIpAddressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceDescription = iprot.readString();
              struct.setResourceDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BATCH_QUEUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.batchQueues = new ArrayList<BatchQueue>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  BatchQueue _elem34;
                  _elem34 = new BatchQueue();
                  _elem34.read(iprot);
                  struct.batchQueues.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setBatchQueuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_SYSTEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                struct.fileSystems = new HashMap<FileSystems,String>(2*_map35.size);
                for (int _i36 = 0; _i36 < _map35.size; ++_i36)
                {
                  FileSystems _key37;
                  String _val38;
                  _key37 = FileSystems.findByValue(iprot.readI32());
                  _val38 = iprot.readString();
                  struct.fileSystems.put(_key37, _val38);
                }
                iprot.readMapEnd();
              }
              struct.setFileSystemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JOB_SUBMISSION_INTERFACES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.jobSubmissionInterfaces = new ArrayList<JobSubmissionInterface>(_list39.size);
                for (int _i40 = 0; _i40 < _list39.size; ++_i40)
                {
                  JobSubmissionInterface _elem41;
                  _elem41 = new JobSubmissionInterface();
                  _elem41.read(iprot);
                  struct.jobSubmissionInterfaces.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setJobSubmissionInterfacesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATA_MOVEMENET_INTERFACES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.dataMovemenetInterfaces = new ArrayList<DataMovementInterface>(_list42.size);
                for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                {
                  DataMovementInterface _elem44;
                  _elem44 = new DataMovementInterface();
                  _elem44.read(iprot);
                  struct.dataMovemenetInterfaces.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setDataMovemenetInterfacesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_EMPTY_FIELD_DESC);
      oprot.writeBool(struct.isEmpty);
      oprot.writeFieldEnd();
      if (struct.computeResourceId != null) {
        oprot.writeFieldBegin(COMPUTE_RESOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.computeResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      if (struct.hostAliases != null) {
        if (struct.isSetHostAliases()) {
          oprot.writeFieldBegin(HOST_ALIASES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.hostAliases.size()));
            for (String _iter45 : struct.hostAliases)
            {
              oprot.writeString(_iter45);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ipAddresses != null) {
        if (struct.isSetIpAddresses()) {
          oprot.writeFieldBegin(IP_ADDRESSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.ipAddresses.size()));
            for (String _iter46 : struct.ipAddresses)
            {
              oprot.writeString(_iter46);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceDescription != null) {
        if (struct.isSetResourceDescription()) {
          oprot.writeFieldBegin(RESOURCE_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.resourceDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batchQueues != null) {
        if (struct.isSetBatchQueues()) {
          oprot.writeFieldBegin(BATCH_QUEUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.batchQueues.size()));
            for (BatchQueue _iter47 : struct.batchQueues)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileSystems != null) {
        if (struct.isSetFileSystems()) {
          oprot.writeFieldBegin(FILE_SYSTEMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.fileSystems.size()));
            for (Map.Entry<FileSystems, String> _iter48 : struct.fileSystems.entrySet())
            {
              oprot.writeI32(_iter48.getKey().getValue());
              oprot.writeString(_iter48.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobSubmissionInterfaces != null) {
        if (struct.isSetJobSubmissionInterfaces()) {
          oprot.writeFieldBegin(JOB_SUBMISSION_INTERFACES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobSubmissionInterfaces.size()));
            for (JobSubmissionInterface _iter49 : struct.jobSubmissionInterfaces)
            {
              _iter49.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataMovemenetInterfaces != null) {
        if (struct.isSetDataMovemenetInterfaces()) {
          oprot.writeFieldBegin(DATA_MOVEMENET_INTERFACES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dataMovemenetInterfaces.size()));
            for (DataMovementInterface _iter50 : struct.dataMovemenetInterfaces)
            {
              _iter50.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComputeResourceDescriptionTupleSchemeFactory implements SchemeFactory {
    public ComputeResourceDescriptionTupleScheme getScheme() {
      return new ComputeResourceDescriptionTupleScheme();
    }
  }

  private static class ComputeResourceDescriptionTupleScheme extends TupleScheme<ComputeResourceDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.isEmpty);
      oprot.writeString(struct.computeResourceId);
      oprot.writeString(struct.hostName);
      BitSet optionals = new BitSet();
      if (struct.isSetHostAliases()) {
        optionals.set(0);
      }
      if (struct.isSetIpAddresses()) {
        optionals.set(1);
      }
      if (struct.isSetResourceDescription()) {
        optionals.set(2);
      }
      if (struct.isSetBatchQueues()) {
        optionals.set(3);
      }
      if (struct.isSetFileSystems()) {
        optionals.set(4);
      }
      if (struct.isSetJobSubmissionInterfaces()) {
        optionals.set(5);
      }
      if (struct.isSetDataMovemenetInterfaces()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetHostAliases()) {
        {
          oprot.writeI32(struct.hostAliases.size());
          for (String _iter51 : struct.hostAliases)
          {
            oprot.writeString(_iter51);
          }
        }
      }
      if (struct.isSetIpAddresses()) {
        {
          oprot.writeI32(struct.ipAddresses.size());
          for (String _iter52 : struct.ipAddresses)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetResourceDescription()) {
        oprot.writeString(struct.resourceDescription);
      }
      if (struct.isSetBatchQueues()) {
        {
          oprot.writeI32(struct.batchQueues.size());
          for (BatchQueue _iter53 : struct.batchQueues)
          {
            _iter53.write(oprot);
          }
        }
      }
      if (struct.isSetFileSystems()) {
        {
          oprot.writeI32(struct.fileSystems.size());
          for (Map.Entry<FileSystems, String> _iter54 : struct.fileSystems.entrySet())
          {
            oprot.writeI32(_iter54.getKey().getValue());
            oprot.writeString(_iter54.getValue());
          }
        }
      }
      if (struct.isSetJobSubmissionInterfaces()) {
        {
          oprot.writeI32(struct.jobSubmissionInterfaces.size());
          for (JobSubmissionInterface _iter55 : struct.jobSubmissionInterfaces)
          {
            _iter55.write(oprot);
          }
        }
      }
      if (struct.isSetDataMovemenetInterfaces()) {
        {
          oprot.writeI32(struct.dataMovemenetInterfaces.size());
          for (DataMovementInterface _iter56 : struct.dataMovemenetInterfaces)
          {
            _iter56.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComputeResourceDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.isEmpty = iprot.readBool();
      struct.setIsEmptyIsSet(true);
      struct.computeResourceId = iprot.readString();
      struct.setComputeResourceIdIsSet(true);
      struct.hostName = iprot.readString();
      struct.setHostNameIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set57 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hostAliases = new HashSet<String>(2*_set57.size);
          for (int _i58 = 0; _i58 < _set57.size; ++_i58)
          {
            String _elem59;
            _elem59 = iprot.readString();
            struct.hostAliases.add(_elem59);
          }
        }
        struct.setHostAliasesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set60 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ipAddresses = new HashSet<String>(2*_set60.size);
          for (int _i61 = 0; _i61 < _set60.size; ++_i61)
          {
            String _elem62;
            _elem62 = iprot.readString();
            struct.ipAddresses.add(_elem62);
          }
        }
        struct.setIpAddressesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceDescription = iprot.readString();
        struct.setResourceDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.batchQueues = new ArrayList<BatchQueue>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            BatchQueue _elem65;
            _elem65 = new BatchQueue();
            _elem65.read(iprot);
            struct.batchQueues.add(_elem65);
          }
        }
        struct.setBatchQueuesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fileSystems = new HashMap<FileSystems,String>(2*_map66.size);
          for (int _i67 = 0; _i67 < _map66.size; ++_i67)
          {
            FileSystems _key68;
            String _val69;
            _key68 = FileSystems.findByValue(iprot.readI32());
            _val69 = iprot.readString();
            struct.fileSystems.put(_key68, _val69);
          }
        }
        struct.setFileSystemsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list70 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobSubmissionInterfaces = new ArrayList<JobSubmissionInterface>(_list70.size);
          for (int _i71 = 0; _i71 < _list70.size; ++_i71)
          {
            JobSubmissionInterface _elem72;
            _elem72 = new JobSubmissionInterface();
            _elem72.read(iprot);
            struct.jobSubmissionInterfaces.add(_elem72);
          }
        }
        struct.setJobSubmissionInterfacesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dataMovemenetInterfaces = new ArrayList<DataMovementInterface>(_list73.size);
          for (int _i74 = 0; _i74 < _list73.size; ++_i74)
          {
            DataMovementInterface _elem75;
            _elem75 = new DataMovementInterface();
            _elem75.read(iprot);
            struct.dataMovemenetInterfaces.add(_elem75);
          }
        }
        struct.setDataMovemenetInterfacesIsSet(true);
      }
    }
  }

}

