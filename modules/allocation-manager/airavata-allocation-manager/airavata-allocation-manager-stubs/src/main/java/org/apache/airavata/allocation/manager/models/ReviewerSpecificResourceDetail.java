/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.allocation.manager.models;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <p>Allocation Request status details</p>
 * <li>projectId: Unique id of the project</li>
 * <li>awardAllocation: Allocation awarded</li>
 * <li>endDate: End date of the request</li>
 * <li>reviewers: reviewers of the request</li>
 * <li>startDate: Start date of the allocation</li>
 * <li>status: Status of the allocation request</li>
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ReviewerSpecificResourceDetail implements org.apache.thrift.TBase<ReviewerSpecificResourceDetail, ReviewerSpecificResourceDetail._Fields>, java.io.Serializable, Cloneable, Comparable<ReviewerSpecificResourceDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReviewerSpecificResourceDetail");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATIONS_TO_BE_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationsToBeUsed", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REVIEWED_SERVICE_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewedServiceUnits", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResource", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReviewerSpecificResourceDetailStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReviewerSpecificResourceDetailTupleSchemeFactory();

  public long id; // optional
  public java.lang.String applicationsToBeUsed; // optional
  public java.lang.String comments; // optional
  public long projectId; // optional
  public java.lang.String resourceType; // optional
  public long reviewedServiceUnits; // optional
  public java.lang.String specificResource; // optional
  public java.lang.String username; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APPLICATIONS_TO_BE_USED((short)2, "applicationsToBeUsed"),
    COMMENTS((short)3, "comments"),
    PROJECT_ID((short)4, "projectId"),
    RESOURCE_TYPE((short)5, "resourceType"),
    REVIEWED_SERVICE_UNITS((short)6, "reviewedServiceUnits"),
    SPECIFIC_RESOURCE((short)7, "specificResource"),
    USERNAME((short)8, "username");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APPLICATIONS_TO_BE_USED
          return APPLICATIONS_TO_BE_USED;
        case 3: // COMMENTS
          return COMMENTS;
        case 4: // PROJECT_ID
          return PROJECT_ID;
        case 5: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 6: // REVIEWED_SERVICE_UNITS
          return REVIEWED_SERVICE_UNITS;
        case 7: // SPECIFIC_RESOURCE
          return SPECIFIC_RESOURCE;
        case 8: // USERNAME
          return USERNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __REVIEWEDSERVICEUNITS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.APPLICATIONS_TO_BE_USED,_Fields.COMMENTS,_Fields.PROJECT_ID,_Fields.RESOURCE_TYPE,_Fields.REVIEWED_SERVICE_UNITS,_Fields.SPECIFIC_RESOURCE,_Fields.USERNAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPLICATIONS_TO_BE_USED, new org.apache.thrift.meta_data.FieldMetaData("applicationsToBeUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEWED_SERVICE_UNITS, new org.apache.thrift.meta_data.FieldMetaData("reviewedServiceUnits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPECIFIC_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("specificResource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReviewerSpecificResourceDetail.class, metaDataMap);
  }

  public ReviewerSpecificResourceDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReviewerSpecificResourceDetail(ReviewerSpecificResourceDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetApplicationsToBeUsed()) {
      this.applicationsToBeUsed = other.applicationsToBeUsed;
    }
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
    this.projectId = other.projectId;
    if (other.isSetResourceType()) {
      this.resourceType = other.resourceType;
    }
    this.reviewedServiceUnits = other.reviewedServiceUnits;
    if (other.isSetSpecificResource()) {
      this.specificResource = other.specificResource;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
  }

  public ReviewerSpecificResourceDetail deepCopy() {
    return new ReviewerSpecificResourceDetail(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.applicationsToBeUsed = null;
    this.comments = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.resourceType = null;
    setReviewedServiceUnitsIsSet(false);
    this.reviewedServiceUnits = 0;
    this.specificResource = null;
    this.username = null;
  }

  public long getId() {
    return this.id;
  }

  public ReviewerSpecificResourceDetail setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getApplicationsToBeUsed() {
    return this.applicationsToBeUsed;
  }

  public ReviewerSpecificResourceDetail setApplicationsToBeUsed(java.lang.String applicationsToBeUsed) {
    this.applicationsToBeUsed = applicationsToBeUsed;
    return this;
  }

  public void unsetApplicationsToBeUsed() {
    this.applicationsToBeUsed = null;
  }

  /** Returns true if field applicationsToBeUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationsToBeUsed() {
    return this.applicationsToBeUsed != null;
  }

  public void setApplicationsToBeUsedIsSet(boolean value) {
    if (!value) {
      this.applicationsToBeUsed = null;
    }
  }

  public java.lang.String getComments() {
    return this.comments;
  }

  public ReviewerSpecificResourceDetail setComments(java.lang.String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public long getProjectId() {
    return this.projectId;
  }

  public ReviewerSpecificResourceDetail setProjectId(long projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public java.lang.String getResourceType() {
    return this.resourceType;
  }

  public ReviewerSpecificResourceDetail setResourceType(java.lang.String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  public void unsetResourceType() {
    this.resourceType = null;
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return this.resourceType != null;
  }

  public void setResourceTypeIsSet(boolean value) {
    if (!value) {
      this.resourceType = null;
    }
  }

  public long getReviewedServiceUnits() {
    return this.reviewedServiceUnits;
  }

  public ReviewerSpecificResourceDetail setReviewedServiceUnits(long reviewedServiceUnits) {
    this.reviewedServiceUnits = reviewedServiceUnits;
    setReviewedServiceUnitsIsSet(true);
    return this;
  }

  public void unsetReviewedServiceUnits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVIEWEDSERVICEUNITS_ISSET_ID);
  }

  /** Returns true if field reviewedServiceUnits is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewedServiceUnits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVIEWEDSERVICEUNITS_ISSET_ID);
  }

  public void setReviewedServiceUnitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVIEWEDSERVICEUNITS_ISSET_ID, value);
  }

  public java.lang.String getSpecificResource() {
    return this.specificResource;
  }

  public ReviewerSpecificResourceDetail setSpecificResource(java.lang.String specificResource) {
    this.specificResource = specificResource;
    return this;
  }

  public void unsetSpecificResource() {
    this.specificResource = null;
  }

  /** Returns true if field specificResource is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecificResource() {
    return this.specificResource != null;
  }

  public void setSpecificResourceIsSet(boolean value) {
    if (!value) {
      this.specificResource = null;
    }
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public ReviewerSpecificResourceDetail setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case APPLICATIONS_TO_BE_USED:
      if (value == null) {
        unsetApplicationsToBeUsed();
      } else {
        setApplicationsToBeUsed((java.lang.String)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((java.lang.String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((java.lang.Long)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((java.lang.String)value);
      }
      break;

    case REVIEWED_SERVICE_UNITS:
      if (value == null) {
        unsetReviewedServiceUnits();
      } else {
        setReviewedServiceUnits((java.lang.Long)value);
      }
      break;

    case SPECIFIC_RESOURCE:
      if (value == null) {
        unsetSpecificResource();
      } else {
        setSpecificResource((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case APPLICATIONS_TO_BE_USED:
      return getApplicationsToBeUsed();

    case COMMENTS:
      return getComments();

    case PROJECT_ID:
      return getProjectId();

    case RESOURCE_TYPE:
      return getResourceType();

    case REVIEWED_SERVICE_UNITS:
      return getReviewedServiceUnits();

    case SPECIFIC_RESOURCE:
      return getSpecificResource();

    case USERNAME:
      return getUsername();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APPLICATIONS_TO_BE_USED:
      return isSetApplicationsToBeUsed();
    case COMMENTS:
      return isSetComments();
    case PROJECT_ID:
      return isSetProjectId();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case REVIEWED_SERVICE_UNITS:
      return isSetReviewedServiceUnits();
    case SPECIFIC_RESOURCE:
      return isSetSpecificResource();
    case USERNAME:
      return isSetUsername();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReviewerSpecificResourceDetail)
      return this.equals((ReviewerSpecificResourceDetail)that);
    return false;
  }

  public boolean equals(ReviewerSpecificResourceDetail that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_applicationsToBeUsed = true && this.isSetApplicationsToBeUsed();
    boolean that_present_applicationsToBeUsed = true && that.isSetApplicationsToBeUsed();
    if (this_present_applicationsToBeUsed || that_present_applicationsToBeUsed) {
      if (!(this_present_applicationsToBeUsed && that_present_applicationsToBeUsed))
        return false;
      if (!this.applicationsToBeUsed.equals(that.applicationsToBeUsed))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (!this.resourceType.equals(that.resourceType))
        return false;
    }

    boolean this_present_reviewedServiceUnits = true && this.isSetReviewedServiceUnits();
    boolean that_present_reviewedServiceUnits = true && that.isSetReviewedServiceUnits();
    if (this_present_reviewedServiceUnits || that_present_reviewedServiceUnits) {
      if (!(this_present_reviewedServiceUnits && that_present_reviewedServiceUnits))
        return false;
      if (this.reviewedServiceUnits != that.reviewedServiceUnits)
        return false;
    }

    boolean this_present_specificResource = true && this.isSetSpecificResource();
    boolean that_present_specificResource = true && that.isSetSpecificResource();
    if (this_present_specificResource || that_present_specificResource) {
      if (!(this_present_specificResource && that_present_specificResource))
        return false;
      if (!this.specificResource.equals(that.specificResource))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetApplicationsToBeUsed()) ? 131071 : 524287);
    if (isSetApplicationsToBeUsed())
      hashCode = hashCode * 8191 + applicationsToBeUsed.hashCode();

    hashCode = hashCode * 8191 + ((isSetComments()) ? 131071 : 524287);
    if (isSetComments())
      hashCode = hashCode * 8191 + comments.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectId()) ? 131071 : 524287);
    if (isSetProjectId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

    hashCode = hashCode * 8191 + ((isSetResourceType()) ? 131071 : 524287);
    if (isSetResourceType())
      hashCode = hashCode * 8191 + resourceType.hashCode();

    hashCode = hashCode * 8191 + ((isSetReviewedServiceUnits()) ? 131071 : 524287);
    if (isSetReviewedServiceUnits())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reviewedServiceUnits);

    hashCode = hashCode * 8191 + ((isSetSpecificResource()) ? 131071 : 524287);
    if (isSetSpecificResource())
      hashCode = hashCode * 8191 + specificResource.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReviewerSpecificResourceDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplicationsToBeUsed()).compareTo(other.isSetApplicationsToBeUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationsToBeUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationsToBeUsed, other.applicationsToBeUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReviewedServiceUnits()).compareTo(other.isSetReviewedServiceUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewedServiceUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewedServiceUnits, other.reviewedServiceUnits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpecificResource()).compareTo(other.isSetSpecificResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecificResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResource, other.specificResource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReviewerSpecificResourceDetail(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetApplicationsToBeUsed()) {
      if (!first) sb.append(", ");
      sb.append("applicationsToBeUsed:");
      if (this.applicationsToBeUsed == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationsToBeUsed);
      }
      first = false;
    }
    if (isSetComments()) {
      if (!first) sb.append(", ");
      sb.append("comments:");
      if (this.comments == null) {
        sb.append("null");
      } else {
        sb.append(this.comments);
      }
      first = false;
    }
    if (isSetProjectId()) {
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
    }
    if (isSetResourceType()) {
      if (!first) sb.append(", ");
      sb.append("resourceType:");
      if (this.resourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceType);
      }
      first = false;
    }
    if (isSetReviewedServiceUnits()) {
      if (!first) sb.append(", ");
      sb.append("reviewedServiceUnits:");
      sb.append(this.reviewedServiceUnits);
      first = false;
    }
    if (isSetSpecificResource()) {
      if (!first) sb.append(", ");
      sb.append("specificResource:");
      if (this.specificResource == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResource);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReviewerSpecificResourceDetailStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReviewerSpecificResourceDetailStandardScheme getScheme() {
      return new ReviewerSpecificResourceDetailStandardScheme();
    }
  }

  private static class ReviewerSpecificResourceDetailStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReviewerSpecificResourceDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReviewerSpecificResourceDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATIONS_TO_BE_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationsToBeUsed = iprot.readString();
              struct.setApplicationsToBeUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comments = iprot.readString();
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.projectId = iprot.readI64();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceType = iprot.readString();
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REVIEWED_SERVICE_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reviewedServiceUnits = iprot.readI64();
              struct.setReviewedServiceUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPECIFIC_RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specificResource = iprot.readString();
              struct.setSpecificResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReviewerSpecificResourceDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.applicationsToBeUsed != null) {
        if (struct.isSetApplicationsToBeUsed()) {
          oprot.writeFieldBegin(APPLICATIONS_TO_BE_USED_FIELD_DESC);
          oprot.writeString(struct.applicationsToBeUsed);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comments != null) {
        if (struct.isSetComments()) {
          oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
          oprot.writeString(struct.comments);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProjectId()) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.resourceType != null) {
        if (struct.isSetResourceType()) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.resourceType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReviewedServiceUnits()) {
        oprot.writeFieldBegin(REVIEWED_SERVICE_UNITS_FIELD_DESC);
        oprot.writeI64(struct.reviewedServiceUnits);
        oprot.writeFieldEnd();
      }
      if (struct.specificResource != null) {
        if (struct.isSetSpecificResource()) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_FIELD_DESC);
          oprot.writeString(struct.specificResource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReviewerSpecificResourceDetailTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReviewerSpecificResourceDetailTupleScheme getScheme() {
      return new ReviewerSpecificResourceDetailTupleScheme();
    }
  }

  private static class ReviewerSpecificResourceDetailTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReviewerSpecificResourceDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReviewerSpecificResourceDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationsToBeUsed()) {
        optionals.set(1);
      }
      if (struct.isSetComments()) {
        optionals.set(2);
      }
      if (struct.isSetProjectId()) {
        optionals.set(3);
      }
      if (struct.isSetResourceType()) {
        optionals.set(4);
      }
      if (struct.isSetReviewedServiceUnits()) {
        optionals.set(5);
      }
      if (struct.isSetSpecificResource()) {
        optionals.set(6);
      }
      if (struct.isSetUsername()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetApplicationsToBeUsed()) {
        oprot.writeString(struct.applicationsToBeUsed);
      }
      if (struct.isSetComments()) {
        oprot.writeString(struct.comments);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI64(struct.projectId);
      }
      if (struct.isSetResourceType()) {
        oprot.writeString(struct.resourceType);
      }
      if (struct.isSetReviewedServiceUnits()) {
        oprot.writeI64(struct.reviewedServiceUnits);
      }
      if (struct.isSetSpecificResource()) {
        oprot.writeString(struct.specificResource);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReviewerSpecificResourceDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applicationsToBeUsed = iprot.readString();
        struct.setApplicationsToBeUsedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.comments = iprot.readString();
        struct.setCommentsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resourceType = iprot.readString();
        struct.setResourceTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reviewedServiceUnits = iprot.readI64();
        struct.setReviewedServiceUnitsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.specificResource = iprot.readString();
        struct.setSpecificResourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

