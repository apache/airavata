/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.allocation.manager.models;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <p>Allocation Request status details</p>
 * <li>projectId: Unique id of the project</li>
 * <li>awardAllocation: Allocation awarded</li>
 * <li>endDate: End date of the request</li>
 * <li>reviewers: reviewers of the request</li>
 * <li>startDate: Start date of the allocation</li>
 * <li>status: Status of the allocation request</li>
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ReviewerAllocationDetail implements org.apache.thrift.TBase<ReviewerAllocationDetail, ReviewerAllocationDetail._Fields>, java.io.Serializable, Cloneable, Comparable<ReviewerAllocationDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReviewerAllocationDetail");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DISK_USAGE_RANGE_PER_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("diskUsageRangePerJob", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_MEMORY_PER_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMemoryPerCpu", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_CPU_PER_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfCpuPerJob", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField REVIEW_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewDate", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TYPICAL_SU_PER_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("typicalSuPerJob", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReviewerAllocationDetailStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReviewerAllocationDetailTupleSchemeFactory();

  public long id; // optional
  public long projectId; // optional
  public long diskUsageRangePerJob; // optional
  public java.nio.ByteBuffer documents; // optional
  public long maxMemoryPerCpu; // optional
  public long numberOfCpuPerJob; // optional
  public long reviewDate; // optional
  public long typicalSuPerJob; // optional
  public java.lang.String username; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PROJECT_ID((short)2, "projectId"),
    DISK_USAGE_RANGE_PER_JOB((short)3, "diskUsageRangePerJob"),
    DOCUMENTS((short)4, "documents"),
    MAX_MEMORY_PER_CPU((short)5, "maxMemoryPerCpu"),
    NUMBER_OF_CPU_PER_JOB((short)6, "numberOfCpuPerJob"),
    REVIEW_DATE((short)7, "reviewDate"),
    TYPICAL_SU_PER_JOB((short)8, "typicalSuPerJob"),
    USERNAME((short)9, "username");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // DISK_USAGE_RANGE_PER_JOB
          return DISK_USAGE_RANGE_PER_JOB;
        case 4: // DOCUMENTS
          return DOCUMENTS;
        case 5: // MAX_MEMORY_PER_CPU
          return MAX_MEMORY_PER_CPU;
        case 6: // NUMBER_OF_CPU_PER_JOB
          return NUMBER_OF_CPU_PER_JOB;
        case 7: // REVIEW_DATE
          return REVIEW_DATE;
        case 8: // TYPICAL_SU_PER_JOB
          return TYPICAL_SU_PER_JOB;
        case 9: // USERNAME
          return USERNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __DISKUSAGERANGEPERJOB_ISSET_ID = 2;
  private static final int __MAXMEMORYPERCPU_ISSET_ID = 3;
  private static final int __NUMBEROFCPUPERJOB_ISSET_ID = 4;
  private static final int __REVIEWDATE_ISSET_ID = 5;
  private static final int __TYPICALSUPERJOB_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PROJECT_ID,_Fields.DISK_USAGE_RANGE_PER_JOB,_Fields.DOCUMENTS,_Fields.MAX_MEMORY_PER_CPU,_Fields.NUMBER_OF_CPU_PER_JOB,_Fields.REVIEW_DATE,_Fields.TYPICAL_SU_PER_JOB,_Fields.USERNAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISK_USAGE_RANGE_PER_JOB, new org.apache.thrift.meta_data.FieldMetaData("diskUsageRangePerJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MAX_MEMORY_PER_CPU, new org.apache.thrift.meta_data.FieldMetaData("maxMemoryPerCpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUMBER_OF_CPU_PER_JOB, new org.apache.thrift.meta_data.FieldMetaData("numberOfCpuPerJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REVIEW_DATE, new org.apache.thrift.meta_data.FieldMetaData("reviewDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPICAL_SU_PER_JOB, new org.apache.thrift.meta_data.FieldMetaData("typicalSuPerJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReviewerAllocationDetail.class, metaDataMap);
  }

  public ReviewerAllocationDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReviewerAllocationDetail(ReviewerAllocationDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.projectId = other.projectId;
    this.diskUsageRangePerJob = other.diskUsageRangePerJob;
    if (other.isSetDocuments()) {
      this.documents = org.apache.thrift.TBaseHelper.copyBinary(other.documents);
    }
    this.maxMemoryPerCpu = other.maxMemoryPerCpu;
    this.numberOfCpuPerJob = other.numberOfCpuPerJob;
    this.reviewDate = other.reviewDate;
    this.typicalSuPerJob = other.typicalSuPerJob;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
  }

  public ReviewerAllocationDetail deepCopy() {
    return new ReviewerAllocationDetail(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setDiskUsageRangePerJobIsSet(false);
    this.diskUsageRangePerJob = 0;
    this.documents = null;
    setMaxMemoryPerCpuIsSet(false);
    this.maxMemoryPerCpu = 0;
    setNumberOfCpuPerJobIsSet(false);
    this.numberOfCpuPerJob = 0;
    setReviewDateIsSet(false);
    this.reviewDate = 0;
    setTypicalSuPerJobIsSet(false);
    this.typicalSuPerJob = 0;
    this.username = null;
  }

  public long getId() {
    return this.id;
  }

  public ReviewerAllocationDetail setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getProjectId() {
    return this.projectId;
  }

  public ReviewerAllocationDetail setProjectId(long projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public long getDiskUsageRangePerJob() {
    return this.diskUsageRangePerJob;
  }

  public ReviewerAllocationDetail setDiskUsageRangePerJob(long diskUsageRangePerJob) {
    this.diskUsageRangePerJob = diskUsageRangePerJob;
    setDiskUsageRangePerJobIsSet(true);
    return this;
  }

  public void unsetDiskUsageRangePerJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISKUSAGERANGEPERJOB_ISSET_ID);
  }

  /** Returns true if field diskUsageRangePerJob is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskUsageRangePerJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISKUSAGERANGEPERJOB_ISSET_ID);
  }

  public void setDiskUsageRangePerJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISKUSAGERANGEPERJOB_ISSET_ID, value);
  }

  public byte[] getDocuments() {
    setDocuments(org.apache.thrift.TBaseHelper.rightSize(documents));
    return documents == null ? null : documents.array();
  }

  public java.nio.ByteBuffer bufferForDocuments() {
    return org.apache.thrift.TBaseHelper.copyBinary(documents);
  }

  public ReviewerAllocationDetail setDocuments(byte[] documents) {
    this.documents = documents == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(documents.clone());
    return this;
  }

  public ReviewerAllocationDetail setDocuments(java.nio.ByteBuffer documents) {
    this.documents = org.apache.thrift.TBaseHelper.copyBinary(documents);
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  public long getMaxMemoryPerCpu() {
    return this.maxMemoryPerCpu;
  }

  public ReviewerAllocationDetail setMaxMemoryPerCpu(long maxMemoryPerCpu) {
    this.maxMemoryPerCpu = maxMemoryPerCpu;
    setMaxMemoryPerCpuIsSet(true);
    return this;
  }

  public void unsetMaxMemoryPerCpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXMEMORYPERCPU_ISSET_ID);
  }

  /** Returns true if field maxMemoryPerCpu is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMemoryPerCpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXMEMORYPERCPU_ISSET_ID);
  }

  public void setMaxMemoryPerCpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXMEMORYPERCPU_ISSET_ID, value);
  }

  public long getNumberOfCpuPerJob() {
    return this.numberOfCpuPerJob;
  }

  public ReviewerAllocationDetail setNumberOfCpuPerJob(long numberOfCpuPerJob) {
    this.numberOfCpuPerJob = numberOfCpuPerJob;
    setNumberOfCpuPerJobIsSet(true);
    return this;
  }

  public void unsetNumberOfCpuPerJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFCPUPERJOB_ISSET_ID);
  }

  /** Returns true if field numberOfCpuPerJob is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfCpuPerJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFCPUPERJOB_ISSET_ID);
  }

  public void setNumberOfCpuPerJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFCPUPERJOB_ISSET_ID, value);
  }

  public long getReviewDate() {
    return this.reviewDate;
  }

  public ReviewerAllocationDetail setReviewDate(long reviewDate) {
    this.reviewDate = reviewDate;
    setReviewDateIsSet(true);
    return this;
  }

  public void unsetReviewDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVIEWDATE_ISSET_ID);
  }

  /** Returns true if field reviewDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVIEWDATE_ISSET_ID);
  }

  public void setReviewDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVIEWDATE_ISSET_ID, value);
  }

  public long getTypicalSuPerJob() {
    return this.typicalSuPerJob;
  }

  public ReviewerAllocationDetail setTypicalSuPerJob(long typicalSuPerJob) {
    this.typicalSuPerJob = typicalSuPerJob;
    setTypicalSuPerJobIsSet(true);
    return this;
  }

  public void unsetTypicalSuPerJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPICALSUPERJOB_ISSET_ID);
  }

  /** Returns true if field typicalSuPerJob is set (has been assigned a value) and false otherwise */
  public boolean isSetTypicalSuPerJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPICALSUPERJOB_ISSET_ID);
  }

  public void setTypicalSuPerJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPICALSUPERJOB_ISSET_ID, value);
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public ReviewerAllocationDetail setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((java.lang.Long)value);
      }
      break;

    case DISK_USAGE_RANGE_PER_JOB:
      if (value == null) {
        unsetDiskUsageRangePerJob();
      } else {
        setDiskUsageRangePerJob((java.lang.Long)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        if (value instanceof byte[]) {
          setDocuments((byte[])value);
        } else {
          setDocuments((java.nio.ByteBuffer)value);
        }
      }
      break;

    case MAX_MEMORY_PER_CPU:
      if (value == null) {
        unsetMaxMemoryPerCpu();
      } else {
        setMaxMemoryPerCpu((java.lang.Long)value);
      }
      break;

    case NUMBER_OF_CPU_PER_JOB:
      if (value == null) {
        unsetNumberOfCpuPerJob();
      } else {
        setNumberOfCpuPerJob((java.lang.Long)value);
      }
      break;

    case REVIEW_DATE:
      if (value == null) {
        unsetReviewDate();
      } else {
        setReviewDate((java.lang.Long)value);
      }
      break;

    case TYPICAL_SU_PER_JOB:
      if (value == null) {
        unsetTypicalSuPerJob();
      } else {
        setTypicalSuPerJob((java.lang.Long)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROJECT_ID:
      return getProjectId();

    case DISK_USAGE_RANGE_PER_JOB:
      return getDiskUsageRangePerJob();

    case DOCUMENTS:
      return getDocuments();

    case MAX_MEMORY_PER_CPU:
      return getMaxMemoryPerCpu();

    case NUMBER_OF_CPU_PER_JOB:
      return getNumberOfCpuPerJob();

    case REVIEW_DATE:
      return getReviewDate();

    case TYPICAL_SU_PER_JOB:
      return getTypicalSuPerJob();

    case USERNAME:
      return getUsername();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROJECT_ID:
      return isSetProjectId();
    case DISK_USAGE_RANGE_PER_JOB:
      return isSetDiskUsageRangePerJob();
    case DOCUMENTS:
      return isSetDocuments();
    case MAX_MEMORY_PER_CPU:
      return isSetMaxMemoryPerCpu();
    case NUMBER_OF_CPU_PER_JOB:
      return isSetNumberOfCpuPerJob();
    case REVIEW_DATE:
      return isSetReviewDate();
    case TYPICAL_SU_PER_JOB:
      return isSetTypicalSuPerJob();
    case USERNAME:
      return isSetUsername();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReviewerAllocationDetail)
      return this.equals((ReviewerAllocationDetail)that);
    return false;
  }

  public boolean equals(ReviewerAllocationDetail that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_diskUsageRangePerJob = true && this.isSetDiskUsageRangePerJob();
    boolean that_present_diskUsageRangePerJob = true && that.isSetDiskUsageRangePerJob();
    if (this_present_diskUsageRangePerJob || that_present_diskUsageRangePerJob) {
      if (!(this_present_diskUsageRangePerJob && that_present_diskUsageRangePerJob))
        return false;
      if (this.diskUsageRangePerJob != that.diskUsageRangePerJob)
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_maxMemoryPerCpu = true && this.isSetMaxMemoryPerCpu();
    boolean that_present_maxMemoryPerCpu = true && that.isSetMaxMemoryPerCpu();
    if (this_present_maxMemoryPerCpu || that_present_maxMemoryPerCpu) {
      if (!(this_present_maxMemoryPerCpu && that_present_maxMemoryPerCpu))
        return false;
      if (this.maxMemoryPerCpu != that.maxMemoryPerCpu)
        return false;
    }

    boolean this_present_numberOfCpuPerJob = true && this.isSetNumberOfCpuPerJob();
    boolean that_present_numberOfCpuPerJob = true && that.isSetNumberOfCpuPerJob();
    if (this_present_numberOfCpuPerJob || that_present_numberOfCpuPerJob) {
      if (!(this_present_numberOfCpuPerJob && that_present_numberOfCpuPerJob))
        return false;
      if (this.numberOfCpuPerJob != that.numberOfCpuPerJob)
        return false;
    }

    boolean this_present_reviewDate = true && this.isSetReviewDate();
    boolean that_present_reviewDate = true && that.isSetReviewDate();
    if (this_present_reviewDate || that_present_reviewDate) {
      if (!(this_present_reviewDate && that_present_reviewDate))
        return false;
      if (this.reviewDate != that.reviewDate)
        return false;
    }

    boolean this_present_typicalSuPerJob = true && this.isSetTypicalSuPerJob();
    boolean that_present_typicalSuPerJob = true && that.isSetTypicalSuPerJob();
    if (this_present_typicalSuPerJob || that_present_typicalSuPerJob) {
      if (!(this_present_typicalSuPerJob && that_present_typicalSuPerJob))
        return false;
      if (this.typicalSuPerJob != that.typicalSuPerJob)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetProjectId()) ? 131071 : 524287);
    if (isSetProjectId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

    hashCode = hashCode * 8191 + ((isSetDiskUsageRangePerJob()) ? 131071 : 524287);
    if (isSetDiskUsageRangePerJob())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(diskUsageRangePerJob);

    hashCode = hashCode * 8191 + ((isSetDocuments()) ? 131071 : 524287);
    if (isSetDocuments())
      hashCode = hashCode * 8191 + documents.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxMemoryPerCpu()) ? 131071 : 524287);
    if (isSetMaxMemoryPerCpu())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxMemoryPerCpu);

    hashCode = hashCode * 8191 + ((isSetNumberOfCpuPerJob()) ? 131071 : 524287);
    if (isSetNumberOfCpuPerJob())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberOfCpuPerJob);

    hashCode = hashCode * 8191 + ((isSetReviewDate()) ? 131071 : 524287);
    if (isSetReviewDate())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reviewDate);

    hashCode = hashCode * 8191 + ((isSetTypicalSuPerJob()) ? 131071 : 524287);
    if (isSetTypicalSuPerJob())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(typicalSuPerJob);

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReviewerAllocationDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiskUsageRangePerJob()).compareTo(other.isSetDiskUsageRangePerJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskUsageRangePerJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskUsageRangePerJob, other.diskUsageRangePerJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxMemoryPerCpu()).compareTo(other.isSetMaxMemoryPerCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMemoryPerCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMemoryPerCpu, other.maxMemoryPerCpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfCpuPerJob()).compareTo(other.isSetNumberOfCpuPerJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfCpuPerJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfCpuPerJob, other.numberOfCpuPerJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReviewDate()).compareTo(other.isSetReviewDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewDate, other.reviewDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTypicalSuPerJob()).compareTo(other.isSetTypicalSuPerJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypicalSuPerJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typicalSuPerJob, other.typicalSuPerJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReviewerAllocationDetail(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetProjectId()) {
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
    }
    if (isSetDiskUsageRangePerJob()) {
      if (!first) sb.append(", ");
      sb.append("diskUsageRangePerJob:");
      sb.append(this.diskUsageRangePerJob);
      first = false;
    }
    if (isSetDocuments()) {
      if (!first) sb.append(", ");
      sb.append("documents:");
      if (this.documents == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.documents, sb);
      }
      first = false;
    }
    if (isSetMaxMemoryPerCpu()) {
      if (!first) sb.append(", ");
      sb.append("maxMemoryPerCpu:");
      sb.append(this.maxMemoryPerCpu);
      first = false;
    }
    if (isSetNumberOfCpuPerJob()) {
      if (!first) sb.append(", ");
      sb.append("numberOfCpuPerJob:");
      sb.append(this.numberOfCpuPerJob);
      first = false;
    }
    if (isSetReviewDate()) {
      if (!first) sb.append(", ");
      sb.append("reviewDate:");
      sb.append(this.reviewDate);
      first = false;
    }
    if (isSetTypicalSuPerJob()) {
      if (!first) sb.append(", ");
      sb.append("typicalSuPerJob:");
      sb.append(this.typicalSuPerJob);
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReviewerAllocationDetailStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReviewerAllocationDetailStandardScheme getScheme() {
      return new ReviewerAllocationDetailStandardScheme();
    }
  }

  private static class ReviewerAllocationDetailStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReviewerAllocationDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReviewerAllocationDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.projectId = iprot.readI64();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISK_USAGE_RANGE_PER_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.diskUsageRangePerJob = iprot.readI64();
              struct.setDiskUsageRangePerJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documents = iprot.readBinary();
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_MEMORY_PER_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxMemoryPerCpu = iprot.readI64();
              struct.setMaxMemoryPerCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMBER_OF_CPU_PER_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numberOfCpuPerJob = iprot.readI64();
              struct.setNumberOfCpuPerJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REVIEW_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reviewDate = iprot.readI64();
              struct.setReviewDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPICAL_SU_PER_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.typicalSuPerJob = iprot.readI64();
              struct.setTypicalSuPerJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReviewerAllocationDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProjectId()) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiskUsageRangePerJob()) {
        oprot.writeFieldBegin(DISK_USAGE_RANGE_PER_JOB_FIELD_DESC);
        oprot.writeI64(struct.diskUsageRangePerJob);
        oprot.writeFieldEnd();
      }
      if (struct.documents != null) {
        if (struct.isSetDocuments()) {
          oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
          oprot.writeBinary(struct.documents);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxMemoryPerCpu()) {
        oprot.writeFieldBegin(MAX_MEMORY_PER_CPU_FIELD_DESC);
        oprot.writeI64(struct.maxMemoryPerCpu);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumberOfCpuPerJob()) {
        oprot.writeFieldBegin(NUMBER_OF_CPU_PER_JOB_FIELD_DESC);
        oprot.writeI64(struct.numberOfCpuPerJob);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReviewDate()) {
        oprot.writeFieldBegin(REVIEW_DATE_FIELD_DESC);
        oprot.writeI64(struct.reviewDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTypicalSuPerJob()) {
        oprot.writeFieldBegin(TYPICAL_SU_PER_JOB_FIELD_DESC);
        oprot.writeI64(struct.typicalSuPerJob);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReviewerAllocationDetailTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReviewerAllocationDetailTupleScheme getScheme() {
      return new ReviewerAllocationDetailTupleScheme();
    }
  }

  private static class ReviewerAllocationDetailTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReviewerAllocationDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReviewerAllocationDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetDiskUsageRangePerJob()) {
        optionals.set(2);
      }
      if (struct.isSetDocuments()) {
        optionals.set(3);
      }
      if (struct.isSetMaxMemoryPerCpu()) {
        optionals.set(4);
      }
      if (struct.isSetNumberOfCpuPerJob()) {
        optionals.set(5);
      }
      if (struct.isSetReviewDate()) {
        optionals.set(6);
      }
      if (struct.isSetTypicalSuPerJob()) {
        optionals.set(7);
      }
      if (struct.isSetUsername()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI64(struct.projectId);
      }
      if (struct.isSetDiskUsageRangePerJob()) {
        oprot.writeI64(struct.diskUsageRangePerJob);
      }
      if (struct.isSetDocuments()) {
        oprot.writeBinary(struct.documents);
      }
      if (struct.isSetMaxMemoryPerCpu()) {
        oprot.writeI64(struct.maxMemoryPerCpu);
      }
      if (struct.isSetNumberOfCpuPerJob()) {
        oprot.writeI64(struct.numberOfCpuPerJob);
      }
      if (struct.isSetReviewDate()) {
        oprot.writeI64(struct.reviewDate);
      }
      if (struct.isSetTypicalSuPerJob()) {
        oprot.writeI64(struct.typicalSuPerJob);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReviewerAllocationDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.diskUsageRangePerJob = iprot.readI64();
        struct.setDiskUsageRangePerJobIsSet(true);
      }
      if (incoming.get(3)) {
        struct.documents = iprot.readBinary();
        struct.setDocumentsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxMemoryPerCpu = iprot.readI64();
        struct.setMaxMemoryPerCpuIsSet(true);
      }
      if (incoming.get(5)) {
        struct.numberOfCpuPerJob = iprot.readI64();
        struct.setNumberOfCpuPerJobIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reviewDate = iprot.readI64();
        struct.setReviewDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.typicalSuPerJob = iprot.readI64();
        struct.setTypicalSuPerJobIsSet(true);
      }
      if (incoming.get(8)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

