/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.allocation.manager.service.cpi;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class AllocationRegistryService {

  public interface Iface {

    /**
     * <p>API method to create new allocation requests</p>
     * 
     * @param authzToken
     * @param allocDetail
     */
    public long createAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to delete allocation request</p>
     * 
     * @param authzToken
     * @param projectId
     */
    public boolean deleteAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get an allocation Request</p>
     * 
     * @param authzToken
     * @param projectId
     */
    public org.apache.airavata.allocation.manager.models.UserAllocationDetail getAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to update an allocation Request</p>
     * 
     * @param authzToken
     * @param allocDetail
     */
    public boolean updateAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to create new specific resource requests</p>
     * 
     * @param authzToken
     * @param allocDetail
     */
    public long createUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to delete specific resource requests</p>
     * 
     * @param authzToken
     * @param projectId
     * @param specificResource
     */
    public boolean deleteUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get specific resource requests</p>
     * 
     * @param authzToken
     * @param projectId
     */
    public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> getUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to update specific resource requests</p>
     * 
     * @param authzToken
     * @param projectId
     * @param listUserSpecificResource
     */
    public boolean updateUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get all allocation requests for admin</p>
     * 
     * @param authzToken
     * @param userName
     */
    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getAllRequestsForAdmin(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to assign reviewers</p>
     * 
     * @param authzToken
     * @param projectId
     * @param reviewerId
     * @param adminId
     */
    public boolean assignReviewers(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String reviewerId, java.lang.String adminId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to update request submitted by reviewer</p>
     * 
     * @param authzToken
     * @param reviewerAllocationDetail
     */
    public boolean updateRequestByReviewer(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get all requests assigned to the reviewers</p>
     * 
     * @param authzToken
     * @param userName
     */
    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getAllRequestsForReviewers(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get all the reviews for a request</p>
     * 
     * @param authzToken
     * @param projectId
     */
    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> getAllReviewsForARequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to create new specific resource requests</p>
     * 
     * @param authzToken
     * @param allocDetail
     */
    public long createReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to delete specific resource requests</p>
     * 
     * @param authzToken
     * @param projectId
     * @param specificResource
     */
    public boolean deleteReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get specific resource requests</p>
     * 
     * @param authzToken
     * @param projectId
     */
    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> getReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to update specific resource requests</p>
     * 
     * @param authzToken
     * @param projectId
     * @param listReviewerSpecificResource
     */
    public boolean updateReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get all unassigned reviewers for a request</p>
     * 
     * @param authzToken
     * @param projectId
     */
    public java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> getAllAssignedReviewersForRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to approve a request</p>
     * 
     * @param authzToken
     * @param projectId
     * @param adminId
     * @param startDate
     * @param endDate
     * @param awardAllocation
     * @param specificResourceName
     */
    public boolean approveRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, long startDate, long endDate, long awardAllocation, java.lang.String specificResourceName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to reject a request</p>
     * 
     * @param authzToken
     * @param projectId
     * @param adminId
     * @param rejectionReason
     * @param specificResourceName
     */
    public boolean rejectRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, java.lang.String rejectionReason, java.lang.String specificResourceName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to get the remaining allocation units</p>
     * 
     * @param authzToken
     * @param specificResource
     */
    public long getRemainingAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

    /**
     * <p>API method to deduct the used allocation units</p>
     * 
     * @param authzToken
     * @param specificResource
     * @param allocationUnits
     */
    public boolean deductAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, long allocationUnits) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void deleteAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.allocation.manager.models.UserAllocationDetail> resultHandler) throws org.apache.thrift.TException;

    public void updateAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void createUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void deleteUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>> resultHandler) throws org.apache.thrift.TException;

    public void updateUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getAllRequestsForAdmin(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler) throws org.apache.thrift.TException;

    public void assignReviewers(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String reviewerId, java.lang.String adminId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void updateRequestByReviewer(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getAllRequestsForReviewers(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler) throws org.apache.thrift.TException;

    public void getAllReviewsForARequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>> resultHandler) throws org.apache.thrift.TException;

    public void createReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void deleteReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>> resultHandler) throws org.apache.thrift.TException;

    public void updateReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getAllAssignedReviewersForRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>> resultHandler) throws org.apache.thrift.TException;

    public void approveRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, long startDate, long endDate, long awardAllocation, java.lang.String specificResourceName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void rejectRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, java.lang.String rejectionReason, java.lang.String specificResourceName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getRemainingAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void deductAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, long allocationUnits, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long createAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_createAllocationRequest(authzToken, allocDetail);
      return recv_createAllocationRequest();
    }

    public void send_createAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) throws org.apache.thrift.TException
    {
      createAllocationRequest_args args = new createAllocationRequest_args();
      args.setAuthzToken(authzToken);
      args.setAllocDetail(allocDetail);
      sendBase("createAllocationRequest", args);
    }

    public long recv_createAllocationRequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      createAllocationRequest_result result = new createAllocationRequest_result();
      receiveBase(result, "createAllocationRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAllocationRequest failed: unknown result");
    }

    public boolean deleteAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_deleteAllocationRequest(authzToken, projectId);
      return recv_deleteAllocationRequest();
    }

    public void send_deleteAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.thrift.TException
    {
      deleteAllocationRequest_args args = new deleteAllocationRequest_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      sendBase("deleteAllocationRequest", args);
    }

    public boolean recv_deleteAllocationRequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      deleteAllocationRequest_result result = new deleteAllocationRequest_result();
      receiveBase(result, "deleteAllocationRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAllocationRequest failed: unknown result");
    }

    public org.apache.airavata.allocation.manager.models.UserAllocationDetail getAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getAllocationRequest(authzToken, projectId);
      return recv_getAllocationRequest();
    }

    public void send_getAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.thrift.TException
    {
      getAllocationRequest_args args = new getAllocationRequest_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      sendBase("getAllocationRequest", args);
    }

    public org.apache.airavata.allocation.manager.models.UserAllocationDetail recv_getAllocationRequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getAllocationRequest_result result = new getAllocationRequest_result();
      receiveBase(result, "getAllocationRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllocationRequest failed: unknown result");
    }

    public boolean updateAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_updateAllocationRequest(authzToken, allocDetail);
      return recv_updateAllocationRequest();
    }

    public void send_updateAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) throws org.apache.thrift.TException
    {
      updateAllocationRequest_args args = new updateAllocationRequest_args();
      args.setAuthzToken(authzToken);
      args.setAllocDetail(allocDetail);
      sendBase("updateAllocationRequest", args);
    }

    public boolean recv_updateAllocationRequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      updateAllocationRequest_result result = new updateAllocationRequest_result();
      receiveBase(result, "updateAllocationRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAllocationRequest failed: unknown result");
    }

    public long createUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_createUserSpecificResource(authzToken, allocDetail);
      return recv_createUserSpecificResource();
    }

    public void send_createUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail) throws org.apache.thrift.TException
    {
      createUserSpecificResource_args args = new createUserSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setAllocDetail(allocDetail);
      sendBase("createUserSpecificResource", args);
    }

    public long recv_createUserSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      createUserSpecificResource_result result = new createUserSpecificResource_result();
      receiveBase(result, "createUserSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createUserSpecificResource failed: unknown result");
    }

    public boolean deleteUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_deleteUserSpecificResource(authzToken, projectId, specificResource);
      return recv_deleteUserSpecificResource();
    }

    public void send_deleteUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource) throws org.apache.thrift.TException
    {
      deleteUserSpecificResource_args args = new deleteUserSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      args.setSpecificResource(specificResource);
      sendBase("deleteUserSpecificResource", args);
    }

    public boolean recv_deleteUserSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      deleteUserSpecificResource_result result = new deleteUserSpecificResource_result();
      receiveBase(result, "deleteUserSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteUserSpecificResource failed: unknown result");
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> getUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getUserSpecificResource(authzToken, projectId);
      return recv_getUserSpecificResource();
    }

    public void send_getUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.thrift.TException
    {
      getUserSpecificResource_args args = new getUserSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      sendBase("getUserSpecificResource", args);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> recv_getUserSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getUserSpecificResource_result result = new getUserSpecificResource_result();
      receiveBase(result, "getUserSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserSpecificResource failed: unknown result");
    }

    public boolean updateUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_updateUserSpecificResource(authzToken, projectId, listUserSpecificResource);
      return recv_updateUserSpecificResource();
    }

    public void send_updateUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource) throws org.apache.thrift.TException
    {
      updateUserSpecificResource_args args = new updateUserSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      args.setListUserSpecificResource(listUserSpecificResource);
      sendBase("updateUserSpecificResource", args);
    }

    public boolean recv_updateUserSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      updateUserSpecificResource_result result = new updateUserSpecificResource_result();
      receiveBase(result, "updateUserSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserSpecificResource failed: unknown result");
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getAllRequestsForAdmin(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getAllRequestsForAdmin(authzToken, userName);
      return recv_getAllRequestsForAdmin();
    }

    public void send_getAllRequestsForAdmin(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName) throws org.apache.thrift.TException
    {
      getAllRequestsForAdmin_args args = new getAllRequestsForAdmin_args();
      args.setAuthzToken(authzToken);
      args.setUserName(userName);
      sendBase("getAllRequestsForAdmin", args);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> recv_getAllRequestsForAdmin() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getAllRequestsForAdmin_result result = new getAllRequestsForAdmin_result();
      receiveBase(result, "getAllRequestsForAdmin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllRequestsForAdmin failed: unknown result");
    }

    public boolean assignReviewers(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String reviewerId, java.lang.String adminId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_assignReviewers(authzToken, projectId, reviewerId, adminId);
      return recv_assignReviewers();
    }

    public void send_assignReviewers(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String reviewerId, java.lang.String adminId) throws org.apache.thrift.TException
    {
      assignReviewers_args args = new assignReviewers_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      args.setReviewerId(reviewerId);
      args.setAdminId(adminId);
      sendBase("assignReviewers", args);
    }

    public boolean recv_assignReviewers() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      assignReviewers_result result = new assignReviewers_result();
      receiveBase(result, "assignReviewers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assignReviewers failed: unknown result");
    }

    public boolean updateRequestByReviewer(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_updateRequestByReviewer(authzToken, reviewerAllocationDetail);
      return recv_updateRequestByReviewer();
    }

    public void send_updateRequestByReviewer(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail) throws org.apache.thrift.TException
    {
      updateRequestByReviewer_args args = new updateRequestByReviewer_args();
      args.setAuthzToken(authzToken);
      args.setReviewerAllocationDetail(reviewerAllocationDetail);
      sendBase("updateRequestByReviewer", args);
    }

    public boolean recv_updateRequestByReviewer() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      updateRequestByReviewer_result result = new updateRequestByReviewer_result();
      receiveBase(result, "updateRequestByReviewer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRequestByReviewer failed: unknown result");
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getAllRequestsForReviewers(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getAllRequestsForReviewers(authzToken, userName);
      return recv_getAllRequestsForReviewers();
    }

    public void send_getAllRequestsForReviewers(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName) throws org.apache.thrift.TException
    {
      getAllRequestsForReviewers_args args = new getAllRequestsForReviewers_args();
      args.setAuthzToken(authzToken);
      args.setUserName(userName);
      sendBase("getAllRequestsForReviewers", args);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> recv_getAllRequestsForReviewers() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getAllRequestsForReviewers_result result = new getAllRequestsForReviewers_result();
      receiveBase(result, "getAllRequestsForReviewers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllRequestsForReviewers failed: unknown result");
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> getAllReviewsForARequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getAllReviewsForARequest(authzToken, projectId);
      return recv_getAllReviewsForARequest();
    }

    public void send_getAllReviewsForARequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.thrift.TException
    {
      getAllReviewsForARequest_args args = new getAllReviewsForARequest_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      sendBase("getAllReviewsForARequest", args);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> recv_getAllReviewsForARequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getAllReviewsForARequest_result result = new getAllReviewsForARequest_result();
      receiveBase(result, "getAllReviewsForARequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllReviewsForARequest failed: unknown result");
    }

    public long createReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_createReviewerSpecificResource(authzToken, allocDetail);
      return recv_createReviewerSpecificResource();
    }

    public void send_createReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail) throws org.apache.thrift.TException
    {
      createReviewerSpecificResource_args args = new createReviewerSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setAllocDetail(allocDetail);
      sendBase("createReviewerSpecificResource", args);
    }

    public long recv_createReviewerSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      createReviewerSpecificResource_result result = new createReviewerSpecificResource_result();
      receiveBase(result, "createReviewerSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createReviewerSpecificResource failed: unknown result");
    }

    public boolean deleteReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_deleteReviewerSpecificResource(authzToken, projectId, specificResource);
      return recv_deleteReviewerSpecificResource();
    }

    public void send_deleteReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource) throws org.apache.thrift.TException
    {
      deleteReviewerSpecificResource_args args = new deleteReviewerSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      args.setSpecificResource(specificResource);
      sendBase("deleteReviewerSpecificResource", args);
    }

    public boolean recv_deleteReviewerSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      deleteReviewerSpecificResource_result result = new deleteReviewerSpecificResource_result();
      receiveBase(result, "deleteReviewerSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteReviewerSpecificResource failed: unknown result");
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> getReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getReviewerSpecificResource(authzToken, projectId);
      return recv_getReviewerSpecificResource();
    }

    public void send_getReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.thrift.TException
    {
      getReviewerSpecificResource_args args = new getReviewerSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      sendBase("getReviewerSpecificResource", args);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> recv_getReviewerSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getReviewerSpecificResource_result result = new getReviewerSpecificResource_result();
      receiveBase(result, "getReviewerSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReviewerSpecificResource failed: unknown result");
    }

    public boolean updateReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_updateReviewerSpecificResource(authzToken, projectId, listReviewerSpecificResource);
      return recv_updateReviewerSpecificResource();
    }

    public void send_updateReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource) throws org.apache.thrift.TException
    {
      updateReviewerSpecificResource_args args = new updateReviewerSpecificResource_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      args.setListReviewerSpecificResource(listReviewerSpecificResource);
      sendBase("updateReviewerSpecificResource", args);
    }

    public boolean recv_updateReviewerSpecificResource() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      updateReviewerSpecificResource_result result = new updateReviewerSpecificResource_result();
      receiveBase(result, "updateReviewerSpecificResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateReviewerSpecificResource failed: unknown result");
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> getAllAssignedReviewersForRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getAllAssignedReviewersForRequest(authzToken, projectId);
      return recv_getAllAssignedReviewersForRequest();
    }

    public void send_getAllAssignedReviewersForRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId) throws org.apache.thrift.TException
    {
      getAllAssignedReviewersForRequest_args args = new getAllAssignedReviewersForRequest_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      sendBase("getAllAssignedReviewersForRequest", args);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> recv_getAllAssignedReviewersForRequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getAllAssignedReviewersForRequest_result result = new getAllAssignedReviewersForRequest_result();
      receiveBase(result, "getAllAssignedReviewersForRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllAssignedReviewersForRequest failed: unknown result");
    }

    public boolean approveRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, long startDate, long endDate, long awardAllocation, java.lang.String specificResourceName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_approveRequest(authzToken, projectId, adminId, startDate, endDate, awardAllocation, specificResourceName);
      return recv_approveRequest();
    }

    public void send_approveRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, long startDate, long endDate, long awardAllocation, java.lang.String specificResourceName) throws org.apache.thrift.TException
    {
      approveRequest_args args = new approveRequest_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      args.setAdminId(adminId);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      args.setAwardAllocation(awardAllocation);
      args.setSpecificResourceName(specificResourceName);
      sendBase("approveRequest", args);
    }

    public boolean recv_approveRequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      approveRequest_result result = new approveRequest_result();
      receiveBase(result, "approveRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "approveRequest failed: unknown result");
    }

    public boolean rejectRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, java.lang.String rejectionReason, java.lang.String specificResourceName) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_rejectRequest(authzToken, projectId, adminId, rejectionReason, specificResourceName);
      return recv_rejectRequest();
    }

    public void send_rejectRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, java.lang.String rejectionReason, java.lang.String specificResourceName) throws org.apache.thrift.TException
    {
      rejectRequest_args args = new rejectRequest_args();
      args.setAuthzToken(authzToken);
      args.setProjectId(projectId);
      args.setAdminId(adminId);
      args.setRejectionReason(rejectionReason);
      args.setSpecificResourceName(specificResourceName);
      sendBase("rejectRequest", args);
    }

    public boolean recv_rejectRequest() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      rejectRequest_result result = new rejectRequest_result();
      receiveBase(result, "rejectRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rejectRequest failed: unknown result");
    }

    public long getRemainingAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_getRemainingAllocationUnits(authzToken, specificResource);
      return recv_getRemainingAllocationUnits();
    }

    public void send_getRemainingAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource) throws org.apache.thrift.TException
    {
      getRemainingAllocationUnits_args args = new getRemainingAllocationUnits_args();
      args.setAuthzToken(authzToken);
      args.setSpecificResource(specificResource);
      sendBase("getRemainingAllocationUnits", args);
    }

    public long recv_getRemainingAllocationUnits() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      getRemainingAllocationUnits_result result = new getRemainingAllocationUnits_result();
      receiveBase(result, "getRemainingAllocationUnits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRemainingAllocationUnits failed: unknown result");
    }

    public boolean deductAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, long allocationUnits) throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      send_deductAllocationUnits(authzToken, specificResource, allocationUnits);
      return recv_deductAllocationUnits();
    }

    public void send_deductAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, long allocationUnits) throws org.apache.thrift.TException
    {
      deductAllocationUnits_args args = new deductAllocationUnits_args();
      args.setAuthzToken(authzToken);
      args.setSpecificResource(specificResource);
      args.setAllocationUnits(allocationUnits);
      sendBase("deductAllocationUnits", args);
    }

    public boolean recv_deductAllocationUnits() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      deductAllocationUnits_result result = new deductAllocationUnits_result();
      receiveBase(result, "deductAllocationUnits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ame != null) {
        throw result.ame;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deductAllocationUnits failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAllocationRequest_call method_call = new createAllocationRequest_call(authzToken, allocDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAllocationRequest_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail;
      public createAllocationRequest_call(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.allocDetail = allocDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAllocationRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAllocationRequest_args args = new createAllocationRequest_args();
        args.setAuthzToken(authzToken);
        args.setAllocDetail(allocDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAllocationRequest();
      }
    }

    public void deleteAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAllocationRequest_call method_call = new deleteAllocationRequest_call(authzToken, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAllocationRequest_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      public deleteAllocationRequest_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAllocationRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAllocationRequest_args args = new deleteAllocationRequest_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAllocationRequest();
      }
    }

    public void getAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.allocation.manager.models.UserAllocationDetail> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllocationRequest_call method_call = new getAllocationRequest_call(authzToken, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllocationRequest_call extends org.apache.thrift.async.TAsyncMethodCall<org.apache.airavata.allocation.manager.models.UserAllocationDetail> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      public getAllocationRequest_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.allocation.manager.models.UserAllocationDetail> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllocationRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllocationRequest_args args = new getAllocationRequest_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.allocation.manager.models.UserAllocationDetail getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllocationRequest();
      }
    }

    public void updateAllocationRequest(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAllocationRequest_call method_call = new updateAllocationRequest_call(authzToken, allocDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAllocationRequest_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail;
      public updateAllocationRequest_call(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.allocDetail = allocDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAllocationRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAllocationRequest_args args = new updateAllocationRequest_args();
        args.setAuthzToken(authzToken);
        args.setAllocDetail(allocDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAllocationRequest();
      }
    }

    public void createUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createUserSpecificResource_call method_call = new createUserSpecificResource_call(authzToken, allocDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createUserSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail;
      public createUserSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.allocDetail = allocDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createUserSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createUserSpecificResource_args args = new createUserSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setAllocDetail(allocDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createUserSpecificResource();
      }
    }

    public void deleteUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserSpecificResource_call method_call = new deleteUserSpecificResource_call(authzToken, projectId, specificResource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      private java.lang.String specificResource;
      public deleteUserSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
        this.specificResource = specificResource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserSpecificResource_args args = new deleteUserSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.setSpecificResource(specificResource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteUserSpecificResource();
      }
    }

    public void getUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserSpecificResource_call method_call = new getUserSpecificResource_call(authzToken, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      public getUserSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserSpecificResource_args args = new getUserSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserSpecificResource();
      }
    }

    public void updateUserSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserSpecificResource_call method_call = new updateUserSpecificResource_call(authzToken, projectId, listUserSpecificResource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      private java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource;
      public updateUserSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
        this.listUserSpecificResource = listUserSpecificResource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserSpecificResource_args args = new updateUserSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.setListUserSpecificResource(listUserSpecificResource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserSpecificResource();
      }
    }

    public void getAllRequestsForAdmin(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllRequestsForAdmin_call method_call = new getAllRequestsForAdmin_call(authzToken, userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllRequestsForAdmin_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private java.lang.String userName;
      public getAllRequestsForAdmin_call(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllRequestsForAdmin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllRequestsForAdmin_args args = new getAllRequestsForAdmin_args();
        args.setAuthzToken(authzToken);
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllRequestsForAdmin();
      }
    }

    public void assignReviewers(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String reviewerId, java.lang.String adminId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assignReviewers_call method_call = new assignReviewers_call(authzToken, projectId, reviewerId, adminId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assignReviewers_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      private java.lang.String reviewerId;
      private java.lang.String adminId;
      public assignReviewers_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String reviewerId, java.lang.String adminId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
        this.reviewerId = reviewerId;
        this.adminId = adminId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assignReviewers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assignReviewers_args args = new assignReviewers_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.setReviewerId(reviewerId);
        args.setAdminId(adminId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assignReviewers();
      }
    }

    public void updateRequestByReviewer(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRequestByReviewer_call method_call = new updateRequestByReviewer_call(authzToken, reviewerAllocationDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRequestByReviewer_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail;
      public updateRequestByReviewer_call(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.reviewerAllocationDetail = reviewerAllocationDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRequestByReviewer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRequestByReviewer_args args = new updateRequestByReviewer_args();
        args.setAuthzToken(authzToken);
        args.setReviewerAllocationDetail(reviewerAllocationDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRequestByReviewer();
      }
    }

    public void getAllRequestsForReviewers(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllRequestsForReviewers_call method_call = new getAllRequestsForReviewers_call(authzToken, userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllRequestsForReviewers_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private java.lang.String userName;
      public getAllRequestsForReviewers_call(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllRequestsForReviewers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllRequestsForReviewers_args args = new getAllRequestsForReviewers_args();
        args.setAuthzToken(authzToken);
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllRequestsForReviewers();
      }
    }

    public void getAllReviewsForARequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllReviewsForARequest_call method_call = new getAllReviewsForARequest_call(authzToken, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllReviewsForARequest_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      public getAllReviewsForARequest_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllReviewsForARequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllReviewsForARequest_args args = new getAllReviewsForARequest_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllReviewsForARequest();
      }
    }

    public void createReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createReviewerSpecificResource_call method_call = new createReviewerSpecificResource_call(authzToken, allocDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createReviewerSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail;
      public createReviewerSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.allocDetail = allocDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createReviewerSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createReviewerSpecificResource_args args = new createReviewerSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setAllocDetail(allocDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createReviewerSpecificResource();
      }
    }

    public void deleteReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteReviewerSpecificResource_call method_call = new deleteReviewerSpecificResource_call(authzToken, projectId, specificResource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteReviewerSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      private java.lang.String specificResource;
      public deleteReviewerSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
        this.specificResource = specificResource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteReviewerSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteReviewerSpecificResource_args args = new deleteReviewerSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.setSpecificResource(specificResource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteReviewerSpecificResource();
      }
    }

    public void getReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReviewerSpecificResource_call method_call = new getReviewerSpecificResource_call(authzToken, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReviewerSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      public getReviewerSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReviewerSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReviewerSpecificResource_args args = new getReviewerSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReviewerSpecificResource();
      }
    }

    public void updateReviewerSpecificResource(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateReviewerSpecificResource_call method_call = new updateReviewerSpecificResource_call(authzToken, projectId, listReviewerSpecificResource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateReviewerSpecificResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      private java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource;
      public updateReviewerSpecificResource_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
        this.listReviewerSpecificResource = listReviewerSpecificResource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateReviewerSpecificResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateReviewerSpecificResource_args args = new updateReviewerSpecificResource_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.setListReviewerSpecificResource(listReviewerSpecificResource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateReviewerSpecificResource();
      }
    }

    public void getAllAssignedReviewersForRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllAssignedReviewersForRequest_call method_call = new getAllAssignedReviewersForRequest_call(authzToken, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllAssignedReviewersForRequest_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      public getAllAssignedReviewersForRequest_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllAssignedReviewersForRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllAssignedReviewersForRequest_args args = new getAllAssignedReviewersForRequest_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllAssignedReviewersForRequest();
      }
    }

    public void approveRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, long startDate, long endDate, long awardAllocation, java.lang.String specificResourceName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      approveRequest_call method_call = new approveRequest_call(authzToken, projectId, adminId, startDate, endDate, awardAllocation, specificResourceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class approveRequest_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      private java.lang.String adminId;
      private long startDate;
      private long endDate;
      private long awardAllocation;
      private java.lang.String specificResourceName;
      public approveRequest_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, long startDate, long endDate, long awardAllocation, java.lang.String specificResourceName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
        this.adminId = adminId;
        this.startDate = startDate;
        this.endDate = endDate;
        this.awardAllocation = awardAllocation;
        this.specificResourceName = specificResourceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("approveRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        approveRequest_args args = new approveRequest_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.setAdminId(adminId);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.setAwardAllocation(awardAllocation);
        args.setSpecificResourceName(specificResourceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_approveRequest();
      }
    }

    public void rejectRequest(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, java.lang.String rejectionReason, java.lang.String specificResourceName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rejectRequest_call method_call = new rejectRequest_call(authzToken, projectId, adminId, rejectionReason, specificResourceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rejectRequest_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private long projectId;
      private java.lang.String adminId;
      private java.lang.String rejectionReason;
      private java.lang.String specificResourceName;
      public rejectRequest_call(org.apache.airavata.model.security.AuthzToken authzToken, long projectId, java.lang.String adminId, java.lang.String rejectionReason, java.lang.String specificResourceName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.projectId = projectId;
        this.adminId = adminId;
        this.rejectionReason = rejectionReason;
        this.specificResourceName = specificResourceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rejectRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rejectRequest_args args = new rejectRequest_args();
        args.setAuthzToken(authzToken);
        args.setProjectId(projectId);
        args.setAdminId(adminId);
        args.setRejectionReason(rejectionReason);
        args.setSpecificResourceName(specificResourceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rejectRequest();
      }
    }

    public void getRemainingAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRemainingAllocationUnits_call method_call = new getRemainingAllocationUnits_call(authzToken, specificResource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRemainingAllocationUnits_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private java.lang.String specificResource;
      public getRemainingAllocationUnits_call(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.specificResource = specificResource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRemainingAllocationUnits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRemainingAllocationUnits_args args = new getRemainingAllocationUnits_args();
        args.setAuthzToken(authzToken);
        args.setSpecificResource(specificResource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRemainingAllocationUnits();
      }
    }

    public void deductAllocationUnits(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, long allocationUnits, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deductAllocationUnits_call method_call = new deductAllocationUnits_call(authzToken, specificResource, allocationUnits, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deductAllocationUnits_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private org.apache.airavata.model.security.AuthzToken authzToken;
      private java.lang.String specificResource;
      private long allocationUnits;
      public deductAllocationUnits_call(org.apache.airavata.model.security.AuthzToken authzToken, java.lang.String specificResource, long allocationUnits, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authzToken = authzToken;
        this.specificResource = specificResource;
        this.allocationUnits = allocationUnits;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deductAllocationUnits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deductAllocationUnits_args args = new deductAllocationUnits_args();
        args.setAuthzToken(authzToken);
        args.setSpecificResource(specificResource);
        args.setAllocationUnits(allocationUnits);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.airavata.allocation.manager.models.AllocationManagerException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deductAllocationUnits();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createAllocationRequest", new createAllocationRequest());
      processMap.put("deleteAllocationRequest", new deleteAllocationRequest());
      processMap.put("getAllocationRequest", new getAllocationRequest());
      processMap.put("updateAllocationRequest", new updateAllocationRequest());
      processMap.put("createUserSpecificResource", new createUserSpecificResource());
      processMap.put("deleteUserSpecificResource", new deleteUserSpecificResource());
      processMap.put("getUserSpecificResource", new getUserSpecificResource());
      processMap.put("updateUserSpecificResource", new updateUserSpecificResource());
      processMap.put("getAllRequestsForAdmin", new getAllRequestsForAdmin());
      processMap.put("assignReviewers", new assignReviewers());
      processMap.put("updateRequestByReviewer", new updateRequestByReviewer());
      processMap.put("getAllRequestsForReviewers", new getAllRequestsForReviewers());
      processMap.put("getAllReviewsForARequest", new getAllReviewsForARequest());
      processMap.put("createReviewerSpecificResource", new createReviewerSpecificResource());
      processMap.put("deleteReviewerSpecificResource", new deleteReviewerSpecificResource());
      processMap.put("getReviewerSpecificResource", new getReviewerSpecificResource());
      processMap.put("updateReviewerSpecificResource", new updateReviewerSpecificResource());
      processMap.put("getAllAssignedReviewersForRequest", new getAllAssignedReviewersForRequest());
      processMap.put("approveRequest", new approveRequest());
      processMap.put("rejectRequest", new rejectRequest());
      processMap.put("getRemainingAllocationUnits", new getRemainingAllocationUnits());
      processMap.put("deductAllocationUnits", new deductAllocationUnits());
      return processMap;
    }

    public static class createAllocationRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAllocationRequest_args> {
      public createAllocationRequest() {
        super("createAllocationRequest");
      }

      public createAllocationRequest_args getEmptyArgsInstance() {
        return new createAllocationRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAllocationRequest_result getResult(I iface, createAllocationRequest_args args) throws org.apache.thrift.TException {
        createAllocationRequest_result result = new createAllocationRequest_result();
        try {
          result.success = iface.createAllocationRequest(args.authzToken, args.allocDetail);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class deleteAllocationRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllocationRequest_args> {
      public deleteAllocationRequest() {
        super("deleteAllocationRequest");
      }

      public deleteAllocationRequest_args getEmptyArgsInstance() {
        return new deleteAllocationRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAllocationRequest_result getResult(I iface, deleteAllocationRequest_args args) throws org.apache.thrift.TException {
        deleteAllocationRequest_result result = new deleteAllocationRequest_result();
        try {
          result.success = iface.deleteAllocationRequest(args.authzToken, args.projectId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getAllocationRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllocationRequest_args> {
      public getAllocationRequest() {
        super("getAllocationRequest");
      }

      public getAllocationRequest_args getEmptyArgsInstance() {
        return new getAllocationRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllocationRequest_result getResult(I iface, getAllocationRequest_args args) throws org.apache.thrift.TException {
        getAllocationRequest_result result = new getAllocationRequest_result();
        try {
          result.success = iface.getAllocationRequest(args.authzToken, args.projectId);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class updateAllocationRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAllocationRequest_args> {
      public updateAllocationRequest() {
        super("updateAllocationRequest");
      }

      public updateAllocationRequest_args getEmptyArgsInstance() {
        return new updateAllocationRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAllocationRequest_result getResult(I iface, updateAllocationRequest_args args) throws org.apache.thrift.TException {
        updateAllocationRequest_result result = new updateAllocationRequest_result();
        try {
          result.success = iface.updateAllocationRequest(args.authzToken, args.allocDetail);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class createUserSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createUserSpecificResource_args> {
      public createUserSpecificResource() {
        super("createUserSpecificResource");
      }

      public createUserSpecificResource_args getEmptyArgsInstance() {
        return new createUserSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createUserSpecificResource_result getResult(I iface, createUserSpecificResource_args args) throws org.apache.thrift.TException {
        createUserSpecificResource_result result = new createUserSpecificResource_result();
        try {
          result.success = iface.createUserSpecificResource(args.authzToken, args.allocDetail);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class deleteUserSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserSpecificResource_args> {
      public deleteUserSpecificResource() {
        super("deleteUserSpecificResource");
      }

      public deleteUserSpecificResource_args getEmptyArgsInstance() {
        return new deleteUserSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserSpecificResource_result getResult(I iface, deleteUserSpecificResource_args args) throws org.apache.thrift.TException {
        deleteUserSpecificResource_result result = new deleteUserSpecificResource_result();
        try {
          result.success = iface.deleteUserSpecificResource(args.authzToken, args.projectId, args.specificResource);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getUserSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserSpecificResource_args> {
      public getUserSpecificResource() {
        super("getUserSpecificResource");
      }

      public getUserSpecificResource_args getEmptyArgsInstance() {
        return new getUserSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserSpecificResource_result getResult(I iface, getUserSpecificResource_args args) throws org.apache.thrift.TException {
        getUserSpecificResource_result result = new getUserSpecificResource_result();
        try {
          result.success = iface.getUserSpecificResource(args.authzToken, args.projectId);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class updateUserSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserSpecificResource_args> {
      public updateUserSpecificResource() {
        super("updateUserSpecificResource");
      }

      public updateUserSpecificResource_args getEmptyArgsInstance() {
        return new updateUserSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserSpecificResource_result getResult(I iface, updateUserSpecificResource_args args) throws org.apache.thrift.TException {
        updateUserSpecificResource_result result = new updateUserSpecificResource_result();
        try {
          result.success = iface.updateUserSpecificResource(args.authzToken, args.projectId, args.listUserSpecificResource);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getAllRequestsForAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllRequestsForAdmin_args> {
      public getAllRequestsForAdmin() {
        super("getAllRequestsForAdmin");
      }

      public getAllRequestsForAdmin_args getEmptyArgsInstance() {
        return new getAllRequestsForAdmin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllRequestsForAdmin_result getResult(I iface, getAllRequestsForAdmin_args args) throws org.apache.thrift.TException {
        getAllRequestsForAdmin_result result = new getAllRequestsForAdmin_result();
        try {
          result.success = iface.getAllRequestsForAdmin(args.authzToken, args.userName);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class assignReviewers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assignReviewers_args> {
      public assignReviewers() {
        super("assignReviewers");
      }

      public assignReviewers_args getEmptyArgsInstance() {
        return new assignReviewers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assignReviewers_result getResult(I iface, assignReviewers_args args) throws org.apache.thrift.TException {
        assignReviewers_result result = new assignReviewers_result();
        try {
          result.success = iface.assignReviewers(args.authzToken, args.projectId, args.reviewerId, args.adminId);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class updateRequestByReviewer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRequestByReviewer_args> {
      public updateRequestByReviewer() {
        super("updateRequestByReviewer");
      }

      public updateRequestByReviewer_args getEmptyArgsInstance() {
        return new updateRequestByReviewer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRequestByReviewer_result getResult(I iface, updateRequestByReviewer_args args) throws org.apache.thrift.TException {
        updateRequestByReviewer_result result = new updateRequestByReviewer_result();
        try {
          result.success = iface.updateRequestByReviewer(args.authzToken, args.reviewerAllocationDetail);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getAllRequestsForReviewers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllRequestsForReviewers_args> {
      public getAllRequestsForReviewers() {
        super("getAllRequestsForReviewers");
      }

      public getAllRequestsForReviewers_args getEmptyArgsInstance() {
        return new getAllRequestsForReviewers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllRequestsForReviewers_result getResult(I iface, getAllRequestsForReviewers_args args) throws org.apache.thrift.TException {
        getAllRequestsForReviewers_result result = new getAllRequestsForReviewers_result();
        try {
          result.success = iface.getAllRequestsForReviewers(args.authzToken, args.userName);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getAllReviewsForARequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllReviewsForARequest_args> {
      public getAllReviewsForARequest() {
        super("getAllReviewsForARequest");
      }

      public getAllReviewsForARequest_args getEmptyArgsInstance() {
        return new getAllReviewsForARequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllReviewsForARequest_result getResult(I iface, getAllReviewsForARequest_args args) throws org.apache.thrift.TException {
        getAllReviewsForARequest_result result = new getAllReviewsForARequest_result();
        try {
          result.success = iface.getAllReviewsForARequest(args.authzToken, args.projectId);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class createReviewerSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createReviewerSpecificResource_args> {
      public createReviewerSpecificResource() {
        super("createReviewerSpecificResource");
      }

      public createReviewerSpecificResource_args getEmptyArgsInstance() {
        return new createReviewerSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createReviewerSpecificResource_result getResult(I iface, createReviewerSpecificResource_args args) throws org.apache.thrift.TException {
        createReviewerSpecificResource_result result = new createReviewerSpecificResource_result();
        try {
          result.success = iface.createReviewerSpecificResource(args.authzToken, args.allocDetail);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class deleteReviewerSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteReviewerSpecificResource_args> {
      public deleteReviewerSpecificResource() {
        super("deleteReviewerSpecificResource");
      }

      public deleteReviewerSpecificResource_args getEmptyArgsInstance() {
        return new deleteReviewerSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteReviewerSpecificResource_result getResult(I iface, deleteReviewerSpecificResource_args args) throws org.apache.thrift.TException {
        deleteReviewerSpecificResource_result result = new deleteReviewerSpecificResource_result();
        try {
          result.success = iface.deleteReviewerSpecificResource(args.authzToken, args.projectId, args.specificResource);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getReviewerSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReviewerSpecificResource_args> {
      public getReviewerSpecificResource() {
        super("getReviewerSpecificResource");
      }

      public getReviewerSpecificResource_args getEmptyArgsInstance() {
        return new getReviewerSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReviewerSpecificResource_result getResult(I iface, getReviewerSpecificResource_args args) throws org.apache.thrift.TException {
        getReviewerSpecificResource_result result = new getReviewerSpecificResource_result();
        try {
          result.success = iface.getReviewerSpecificResource(args.authzToken, args.projectId);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class updateReviewerSpecificResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateReviewerSpecificResource_args> {
      public updateReviewerSpecificResource() {
        super("updateReviewerSpecificResource");
      }

      public updateReviewerSpecificResource_args getEmptyArgsInstance() {
        return new updateReviewerSpecificResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateReviewerSpecificResource_result getResult(I iface, updateReviewerSpecificResource_args args) throws org.apache.thrift.TException {
        updateReviewerSpecificResource_result result = new updateReviewerSpecificResource_result();
        try {
          result.success = iface.updateReviewerSpecificResource(args.authzToken, args.projectId, args.listReviewerSpecificResource);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getAllAssignedReviewersForRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllAssignedReviewersForRequest_args> {
      public getAllAssignedReviewersForRequest() {
        super("getAllAssignedReviewersForRequest");
      }

      public getAllAssignedReviewersForRequest_args getEmptyArgsInstance() {
        return new getAllAssignedReviewersForRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllAssignedReviewersForRequest_result getResult(I iface, getAllAssignedReviewersForRequest_args args) throws org.apache.thrift.TException {
        getAllAssignedReviewersForRequest_result result = new getAllAssignedReviewersForRequest_result();
        try {
          result.success = iface.getAllAssignedReviewersForRequest(args.authzToken, args.projectId);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class approveRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, approveRequest_args> {
      public approveRequest() {
        super("approveRequest");
      }

      public approveRequest_args getEmptyArgsInstance() {
        return new approveRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public approveRequest_result getResult(I iface, approveRequest_args args) throws org.apache.thrift.TException {
        approveRequest_result result = new approveRequest_result();
        try {
          result.success = iface.approveRequest(args.authzToken, args.projectId, args.adminId, args.startDate, args.endDate, args.awardAllocation, args.specificResourceName);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class rejectRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rejectRequest_args> {
      public rejectRequest() {
        super("rejectRequest");
      }

      public rejectRequest_args getEmptyArgsInstance() {
        return new rejectRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rejectRequest_result getResult(I iface, rejectRequest_args args) throws org.apache.thrift.TException {
        rejectRequest_result result = new rejectRequest_result();
        try {
          result.success = iface.rejectRequest(args.authzToken, args.projectId, args.adminId, args.rejectionReason, args.specificResourceName);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class getRemainingAllocationUnits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRemainingAllocationUnits_args> {
      public getRemainingAllocationUnits() {
        super("getRemainingAllocationUnits");
      }

      public getRemainingAllocationUnits_args getEmptyArgsInstance() {
        return new getRemainingAllocationUnits_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRemainingAllocationUnits_result getResult(I iface, getRemainingAllocationUnits_args args) throws org.apache.thrift.TException {
        getRemainingAllocationUnits_result result = new getRemainingAllocationUnits_result();
        try {
          result.success = iface.getRemainingAllocationUnits(args.authzToken, args.specificResource);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

    public static class deductAllocationUnits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deductAllocationUnits_args> {
      public deductAllocationUnits() {
        super("deductAllocationUnits");
      }

      public deductAllocationUnits_args getEmptyArgsInstance() {
        return new deductAllocationUnits_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deductAllocationUnits_result getResult(I iface, deductAllocationUnits_args args) throws org.apache.thrift.TException {
        deductAllocationUnits_result result = new deductAllocationUnits_result();
        try {
          result.success = iface.deductAllocationUnits(args.authzToken, args.specificResource, args.allocationUnits);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
          result.ame = ame;
        } catch (org.apache.airavata.model.error.AuthorizationException ae) {
          result.ae = ae;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createAllocationRequest", new createAllocationRequest());
      processMap.put("deleteAllocationRequest", new deleteAllocationRequest());
      processMap.put("getAllocationRequest", new getAllocationRequest());
      processMap.put("updateAllocationRequest", new updateAllocationRequest());
      processMap.put("createUserSpecificResource", new createUserSpecificResource());
      processMap.put("deleteUserSpecificResource", new deleteUserSpecificResource());
      processMap.put("getUserSpecificResource", new getUserSpecificResource());
      processMap.put("updateUserSpecificResource", new updateUserSpecificResource());
      processMap.put("getAllRequestsForAdmin", new getAllRequestsForAdmin());
      processMap.put("assignReviewers", new assignReviewers());
      processMap.put("updateRequestByReviewer", new updateRequestByReviewer());
      processMap.put("getAllRequestsForReviewers", new getAllRequestsForReviewers());
      processMap.put("getAllReviewsForARequest", new getAllReviewsForARequest());
      processMap.put("createReviewerSpecificResource", new createReviewerSpecificResource());
      processMap.put("deleteReviewerSpecificResource", new deleteReviewerSpecificResource());
      processMap.put("getReviewerSpecificResource", new getReviewerSpecificResource());
      processMap.put("updateReviewerSpecificResource", new updateReviewerSpecificResource());
      processMap.put("getAllAssignedReviewersForRequest", new getAllAssignedReviewersForRequest());
      processMap.put("approveRequest", new approveRequest());
      processMap.put("rejectRequest", new rejectRequest());
      processMap.put("getRemainingAllocationUnits", new getRemainingAllocationUnits());
      processMap.put("deductAllocationUnits", new deductAllocationUnits());
      return processMap;
    }

    public static class createAllocationRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAllocationRequest_args, java.lang.Long> {
      public createAllocationRequest() {
        super("createAllocationRequest");
      }

      public createAllocationRequest_args getEmptyArgsInstance() {
        return new createAllocationRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            createAllocationRequest_result result = new createAllocationRequest_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createAllocationRequest_result result = new createAllocationRequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAllocationRequest_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.createAllocationRequest(args.authzToken, args.allocDetail,resultHandler);
      }
    }

    public static class deleteAllocationRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAllocationRequest_args, java.lang.Boolean> {
      public deleteAllocationRequest() {
        super("deleteAllocationRequest");
      }

      public deleteAllocationRequest_args getEmptyArgsInstance() {
        return new deleteAllocationRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deleteAllocationRequest_result result = new deleteAllocationRequest_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteAllocationRequest_result result = new deleteAllocationRequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAllocationRequest_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deleteAllocationRequest(args.authzToken, args.projectId,resultHandler);
      }
    }

    public static class getAllocationRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllocationRequest_args, org.apache.airavata.allocation.manager.models.UserAllocationDetail> {
      public getAllocationRequest() {
        super("getAllocationRequest");
      }

      public getAllocationRequest_args getEmptyArgsInstance() {
        return new getAllocationRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.allocation.manager.models.UserAllocationDetail>() { 
          public void onComplete(org.apache.airavata.allocation.manager.models.UserAllocationDetail o) {
            getAllocationRequest_result result = new getAllocationRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllocationRequest_result result = new getAllocationRequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllocationRequest_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.allocation.manager.models.UserAllocationDetail> resultHandler) throws org.apache.thrift.TException {
        iface.getAllocationRequest(args.authzToken, args.projectId,resultHandler);
      }
    }

    public static class updateAllocationRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAllocationRequest_args, java.lang.Boolean> {
      public updateAllocationRequest() {
        super("updateAllocationRequest");
      }

      public updateAllocationRequest_args getEmptyArgsInstance() {
        return new updateAllocationRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateAllocationRequest_result result = new updateAllocationRequest_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateAllocationRequest_result result = new updateAllocationRequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAllocationRequest_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateAllocationRequest(args.authzToken, args.allocDetail,resultHandler);
      }
    }

    public static class createUserSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createUserSpecificResource_args, java.lang.Long> {
      public createUserSpecificResource() {
        super("createUserSpecificResource");
      }

      public createUserSpecificResource_args getEmptyArgsInstance() {
        return new createUserSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            createUserSpecificResource_result result = new createUserSpecificResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createUserSpecificResource_result result = new createUserSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createUserSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.createUserSpecificResource(args.authzToken, args.allocDetail,resultHandler);
      }
    }

    public static class deleteUserSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUserSpecificResource_args, java.lang.Boolean> {
      public deleteUserSpecificResource() {
        super("deleteUserSpecificResource");
      }

      public deleteUserSpecificResource_args getEmptyArgsInstance() {
        return new deleteUserSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deleteUserSpecificResource_result result = new deleteUserSpecificResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteUserSpecificResource_result result = new deleteUserSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUserSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deleteUserSpecificResource(args.authzToken, args.projectId, args.specificResource,resultHandler);
      }
    }

    public static class getUserSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserSpecificResource_args, java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>> {
      public getUserSpecificResource() {
        super("getUserSpecificResource");
      }

      public getUserSpecificResource_args getEmptyArgsInstance() {
        return new getUserSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>>() { 
          public void onComplete(java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> o) {
            getUserSpecificResource_result result = new getUserSpecificResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserSpecificResource_result result = new getUserSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>> resultHandler) throws org.apache.thrift.TException {
        iface.getUserSpecificResource(args.authzToken, args.projectId,resultHandler);
      }
    }

    public static class updateUserSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserSpecificResource_args, java.lang.Boolean> {
      public updateUserSpecificResource() {
        super("updateUserSpecificResource");
      }

      public updateUserSpecificResource_args getEmptyArgsInstance() {
        return new updateUserSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateUserSpecificResource_result result = new updateUserSpecificResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateUserSpecificResource_result result = new updateUserSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateUserSpecificResource(args.authzToken, args.projectId, args.listUserSpecificResource,resultHandler);
      }
    }

    public static class getAllRequestsForAdmin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllRequestsForAdmin_args, java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> {
      public getAllRequestsForAdmin() {
        super("getAllRequestsForAdmin");
      }

      public getAllRequestsForAdmin_args getEmptyArgsInstance() {
        return new getAllRequestsForAdmin_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>>() { 
          public void onComplete(java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> o) {
            getAllRequestsForAdmin_result result = new getAllRequestsForAdmin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllRequestsForAdmin_result result = new getAllRequestsForAdmin_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllRequestsForAdmin_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler) throws org.apache.thrift.TException {
        iface.getAllRequestsForAdmin(args.authzToken, args.userName,resultHandler);
      }
    }

    public static class assignReviewers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assignReviewers_args, java.lang.Boolean> {
      public assignReviewers() {
        super("assignReviewers");
      }

      public assignReviewers_args getEmptyArgsInstance() {
        return new assignReviewers_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            assignReviewers_result result = new assignReviewers_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            assignReviewers_result result = new assignReviewers_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assignReviewers_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.assignReviewers(args.authzToken, args.projectId, args.reviewerId, args.adminId,resultHandler);
      }
    }

    public static class updateRequestByReviewer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRequestByReviewer_args, java.lang.Boolean> {
      public updateRequestByReviewer() {
        super("updateRequestByReviewer");
      }

      public updateRequestByReviewer_args getEmptyArgsInstance() {
        return new updateRequestByReviewer_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateRequestByReviewer_result result = new updateRequestByReviewer_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateRequestByReviewer_result result = new updateRequestByReviewer_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRequestByReviewer_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateRequestByReviewer(args.authzToken, args.reviewerAllocationDetail,resultHandler);
      }
    }

    public static class getAllRequestsForReviewers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllRequestsForReviewers_args, java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> {
      public getAllRequestsForReviewers() {
        super("getAllRequestsForReviewers");
      }

      public getAllRequestsForReviewers_args getEmptyArgsInstance() {
        return new getAllRequestsForReviewers_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>>() { 
          public void onComplete(java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> o) {
            getAllRequestsForReviewers_result result = new getAllRequestsForReviewers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllRequestsForReviewers_result result = new getAllRequestsForReviewers_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllRequestsForReviewers_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>> resultHandler) throws org.apache.thrift.TException {
        iface.getAllRequestsForReviewers(args.authzToken, args.userName,resultHandler);
      }
    }

    public static class getAllReviewsForARequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllReviewsForARequest_args, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>> {
      public getAllReviewsForARequest() {
        super("getAllReviewsForARequest");
      }

      public getAllReviewsForARequest_args getEmptyArgsInstance() {
        return new getAllReviewsForARequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>>() { 
          public void onComplete(java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> o) {
            getAllReviewsForARequest_result result = new getAllReviewsForARequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllReviewsForARequest_result result = new getAllReviewsForARequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllReviewsForARequest_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>> resultHandler) throws org.apache.thrift.TException {
        iface.getAllReviewsForARequest(args.authzToken, args.projectId,resultHandler);
      }
    }

    public static class createReviewerSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createReviewerSpecificResource_args, java.lang.Long> {
      public createReviewerSpecificResource() {
        super("createReviewerSpecificResource");
      }

      public createReviewerSpecificResource_args getEmptyArgsInstance() {
        return new createReviewerSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            createReviewerSpecificResource_result result = new createReviewerSpecificResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createReviewerSpecificResource_result result = new createReviewerSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createReviewerSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.createReviewerSpecificResource(args.authzToken, args.allocDetail,resultHandler);
      }
    }

    public static class deleteReviewerSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteReviewerSpecificResource_args, java.lang.Boolean> {
      public deleteReviewerSpecificResource() {
        super("deleteReviewerSpecificResource");
      }

      public deleteReviewerSpecificResource_args getEmptyArgsInstance() {
        return new deleteReviewerSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deleteReviewerSpecificResource_result result = new deleteReviewerSpecificResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteReviewerSpecificResource_result result = new deleteReviewerSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteReviewerSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deleteReviewerSpecificResource(args.authzToken, args.projectId, args.specificResource,resultHandler);
      }
    }

    public static class getReviewerSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReviewerSpecificResource_args, java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>> {
      public getReviewerSpecificResource() {
        super("getReviewerSpecificResource");
      }

      public getReviewerSpecificResource_args getEmptyArgsInstance() {
        return new getReviewerSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>>() { 
          public void onComplete(java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> o) {
            getReviewerSpecificResource_result result = new getReviewerSpecificResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getReviewerSpecificResource_result result = new getReviewerSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReviewerSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>> resultHandler) throws org.apache.thrift.TException {
        iface.getReviewerSpecificResource(args.authzToken, args.projectId,resultHandler);
      }
    }

    public static class updateReviewerSpecificResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateReviewerSpecificResource_args, java.lang.Boolean> {
      public updateReviewerSpecificResource() {
        super("updateReviewerSpecificResource");
      }

      public updateReviewerSpecificResource_args getEmptyArgsInstance() {
        return new updateReviewerSpecificResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateReviewerSpecificResource_result result = new updateReviewerSpecificResource_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateReviewerSpecificResource_result result = new updateReviewerSpecificResource_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateReviewerSpecificResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateReviewerSpecificResource(args.authzToken, args.projectId, args.listReviewerSpecificResource,resultHandler);
      }
    }

    public static class getAllAssignedReviewersForRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllAssignedReviewersForRequest_args, java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>> {
      public getAllAssignedReviewersForRequest() {
        super("getAllAssignedReviewersForRequest");
      }

      public getAllAssignedReviewersForRequest_args getEmptyArgsInstance() {
        return new getAllAssignedReviewersForRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>>() { 
          public void onComplete(java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> o) {
            getAllAssignedReviewersForRequest_result result = new getAllAssignedReviewersForRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllAssignedReviewersForRequest_result result = new getAllAssignedReviewersForRequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllAssignedReviewersForRequest_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>> resultHandler) throws org.apache.thrift.TException {
        iface.getAllAssignedReviewersForRequest(args.authzToken, args.projectId,resultHandler);
      }
    }

    public static class approveRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, approveRequest_args, java.lang.Boolean> {
      public approveRequest() {
        super("approveRequest");
      }

      public approveRequest_args getEmptyArgsInstance() {
        return new approveRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            approveRequest_result result = new approveRequest_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            approveRequest_result result = new approveRequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, approveRequest_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.approveRequest(args.authzToken, args.projectId, args.adminId, args.startDate, args.endDate, args.awardAllocation, args.specificResourceName,resultHandler);
      }
    }

    public static class rejectRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rejectRequest_args, java.lang.Boolean> {
      public rejectRequest() {
        super("rejectRequest");
      }

      public rejectRequest_args getEmptyArgsInstance() {
        return new rejectRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            rejectRequest_result result = new rejectRequest_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rejectRequest_result result = new rejectRequest_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rejectRequest_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.rejectRequest(args.authzToken, args.projectId, args.adminId, args.rejectionReason, args.specificResourceName,resultHandler);
      }
    }

    public static class getRemainingAllocationUnits<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRemainingAllocationUnits_args, java.lang.Long> {
      public getRemainingAllocationUnits() {
        super("getRemainingAllocationUnits");
      }

      public getRemainingAllocationUnits_args getEmptyArgsInstance() {
        return new getRemainingAllocationUnits_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getRemainingAllocationUnits_result result = new getRemainingAllocationUnits_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRemainingAllocationUnits_result result = new getRemainingAllocationUnits_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRemainingAllocationUnits_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getRemainingAllocationUnits(args.authzToken, args.specificResource,resultHandler);
      }
    }

    public static class deductAllocationUnits<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deductAllocationUnits_args, java.lang.Boolean> {
      public deductAllocationUnits() {
        super("deductAllocationUnits");
      }

      public deductAllocationUnits_args getEmptyArgsInstance() {
        return new deductAllocationUnits_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deductAllocationUnits_result result = new deductAllocationUnits_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deductAllocationUnits_result result = new deductAllocationUnits_result();
            if (e instanceof org.apache.airavata.allocation.manager.models.AllocationManagerException) {
              result.ame = (org.apache.airavata.allocation.manager.models.AllocationManagerException) e;
              result.setAmeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.airavata.model.error.AuthorizationException) {
              result.ae = (org.apache.airavata.model.error.AuthorizationException) e;
              result.setAeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deductAllocationUnits_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deductAllocationUnits(args.authzToken, args.specificResource, args.allocationUnits,resultHandler);
      }
    }

  }

  public static class createAllocationRequest_args implements org.apache.thrift.TBase<createAllocationRequest_args, createAllocationRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAllocationRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAllocationRequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ALLOC_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("allocDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAllocationRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAllocationRequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      ALLOC_DETAIL((short)2, "allocDetail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // ALLOC_DETAIL
            return ALLOC_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.ALLOC_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("allocDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserAllocationDetail.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAllocationRequest_args.class, metaDataMap);
    }

    public createAllocationRequest_args() {
    }

    public createAllocationRequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail)
    {
      this();
      this.authzToken = authzToken;
      this.allocDetail = allocDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAllocationRequest_args(createAllocationRequest_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetAllocDetail()) {
        this.allocDetail = new org.apache.airavata.allocation.manager.models.UserAllocationDetail(other.allocDetail);
      }
    }

    public createAllocationRequest_args deepCopy() {
      return new createAllocationRequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.allocDetail = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public createAllocationRequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.UserAllocationDetail getAllocDetail() {
      return this.allocDetail;
    }

    public createAllocationRequest_args setAllocDetail(org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) {
      this.allocDetail = allocDetail;
      return this;
    }

    public void unsetAllocDetail() {
      this.allocDetail = null;
    }

    /** Returns true if field allocDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetAllocDetail() {
      return this.allocDetail != null;
    }

    public void setAllocDetailIsSet(boolean value) {
      if (!value) {
        this.allocDetail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case ALLOC_DETAIL:
        if (value == null) {
          unsetAllocDetail();
        } else {
          setAllocDetail((org.apache.airavata.allocation.manager.models.UserAllocationDetail)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case ALLOC_DETAIL:
        return getAllocDetail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case ALLOC_DETAIL:
        return isSetAllocDetail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAllocationRequest_args)
        return this.equals((createAllocationRequest_args)that);
      return false;
    }

    public boolean equals(createAllocationRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_allocDetail = true && this.isSetAllocDetail();
      boolean that_present_allocDetail = true && that.isSetAllocDetail();
      if (this_present_allocDetail || that_present_allocDetail) {
        if (!(this_present_allocDetail && that_present_allocDetail))
          return false;
        if (!this.allocDetail.equals(that.allocDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetAllocDetail()) ? 131071 : 524287);
      if (isSetAllocDetail())
        hashCode = hashCode * 8191 + allocDetail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAllocationRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAllocDetail()).compareTo(other.isSetAllocDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllocDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocDetail, other.allocDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAllocationRequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allocDetail:");
      if (this.allocDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.allocDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (allocDetail == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'allocDetail' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
      if (allocDetail != null) {
        allocDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAllocationRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAllocationRequest_argsStandardScheme getScheme() {
        return new createAllocationRequest_argsStandardScheme();
      }
    }

    private static class createAllocationRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAllocationRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ALLOC_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.allocDetail = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
                struct.allocDetail.read(iprot);
                struct.setAllocDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAllocationRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.allocDetail != null) {
          oprot.writeFieldBegin(ALLOC_DETAIL_FIELD_DESC);
          struct.allocDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAllocationRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAllocationRequest_argsTupleScheme getScheme() {
        return new createAllocationRequest_argsTupleScheme();
      }
    }

    private static class createAllocationRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAllocationRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        struct.allocDetail.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.allocDetail = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
        struct.allocDetail.read(iprot);
        struct.setAllocDetailIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAllocationRequest_result implements org.apache.thrift.TBase<createAllocationRequest_result, createAllocationRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAllocationRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAllocationRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAllocationRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAllocationRequest_resultTupleSchemeFactory();

    public long success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAllocationRequest_result.class, metaDataMap);
    }

    public createAllocationRequest_result() {
    }

    public createAllocationRequest_result(
      long success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAllocationRequest_result(createAllocationRequest_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public createAllocationRequest_result deepCopy() {
      return new createAllocationRequest_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ame = null;
      this.ae = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public createAllocationRequest_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public createAllocationRequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public createAllocationRequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAllocationRequest_result)
        return this.equals((createAllocationRequest_result)that);
      return false;
    }

    public boolean equals(createAllocationRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAllocationRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAllocationRequest_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAllocationRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAllocationRequest_resultStandardScheme getScheme() {
        return new createAllocationRequest_resultStandardScheme();
      }
    }

    private static class createAllocationRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAllocationRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAllocationRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAllocationRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAllocationRequest_resultTupleScheme getScheme() {
        return new createAllocationRequest_resultTupleScheme();
      }
    }

    private static class createAllocationRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAllocationRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAllocationRequest_args implements org.apache.thrift.TBase<deleteAllocationRequest_args, deleteAllocationRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllocationRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllocationRequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAllocationRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAllocationRequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllocationRequest_args.class, metaDataMap);
    }

    public deleteAllocationRequest_args() {
    }

    public deleteAllocationRequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllocationRequest_args(deleteAllocationRequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
    }

    public deleteAllocationRequest_args deepCopy() {
      return new deleteAllocationRequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public deleteAllocationRequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public deleteAllocationRequest_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllocationRequest_args)
        return this.equals((deleteAllocationRequest_args)that);
      return false;
    }

    public boolean equals(deleteAllocationRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      return hashCode;
    }

    @Override
    public int compareTo(deleteAllocationRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAllocationRequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllocationRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllocationRequest_argsStandardScheme getScheme() {
        return new deleteAllocationRequest_argsStandardScheme();
      }
    }

    private static class deleteAllocationRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAllocationRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllocationRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllocationRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllocationRequest_argsTupleScheme getScheme() {
        return new deleteAllocationRequest_argsTupleScheme();
      }
    }

    private static class deleteAllocationRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAllocationRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAllocationRequest_result implements org.apache.thrift.TBase<deleteAllocationRequest_result, deleteAllocationRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllocationRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllocationRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAllocationRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAllocationRequest_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllocationRequest_result.class, metaDataMap);
    }

    public deleteAllocationRequest_result() {
    }

    public deleteAllocationRequest_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllocationRequest_result(deleteAllocationRequest_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public deleteAllocationRequest_result deepCopy() {
      return new deleteAllocationRequest_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteAllocationRequest_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public deleteAllocationRequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public deleteAllocationRequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllocationRequest_result)
        return this.equals((deleteAllocationRequest_result)that);
      return false;
    }

    public boolean equals(deleteAllocationRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAllocationRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAllocationRequest_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllocationRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllocationRequest_resultStandardScheme getScheme() {
        return new deleteAllocationRequest_resultStandardScheme();
      }
    }

    private static class deleteAllocationRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAllocationRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllocationRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllocationRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllocationRequest_resultTupleScheme getScheme() {
        return new deleteAllocationRequest_resultTupleScheme();
      }
    }

    private static class deleteAllocationRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAllocationRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllocationRequest_args implements org.apache.thrift.TBase<getAllocationRequest_args, getAllocationRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllocationRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllocationRequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllocationRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllocationRequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllocationRequest_args.class, metaDataMap);
    }

    public getAllocationRequest_args() {
    }

    public getAllocationRequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllocationRequest_args(getAllocationRequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
    }

    public getAllocationRequest_args deepCopy() {
      return new getAllocationRequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getAllocationRequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public getAllocationRequest_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllocationRequest_args)
        return this.equals((getAllocationRequest_args)that);
      return false;
    }

    public boolean equals(getAllocationRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      return hashCode;
    }

    @Override
    public int compareTo(getAllocationRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllocationRequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllocationRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllocationRequest_argsStandardScheme getScheme() {
        return new getAllocationRequest_argsStandardScheme();
      }
    }

    private static class getAllocationRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllocationRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllocationRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllocationRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllocationRequest_argsTupleScheme getScheme() {
        return new getAllocationRequest_argsTupleScheme();
      }
    }

    private static class getAllocationRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllocationRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllocationRequest_result implements org.apache.thrift.TBase<getAllocationRequest_result, getAllocationRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllocationRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllocationRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllocationRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllocationRequest_resultTupleSchemeFactory();

    public org.apache.airavata.allocation.manager.models.UserAllocationDetail success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserAllocationDetail.class)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllocationRequest_result.class, metaDataMap);
    }

    public getAllocationRequest_result() {
    }

    public getAllocationRequest_result(
      org.apache.airavata.allocation.manager.models.UserAllocationDetail success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllocationRequest_result(getAllocationRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.allocation.manager.models.UserAllocationDetail(other.success);
      }
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getAllocationRequest_result deepCopy() {
      return new getAllocationRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ame = null;
      this.ae = null;
    }

    public org.apache.airavata.allocation.manager.models.UserAllocationDetail getSuccess() {
      return this.success;
    }

    public getAllocationRequest_result setSuccess(org.apache.airavata.allocation.manager.models.UserAllocationDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getAllocationRequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getAllocationRequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.allocation.manager.models.UserAllocationDetail)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllocationRequest_result)
        return this.equals((getAllocationRequest_result)that);
      return false;
    }

    public boolean equals(getAllocationRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllocationRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllocationRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllocationRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllocationRequest_resultStandardScheme getScheme() {
        return new getAllocationRequest_resultStandardScheme();
      }
    }

    private static class getAllocationRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllocationRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllocationRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllocationRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllocationRequest_resultTupleScheme getScheme() {
        return new getAllocationRequest_resultTupleScheme();
      }
    }

    private static class getAllocationRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllocationRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAllocationRequest_args implements org.apache.thrift.TBase<updateAllocationRequest_args, updateAllocationRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAllocationRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAllocationRequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ALLOC_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("allocDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAllocationRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAllocationRequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      ALLOC_DETAIL((short)2, "allocDetail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // ALLOC_DETAIL
            return ALLOC_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.ALLOC_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("allocDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserAllocationDetail.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAllocationRequest_args.class, metaDataMap);
    }

    public updateAllocationRequest_args() {
    }

    public updateAllocationRequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail)
    {
      this();
      this.authzToken = authzToken;
      this.allocDetail = allocDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAllocationRequest_args(updateAllocationRequest_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetAllocDetail()) {
        this.allocDetail = new org.apache.airavata.allocation.manager.models.UserAllocationDetail(other.allocDetail);
      }
    }

    public updateAllocationRequest_args deepCopy() {
      return new updateAllocationRequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.allocDetail = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public updateAllocationRequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.UserAllocationDetail getAllocDetail() {
      return this.allocDetail;
    }

    public updateAllocationRequest_args setAllocDetail(org.apache.airavata.allocation.manager.models.UserAllocationDetail allocDetail) {
      this.allocDetail = allocDetail;
      return this;
    }

    public void unsetAllocDetail() {
      this.allocDetail = null;
    }

    /** Returns true if field allocDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetAllocDetail() {
      return this.allocDetail != null;
    }

    public void setAllocDetailIsSet(boolean value) {
      if (!value) {
        this.allocDetail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case ALLOC_DETAIL:
        if (value == null) {
          unsetAllocDetail();
        } else {
          setAllocDetail((org.apache.airavata.allocation.manager.models.UserAllocationDetail)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case ALLOC_DETAIL:
        return getAllocDetail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case ALLOC_DETAIL:
        return isSetAllocDetail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAllocationRequest_args)
        return this.equals((updateAllocationRequest_args)that);
      return false;
    }

    public boolean equals(updateAllocationRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_allocDetail = true && this.isSetAllocDetail();
      boolean that_present_allocDetail = true && that.isSetAllocDetail();
      if (this_present_allocDetail || that_present_allocDetail) {
        if (!(this_present_allocDetail && that_present_allocDetail))
          return false;
        if (!this.allocDetail.equals(that.allocDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetAllocDetail()) ? 131071 : 524287);
      if (isSetAllocDetail())
        hashCode = hashCode * 8191 + allocDetail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAllocationRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAllocDetail()).compareTo(other.isSetAllocDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllocDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocDetail, other.allocDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAllocationRequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allocDetail:");
      if (this.allocDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.allocDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (allocDetail == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'allocDetail' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
      if (allocDetail != null) {
        allocDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAllocationRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAllocationRequest_argsStandardScheme getScheme() {
        return new updateAllocationRequest_argsStandardScheme();
      }
    }

    private static class updateAllocationRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAllocationRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ALLOC_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.allocDetail = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
                struct.allocDetail.read(iprot);
                struct.setAllocDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAllocationRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.allocDetail != null) {
          oprot.writeFieldBegin(ALLOC_DETAIL_FIELD_DESC);
          struct.allocDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAllocationRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAllocationRequest_argsTupleScheme getScheme() {
        return new updateAllocationRequest_argsTupleScheme();
      }
    }

    private static class updateAllocationRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAllocationRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        struct.allocDetail.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAllocationRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.allocDetail = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
        struct.allocDetail.read(iprot);
        struct.setAllocDetailIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAllocationRequest_result implements org.apache.thrift.TBase<updateAllocationRequest_result, updateAllocationRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAllocationRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAllocationRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAllocationRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAllocationRequest_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAllocationRequest_result.class, metaDataMap);
    }

    public updateAllocationRequest_result() {
    }

    public updateAllocationRequest_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAllocationRequest_result(updateAllocationRequest_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public updateAllocationRequest_result deepCopy() {
      return new updateAllocationRequest_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateAllocationRequest_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public updateAllocationRequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public updateAllocationRequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAllocationRequest_result)
        return this.equals((updateAllocationRequest_result)that);
      return false;
    }

    public boolean equals(updateAllocationRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAllocationRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAllocationRequest_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAllocationRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAllocationRequest_resultStandardScheme getScheme() {
        return new updateAllocationRequest_resultStandardScheme();
      }
    }

    private static class updateAllocationRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAllocationRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAllocationRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAllocationRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAllocationRequest_resultTupleScheme getScheme() {
        return new updateAllocationRequest_resultTupleScheme();
      }
    }

    private static class updateAllocationRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAllocationRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAllocationRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createUserSpecificResource_args implements org.apache.thrift.TBase<createUserSpecificResource_args, createUserSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<createUserSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUserSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ALLOC_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("allocDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUserSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUserSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      ALLOC_DETAIL((short)2, "allocDetail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // ALLOC_DETAIL
            return ALLOC_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.ALLOC_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("allocDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUserSpecificResource_args.class, metaDataMap);
    }

    public createUserSpecificResource_args() {
    }

    public createUserSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail)
    {
      this();
      this.authzToken = authzToken;
      this.allocDetail = allocDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUserSpecificResource_args(createUserSpecificResource_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetAllocDetail()) {
        this.allocDetail = new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail(other.allocDetail);
      }
    }

    public createUserSpecificResource_args deepCopy() {
      return new createUserSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.allocDetail = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public createUserSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail getAllocDetail() {
      return this.allocDetail;
    }

    public createUserSpecificResource_args setAllocDetail(org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail allocDetail) {
      this.allocDetail = allocDetail;
      return this;
    }

    public void unsetAllocDetail() {
      this.allocDetail = null;
    }

    /** Returns true if field allocDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetAllocDetail() {
      return this.allocDetail != null;
    }

    public void setAllocDetailIsSet(boolean value) {
      if (!value) {
        this.allocDetail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case ALLOC_DETAIL:
        if (value == null) {
          unsetAllocDetail();
        } else {
          setAllocDetail((org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case ALLOC_DETAIL:
        return getAllocDetail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case ALLOC_DETAIL:
        return isSetAllocDetail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createUserSpecificResource_args)
        return this.equals((createUserSpecificResource_args)that);
      return false;
    }

    public boolean equals(createUserSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_allocDetail = true && this.isSetAllocDetail();
      boolean that_present_allocDetail = true && that.isSetAllocDetail();
      if (this_present_allocDetail || that_present_allocDetail) {
        if (!(this_present_allocDetail && that_present_allocDetail))
          return false;
        if (!this.allocDetail.equals(that.allocDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetAllocDetail()) ? 131071 : 524287);
      if (isSetAllocDetail())
        hashCode = hashCode * 8191 + allocDetail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createUserSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAllocDetail()).compareTo(other.isSetAllocDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllocDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocDetail, other.allocDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createUserSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allocDetail:");
      if (this.allocDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.allocDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (allocDetail == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'allocDetail' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
      if (allocDetail != null) {
        allocDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUserSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserSpecificResource_argsStandardScheme getScheme() {
        return new createUserSpecificResource_argsStandardScheme();
      }
    }

    private static class createUserSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createUserSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ALLOC_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.allocDetail = new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail();
                struct.allocDetail.read(iprot);
                struct.setAllocDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUserSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.allocDetail != null) {
          oprot.writeFieldBegin(ALLOC_DETAIL_FIELD_DESC);
          struct.allocDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUserSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserSpecificResource_argsTupleScheme getScheme() {
        return new createUserSpecificResource_argsTupleScheme();
      }
    }

    private static class createUserSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createUserSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        struct.allocDetail.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.allocDetail = new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail();
        struct.allocDetail.read(iprot);
        struct.setAllocDetailIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createUserSpecificResource_result implements org.apache.thrift.TBase<createUserSpecificResource_result, createUserSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<createUserSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUserSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUserSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUserSpecificResource_resultTupleSchemeFactory();

    public long success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUserSpecificResource_result.class, metaDataMap);
    }

    public createUserSpecificResource_result() {
    }

    public createUserSpecificResource_result(
      long success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUserSpecificResource_result(createUserSpecificResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public createUserSpecificResource_result deepCopy() {
      return new createUserSpecificResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ame = null;
      this.ae = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public createUserSpecificResource_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public createUserSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public createUserSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createUserSpecificResource_result)
        return this.equals((createUserSpecificResource_result)that);
      return false;
    }

    public boolean equals(createUserSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createUserSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createUserSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUserSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserSpecificResource_resultStandardScheme getScheme() {
        return new createUserSpecificResource_resultStandardScheme();
      }
    }

    private static class createUserSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createUserSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUserSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUserSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserSpecificResource_resultTupleScheme getScheme() {
        return new createUserSpecificResource_resultTupleScheme();
      }
    }

    private static class createUserSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createUserSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteUserSpecificResource_args implements org.apache.thrift.TBase<deleteUserSpecificResource_args, deleteUserSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResource", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteUserSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteUserSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required
    public java.lang.String specificResource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId"),
      SPECIFIC_RESOURCE((short)3, "specificResource");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // SPECIFIC_RESOURCE
            return SPECIFIC_RESOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SPECIFIC_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("specificResource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserSpecificResource_args.class, metaDataMap);
    }

    public deleteUserSpecificResource_args() {
    }

    public deleteUserSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId,
      java.lang.String specificResource)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.specificResource = specificResource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserSpecificResource_args(deleteUserSpecificResource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
      if (other.isSetSpecificResource()) {
        this.specificResource = other.specificResource;
      }
    }

    public deleteUserSpecificResource_args deepCopy() {
      return new deleteUserSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.specificResource = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public deleteUserSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public deleteUserSpecificResource_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public java.lang.String getSpecificResource() {
      return this.specificResource;
    }

    public deleteUserSpecificResource_args setSpecificResource(java.lang.String specificResource) {
      this.specificResource = specificResource;
      return this;
    }

    public void unsetSpecificResource() {
      this.specificResource = null;
    }

    /** Returns true if field specificResource is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecificResource() {
      return this.specificResource != null;
    }

    public void setSpecificResourceIsSet(boolean value) {
      if (!value) {
        this.specificResource = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      case SPECIFIC_RESOURCE:
        if (value == null) {
          unsetSpecificResource();
        } else {
          setSpecificResource((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      case SPECIFIC_RESOURCE:
        return getSpecificResource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      case SPECIFIC_RESOURCE:
        return isSetSpecificResource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserSpecificResource_args)
        return this.equals((deleteUserSpecificResource_args)that);
      return false;
    }

    public boolean equals(deleteUserSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_specificResource = true && this.isSetSpecificResource();
      boolean that_present_specificResource = true && that.isSetSpecificResource();
      if (this_present_specificResource || that_present_specificResource) {
        if (!(this_present_specificResource && that_present_specificResource))
          return false;
        if (!this.specificResource.equals(that.specificResource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      hashCode = hashCode * 8191 + ((isSetSpecificResource()) ? 131071 : 524287);
      if (isSetSpecificResource())
        hashCode = hashCode * 8191 + specificResource.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteUserSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpecificResource()).compareTo(other.isSetSpecificResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecificResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResource, other.specificResource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteUserSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("specificResource:");
      if (this.specificResource == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      if (specificResource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specificResource' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteUserSpecificResource_argsStandardScheme getScheme() {
        return new deleteUserSpecificResource_argsStandardScheme();
      }
    }

    private static class deleteUserSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteUserSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SPECIFIC_RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.specificResource = iprot.readString();
                struct.setSpecificResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.specificResource != null) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_FIELD_DESC);
          oprot.writeString(struct.specificResource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteUserSpecificResource_argsTupleScheme getScheme() {
        return new deleteUserSpecificResource_argsTupleScheme();
      }
    }

    private static class deleteUserSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteUserSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
        oprot.writeString(struct.specificResource);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
        struct.specificResource = iprot.readString();
        struct.setSpecificResourceIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteUserSpecificResource_result implements org.apache.thrift.TBase<deleteUserSpecificResource_result, deleteUserSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteUserSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteUserSpecificResource_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserSpecificResource_result.class, metaDataMap);
    }

    public deleteUserSpecificResource_result() {
    }

    public deleteUserSpecificResource_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserSpecificResource_result(deleteUserSpecificResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public deleteUserSpecificResource_result deepCopy() {
      return new deleteUserSpecificResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteUserSpecificResource_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public deleteUserSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public deleteUserSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserSpecificResource_result)
        return this.equals((deleteUserSpecificResource_result)that);
      return false;
    }

    public boolean equals(deleteUserSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteUserSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteUserSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteUserSpecificResource_resultStandardScheme getScheme() {
        return new deleteUserSpecificResource_resultStandardScheme();
      }
    }

    private static class deleteUserSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteUserSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteUserSpecificResource_resultTupleScheme getScheme() {
        return new deleteUserSpecificResource_resultTupleScheme();
      }
    }

    private static class deleteUserSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteUserSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserSpecificResource_args implements org.apache.thrift.TBase<getUserSpecificResource_args, getUserSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSpecificResource_args.class, metaDataMap);
    }

    public getUserSpecificResource_args() {
    }

    public getUserSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserSpecificResource_args(getUserSpecificResource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
    }

    public getUserSpecificResource_args deepCopy() {
      return new getUserSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getUserSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public getUserSpecificResource_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserSpecificResource_args)
        return this.equals((getUserSpecificResource_args)that);
      return false;
    }

    public boolean equals(getUserSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      return hashCode;
    }

    @Override
    public int compareTo(getUserSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserSpecificResource_argsStandardScheme getScheme() {
        return new getUserSpecificResource_argsStandardScheme();
      }
    }

    private static class getUserSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserSpecificResource_argsTupleScheme getScheme() {
        return new getUserSpecificResource_argsTupleScheme();
      }
    }

    private static class getUserSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserSpecificResource_result implements org.apache.thrift.TBase<getUserSpecificResource_result, getUserSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserSpecificResource_resultTupleSchemeFactory();

    public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail.class))));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSpecificResource_result.class, metaDataMap);
    }

    public getUserSpecificResource_result() {
    }

    public getUserSpecificResource_result(
      java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserSpecificResource_result(getUserSpecificResource_result other) {
      if (other.isSetSuccess()) {
        java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> __this__success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>(other.success.size());
        for (org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail other_element : other.success) {
          __this__success.add(new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getUserSpecificResource_result deepCopy() {
      return new getUserSpecificResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ame = null;
      this.ae = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>();
      }
      this.success.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> getSuccess() {
      return this.success;
    }

    public getUserSpecificResource_result setSuccess(java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getUserSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getUserSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserSpecificResource_result)
        return this.equals((getUserSpecificResource_result)that);
      return false;
    }

    public boolean equals(getUserSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserSpecificResource_resultStandardScheme getScheme() {
        return new getUserSpecificResource_resultStandardScheme();
      }
    }

    private static class getUserSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>(_list0.size);
                  org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserSpecificResource_resultTupleScheme getScheme() {
        return new getUserSpecificResource_resultTupleScheme();
      }
    }

    private static class getUserSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>(_list5.size);
            org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserSpecificResource_args implements org.apache.thrift.TBase<updateUserSpecificResource_args, updateUserSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LIST_USER_SPECIFIC_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("listUserSpecificResource", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required
    public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId"),
      LIST_USER_SPECIFIC_RESOURCE((short)3, "listUserSpecificResource");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // LIST_USER_SPECIFIC_RESOURCE
            return LIST_USER_SPECIFIC_RESOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LIST_USER_SPECIFIC_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("listUserSpecificResource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserSpecificResource_args.class, metaDataMap);
    }

    public updateUserSpecificResource_args() {
    }

    public updateUserSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId,
      java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.listUserSpecificResource = listUserSpecificResource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserSpecificResource_args(updateUserSpecificResource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
      if (other.isSetListUserSpecificResource()) {
        java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> __this__listUserSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>(other.listUserSpecificResource.size());
        for (org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail other_element : other.listUserSpecificResource) {
          __this__listUserSpecificResource.add(new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail(other_element));
        }
        this.listUserSpecificResource = __this__listUserSpecificResource;
      }
    }

    public updateUserSpecificResource_args deepCopy() {
      return new updateUserSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.listUserSpecificResource = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public updateUserSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public updateUserSpecificResource_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getListUserSpecificResourceSize() {
      return (this.listUserSpecificResource == null) ? 0 : this.listUserSpecificResource.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> getListUserSpecificResourceIterator() {
      return (this.listUserSpecificResource == null) ? null : this.listUserSpecificResource.iterator();
    }

    public void addToListUserSpecificResource(org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail elem) {
      if (this.listUserSpecificResource == null) {
        this.listUserSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>();
      }
      this.listUserSpecificResource.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> getListUserSpecificResource() {
      return this.listUserSpecificResource;
    }

    public updateUserSpecificResource_args setListUserSpecificResource(java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail> listUserSpecificResource) {
      this.listUserSpecificResource = listUserSpecificResource;
      return this;
    }

    public void unsetListUserSpecificResource() {
      this.listUserSpecificResource = null;
    }

    /** Returns true if field listUserSpecificResource is set (has been assigned a value) and false otherwise */
    public boolean isSetListUserSpecificResource() {
      return this.listUserSpecificResource != null;
    }

    public void setListUserSpecificResourceIsSet(boolean value) {
      if (!value) {
        this.listUserSpecificResource = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      case LIST_USER_SPECIFIC_RESOURCE:
        if (value == null) {
          unsetListUserSpecificResource();
        } else {
          setListUserSpecificResource((java.util.List<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      case LIST_USER_SPECIFIC_RESOURCE:
        return getListUserSpecificResource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      case LIST_USER_SPECIFIC_RESOURCE:
        return isSetListUserSpecificResource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserSpecificResource_args)
        return this.equals((updateUserSpecificResource_args)that);
      return false;
    }

    public boolean equals(updateUserSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_listUserSpecificResource = true && this.isSetListUserSpecificResource();
      boolean that_present_listUserSpecificResource = true && that.isSetListUserSpecificResource();
      if (this_present_listUserSpecificResource || that_present_listUserSpecificResource) {
        if (!(this_present_listUserSpecificResource && that_present_listUserSpecificResource))
          return false;
        if (!this.listUserSpecificResource.equals(that.listUserSpecificResource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      hashCode = hashCode * 8191 + ((isSetListUserSpecificResource()) ? 131071 : 524287);
      if (isSetListUserSpecificResource())
        hashCode = hashCode * 8191 + listUserSpecificResource.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetListUserSpecificResource()).compareTo(other.isSetListUserSpecificResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListUserSpecificResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listUserSpecificResource, other.listUserSpecificResource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("listUserSpecificResource:");
      if (this.listUserSpecificResource == null) {
        sb.append("null");
      } else {
        sb.append(this.listUserSpecificResource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      if (listUserSpecificResource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'listUserSpecificResource' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserSpecificResource_argsStandardScheme getScheme() {
        return new updateUserSpecificResource_argsStandardScheme();
      }
    }

    private static class updateUserSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIST_USER_SPECIFIC_RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.listUserSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>(_list8.size);
                  org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail();
                    _elem9.read(iprot);
                    struct.listUserSpecificResource.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setListUserSpecificResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.listUserSpecificResource != null) {
          oprot.writeFieldBegin(LIST_USER_SPECIFIC_RESOURCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listUserSpecificResource.size()));
            for (org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _iter11 : struct.listUserSpecificResource)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserSpecificResource_argsTupleScheme getScheme() {
        return new updateUserSpecificResource_argsTupleScheme();
      }
    }

    private static class updateUserSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
        {
          oprot.writeI32(struct.listUserSpecificResource.size());
          for (org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _iter12 : struct.listUserSpecificResource)
          {
            _iter12.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.listUserSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail>(_list13.size);
          org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new org.apache.airavata.allocation.manager.models.UserSpecificResourceDetail();
            _elem14.read(iprot);
            struct.listUserSpecificResource.add(_elem14);
          }
        }
        struct.setListUserSpecificResourceIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateUserSpecificResource_result implements org.apache.thrift.TBase<updateUserSpecificResource_result, updateUserSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateUserSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateUserSpecificResource_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserSpecificResource_result.class, metaDataMap);
    }

    public updateUserSpecificResource_result() {
    }

    public updateUserSpecificResource_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserSpecificResource_result(updateUserSpecificResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public updateUserSpecificResource_result deepCopy() {
      return new updateUserSpecificResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateUserSpecificResource_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public updateUserSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public updateUserSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserSpecificResource_result)
        return this.equals((updateUserSpecificResource_result)that);
      return false;
    }

    public boolean equals(updateUserSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateUserSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateUserSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserSpecificResource_resultStandardScheme getScheme() {
        return new updateUserSpecificResource_resultStandardScheme();
      }
    }

    private static class updateUserSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateUserSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateUserSpecificResource_resultTupleScheme getScheme() {
        return new updateUserSpecificResource_resultTupleScheme();
      }
    }

    private static class updateUserSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateUserSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllRequestsForAdmin_args implements org.apache.thrift.TBase<getAllRequestsForAdmin_args, getAllRequestsForAdmin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRequestsForAdmin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRequestsForAdmin_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllRequestsForAdmin_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllRequestsForAdmin_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public java.lang.String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      USER_NAME((short)2, "userName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRequestsForAdmin_args.class, metaDataMap);
    }

    public getAllRequestsForAdmin_args() {
    }

    public getAllRequestsForAdmin_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      java.lang.String userName)
    {
      this();
      this.authzToken = authzToken;
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRequestsForAdmin_args(getAllRequestsForAdmin_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public getAllRequestsForAdmin_args deepCopy() {
      return new getAllRequestsForAdmin_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.userName = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getAllRequestsForAdmin_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public java.lang.String getUserName() {
      return this.userName;
    }

    public getAllRequestsForAdmin_args setUserName(java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case USER_NAME:
        return getUserName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case USER_NAME:
        return isSetUserName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRequestsForAdmin_args)
        return this.equals((getAllRequestsForAdmin_args)that);
      return false;
    }

    public boolean equals(getAllRequestsForAdmin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllRequestsForAdmin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllRequestsForAdmin_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRequestsForAdmin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForAdmin_argsStandardScheme getScheme() {
        return new getAllRequestsForAdmin_argsStandardScheme();
      }
    }

    private static class getAllRequestsForAdmin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllRequestsForAdmin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRequestsForAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRequestsForAdmin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRequestsForAdmin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForAdmin_argsTupleScheme getScheme() {
        return new getAllRequestsForAdmin_argsTupleScheme();
      }
    }

    private static class getAllRequestsForAdmin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllRequestsForAdmin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeString(struct.userName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForAdmin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllRequestsForAdmin_result implements org.apache.thrift.TBase<getAllRequestsForAdmin_result, getAllRequestsForAdmin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRequestsForAdmin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRequestsForAdmin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllRequestsForAdmin_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllRequestsForAdmin_resultTupleSchemeFactory();

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserAllocationDetail.class))));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRequestsForAdmin_result.class, metaDataMap);
    }

    public getAllRequestsForAdmin_result() {
    }

    public getAllRequestsForAdmin_result(
      java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRequestsForAdmin_result(getAllRequestsForAdmin_result other) {
      if (other.isSetSuccess()) {
        java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> __this__success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>(other.success.size());
        for (org.apache.airavata.allocation.manager.models.UserAllocationDetail other_element : other.success) {
          __this__success.add(new org.apache.airavata.allocation.manager.models.UserAllocationDetail(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getAllRequestsForAdmin_result deepCopy() {
      return new getAllRequestsForAdmin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ame = null;
      this.ae = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.allocation.manager.models.UserAllocationDetail elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>();
      }
      this.success.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getSuccess() {
      return this.success;
    }

    public getAllRequestsForAdmin_result setSuccess(java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getAllRequestsForAdmin_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getAllRequestsForAdmin_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRequestsForAdmin_result)
        return this.equals((getAllRequestsForAdmin_result)that);
      return false;
    }

    public boolean equals(getAllRequestsForAdmin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllRequestsForAdmin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllRequestsForAdmin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRequestsForAdmin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForAdmin_resultStandardScheme getScheme() {
        return new getAllRequestsForAdmin_resultStandardScheme();
      }
    }

    private static class getAllRequestsForAdmin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllRequestsForAdmin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRequestsForAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>(_list16.size);
                  org.apache.airavata.allocation.manager.models.UserAllocationDetail _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRequestsForAdmin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.allocation.manager.models.UserAllocationDetail _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRequestsForAdmin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForAdmin_resultTupleScheme getScheme() {
        return new getAllRequestsForAdmin_resultTupleScheme();
      }
    }

    private static class getAllRequestsForAdmin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllRequestsForAdmin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.allocation.manager.models.UserAllocationDetail _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForAdmin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>(_list21.size);
            org.apache.airavata.allocation.manager.models.UserAllocationDetail _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class assignReviewers_args implements org.apache.thrift.TBase<assignReviewers_args, assignReviewers_args._Fields>, java.io.Serializable, Cloneable, Comparable<assignReviewers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignReviewers_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField REVIEWER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewerId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ADMIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adminId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new assignReviewers_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new assignReviewers_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required
    public java.lang.String reviewerId; // required
    public java.lang.String adminId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId"),
      REVIEWER_ID((short)3, "reviewerId"),
      ADMIN_ID((short)4, "adminId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // REVIEWER_ID
            return REVIEWER_ID;
          case 4: // ADMIN_ID
            return ADMIN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REVIEWER_ID, new org.apache.thrift.meta_data.FieldMetaData("reviewerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADMIN_ID, new org.apache.thrift.meta_data.FieldMetaData("adminId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignReviewers_args.class, metaDataMap);
    }

    public assignReviewers_args() {
    }

    public assignReviewers_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId,
      java.lang.String reviewerId,
      java.lang.String adminId)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.reviewerId = reviewerId;
      this.adminId = adminId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignReviewers_args(assignReviewers_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
      if (other.isSetReviewerId()) {
        this.reviewerId = other.reviewerId;
      }
      if (other.isSetAdminId()) {
        this.adminId = other.adminId;
      }
    }

    public assignReviewers_args deepCopy() {
      return new assignReviewers_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.reviewerId = null;
      this.adminId = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public assignReviewers_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public assignReviewers_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public java.lang.String getReviewerId() {
      return this.reviewerId;
    }

    public assignReviewers_args setReviewerId(java.lang.String reviewerId) {
      this.reviewerId = reviewerId;
      return this;
    }

    public void unsetReviewerId() {
      this.reviewerId = null;
    }

    /** Returns true if field reviewerId is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewerId() {
      return this.reviewerId != null;
    }

    public void setReviewerIdIsSet(boolean value) {
      if (!value) {
        this.reviewerId = null;
      }
    }

    public java.lang.String getAdminId() {
      return this.adminId;
    }

    public assignReviewers_args setAdminId(java.lang.String adminId) {
      this.adminId = adminId;
      return this;
    }

    public void unsetAdminId() {
      this.adminId = null;
    }

    /** Returns true if field adminId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminId() {
      return this.adminId != null;
    }

    public void setAdminIdIsSet(boolean value) {
      if (!value) {
        this.adminId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      case REVIEWER_ID:
        if (value == null) {
          unsetReviewerId();
        } else {
          setReviewerId((java.lang.String)value);
        }
        break;

      case ADMIN_ID:
        if (value == null) {
          unsetAdminId();
        } else {
          setAdminId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      case REVIEWER_ID:
        return getReviewerId();

      case ADMIN_ID:
        return getAdminId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      case REVIEWER_ID:
        return isSetReviewerId();
      case ADMIN_ID:
        return isSetAdminId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof assignReviewers_args)
        return this.equals((assignReviewers_args)that);
      return false;
    }

    public boolean equals(assignReviewers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_reviewerId = true && this.isSetReviewerId();
      boolean that_present_reviewerId = true && that.isSetReviewerId();
      if (this_present_reviewerId || that_present_reviewerId) {
        if (!(this_present_reviewerId && that_present_reviewerId))
          return false;
        if (!this.reviewerId.equals(that.reviewerId))
          return false;
      }

      boolean this_present_adminId = true && this.isSetAdminId();
      boolean that_present_adminId = true && that.isSetAdminId();
      if (this_present_adminId || that_present_adminId) {
        if (!(this_present_adminId && that_present_adminId))
          return false;
        if (!this.adminId.equals(that.adminId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      hashCode = hashCode * 8191 + ((isSetReviewerId()) ? 131071 : 524287);
      if (isSetReviewerId())
        hashCode = hashCode * 8191 + reviewerId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAdminId()) ? 131071 : 524287);
      if (isSetAdminId())
        hashCode = hashCode * 8191 + adminId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(assignReviewers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReviewerId()).compareTo(other.isSetReviewerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewerId, other.reviewerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAdminId()).compareTo(other.isSetAdminId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminId, other.adminId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("assignReviewers_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewerId:");
      if (this.reviewerId == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adminId:");
      if (this.adminId == null) {
        sb.append("null");
      } else {
        sb.append(this.adminId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      if (reviewerId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reviewerId' was not present! Struct: " + toString());
      }
      if (adminId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adminId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignReviewers_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public assignReviewers_argsStandardScheme getScheme() {
        return new assignReviewers_argsStandardScheme();
      }
    }

    private static class assignReviewers_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<assignReviewers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignReviewers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REVIEWER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewerId = iprot.readString();
                struct.setReviewerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ADMIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adminId = iprot.readString();
                struct.setAdminIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignReviewers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.reviewerId != null) {
          oprot.writeFieldBegin(REVIEWER_ID_FIELD_DESC);
          oprot.writeString(struct.reviewerId);
          oprot.writeFieldEnd();
        }
        if (struct.adminId != null) {
          oprot.writeFieldBegin(ADMIN_ID_FIELD_DESC);
          oprot.writeString(struct.adminId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignReviewers_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public assignReviewers_argsTupleScheme getScheme() {
        return new assignReviewers_argsTupleScheme();
      }
    }

    private static class assignReviewers_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<assignReviewers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignReviewers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
        oprot.writeString(struct.reviewerId);
        oprot.writeString(struct.adminId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignReviewers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
        struct.reviewerId = iprot.readString();
        struct.setReviewerIdIsSet(true);
        struct.adminId = iprot.readString();
        struct.setAdminIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class assignReviewers_result implements org.apache.thrift.TBase<assignReviewers_result, assignReviewers_result._Fields>, java.io.Serializable, Cloneable, Comparable<assignReviewers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignReviewers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new assignReviewers_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new assignReviewers_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignReviewers_result.class, metaDataMap);
    }

    public assignReviewers_result() {
    }

    public assignReviewers_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignReviewers_result(assignReviewers_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public assignReviewers_result deepCopy() {
      return new assignReviewers_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public assignReviewers_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public assignReviewers_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public assignReviewers_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof assignReviewers_result)
        return this.equals((assignReviewers_result)that);
      return false;
    }

    public boolean equals(assignReviewers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(assignReviewers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("assignReviewers_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignReviewers_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public assignReviewers_resultStandardScheme getScheme() {
        return new assignReviewers_resultStandardScheme();
      }
    }

    private static class assignReviewers_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<assignReviewers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignReviewers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignReviewers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignReviewers_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public assignReviewers_resultTupleScheme getScheme() {
        return new assignReviewers_resultTupleScheme();
      }
    }

    private static class assignReviewers_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<assignReviewers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignReviewers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignReviewers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateRequestByReviewer_args implements org.apache.thrift.TBase<updateRequestByReviewer_args, updateRequestByReviewer_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRequestByReviewer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRequestByReviewer_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REVIEWER_ALLOCATION_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewerAllocationDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateRequestByReviewer_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateRequestByReviewer_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      REVIEWER_ALLOCATION_DETAIL((short)2, "reviewerAllocationDetail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // REVIEWER_ALLOCATION_DETAIL
            return REVIEWER_ALLOCATION_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.REVIEWER_ALLOCATION_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("reviewerAllocationDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRequestByReviewer_args.class, metaDataMap);
    }

    public updateRequestByReviewer_args() {
    }

    public updateRequestByReviewer_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail)
    {
      this();
      this.authzToken = authzToken;
      this.reviewerAllocationDetail = reviewerAllocationDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRequestByReviewer_args(updateRequestByReviewer_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetReviewerAllocationDetail()) {
        this.reviewerAllocationDetail = new org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail(other.reviewerAllocationDetail);
      }
    }

    public updateRequestByReviewer_args deepCopy() {
      return new updateRequestByReviewer_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.reviewerAllocationDetail = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public updateRequestByReviewer_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail getReviewerAllocationDetail() {
      return this.reviewerAllocationDetail;
    }

    public updateRequestByReviewer_args setReviewerAllocationDetail(org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail reviewerAllocationDetail) {
      this.reviewerAllocationDetail = reviewerAllocationDetail;
      return this;
    }

    public void unsetReviewerAllocationDetail() {
      this.reviewerAllocationDetail = null;
    }

    /** Returns true if field reviewerAllocationDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewerAllocationDetail() {
      return this.reviewerAllocationDetail != null;
    }

    public void setReviewerAllocationDetailIsSet(boolean value) {
      if (!value) {
        this.reviewerAllocationDetail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case REVIEWER_ALLOCATION_DETAIL:
        if (value == null) {
          unsetReviewerAllocationDetail();
        } else {
          setReviewerAllocationDetail((org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case REVIEWER_ALLOCATION_DETAIL:
        return getReviewerAllocationDetail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case REVIEWER_ALLOCATION_DETAIL:
        return isSetReviewerAllocationDetail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRequestByReviewer_args)
        return this.equals((updateRequestByReviewer_args)that);
      return false;
    }

    public boolean equals(updateRequestByReviewer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_reviewerAllocationDetail = true && this.isSetReviewerAllocationDetail();
      boolean that_present_reviewerAllocationDetail = true && that.isSetReviewerAllocationDetail();
      if (this_present_reviewerAllocationDetail || that_present_reviewerAllocationDetail) {
        if (!(this_present_reviewerAllocationDetail && that_present_reviewerAllocationDetail))
          return false;
        if (!this.reviewerAllocationDetail.equals(that.reviewerAllocationDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetReviewerAllocationDetail()) ? 131071 : 524287);
      if (isSetReviewerAllocationDetail())
        hashCode = hashCode * 8191 + reviewerAllocationDetail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateRequestByReviewer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReviewerAllocationDetail()).compareTo(other.isSetReviewerAllocationDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewerAllocationDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewerAllocationDetail, other.reviewerAllocationDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateRequestByReviewer_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewerAllocationDetail:");
      if (this.reviewerAllocationDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewerAllocationDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (reviewerAllocationDetail == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reviewerAllocationDetail' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
      if (reviewerAllocationDetail != null) {
        reviewerAllocationDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRequestByReviewer_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRequestByReviewer_argsStandardScheme getScheme() {
        return new updateRequestByReviewer_argsStandardScheme();
      }
    }

    private static class updateRequestByReviewer_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateRequestByReviewer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRequestByReviewer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REVIEWER_ALLOCATION_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reviewerAllocationDetail = new org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail();
                struct.reviewerAllocationDetail.read(iprot);
                struct.setReviewerAllocationDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRequestByReviewer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.reviewerAllocationDetail != null) {
          oprot.writeFieldBegin(REVIEWER_ALLOCATION_DETAIL_FIELD_DESC);
          struct.reviewerAllocationDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRequestByReviewer_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRequestByReviewer_argsTupleScheme getScheme() {
        return new updateRequestByReviewer_argsTupleScheme();
      }
    }

    private static class updateRequestByReviewer_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateRequestByReviewer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRequestByReviewer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        struct.reviewerAllocationDetail.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRequestByReviewer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.reviewerAllocationDetail = new org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail();
        struct.reviewerAllocationDetail.read(iprot);
        struct.setReviewerAllocationDetailIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateRequestByReviewer_result implements org.apache.thrift.TBase<updateRequestByReviewer_result, updateRequestByReviewer_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRequestByReviewer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRequestByReviewer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateRequestByReviewer_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateRequestByReviewer_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRequestByReviewer_result.class, metaDataMap);
    }

    public updateRequestByReviewer_result() {
    }

    public updateRequestByReviewer_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRequestByReviewer_result(updateRequestByReviewer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public updateRequestByReviewer_result deepCopy() {
      return new updateRequestByReviewer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateRequestByReviewer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public updateRequestByReviewer_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public updateRequestByReviewer_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRequestByReviewer_result)
        return this.equals((updateRequestByReviewer_result)that);
      return false;
    }

    public boolean equals(updateRequestByReviewer_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateRequestByReviewer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateRequestByReviewer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRequestByReviewer_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRequestByReviewer_resultStandardScheme getScheme() {
        return new updateRequestByReviewer_resultStandardScheme();
      }
    }

    private static class updateRequestByReviewer_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateRequestByReviewer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRequestByReviewer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRequestByReviewer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRequestByReviewer_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateRequestByReviewer_resultTupleScheme getScheme() {
        return new updateRequestByReviewer_resultTupleScheme();
      }
    }

    private static class updateRequestByReviewer_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateRequestByReviewer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRequestByReviewer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRequestByReviewer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllRequestsForReviewers_args implements org.apache.thrift.TBase<getAllRequestsForReviewers_args, getAllRequestsForReviewers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRequestsForReviewers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRequestsForReviewers_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllRequestsForReviewers_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllRequestsForReviewers_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public java.lang.String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      USER_NAME((short)2, "userName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRequestsForReviewers_args.class, metaDataMap);
    }

    public getAllRequestsForReviewers_args() {
    }

    public getAllRequestsForReviewers_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      java.lang.String userName)
    {
      this();
      this.authzToken = authzToken;
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRequestsForReviewers_args(getAllRequestsForReviewers_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public getAllRequestsForReviewers_args deepCopy() {
      return new getAllRequestsForReviewers_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.userName = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getAllRequestsForReviewers_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public java.lang.String getUserName() {
      return this.userName;
    }

    public getAllRequestsForReviewers_args setUserName(java.lang.String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case USER_NAME:
        return getUserName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case USER_NAME:
        return isSetUserName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRequestsForReviewers_args)
        return this.equals((getAllRequestsForReviewers_args)that);
      return false;
    }

    public boolean equals(getAllRequestsForReviewers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllRequestsForReviewers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllRequestsForReviewers_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRequestsForReviewers_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForReviewers_argsStandardScheme getScheme() {
        return new getAllRequestsForReviewers_argsStandardScheme();
      }
    }

    private static class getAllRequestsForReviewers_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllRequestsForReviewers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRequestsForReviewers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRequestsForReviewers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRequestsForReviewers_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForReviewers_argsTupleScheme getScheme() {
        return new getAllRequestsForReviewers_argsTupleScheme();
      }
    }

    private static class getAllRequestsForReviewers_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllRequestsForReviewers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForReviewers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeString(struct.userName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForReviewers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllRequestsForReviewers_result implements org.apache.thrift.TBase<getAllRequestsForReviewers_result, getAllRequestsForReviewers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRequestsForReviewers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRequestsForReviewers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllRequestsForReviewers_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllRequestsForReviewers_resultTupleSchemeFactory();

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.UserAllocationDetail.class))));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRequestsForReviewers_result.class, metaDataMap);
    }

    public getAllRequestsForReviewers_result() {
    }

    public getAllRequestsForReviewers_result(
      java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRequestsForReviewers_result(getAllRequestsForReviewers_result other) {
      if (other.isSetSuccess()) {
        java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> __this__success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>(other.success.size());
        for (org.apache.airavata.allocation.manager.models.UserAllocationDetail other_element : other.success) {
          __this__success.add(new org.apache.airavata.allocation.manager.models.UserAllocationDetail(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getAllRequestsForReviewers_result deepCopy() {
      return new getAllRequestsForReviewers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ame = null;
      this.ae = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.allocation.manager.models.UserAllocationDetail elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>();
      }
      this.success.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> getSuccess() {
      return this.success;
    }

    public getAllRequestsForReviewers_result setSuccess(java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getAllRequestsForReviewers_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getAllRequestsForReviewers_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<org.apache.airavata.allocation.manager.models.UserAllocationDetail>)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRequestsForReviewers_result)
        return this.equals((getAllRequestsForReviewers_result)that);
      return false;
    }

    public boolean equals(getAllRequestsForReviewers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllRequestsForReviewers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllRequestsForReviewers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRequestsForReviewers_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForReviewers_resultStandardScheme getScheme() {
        return new getAllRequestsForReviewers_resultStandardScheme();
      }
    }

    private static class getAllRequestsForReviewers_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllRequestsForReviewers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRequestsForReviewers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>(_list24.size);
                  org.apache.airavata.allocation.manager.models.UserAllocationDetail _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRequestsForReviewers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.allocation.manager.models.UserAllocationDetail _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRequestsForReviewers_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllRequestsForReviewers_resultTupleScheme getScheme() {
        return new getAllRequestsForReviewers_resultTupleScheme();
      }
    }

    private static class getAllRequestsForReviewers_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllRequestsForReviewers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForReviewers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.allocation.manager.models.UserAllocationDetail _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRequestsForReviewers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.UserAllocationDetail>(_list29.size);
            org.apache.airavata.allocation.manager.models.UserAllocationDetail _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new org.apache.airavata.allocation.manager.models.UserAllocationDetail();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllReviewsForARequest_args implements org.apache.thrift.TBase<getAllReviewsForARequest_args, getAllReviewsForARequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllReviewsForARequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllReviewsForARequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllReviewsForARequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllReviewsForARequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllReviewsForARequest_args.class, metaDataMap);
    }

    public getAllReviewsForARequest_args() {
    }

    public getAllReviewsForARequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllReviewsForARequest_args(getAllReviewsForARequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
    }

    public getAllReviewsForARequest_args deepCopy() {
      return new getAllReviewsForARequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getAllReviewsForARequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public getAllReviewsForARequest_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllReviewsForARequest_args)
        return this.equals((getAllReviewsForARequest_args)that);
      return false;
    }

    public boolean equals(getAllReviewsForARequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      return hashCode;
    }

    @Override
    public int compareTo(getAllReviewsForARequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllReviewsForARequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllReviewsForARequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllReviewsForARequest_argsStandardScheme getScheme() {
        return new getAllReviewsForARequest_argsStandardScheme();
      }
    }

    private static class getAllReviewsForARequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllReviewsForARequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllReviewsForARequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllReviewsForARequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllReviewsForARequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllReviewsForARequest_argsTupleScheme getScheme() {
        return new getAllReviewsForARequest_argsTupleScheme();
      }
    }

    private static class getAllReviewsForARequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllReviewsForARequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllReviewsForARequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllReviewsForARequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllReviewsForARequest_result implements org.apache.thrift.TBase<getAllReviewsForARequest_result, getAllReviewsForARequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllReviewsForARequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllReviewsForARequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllReviewsForARequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllReviewsForARequest_resultTupleSchemeFactory();

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail.class))));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllReviewsForARequest_result.class, metaDataMap);
    }

    public getAllReviewsForARequest_result() {
    }

    public getAllReviewsForARequest_result(
      java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllReviewsForARequest_result(getAllReviewsForARequest_result other) {
      if (other.isSetSuccess()) {
        java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> __this__success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>(other.success.size());
        for (org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail other_element : other.success) {
          __this__success.add(new org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getAllReviewsForARequest_result deepCopy() {
      return new getAllReviewsForARequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ame = null;
      this.ae = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>();
      }
      this.success.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> getSuccess() {
      return this.success;
    }

    public getAllReviewsForARequest_result setSuccess(java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getAllReviewsForARequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getAllReviewsForARequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllReviewsForARequest_result)
        return this.equals((getAllReviewsForARequest_result)that);
      return false;
    }

    public boolean equals(getAllReviewsForARequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllReviewsForARequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllReviewsForARequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllReviewsForARequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllReviewsForARequest_resultStandardScheme getScheme() {
        return new getAllReviewsForARequest_resultStandardScheme();
      }
    }

    private static class getAllReviewsForARequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllReviewsForARequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllReviewsForARequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>(_list32.size);
                  org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllReviewsForARequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllReviewsForARequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllReviewsForARequest_resultTupleScheme getScheme() {
        return new getAllReviewsForARequest_resultTupleScheme();
      }
    }

    private static class getAllReviewsForARequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllReviewsForARequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllReviewsForARequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllReviewsForARequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail>(_list37.size);
            org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new org.apache.airavata.allocation.manager.models.ReviewerAllocationDetail();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createReviewerSpecificResource_args implements org.apache.thrift.TBase<createReviewerSpecificResource_args, createReviewerSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<createReviewerSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createReviewerSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ALLOC_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("allocDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createReviewerSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createReviewerSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      ALLOC_DETAIL((short)2, "allocDetail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // ALLOC_DETAIL
            return ALLOC_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.ALLOC_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("allocDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createReviewerSpecificResource_args.class, metaDataMap);
    }

    public createReviewerSpecificResource_args() {
    }

    public createReviewerSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail)
    {
      this();
      this.authzToken = authzToken;
      this.allocDetail = allocDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createReviewerSpecificResource_args(createReviewerSpecificResource_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetAllocDetail()) {
        this.allocDetail = new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail(other.allocDetail);
      }
    }

    public createReviewerSpecificResource_args deepCopy() {
      return new createReviewerSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.allocDetail = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public createReviewerSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail getAllocDetail() {
      return this.allocDetail;
    }

    public createReviewerSpecificResource_args setAllocDetail(org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail allocDetail) {
      this.allocDetail = allocDetail;
      return this;
    }

    public void unsetAllocDetail() {
      this.allocDetail = null;
    }

    /** Returns true if field allocDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetAllocDetail() {
      return this.allocDetail != null;
    }

    public void setAllocDetailIsSet(boolean value) {
      if (!value) {
        this.allocDetail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case ALLOC_DETAIL:
        if (value == null) {
          unsetAllocDetail();
        } else {
          setAllocDetail((org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case ALLOC_DETAIL:
        return getAllocDetail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case ALLOC_DETAIL:
        return isSetAllocDetail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createReviewerSpecificResource_args)
        return this.equals((createReviewerSpecificResource_args)that);
      return false;
    }

    public boolean equals(createReviewerSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_allocDetail = true && this.isSetAllocDetail();
      boolean that_present_allocDetail = true && that.isSetAllocDetail();
      if (this_present_allocDetail || that_present_allocDetail) {
        if (!(this_present_allocDetail && that_present_allocDetail))
          return false;
        if (!this.allocDetail.equals(that.allocDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetAllocDetail()) ? 131071 : 524287);
      if (isSetAllocDetail())
        hashCode = hashCode * 8191 + allocDetail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createReviewerSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAllocDetail()).compareTo(other.isSetAllocDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllocDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocDetail, other.allocDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createReviewerSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allocDetail:");
      if (this.allocDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.allocDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (allocDetail == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'allocDetail' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
      if (allocDetail != null) {
        allocDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createReviewerSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewerSpecificResource_argsStandardScheme getScheme() {
        return new createReviewerSpecificResource_argsStandardScheme();
      }
    }

    private static class createReviewerSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createReviewerSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ALLOC_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.allocDetail = new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail();
                struct.allocDetail.read(iprot);
                struct.setAllocDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.allocDetail != null) {
          oprot.writeFieldBegin(ALLOC_DETAIL_FIELD_DESC);
          struct.allocDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createReviewerSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewerSpecificResource_argsTupleScheme getScheme() {
        return new createReviewerSpecificResource_argsTupleScheme();
      }
    }

    private static class createReviewerSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createReviewerSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        struct.allocDetail.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.allocDetail = new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail();
        struct.allocDetail.read(iprot);
        struct.setAllocDetailIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createReviewerSpecificResource_result implements org.apache.thrift.TBase<createReviewerSpecificResource_result, createReviewerSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<createReviewerSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createReviewerSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createReviewerSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createReviewerSpecificResource_resultTupleSchemeFactory();

    public long success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createReviewerSpecificResource_result.class, metaDataMap);
    }

    public createReviewerSpecificResource_result() {
    }

    public createReviewerSpecificResource_result(
      long success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createReviewerSpecificResource_result(createReviewerSpecificResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public createReviewerSpecificResource_result deepCopy() {
      return new createReviewerSpecificResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ame = null;
      this.ae = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public createReviewerSpecificResource_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public createReviewerSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public createReviewerSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createReviewerSpecificResource_result)
        return this.equals((createReviewerSpecificResource_result)that);
      return false;
    }

    public boolean equals(createReviewerSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createReviewerSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createReviewerSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createReviewerSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewerSpecificResource_resultStandardScheme getScheme() {
        return new createReviewerSpecificResource_resultStandardScheme();
      }
    }

    private static class createReviewerSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createReviewerSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createReviewerSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewerSpecificResource_resultTupleScheme getScheme() {
        return new createReviewerSpecificResource_resultTupleScheme();
      }
    }

    private static class createReviewerSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createReviewerSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteReviewerSpecificResource_args implements org.apache.thrift.TBase<deleteReviewerSpecificResource_args, deleteReviewerSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteReviewerSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteReviewerSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResource", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteReviewerSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteReviewerSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required
    public java.lang.String specificResource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId"),
      SPECIFIC_RESOURCE((short)3, "specificResource");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // SPECIFIC_RESOURCE
            return SPECIFIC_RESOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SPECIFIC_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("specificResource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteReviewerSpecificResource_args.class, metaDataMap);
    }

    public deleteReviewerSpecificResource_args() {
    }

    public deleteReviewerSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId,
      java.lang.String specificResource)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.specificResource = specificResource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteReviewerSpecificResource_args(deleteReviewerSpecificResource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
      if (other.isSetSpecificResource()) {
        this.specificResource = other.specificResource;
      }
    }

    public deleteReviewerSpecificResource_args deepCopy() {
      return new deleteReviewerSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.specificResource = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public deleteReviewerSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public deleteReviewerSpecificResource_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public java.lang.String getSpecificResource() {
      return this.specificResource;
    }

    public deleteReviewerSpecificResource_args setSpecificResource(java.lang.String specificResource) {
      this.specificResource = specificResource;
      return this;
    }

    public void unsetSpecificResource() {
      this.specificResource = null;
    }

    /** Returns true if field specificResource is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecificResource() {
      return this.specificResource != null;
    }

    public void setSpecificResourceIsSet(boolean value) {
      if (!value) {
        this.specificResource = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      case SPECIFIC_RESOURCE:
        if (value == null) {
          unsetSpecificResource();
        } else {
          setSpecificResource((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      case SPECIFIC_RESOURCE:
        return getSpecificResource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      case SPECIFIC_RESOURCE:
        return isSetSpecificResource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteReviewerSpecificResource_args)
        return this.equals((deleteReviewerSpecificResource_args)that);
      return false;
    }

    public boolean equals(deleteReviewerSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_specificResource = true && this.isSetSpecificResource();
      boolean that_present_specificResource = true && that.isSetSpecificResource();
      if (this_present_specificResource || that_present_specificResource) {
        if (!(this_present_specificResource && that_present_specificResource))
          return false;
        if (!this.specificResource.equals(that.specificResource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      hashCode = hashCode * 8191 + ((isSetSpecificResource()) ? 131071 : 524287);
      if (isSetSpecificResource())
        hashCode = hashCode * 8191 + specificResource.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteReviewerSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpecificResource()).compareTo(other.isSetSpecificResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecificResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResource, other.specificResource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteReviewerSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("specificResource:");
      if (this.specificResource == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      if (specificResource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specificResource' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteReviewerSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteReviewerSpecificResource_argsStandardScheme getScheme() {
        return new deleteReviewerSpecificResource_argsStandardScheme();
      }
    }

    private static class deleteReviewerSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteReviewerSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SPECIFIC_RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.specificResource = iprot.readString();
                struct.setSpecificResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.specificResource != null) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_FIELD_DESC);
          oprot.writeString(struct.specificResource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteReviewerSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteReviewerSpecificResource_argsTupleScheme getScheme() {
        return new deleteReviewerSpecificResource_argsTupleScheme();
      }
    }

    private static class deleteReviewerSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteReviewerSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
        oprot.writeString(struct.specificResource);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
        struct.specificResource = iprot.readString();
        struct.setSpecificResourceIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteReviewerSpecificResource_result implements org.apache.thrift.TBase<deleteReviewerSpecificResource_result, deleteReviewerSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteReviewerSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteReviewerSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteReviewerSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteReviewerSpecificResource_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteReviewerSpecificResource_result.class, metaDataMap);
    }

    public deleteReviewerSpecificResource_result() {
    }

    public deleteReviewerSpecificResource_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteReviewerSpecificResource_result(deleteReviewerSpecificResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public deleteReviewerSpecificResource_result deepCopy() {
      return new deleteReviewerSpecificResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteReviewerSpecificResource_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public deleteReviewerSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public deleteReviewerSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteReviewerSpecificResource_result)
        return this.equals((deleteReviewerSpecificResource_result)that);
      return false;
    }

    public boolean equals(deleteReviewerSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteReviewerSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteReviewerSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteReviewerSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteReviewerSpecificResource_resultStandardScheme getScheme() {
        return new deleteReviewerSpecificResource_resultStandardScheme();
      }
    }

    private static class deleteReviewerSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteReviewerSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteReviewerSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteReviewerSpecificResource_resultTupleScheme getScheme() {
        return new deleteReviewerSpecificResource_resultTupleScheme();
      }
    }

    private static class deleteReviewerSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteReviewerSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReviewerSpecificResource_args implements org.apache.thrift.TBase<getReviewerSpecificResource_args, getReviewerSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReviewerSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReviewerSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReviewerSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReviewerSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReviewerSpecificResource_args.class, metaDataMap);
    }

    public getReviewerSpecificResource_args() {
    }

    public getReviewerSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReviewerSpecificResource_args(getReviewerSpecificResource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
    }

    public getReviewerSpecificResource_args deepCopy() {
      return new getReviewerSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getReviewerSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public getReviewerSpecificResource_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReviewerSpecificResource_args)
        return this.equals((getReviewerSpecificResource_args)that);
      return false;
    }

    public boolean equals(getReviewerSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      return hashCode;
    }

    @Override
    public int compareTo(getReviewerSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReviewerSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReviewerSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReviewerSpecificResource_argsStandardScheme getScheme() {
        return new getReviewerSpecificResource_argsStandardScheme();
      }
    }

    private static class getReviewerSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReviewerSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReviewerSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReviewerSpecificResource_argsTupleScheme getScheme() {
        return new getReviewerSpecificResource_argsTupleScheme();
      }
    }

    private static class getReviewerSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReviewerSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReviewerSpecificResource_result implements org.apache.thrift.TBase<getReviewerSpecificResource_result, getReviewerSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReviewerSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReviewerSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReviewerSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReviewerSpecificResource_resultTupleSchemeFactory();

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail.class))));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReviewerSpecificResource_result.class, metaDataMap);
    }

    public getReviewerSpecificResource_result() {
    }

    public getReviewerSpecificResource_result(
      java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReviewerSpecificResource_result(getReviewerSpecificResource_result other) {
      if (other.isSetSuccess()) {
        java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> __this__success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>(other.success.size());
        for (org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail other_element : other.success) {
          __this__success.add(new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getReviewerSpecificResource_result deepCopy() {
      return new getReviewerSpecificResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ame = null;
      this.ae = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>();
      }
      this.success.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> getSuccess() {
      return this.success;
    }

    public getReviewerSpecificResource_result setSuccess(java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getReviewerSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getReviewerSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReviewerSpecificResource_result)
        return this.equals((getReviewerSpecificResource_result)that);
      return false;
    }

    public boolean equals(getReviewerSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReviewerSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReviewerSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReviewerSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReviewerSpecificResource_resultStandardScheme getScheme() {
        return new getReviewerSpecificResource_resultStandardScheme();
      }
    }

    private static class getReviewerSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReviewerSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>(_list40.size);
                  org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReviewerSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReviewerSpecificResource_resultTupleScheme getScheme() {
        return new getReviewerSpecificResource_resultTupleScheme();
      }
    }

    private static class getReviewerSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReviewerSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>(_list45.size);
            org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateReviewerSpecificResource_args implements org.apache.thrift.TBase<updateReviewerSpecificResource_args, updateReviewerSpecificResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateReviewerSpecificResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateReviewerSpecificResource_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LIST_REVIEWER_SPECIFIC_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("listReviewerSpecificResource", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateReviewerSpecificResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateReviewerSpecificResource_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required
    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId"),
      LIST_REVIEWER_SPECIFIC_RESOURCE((short)3, "listReviewerSpecificResource");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // LIST_REVIEWER_SPECIFIC_RESOURCE
            return LIST_REVIEWER_SPECIFIC_RESOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LIST_REVIEWER_SPECIFIC_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("listReviewerSpecificResource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateReviewerSpecificResource_args.class, metaDataMap);
    }

    public updateReviewerSpecificResource_args() {
    }

    public updateReviewerSpecificResource_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId,
      java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.listReviewerSpecificResource = listReviewerSpecificResource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateReviewerSpecificResource_args(updateReviewerSpecificResource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
      if (other.isSetListReviewerSpecificResource()) {
        java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> __this__listReviewerSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>(other.listReviewerSpecificResource.size());
        for (org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail other_element : other.listReviewerSpecificResource) {
          __this__listReviewerSpecificResource.add(new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail(other_element));
        }
        this.listReviewerSpecificResource = __this__listReviewerSpecificResource;
      }
    }

    public updateReviewerSpecificResource_args deepCopy() {
      return new updateReviewerSpecificResource_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.listReviewerSpecificResource = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public updateReviewerSpecificResource_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public updateReviewerSpecificResource_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getListReviewerSpecificResourceSize() {
      return (this.listReviewerSpecificResource == null) ? 0 : this.listReviewerSpecificResource.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> getListReviewerSpecificResourceIterator() {
      return (this.listReviewerSpecificResource == null) ? null : this.listReviewerSpecificResource.iterator();
    }

    public void addToListReviewerSpecificResource(org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail elem) {
      if (this.listReviewerSpecificResource == null) {
        this.listReviewerSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>();
      }
      this.listReviewerSpecificResource.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> getListReviewerSpecificResource() {
      return this.listReviewerSpecificResource;
    }

    public updateReviewerSpecificResource_args setListReviewerSpecificResource(java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail> listReviewerSpecificResource) {
      this.listReviewerSpecificResource = listReviewerSpecificResource;
      return this;
    }

    public void unsetListReviewerSpecificResource() {
      this.listReviewerSpecificResource = null;
    }

    /** Returns true if field listReviewerSpecificResource is set (has been assigned a value) and false otherwise */
    public boolean isSetListReviewerSpecificResource() {
      return this.listReviewerSpecificResource != null;
    }

    public void setListReviewerSpecificResourceIsSet(boolean value) {
      if (!value) {
        this.listReviewerSpecificResource = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      case LIST_REVIEWER_SPECIFIC_RESOURCE:
        if (value == null) {
          unsetListReviewerSpecificResource();
        } else {
          setListReviewerSpecificResource((java.util.List<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      case LIST_REVIEWER_SPECIFIC_RESOURCE:
        return getListReviewerSpecificResource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      case LIST_REVIEWER_SPECIFIC_RESOURCE:
        return isSetListReviewerSpecificResource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateReviewerSpecificResource_args)
        return this.equals((updateReviewerSpecificResource_args)that);
      return false;
    }

    public boolean equals(updateReviewerSpecificResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_listReviewerSpecificResource = true && this.isSetListReviewerSpecificResource();
      boolean that_present_listReviewerSpecificResource = true && that.isSetListReviewerSpecificResource();
      if (this_present_listReviewerSpecificResource || that_present_listReviewerSpecificResource) {
        if (!(this_present_listReviewerSpecificResource && that_present_listReviewerSpecificResource))
          return false;
        if (!this.listReviewerSpecificResource.equals(that.listReviewerSpecificResource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      hashCode = hashCode * 8191 + ((isSetListReviewerSpecificResource()) ? 131071 : 524287);
      if (isSetListReviewerSpecificResource())
        hashCode = hashCode * 8191 + listReviewerSpecificResource.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateReviewerSpecificResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetListReviewerSpecificResource()).compareTo(other.isSetListReviewerSpecificResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListReviewerSpecificResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listReviewerSpecificResource, other.listReviewerSpecificResource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateReviewerSpecificResource_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("listReviewerSpecificResource:");
      if (this.listReviewerSpecificResource == null) {
        sb.append("null");
      } else {
        sb.append(this.listReviewerSpecificResource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      if (listReviewerSpecificResource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'listReviewerSpecificResource' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateReviewerSpecificResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateReviewerSpecificResource_argsStandardScheme getScheme() {
        return new updateReviewerSpecificResource_argsStandardScheme();
      }
    }

    private static class updateReviewerSpecificResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateReviewerSpecificResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIST_REVIEWER_SPECIFIC_RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.listReviewerSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>(_list48.size);
                  org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail();
                    _elem49.read(iprot);
                    struct.listReviewerSpecificResource.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setListReviewerSpecificResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.listReviewerSpecificResource != null) {
          oprot.writeFieldBegin(LIST_REVIEWER_SPECIFIC_RESOURCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listReviewerSpecificResource.size()));
            for (org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _iter51 : struct.listReviewerSpecificResource)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateReviewerSpecificResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateReviewerSpecificResource_argsTupleScheme getScheme() {
        return new updateReviewerSpecificResource_argsTupleScheme();
      }
    }

    private static class updateReviewerSpecificResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateReviewerSpecificResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
        {
          oprot.writeI32(struct.listReviewerSpecificResource.size());
          for (org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _iter52 : struct.listReviewerSpecificResource)
          {
            _iter52.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateReviewerSpecificResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.listReviewerSpecificResource = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail>(_list53.size);
          org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new org.apache.airavata.allocation.manager.models.ReviewerSpecificResourceDetail();
            _elem54.read(iprot);
            struct.listReviewerSpecificResource.add(_elem54);
          }
        }
        struct.setListReviewerSpecificResourceIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateReviewerSpecificResource_result implements org.apache.thrift.TBase<updateReviewerSpecificResource_result, updateReviewerSpecificResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateReviewerSpecificResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateReviewerSpecificResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateReviewerSpecificResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateReviewerSpecificResource_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateReviewerSpecificResource_result.class, metaDataMap);
    }

    public updateReviewerSpecificResource_result() {
    }

    public updateReviewerSpecificResource_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateReviewerSpecificResource_result(updateReviewerSpecificResource_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public updateReviewerSpecificResource_result deepCopy() {
      return new updateReviewerSpecificResource_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateReviewerSpecificResource_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public updateReviewerSpecificResource_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public updateReviewerSpecificResource_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateReviewerSpecificResource_result)
        return this.equals((updateReviewerSpecificResource_result)that);
      return false;
    }

    public boolean equals(updateReviewerSpecificResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateReviewerSpecificResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateReviewerSpecificResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateReviewerSpecificResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateReviewerSpecificResource_resultStandardScheme getScheme() {
        return new updateReviewerSpecificResource_resultStandardScheme();
      }
    }

    private static class updateReviewerSpecificResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateReviewerSpecificResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateReviewerSpecificResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateReviewerSpecificResource_resultTupleScheme getScheme() {
        return new updateReviewerSpecificResource_resultTupleScheme();
      }
    }

    private static class updateReviewerSpecificResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateReviewerSpecificResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateReviewerSpecificResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllAssignedReviewersForRequest_args implements org.apache.thrift.TBase<getAllAssignedReviewersForRequest_args, getAllAssignedReviewersForRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAssignedReviewersForRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAssignedReviewersForRequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllAssignedReviewersForRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllAssignedReviewersForRequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAssignedReviewersForRequest_args.class, metaDataMap);
    }

    public getAllAssignedReviewersForRequest_args() {
    }

    public getAllAssignedReviewersForRequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAssignedReviewersForRequest_args(getAllAssignedReviewersForRequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
    }

    public getAllAssignedReviewersForRequest_args deepCopy() {
      return new getAllAssignedReviewersForRequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getAllAssignedReviewersForRequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public getAllAssignedReviewersForRequest_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAssignedReviewersForRequest_args)
        return this.equals((getAllAssignedReviewersForRequest_args)that);
      return false;
    }

    public boolean equals(getAllAssignedReviewersForRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      return hashCode;
    }

    @Override
    public int compareTo(getAllAssignedReviewersForRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllAssignedReviewersForRequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAssignedReviewersForRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllAssignedReviewersForRequest_argsStandardScheme getScheme() {
        return new getAllAssignedReviewersForRequest_argsStandardScheme();
      }
    }

    private static class getAllAssignedReviewersForRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllAssignedReviewersForRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAssignedReviewersForRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAssignedReviewersForRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAssignedReviewersForRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllAssignedReviewersForRequest_argsTupleScheme getScheme() {
        return new getAllAssignedReviewersForRequest_argsTupleScheme();
      }
    }

    private static class getAllAssignedReviewersForRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllAssignedReviewersForRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAssignedReviewersForRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAssignedReviewersForRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllAssignedReviewersForRequest_result implements org.apache.thrift.TBase<getAllAssignedReviewersForRequest_result, getAllAssignedReviewersForRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAssignedReviewersForRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAssignedReviewersForRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllAssignedReviewersForRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllAssignedReviewersForRequest_resultTupleSchemeFactory();

    public java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.ProjectReviewer.class))));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAssignedReviewersForRequest_result.class, metaDataMap);
    }

    public getAllAssignedReviewersForRequest_result() {
    }

    public getAllAssignedReviewersForRequest_result(
      java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAssignedReviewersForRequest_result(getAllAssignedReviewersForRequest_result other) {
      if (other.isSetSuccess()) {
        java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> __this__success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ProjectReviewer>(other.success.size());
        for (org.apache.airavata.allocation.manager.models.ProjectReviewer other_element : other.success) {
          __this__success.add(new org.apache.airavata.allocation.manager.models.ProjectReviewer(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getAllAssignedReviewersForRequest_result deepCopy() {
      return new getAllAssignedReviewersForRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ame = null;
      this.ae = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.airavata.allocation.manager.models.ProjectReviewer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.airavata.allocation.manager.models.ProjectReviewer elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ProjectReviewer>();
      }
      this.success.add(elem);
    }

    public java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> getSuccess() {
      return this.success;
    }

    public getAllAssignedReviewersForRequest_result setSuccess(java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getAllAssignedReviewersForRequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getAllAssignedReviewersForRequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<org.apache.airavata.allocation.manager.models.ProjectReviewer>)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAssignedReviewersForRequest_result)
        return this.equals((getAllAssignedReviewersForRequest_result)that);
      return false;
    }

    public boolean equals(getAllAssignedReviewersForRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllAssignedReviewersForRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllAssignedReviewersForRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAssignedReviewersForRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllAssignedReviewersForRequest_resultStandardScheme getScheme() {
        return new getAllAssignedReviewersForRequest_resultStandardScheme();
      }
    }

    private static class getAllAssignedReviewersForRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllAssignedReviewersForRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAssignedReviewersForRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ProjectReviewer>(_list56.size);
                  org.apache.airavata.allocation.manager.models.ProjectReviewer _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new org.apache.airavata.allocation.manager.models.ProjectReviewer();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAssignedReviewersForRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.airavata.allocation.manager.models.ProjectReviewer _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAssignedReviewersForRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllAssignedReviewersForRequest_resultTupleScheme getScheme() {
        return new getAllAssignedReviewersForRequest_resultTupleScheme();
      }
    }

    private static class getAllAssignedReviewersForRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllAssignedReviewersForRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAssignedReviewersForRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.airavata.allocation.manager.models.ProjectReviewer _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAssignedReviewersForRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<org.apache.airavata.allocation.manager.models.ProjectReviewer>(_list61.size);
            org.apache.airavata.allocation.manager.models.ProjectReviewer _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new org.apache.airavata.allocation.manager.models.ProjectReviewer();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class approveRequest_args implements org.apache.thrift.TBase<approveRequest_args, approveRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<approveRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveRequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ADMIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adminId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField AWARD_ALLOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("awardAllocation", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResourceName", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new approveRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new approveRequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required
    public java.lang.String adminId; // required
    public long startDate; // required
    public long endDate; // required
    public long awardAllocation; // required
    public java.lang.String specificResourceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId"),
      ADMIN_ID((short)3, "adminId"),
      START_DATE((short)4, "startDate"),
      END_DATE((short)5, "endDate"),
      AWARD_ALLOCATION((short)6, "awardAllocation"),
      SPECIFIC_RESOURCE_NAME((short)7, "specificResourceName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // ADMIN_ID
            return ADMIN_ID;
          case 4: // START_DATE
            return START_DATE;
          case 5: // END_DATE
            return END_DATE;
          case 6: // AWARD_ALLOCATION
            return AWARD_ALLOCATION;
          case 7: // SPECIFIC_RESOURCE_NAME
            return SPECIFIC_RESOURCE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __STARTDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private static final int __AWARDALLOCATION_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ADMIN_ID, new org.apache.thrift.meta_data.FieldMetaData("adminId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AWARD_ALLOCATION, new org.apache.thrift.meta_data.FieldMetaData("awardAllocation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SPECIFIC_RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("specificResourceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveRequest_args.class, metaDataMap);
    }

    public approveRequest_args() {
    }

    public approveRequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId,
      java.lang.String adminId,
      long startDate,
      long endDate,
      long awardAllocation,
      java.lang.String specificResourceName)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.adminId = adminId;
      this.startDate = startDate;
      setStartDateIsSet(true);
      this.endDate = endDate;
      setEndDateIsSet(true);
      this.awardAllocation = awardAllocation;
      setAwardAllocationIsSet(true);
      this.specificResourceName = specificResourceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveRequest_args(approveRequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
      if (other.isSetAdminId()) {
        this.adminId = other.adminId;
      }
      this.startDate = other.startDate;
      this.endDate = other.endDate;
      this.awardAllocation = other.awardAllocation;
      if (other.isSetSpecificResourceName()) {
        this.specificResourceName = other.specificResourceName;
      }
    }

    public approveRequest_args deepCopy() {
      return new approveRequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.adminId = null;
      setStartDateIsSet(false);
      this.startDate = 0;
      setEndDateIsSet(false);
      this.endDate = 0;
      setAwardAllocationIsSet(false);
      this.awardAllocation = 0;
      this.specificResourceName = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public approveRequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public approveRequest_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public java.lang.String getAdminId() {
      return this.adminId;
    }

    public approveRequest_args setAdminId(java.lang.String adminId) {
      this.adminId = adminId;
      return this;
    }

    public void unsetAdminId() {
      this.adminId = null;
    }

    /** Returns true if field adminId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminId() {
      return this.adminId != null;
    }

    public void setAdminIdIsSet(boolean value) {
      if (!value) {
        this.adminId = null;
      }
    }

    public long getStartDate() {
      return this.startDate;
    }

    public approveRequest_args setStartDate(long startDate) {
      this.startDate = startDate;
      setStartDateIsSet(true);
      return this;
    }

    public void unsetStartDate() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTDATE_ISSET_ID);
    }

    public void setStartDateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTDATE_ISSET_ID, value);
    }

    public long getEndDate() {
      return this.endDate;
    }

    public approveRequest_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public long getAwardAllocation() {
      return this.awardAllocation;
    }

    public approveRequest_args setAwardAllocation(long awardAllocation) {
      this.awardAllocation = awardAllocation;
      setAwardAllocationIsSet(true);
      return this;
    }

    public void unsetAwardAllocation() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AWARDALLOCATION_ISSET_ID);
    }

    /** Returns true if field awardAllocation is set (has been assigned a value) and false otherwise */
    public boolean isSetAwardAllocation() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AWARDALLOCATION_ISSET_ID);
    }

    public void setAwardAllocationIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AWARDALLOCATION_ISSET_ID, value);
    }

    public java.lang.String getSpecificResourceName() {
      return this.specificResourceName;
    }

    public approveRequest_args setSpecificResourceName(java.lang.String specificResourceName) {
      this.specificResourceName = specificResourceName;
      return this;
    }

    public void unsetSpecificResourceName() {
      this.specificResourceName = null;
    }

    /** Returns true if field specificResourceName is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecificResourceName() {
      return this.specificResourceName != null;
    }

    public void setSpecificResourceNameIsSet(boolean value) {
      if (!value) {
        this.specificResourceName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      case ADMIN_ID:
        if (value == null) {
          unsetAdminId();
        } else {
          setAdminId((java.lang.String)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((java.lang.Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((java.lang.Long)value);
        }
        break;

      case AWARD_ALLOCATION:
        if (value == null) {
          unsetAwardAllocation();
        } else {
          setAwardAllocation((java.lang.Long)value);
        }
        break;

      case SPECIFIC_RESOURCE_NAME:
        if (value == null) {
          unsetSpecificResourceName();
        } else {
          setSpecificResourceName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      case ADMIN_ID:
        return getAdminId();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      case AWARD_ALLOCATION:
        return getAwardAllocation();

      case SPECIFIC_RESOURCE_NAME:
        return getSpecificResourceName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      case ADMIN_ID:
        return isSetAdminId();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      case AWARD_ALLOCATION:
        return isSetAwardAllocation();
      case SPECIFIC_RESOURCE_NAME:
        return isSetSpecificResourceName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof approveRequest_args)
        return this.equals((approveRequest_args)that);
      return false;
    }

    public boolean equals(approveRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_adminId = true && this.isSetAdminId();
      boolean that_present_adminId = true && that.isSetAdminId();
      if (this_present_adminId || that_present_adminId) {
        if (!(this_present_adminId && that_present_adminId))
          return false;
        if (!this.adminId.equals(that.adminId))
          return false;
      }

      boolean this_present_startDate = true;
      boolean that_present_startDate = true;
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (this.startDate != that.startDate)
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      boolean this_present_awardAllocation = true;
      boolean that_present_awardAllocation = true;
      if (this_present_awardAllocation || that_present_awardAllocation) {
        if (!(this_present_awardAllocation && that_present_awardAllocation))
          return false;
        if (this.awardAllocation != that.awardAllocation)
          return false;
      }

      boolean this_present_specificResourceName = true && this.isSetSpecificResourceName();
      boolean that_present_specificResourceName = true && that.isSetSpecificResourceName();
      if (this_present_specificResourceName || that_present_specificResourceName) {
        if (!(this_present_specificResourceName && that_present_specificResourceName))
          return false;
        if (!this.specificResourceName.equals(that.specificResourceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      hashCode = hashCode * 8191 + ((isSetAdminId()) ? 131071 : 524287);
      if (isSetAdminId())
        hashCode = hashCode * 8191 + adminId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startDate);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endDate);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(awardAllocation);

      hashCode = hashCode * 8191 + ((isSetSpecificResourceName()) ? 131071 : 524287);
      if (isSetSpecificResourceName())
        hashCode = hashCode * 8191 + specificResourceName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(approveRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAdminId()).compareTo(other.isSetAdminId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminId, other.adminId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAwardAllocation()).compareTo(other.isSetAwardAllocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAwardAllocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardAllocation, other.awardAllocation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpecificResourceName()).compareTo(other.isSetSpecificResourceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecificResourceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResourceName, other.specificResourceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("approveRequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("adminId:");
      if (this.adminId == null) {
        sb.append("null");
      } else {
        sb.append(this.adminId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      sb.append(this.startDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("awardAllocation:");
      sb.append(this.awardAllocation);
      first = false;
      if (!first) sb.append(", ");
      sb.append("specificResourceName:");
      if (this.specificResourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResourceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      if (adminId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adminId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'startDate' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'endDate' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'awardAllocation' because it's a primitive and you chose the non-beans generator.
      if (specificResourceName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specificResourceName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public approveRequest_argsStandardScheme getScheme() {
        return new approveRequest_argsStandardScheme();
      }
    }

    private static class approveRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<approveRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ADMIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adminId = iprot.readString();
                struct.setAdminIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDate = iprot.readI64();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AWARD_ALLOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.awardAllocation = iprot.readI64();
                struct.setAwardAllocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SPECIFIC_RESOURCE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.specificResourceName = iprot.readString();
                struct.setSpecificResourceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetStartDate()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'startDate' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetEndDate()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'endDate' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetAwardAllocation()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'awardAllocation' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.adminId != null) {
          oprot.writeFieldBegin(ADMIN_ID_FIELD_DESC);
          oprot.writeString(struct.adminId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.startDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AWARD_ALLOCATION_FIELD_DESC);
        oprot.writeI64(struct.awardAllocation);
        oprot.writeFieldEnd();
        if (struct.specificResourceName != null) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.specificResourceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public approveRequest_argsTupleScheme getScheme() {
        return new approveRequest_argsTupleScheme();
      }
    }

    private static class approveRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<approveRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
        oprot.writeString(struct.adminId);
        oprot.writeI64(struct.startDate);
        oprot.writeI64(struct.endDate);
        oprot.writeI64(struct.awardAllocation);
        oprot.writeString(struct.specificResourceName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
        struct.adminId = iprot.readString();
        struct.setAdminIdIsSet(true);
        struct.startDate = iprot.readI64();
        struct.setStartDateIsSet(true);
        struct.endDate = iprot.readI64();
        struct.setEndDateIsSet(true);
        struct.awardAllocation = iprot.readI64();
        struct.setAwardAllocationIsSet(true);
        struct.specificResourceName = iprot.readString();
        struct.setSpecificResourceNameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class approveRequest_result implements org.apache.thrift.TBase<approveRequest_result, approveRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<approveRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("approveRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new approveRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new approveRequest_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(approveRequest_result.class, metaDataMap);
    }

    public approveRequest_result() {
    }

    public approveRequest_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveRequest_result(approveRequest_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public approveRequest_result deepCopy() {
      return new approveRequest_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public approveRequest_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public approveRequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public approveRequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof approveRequest_result)
        return this.equals((approveRequest_result)that);
      return false;
    }

    public boolean equals(approveRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(approveRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("approveRequest_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class approveRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public approveRequest_resultStandardScheme getScheme() {
        return new approveRequest_resultStandardScheme();
      }
    }

    private static class approveRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<approveRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, approveRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, approveRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class approveRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public approveRequest_resultTupleScheme getScheme() {
        return new approveRequest_resultTupleScheme();
      }
    }

    private static class approveRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<approveRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, approveRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, approveRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rejectRequest_args implements org.apache.thrift.TBase<rejectRequest_args, rejectRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<rejectRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectRequest_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ADMIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adminId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REJECTION_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("rejectionReason", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResourceName", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rejectRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rejectRequest_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public long projectId; // required
    public java.lang.String adminId; // required
    public java.lang.String rejectionReason; // required
    public java.lang.String specificResourceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      PROJECT_ID((short)2, "projectId"),
      ADMIN_ID((short)3, "adminId"),
      REJECTION_REASON((short)4, "rejectionReason"),
      SPECIFIC_RESOURCE_NAME((short)5, "specificResourceName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // ADMIN_ID
            return ADMIN_ID;
          case 4: // REJECTION_REASON
            return REJECTION_REASON;
          case 5: // SPECIFIC_RESOURCE_NAME
            return SPECIFIC_RESOURCE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ADMIN_ID, new org.apache.thrift.meta_data.FieldMetaData("adminId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REJECTION_REASON, new org.apache.thrift.meta_data.FieldMetaData("rejectionReason", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPECIFIC_RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("specificResourceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectRequest_args.class, metaDataMap);
    }

    public rejectRequest_args() {
    }

    public rejectRequest_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      long projectId,
      java.lang.String adminId,
      java.lang.String rejectionReason,
      java.lang.String specificResourceName)
    {
      this();
      this.authzToken = authzToken;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.adminId = adminId;
      this.rejectionReason = rejectionReason;
      this.specificResourceName = specificResourceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectRequest_args(rejectRequest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      this.projectId = other.projectId;
      if (other.isSetAdminId()) {
        this.adminId = other.adminId;
      }
      if (other.isSetRejectionReason()) {
        this.rejectionReason = other.rejectionReason;
      }
      if (other.isSetSpecificResourceName()) {
        this.specificResourceName = other.specificResourceName;
      }
    }

    public rejectRequest_args deepCopy() {
      return new rejectRequest_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.adminId = null;
      this.rejectionReason = null;
      this.specificResourceName = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public rejectRequest_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public long getProjectId() {
      return this.projectId;
    }

    public rejectRequest_args setProjectId(long projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public java.lang.String getAdminId() {
      return this.adminId;
    }

    public rejectRequest_args setAdminId(java.lang.String adminId) {
      this.adminId = adminId;
      return this;
    }

    public void unsetAdminId() {
      this.adminId = null;
    }

    /** Returns true if field adminId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdminId() {
      return this.adminId != null;
    }

    public void setAdminIdIsSet(boolean value) {
      if (!value) {
        this.adminId = null;
      }
    }

    public java.lang.String getRejectionReason() {
      return this.rejectionReason;
    }

    public rejectRequest_args setRejectionReason(java.lang.String rejectionReason) {
      this.rejectionReason = rejectionReason;
      return this;
    }

    public void unsetRejectionReason() {
      this.rejectionReason = null;
    }

    /** Returns true if field rejectionReason is set (has been assigned a value) and false otherwise */
    public boolean isSetRejectionReason() {
      return this.rejectionReason != null;
    }

    public void setRejectionReasonIsSet(boolean value) {
      if (!value) {
        this.rejectionReason = null;
      }
    }

    public java.lang.String getSpecificResourceName() {
      return this.specificResourceName;
    }

    public rejectRequest_args setSpecificResourceName(java.lang.String specificResourceName) {
      this.specificResourceName = specificResourceName;
      return this;
    }

    public void unsetSpecificResourceName() {
      this.specificResourceName = null;
    }

    /** Returns true if field specificResourceName is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecificResourceName() {
      return this.specificResourceName != null;
    }

    public void setSpecificResourceNameIsSet(boolean value) {
      if (!value) {
        this.specificResourceName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((java.lang.Long)value);
        }
        break;

      case ADMIN_ID:
        if (value == null) {
          unsetAdminId();
        } else {
          setAdminId((java.lang.String)value);
        }
        break;

      case REJECTION_REASON:
        if (value == null) {
          unsetRejectionReason();
        } else {
          setRejectionReason((java.lang.String)value);
        }
        break;

      case SPECIFIC_RESOURCE_NAME:
        if (value == null) {
          unsetSpecificResourceName();
        } else {
          setSpecificResourceName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case PROJECT_ID:
        return getProjectId();

      case ADMIN_ID:
        return getAdminId();

      case REJECTION_REASON:
        return getRejectionReason();

      case SPECIFIC_RESOURCE_NAME:
        return getSpecificResourceName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case PROJECT_ID:
        return isSetProjectId();
      case ADMIN_ID:
        return isSetAdminId();
      case REJECTION_REASON:
        return isSetRejectionReason();
      case SPECIFIC_RESOURCE_NAME:
        return isSetSpecificResourceName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectRequest_args)
        return this.equals((rejectRequest_args)that);
      return false;
    }

    public boolean equals(rejectRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_adminId = true && this.isSetAdminId();
      boolean that_present_adminId = true && that.isSetAdminId();
      if (this_present_adminId || that_present_adminId) {
        if (!(this_present_adminId && that_present_adminId))
          return false;
        if (!this.adminId.equals(that.adminId))
          return false;
      }

      boolean this_present_rejectionReason = true && this.isSetRejectionReason();
      boolean that_present_rejectionReason = true && that.isSetRejectionReason();
      if (this_present_rejectionReason || that_present_rejectionReason) {
        if (!(this_present_rejectionReason && that_present_rejectionReason))
          return false;
        if (!this.rejectionReason.equals(that.rejectionReason))
          return false;
      }

      boolean this_present_specificResourceName = true && this.isSetSpecificResourceName();
      boolean that_present_specificResourceName = true && that.isSetSpecificResourceName();
      if (this_present_specificResourceName || that_present_specificResourceName) {
        if (!(this_present_specificResourceName && that_present_specificResourceName))
          return false;
        if (!this.specificResourceName.equals(that.specificResourceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(projectId);

      hashCode = hashCode * 8191 + ((isSetAdminId()) ? 131071 : 524287);
      if (isSetAdminId())
        hashCode = hashCode * 8191 + adminId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRejectionReason()) ? 131071 : 524287);
      if (isSetRejectionReason())
        hashCode = hashCode * 8191 + rejectionReason.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpecificResourceName()) ? 131071 : 524287);
      if (isSetSpecificResourceName())
        hashCode = hashCode * 8191 + specificResourceName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rejectRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAdminId()).compareTo(other.isSetAdminId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdminId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminId, other.adminId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRejectionReason()).compareTo(other.isSetRejectionReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRejectionReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejectionReason, other.rejectionReason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpecificResourceName()).compareTo(other.isSetSpecificResourceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecificResourceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResourceName, other.specificResourceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rejectRequest_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("adminId:");
      if (this.adminId == null) {
        sb.append("null");
      } else {
        sb.append(this.adminId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rejectionReason:");
      if (this.rejectionReason == null) {
        sb.append("null");
      } else {
        sb.append(this.rejectionReason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specificResourceName:");
      if (this.specificResourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResourceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'projectId' because it's a primitive and you chose the non-beans generator.
      if (adminId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adminId' was not present! Struct: " + toString());
      }
      if (rejectionReason == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rejectionReason' was not present! Struct: " + toString());
      }
      if (specificResourceName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specificResourceName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rejectRequest_argsStandardScheme getScheme() {
        return new rejectRequest_argsStandardScheme();
      }
    }

    private static class rejectRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rejectRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.projectId = iprot.readI64();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ADMIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adminId = iprot.readString();
                struct.setAdminIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REJECTION_REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rejectionReason = iprot.readString();
                struct.setRejectionReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SPECIFIC_RESOURCE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.specificResourceName = iprot.readString();
                struct.setSpecificResourceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetProjectId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.adminId != null) {
          oprot.writeFieldBegin(ADMIN_ID_FIELD_DESC);
          oprot.writeString(struct.adminId);
          oprot.writeFieldEnd();
        }
        if (struct.rejectionReason != null) {
          oprot.writeFieldBegin(REJECTION_REASON_FIELD_DESC);
          oprot.writeString(struct.rejectionReason);
          oprot.writeFieldEnd();
        }
        if (struct.specificResourceName != null) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.specificResourceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rejectRequest_argsTupleScheme getScheme() {
        return new rejectRequest_argsTupleScheme();
      }
    }

    private static class rejectRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rejectRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeI64(struct.projectId);
        oprot.writeString(struct.adminId);
        oprot.writeString(struct.rejectionReason);
        oprot.writeString(struct.specificResourceName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
        struct.adminId = iprot.readString();
        struct.setAdminIdIsSet(true);
        struct.rejectionReason = iprot.readString();
        struct.setRejectionReasonIsSet(true);
        struct.specificResourceName = iprot.readString();
        struct.setSpecificResourceNameIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rejectRequest_result implements org.apache.thrift.TBase<rejectRequest_result, rejectRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<rejectRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rejectRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rejectRequest_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectRequest_result.class, metaDataMap);
    }

    public rejectRequest_result() {
    }

    public rejectRequest_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectRequest_result(rejectRequest_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public rejectRequest_result deepCopy() {
      return new rejectRequest_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public rejectRequest_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public rejectRequest_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public rejectRequest_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectRequest_result)
        return this.equals((rejectRequest_result)that);
      return false;
    }

    public boolean equals(rejectRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rejectRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rejectRequest_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rejectRequest_resultStandardScheme getScheme() {
        return new rejectRequest_resultStandardScheme();
      }
    }

    private static class rejectRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rejectRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rejectRequest_resultTupleScheme getScheme() {
        return new rejectRequest_resultTupleScheme();
      }
    }

    private static class rejectRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rejectRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRemainingAllocationUnits_args implements org.apache.thrift.TBase<getRemainingAllocationUnits_args, getRemainingAllocationUnits_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRemainingAllocationUnits_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRemainingAllocationUnits_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResource", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRemainingAllocationUnits_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRemainingAllocationUnits_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public java.lang.String specificResource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      SPECIFIC_RESOURCE((short)2, "specificResource");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // SPECIFIC_RESOURCE
            return SPECIFIC_RESOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.SPECIFIC_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("specificResource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRemainingAllocationUnits_args.class, metaDataMap);
    }

    public getRemainingAllocationUnits_args() {
    }

    public getRemainingAllocationUnits_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      java.lang.String specificResource)
    {
      this();
      this.authzToken = authzToken;
      this.specificResource = specificResource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRemainingAllocationUnits_args(getRemainingAllocationUnits_args other) {
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetSpecificResource()) {
        this.specificResource = other.specificResource;
      }
    }

    public getRemainingAllocationUnits_args deepCopy() {
      return new getRemainingAllocationUnits_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.specificResource = null;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public getRemainingAllocationUnits_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public java.lang.String getSpecificResource() {
      return this.specificResource;
    }

    public getRemainingAllocationUnits_args setSpecificResource(java.lang.String specificResource) {
      this.specificResource = specificResource;
      return this;
    }

    public void unsetSpecificResource() {
      this.specificResource = null;
    }

    /** Returns true if field specificResource is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecificResource() {
      return this.specificResource != null;
    }

    public void setSpecificResourceIsSet(boolean value) {
      if (!value) {
        this.specificResource = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case SPECIFIC_RESOURCE:
        if (value == null) {
          unsetSpecificResource();
        } else {
          setSpecificResource((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case SPECIFIC_RESOURCE:
        return getSpecificResource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case SPECIFIC_RESOURCE:
        return isSetSpecificResource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRemainingAllocationUnits_args)
        return this.equals((getRemainingAllocationUnits_args)that);
      return false;
    }

    public boolean equals(getRemainingAllocationUnits_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_specificResource = true && this.isSetSpecificResource();
      boolean that_present_specificResource = true && that.isSetSpecificResource();
      if (this_present_specificResource || that_present_specificResource) {
        if (!(this_present_specificResource && that_present_specificResource))
          return false;
        if (!this.specificResource.equals(that.specificResource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpecificResource()) ? 131071 : 524287);
      if (isSetSpecificResource())
        hashCode = hashCode * 8191 + specificResource.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRemainingAllocationUnits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpecificResource()).compareTo(other.isSetSpecificResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecificResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResource, other.specificResource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRemainingAllocationUnits_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specificResource:");
      if (this.specificResource == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (specificResource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specificResource' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRemainingAllocationUnits_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRemainingAllocationUnits_argsStandardScheme getScheme() {
        return new getRemainingAllocationUnits_argsStandardScheme();
      }
    }

    private static class getRemainingAllocationUnits_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRemainingAllocationUnits_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRemainingAllocationUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIFIC_RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.specificResource = iprot.readString();
                struct.setSpecificResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRemainingAllocationUnits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specificResource != null) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_FIELD_DESC);
          oprot.writeString(struct.specificResource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRemainingAllocationUnits_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRemainingAllocationUnits_argsTupleScheme getScheme() {
        return new getRemainingAllocationUnits_argsTupleScheme();
      }
    }

    private static class getRemainingAllocationUnits_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRemainingAllocationUnits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRemainingAllocationUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeString(struct.specificResource);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRemainingAllocationUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.specificResource = iprot.readString();
        struct.setSpecificResourceIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRemainingAllocationUnits_result implements org.apache.thrift.TBase<getRemainingAllocationUnits_result, getRemainingAllocationUnits_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRemainingAllocationUnits_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRemainingAllocationUnits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRemainingAllocationUnits_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRemainingAllocationUnits_resultTupleSchemeFactory();

    public long success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRemainingAllocationUnits_result.class, metaDataMap);
    }

    public getRemainingAllocationUnits_result() {
    }

    public getRemainingAllocationUnits_result(
      long success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRemainingAllocationUnits_result(getRemainingAllocationUnits_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public getRemainingAllocationUnits_result deepCopy() {
      return new getRemainingAllocationUnits_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ame = null;
      this.ae = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getRemainingAllocationUnits_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public getRemainingAllocationUnits_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public getRemainingAllocationUnits_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRemainingAllocationUnits_result)
        return this.equals((getRemainingAllocationUnits_result)that);
      return false;
    }

    public boolean equals(getRemainingAllocationUnits_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRemainingAllocationUnits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRemainingAllocationUnits_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRemainingAllocationUnits_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRemainingAllocationUnits_resultStandardScheme getScheme() {
        return new getRemainingAllocationUnits_resultStandardScheme();
      }
    }

    private static class getRemainingAllocationUnits_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRemainingAllocationUnits_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRemainingAllocationUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRemainingAllocationUnits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRemainingAllocationUnits_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRemainingAllocationUnits_resultTupleScheme getScheme() {
        return new getRemainingAllocationUnits_resultTupleScheme();
      }
    }

    private static class getRemainingAllocationUnits_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRemainingAllocationUnits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRemainingAllocationUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRemainingAllocationUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deductAllocationUnits_args implements org.apache.thrift.TBase<deductAllocationUnits_args, deductAllocationUnits_args._Fields>, java.io.Serializable, Cloneable, Comparable<deductAllocationUnits_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deductAllocationUnits_args");

    private static final org.apache.thrift.protocol.TField AUTHZ_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authzToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResource", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ALLOCATION_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("allocationUnits", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deductAllocationUnits_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deductAllocationUnits_argsTupleSchemeFactory();

    public org.apache.airavata.model.security.AuthzToken authzToken; // required
    public java.lang.String specificResource; // required
    public long allocationUnits; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHZ_TOKEN((short)1, "authzToken"),
      SPECIFIC_RESOURCE((short)2, "specificResource"),
      ALLOCATION_UNITS((short)3, "allocationUnits");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHZ_TOKEN
            return AUTHZ_TOKEN;
          case 2: // SPECIFIC_RESOURCE
            return SPECIFIC_RESOURCE;
          case 3: // ALLOCATION_UNITS
            return ALLOCATION_UNITS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ALLOCATIONUNITS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHZ_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authzToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.security.AuthzToken.class)));
      tmpMap.put(_Fields.SPECIFIC_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("specificResource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALLOCATION_UNITS, new org.apache.thrift.meta_data.FieldMetaData("allocationUnits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deductAllocationUnits_args.class, metaDataMap);
    }

    public deductAllocationUnits_args() {
    }

    public deductAllocationUnits_args(
      org.apache.airavata.model.security.AuthzToken authzToken,
      java.lang.String specificResource,
      long allocationUnits)
    {
      this();
      this.authzToken = authzToken;
      this.specificResource = specificResource;
      this.allocationUnits = allocationUnits;
      setAllocationUnitsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deductAllocationUnits_args(deductAllocationUnits_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuthzToken()) {
        this.authzToken = new org.apache.airavata.model.security.AuthzToken(other.authzToken);
      }
      if (other.isSetSpecificResource()) {
        this.specificResource = other.specificResource;
      }
      this.allocationUnits = other.allocationUnits;
    }

    public deductAllocationUnits_args deepCopy() {
      return new deductAllocationUnits_args(this);
    }

    @Override
    public void clear() {
      this.authzToken = null;
      this.specificResource = null;
      setAllocationUnitsIsSet(false);
      this.allocationUnits = 0;
    }

    public org.apache.airavata.model.security.AuthzToken getAuthzToken() {
      return this.authzToken;
    }

    public deductAllocationUnits_args setAuthzToken(org.apache.airavata.model.security.AuthzToken authzToken) {
      this.authzToken = authzToken;
      return this;
    }

    public void unsetAuthzToken() {
      this.authzToken = null;
    }

    /** Returns true if field authzToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthzToken() {
      return this.authzToken != null;
    }

    public void setAuthzTokenIsSet(boolean value) {
      if (!value) {
        this.authzToken = null;
      }
    }

    public java.lang.String getSpecificResource() {
      return this.specificResource;
    }

    public deductAllocationUnits_args setSpecificResource(java.lang.String specificResource) {
      this.specificResource = specificResource;
      return this;
    }

    public void unsetSpecificResource() {
      this.specificResource = null;
    }

    /** Returns true if field specificResource is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecificResource() {
      return this.specificResource != null;
    }

    public void setSpecificResourceIsSet(boolean value) {
      if (!value) {
        this.specificResource = null;
      }
    }

    public long getAllocationUnits() {
      return this.allocationUnits;
    }

    public deductAllocationUnits_args setAllocationUnits(long allocationUnits) {
      this.allocationUnits = allocationUnits;
      setAllocationUnitsIsSet(true);
      return this;
    }

    public void unsetAllocationUnits() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOCATIONUNITS_ISSET_ID);
    }

    /** Returns true if field allocationUnits is set (has been assigned a value) and false otherwise */
    public boolean isSetAllocationUnits() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOCATIONUNITS_ISSET_ID);
    }

    public void setAllocationUnitsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOCATIONUNITS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTHZ_TOKEN:
        if (value == null) {
          unsetAuthzToken();
        } else {
          setAuthzToken((org.apache.airavata.model.security.AuthzToken)value);
        }
        break;

      case SPECIFIC_RESOURCE:
        if (value == null) {
          unsetSpecificResource();
        } else {
          setSpecificResource((java.lang.String)value);
        }
        break;

      case ALLOCATION_UNITS:
        if (value == null) {
          unsetAllocationUnits();
        } else {
          setAllocationUnits((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHZ_TOKEN:
        return getAuthzToken();

      case SPECIFIC_RESOURCE:
        return getSpecificResource();

      case ALLOCATION_UNITS:
        return getAllocationUnits();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTHZ_TOKEN:
        return isSetAuthzToken();
      case SPECIFIC_RESOURCE:
        return isSetSpecificResource();
      case ALLOCATION_UNITS:
        return isSetAllocationUnits();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deductAllocationUnits_args)
        return this.equals((deductAllocationUnits_args)that);
      return false;
    }

    public boolean equals(deductAllocationUnits_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authzToken = true && this.isSetAuthzToken();
      boolean that_present_authzToken = true && that.isSetAuthzToken();
      if (this_present_authzToken || that_present_authzToken) {
        if (!(this_present_authzToken && that_present_authzToken))
          return false;
        if (!this.authzToken.equals(that.authzToken))
          return false;
      }

      boolean this_present_specificResource = true && this.isSetSpecificResource();
      boolean that_present_specificResource = true && that.isSetSpecificResource();
      if (this_present_specificResource || that_present_specificResource) {
        if (!(this_present_specificResource && that_present_specificResource))
          return false;
        if (!this.specificResource.equals(that.specificResource))
          return false;
      }

      boolean this_present_allocationUnits = true;
      boolean that_present_allocationUnits = true;
      if (this_present_allocationUnits || that_present_allocationUnits) {
        if (!(this_present_allocationUnits && that_present_allocationUnits))
          return false;
        if (this.allocationUnits != that.allocationUnits)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthzToken()) ? 131071 : 524287);
      if (isSetAuthzToken())
        hashCode = hashCode * 8191 + authzToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpecificResource()) ? 131071 : 524287);
      if (isSetSpecificResource())
        hashCode = hashCode * 8191 + specificResource.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(allocationUnits);

      return hashCode;
    }

    @Override
    public int compareTo(deductAllocationUnits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuthzToken()).compareTo(other.isSetAuthzToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthzToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authzToken, other.authzToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpecificResource()).compareTo(other.isSetSpecificResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecificResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResource, other.specificResource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAllocationUnits()).compareTo(other.isSetAllocationUnits());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllocationUnits()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocationUnits, other.allocationUnits);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deductAllocationUnits_args(");
      boolean first = true;

      sb.append("authzToken:");
      if (this.authzToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authzToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specificResource:");
      if (this.specificResource == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResource);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allocationUnits:");
      sb.append(this.allocationUnits);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'authzToken' was not present! Struct: " + toString());
      }
      if (specificResource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specificResource' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'allocationUnits' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deductAllocationUnits_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deductAllocationUnits_argsStandardScheme getScheme() {
        return new deductAllocationUnits_argsStandardScheme();
      }
    }

    private static class deductAllocationUnits_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deductAllocationUnits_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deductAllocationUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHZ_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
                struct.authzToken.read(iprot);
                struct.setAuthzTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIFIC_RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.specificResource = iprot.readString();
                struct.setSpecificResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALLOCATION_UNITS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.allocationUnits = iprot.readI64();
                struct.setAllocationUnitsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetAllocationUnits()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'allocationUnits' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deductAllocationUnits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authzToken != null) {
          oprot.writeFieldBegin(AUTHZ_TOKEN_FIELD_DESC);
          struct.authzToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specificResource != null) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_FIELD_DESC);
          oprot.writeString(struct.specificResource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ALLOCATION_UNITS_FIELD_DESC);
        oprot.writeI64(struct.allocationUnits);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deductAllocationUnits_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deductAllocationUnits_argsTupleScheme getScheme() {
        return new deductAllocationUnits_argsTupleScheme();
      }
    }

    private static class deductAllocationUnits_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deductAllocationUnits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deductAllocationUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeString(struct.specificResource);
        oprot.writeI64(struct.allocationUnits);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deductAllocationUnits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.authzToken = new org.apache.airavata.model.security.AuthzToken();
        struct.authzToken.read(iprot);
        struct.setAuthzTokenIsSet(true);
        struct.specificResource = iprot.readString();
        struct.setSpecificResourceIsSet(true);
        struct.allocationUnits = iprot.readI64();
        struct.setAllocationUnitsIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deductAllocationUnits_result implements org.apache.thrift.TBase<deductAllocationUnits_result, deductAllocationUnits_result._Fields>, java.io.Serializable, Cloneable, Comparable<deductAllocationUnits_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deductAllocationUnits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AME_FIELD_DESC = new org.apache.thrift.protocol.TField("ame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deductAllocationUnits_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deductAllocationUnits_resultTupleSchemeFactory();

    public boolean success; // required
    public org.apache.airavata.allocation.manager.models.AllocationManagerException ame; // required
    public org.apache.airavata.model.error.AuthorizationException ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AME((short)1, "ame"),
      AE((short)2, "ae");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AME
            return AME;
          case 2: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AME, new org.apache.thrift.meta_data.FieldMetaData("ame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.allocation.manager.models.AllocationManagerException.class)));
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.error.AuthorizationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deductAllocationUnits_result.class, metaDataMap);
    }

    public deductAllocationUnits_result() {
    }

    public deductAllocationUnits_result(
      boolean success,
      org.apache.airavata.allocation.manager.models.AllocationManagerException ame,
      org.apache.airavata.model.error.AuthorizationException ae)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ame = ame;
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deductAllocationUnits_result(deductAllocationUnits_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAme()) {
        this.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException(other.ame);
      }
      if (other.isSetAe()) {
        this.ae = new org.apache.airavata.model.error.AuthorizationException(other.ae);
      }
    }

    public deductAllocationUnits_result deepCopy() {
      return new deductAllocationUnits_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ame = null;
      this.ae = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deductAllocationUnits_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.allocation.manager.models.AllocationManagerException getAme() {
      return this.ame;
    }

    public deductAllocationUnits_result setAme(org.apache.airavata.allocation.manager.models.AllocationManagerException ame) {
      this.ame = ame;
      return this;
    }

    public void unsetAme() {
      this.ame = null;
    }

    /** Returns true if field ame is set (has been assigned a value) and false otherwise */
    public boolean isSetAme() {
      return this.ame != null;
    }

    public void setAmeIsSet(boolean value) {
      if (!value) {
        this.ame = null;
      }
    }

    public org.apache.airavata.model.error.AuthorizationException getAe() {
      return this.ae;
    }

    public deductAllocationUnits_result setAe(org.apache.airavata.model.error.AuthorizationException ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case AME:
        if (value == null) {
          unsetAme();
        } else {
          setAme((org.apache.airavata.allocation.manager.models.AllocationManagerException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AME:
        return getAme();

      case AE:
        return getAe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AME:
        return isSetAme();
      case AE:
        return isSetAe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deductAllocationUnits_result)
        return this.equals((deductAllocationUnits_result)that);
      return false;
    }

    public boolean equals(deductAllocationUnits_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ame = true && this.isSetAme();
      boolean that_present_ame = true && that.isSetAme();
      if (this_present_ame || that_present_ame) {
        if (!(this_present_ame && that_present_ame))
          return false;
        if (!this.ame.equals(that.ame))
          return false;
      }

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetAme()) ? 131071 : 524287);
      if (isSetAme())
        hashCode = hashCode * 8191 + ame.hashCode();

      hashCode = hashCode * 8191 + ((isSetAe()) ? 131071 : 524287);
      if (isSetAe())
        hashCode = hashCode * 8191 + ae.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deductAllocationUnits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAme()).compareTo(other.isSetAme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ame, other.ame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deductAllocationUnits_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ame:");
      if (this.ame == null) {
        sb.append("null");
      } else {
        sb.append(this.ame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deductAllocationUnits_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deductAllocationUnits_resultStandardScheme getScheme() {
        return new deductAllocationUnits_resultStandardScheme();
      }
    }

    private static class deductAllocationUnits_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deductAllocationUnits_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deductAllocationUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
                struct.ame.read(iprot);
                struct.setAmeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new org.apache.airavata.model.error.AuthorizationException();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deductAllocationUnits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ame != null) {
          oprot.writeFieldBegin(AME_FIELD_DESC);
          struct.ame.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deductAllocationUnits_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deductAllocationUnits_resultTupleScheme getScheme() {
        return new deductAllocationUnits_resultTupleScheme();
      }
    }

    private static class deductAllocationUnits_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deductAllocationUnits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deductAllocationUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAme()) {
          optionals.set(1);
        }
        if (struct.isSetAe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAme()) {
          struct.ame.write(oprot);
        }
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deductAllocationUnits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ame = new org.apache.airavata.allocation.manager.models.AllocationManagerException();
          struct.ame.read(iprot);
          struct.setAmeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ae = new org.apache.airavata.model.error.AuthorizationException();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
