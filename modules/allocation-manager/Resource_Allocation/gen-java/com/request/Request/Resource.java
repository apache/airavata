/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.request.Request;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-02")
public class Resource implements org.apache.thrift.TBase<Resource, Resource._Fields>, java.io.Serializable, Cloneable, Comparable<Resource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Resource");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBy", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PURPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("purpose", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceTupleSchemeFactory();

  public long id; // required
  public java.lang.String content; // required
  public java.lang.String requestBy; // required
  public java.lang.String purpose; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CONTENT((short)2, "content"),
    REQUEST_BY((short)3, "requestBy"),
    PURPOSE((short)4, "purpose");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CONTENT
          return CONTENT;
        case 3: // REQUEST_BY
          return REQUEST_BY;
        case 4: // PURPOSE
          return PURPOSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_BY, new org.apache.thrift.meta_data.FieldMetaData("requestBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PURPOSE, new org.apache.thrift.meta_data.FieldMetaData("purpose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Resource.class, metaDataMap);
  }

  public Resource() {
  }

  public Resource(
    long id,
    java.lang.String content,
    java.lang.String requestBy,
    java.lang.String purpose)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.content = content;
    this.requestBy = requestBy;
    this.purpose = purpose;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Resource(Resource other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetRequestBy()) {
      this.requestBy = other.requestBy;
    }
    if (other.isSetPurpose()) {
      this.purpose = other.purpose;
    }
  }

  public Resource deepCopy() {
    return new Resource(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.content = null;
    this.requestBy = null;
    this.purpose = null;
  }

  public long getId() {
    return this.id;
  }

  public Resource setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getContent() {
    return this.content;
  }

  public Resource setContent(java.lang.String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public java.lang.String getRequestBy() {
    return this.requestBy;
  }

  public Resource setRequestBy(java.lang.String requestBy) {
    this.requestBy = requestBy;
    return this;
  }

  public void unsetRequestBy() {
    this.requestBy = null;
  }

  /** Returns true if field requestBy is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestBy() {
    return this.requestBy != null;
  }

  public void setRequestByIsSet(boolean value) {
    if (!value) {
      this.requestBy = null;
    }
  }

  public java.lang.String getPurpose() {
    return this.purpose;
  }

  public Resource setPurpose(java.lang.String purpose) {
    this.purpose = purpose;
    return this;
  }

  public void unsetPurpose() {
    this.purpose = null;
  }

  /** Returns true if field purpose is set (has been assigned a value) and false otherwise */
  public boolean isSetPurpose() {
    return this.purpose != null;
  }

  public void setPurposeIsSet(boolean value) {
    if (!value) {
      this.purpose = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.String)value);
      }
      break;

    case REQUEST_BY:
      if (value == null) {
        unsetRequestBy();
      } else {
        setRequestBy((java.lang.String)value);
      }
      break;

    case PURPOSE:
      if (value == null) {
        unsetPurpose();
      } else {
        setPurpose((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CONTENT:
      return getContent();

    case REQUEST_BY:
      return getRequestBy();

    case PURPOSE:
      return getPurpose();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CONTENT:
      return isSetContent();
    case REQUEST_BY:
      return isSetRequestBy();
    case PURPOSE:
      return isSetPurpose();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Resource)
      return this.equals((Resource)that);
    return false;
  }

  public boolean equals(Resource that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_requestBy = true && this.isSetRequestBy();
    boolean that_present_requestBy = true && that.isSetRequestBy();
    if (this_present_requestBy || that_present_requestBy) {
      if (!(this_present_requestBy && that_present_requestBy))
        return false;
      if (!this.requestBy.equals(that.requestBy))
        return false;
    }

    boolean this_present_purpose = true && this.isSetPurpose();
    boolean that_present_purpose = true && that.isSetPurpose();
    if (this_present_purpose || that_present_purpose) {
      if (!(this_present_purpose && that_present_purpose))
        return false;
      if (!this.purpose.equals(that.purpose))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestBy()) ? 131071 : 524287);
    if (isSetRequestBy())
      hashCode = hashCode * 8191 + requestBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetPurpose()) ? 131071 : 524287);
    if (isSetPurpose())
      hashCode = hashCode * 8191 + purpose.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Resource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestBy()).compareTo(other.isSetRequestBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBy, other.requestBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPurpose()).compareTo(other.isSetPurpose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurpose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purpose, other.purpose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Resource(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestBy:");
    if (this.requestBy == null) {
      sb.append("null");
    } else {
      sb.append(this.requestBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("purpose:");
    if (this.purpose == null) {
      sb.append("null");
    } else {
      sb.append(this.purpose);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResourceStandardScheme getScheme() {
      return new ResourceStandardScheme();
    }
  }

  private static class ResourceStandardScheme extends org.apache.thrift.scheme.StandardScheme<Resource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Resource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestBy = iprot.readString();
              struct.setRequestByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PURPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.purpose = iprot.readString();
              struct.setPurposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Resource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.requestBy != null) {
        oprot.writeFieldBegin(REQUEST_BY_FIELD_DESC);
        oprot.writeString(struct.requestBy);
        oprot.writeFieldEnd();
      }
      if (struct.purpose != null) {
        oprot.writeFieldBegin(PURPOSE_FIELD_DESC);
        oprot.writeString(struct.purpose);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResourceTupleScheme getScheme() {
      return new ResourceTupleScheme();
    }
  }

  private static class ResourceTupleScheme extends org.apache.thrift.scheme.TupleScheme<Resource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Resource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetRequestBy()) {
        optionals.set(2);
      }
      if (struct.isSetPurpose()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetRequestBy()) {
        oprot.writeString(struct.requestBy);
      }
      if (struct.isSetPurpose()) {
        oprot.writeString(struct.purpose);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Resource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestBy = iprot.readString();
        struct.setRequestByIsSet(true);
      }
      if (incoming.get(3)) {
        struct.purpose = iprot.readString();
        struct.setPurposeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

