#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def createAllocationRequest(self, authzToken, allocDetail):
        """
        <p>API method to create new allocation requests</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        pass

    def deleteAllocationRequest(self, authzToken, projectId):
        """
        <p>API method to delete allocation request</p>

        Parameters:
         - authzToken
         - projectId
        """
        pass

    def getAllocationRequest(self, authzToken, projectId):
        """
        <p>API method to get an allocation Request</p>

        Parameters:
         - authzToken
         - projectId
        """
        pass

    def updateAllocationRequest(self, authzToken, allocDetail):
        """
        <p>API method to update an allocation Request</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        pass

    def createUserSpecificResource(self, authzToken, allocDetail):
        """
        <p>API method to create new specific resource requests</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        pass

    def deleteUserSpecificResource(self, authzToken, projectId, specificResource):
        """
        <p>API method to delete specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - specificResource
        """
        pass

    def getUserSpecificResource(self, authzToken, projectId):
        """
        <p>API method to get specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
        """
        pass

    def updateUserSpecificResource(self, authzToken, projectId, listUserSpecificResource):
        """
        <p>API method to update specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - listUserSpecificResource
        """
        pass

    def getAllRequestsForAdmin(self, authzToken, userName):
        """
        <p>API method to get all allocation requests for admin</p>

        Parameters:
         - authzToken
         - userName
        """
        pass

    def assignReviewers(self, authzToken, projectId, reviewerId, adminId):
        """
        <p>API method to assign reviewers</p>

        Parameters:
         - authzToken
         - projectId
         - reviewerId
         - adminId
        """
        pass

    def updateRequestByReviewer(self, authzToken, reviewerAllocationDetail):
        """
        <p>API method to update request submitted by reviewer</p>

        Parameters:
         - authzToken
         - reviewerAllocationDetail
        """
        pass

    def getAllRequestsForReviewers(self, authzToken, userName):
        """
        <p>API method to get all requests assigned to the reviewers</p>

        Parameters:
         - authzToken
         - userName
        """
        pass

    def getAllReviewsForARequest(self, authzToken, projectId):
        """
        <p>API method to get all the reviews for a request</p>

        Parameters:
         - authzToken
         - projectId
        """
        pass

    def createReviewerSpecificResource(self, authzToken, allocDetail):
        """
        <p>API method to create new specific resource requests</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        pass

    def deleteReviewerSpecificResource(self, authzToken, projectId, specificResource):
        """
        <p>API method to delete specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - specificResource
        """
        pass

    def getReviewerSpecificResource(self, authzToken, projectId):
        """
        <p>API method to get specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
        """
        pass

    def updateReviewerSpecificResource(self, authzToken, projectId, listReviewerSpecificResource):
        """
        <p>API method to update specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - listReviewerSpecificResource
        """
        pass

    def getAllAssignedReviewersForRequest(self, authzToken, projectId):
        """
        <p>API method to get all unassigned reviewers for a request</p>

        Parameters:
         - authzToken
         - projectId
        """
        pass

    def approveRequest(self, authzToken, projectId, adminId, startDate, endDate, awardAllocation, specificResourceName):
        """
        <p>API method to approve a request</p>

        Parameters:
         - authzToken
         - projectId
         - adminId
         - startDate
         - endDate
         - awardAllocation
         - specificResourceName
        """
        pass

    def rejectRequest(self, authzToken, projectId, adminId, rejectionReason, specificResourceName):
        """
        <p>API method to reject a request</p>

        Parameters:
         - authzToken
         - projectId
         - adminId
         - rejectionReason
         - specificResourceName
        """
        pass

    def getRemainingAllocationUnits(self, authzToken, specificResource):
        """
        <p>API method to get the remaining allocation units</p>

        Parameters:
         - authzToken
         - specificResource
        """
        pass

    def deductAllocationUnits(self, authzToken, specificResource, allocationUnits):
        """
        <p>API method to deduct the used allocation units</p>

        Parameters:
         - authzToken
         - specificResource
         - allocationUnits
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def createAllocationRequest(self, authzToken, allocDetail):
        """
        <p>API method to create new allocation requests</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        self.send_createAllocationRequest(authzToken, allocDetail)
        return self.recv_createAllocationRequest()

    def send_createAllocationRequest(self, authzToken, allocDetail):
        self._oprot.writeMessageBegin('createAllocationRequest', TMessageType.CALL, self._seqid)
        args = createAllocationRequest_args()
        args.authzToken = authzToken
        args.allocDetail = allocDetail
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createAllocationRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createAllocationRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createAllocationRequest failed: unknown result")

    def deleteAllocationRequest(self, authzToken, projectId):
        """
        <p>API method to delete allocation request</p>

        Parameters:
         - authzToken
         - projectId
        """
        self.send_deleteAllocationRequest(authzToken, projectId)
        return self.recv_deleteAllocationRequest()

    def send_deleteAllocationRequest(self, authzToken, projectId):
        self._oprot.writeMessageBegin('deleteAllocationRequest', TMessageType.CALL, self._seqid)
        args = deleteAllocationRequest_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteAllocationRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteAllocationRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteAllocationRequest failed: unknown result")

    def getAllocationRequest(self, authzToken, projectId):
        """
        <p>API method to get an allocation Request</p>

        Parameters:
         - authzToken
         - projectId
        """
        self.send_getAllocationRequest(authzToken, projectId)
        return self.recv_getAllocationRequest()

    def send_getAllocationRequest(self, authzToken, projectId):
        self._oprot.writeMessageBegin('getAllocationRequest', TMessageType.CALL, self._seqid)
        args = getAllocationRequest_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllocationRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllocationRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllocationRequest failed: unknown result")

    def updateAllocationRequest(self, authzToken, allocDetail):
        """
        <p>API method to update an allocation Request</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        self.send_updateAllocationRequest(authzToken, allocDetail)
        return self.recv_updateAllocationRequest()

    def send_updateAllocationRequest(self, authzToken, allocDetail):
        self._oprot.writeMessageBegin('updateAllocationRequest', TMessageType.CALL, self._seqid)
        args = updateAllocationRequest_args()
        args.authzToken = authzToken
        args.allocDetail = allocDetail
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateAllocationRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateAllocationRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateAllocationRequest failed: unknown result")

    def createUserSpecificResource(self, authzToken, allocDetail):
        """
        <p>API method to create new specific resource requests</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        self.send_createUserSpecificResource(authzToken, allocDetail)
        return self.recv_createUserSpecificResource()

    def send_createUserSpecificResource(self, authzToken, allocDetail):
        self._oprot.writeMessageBegin('createUserSpecificResource', TMessageType.CALL, self._seqid)
        args = createUserSpecificResource_args()
        args.authzToken = authzToken
        args.allocDetail = allocDetail
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createUserSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createUserSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createUserSpecificResource failed: unknown result")

    def deleteUserSpecificResource(self, authzToken, projectId, specificResource):
        """
        <p>API method to delete specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - specificResource
        """
        self.send_deleteUserSpecificResource(authzToken, projectId, specificResource)
        return self.recv_deleteUserSpecificResource()

    def send_deleteUserSpecificResource(self, authzToken, projectId, specificResource):
        self._oprot.writeMessageBegin('deleteUserSpecificResource', TMessageType.CALL, self._seqid)
        args = deleteUserSpecificResource_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.specificResource = specificResource
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteUserSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteUserSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteUserSpecificResource failed: unknown result")

    def getUserSpecificResource(self, authzToken, projectId):
        """
        <p>API method to get specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
        """
        self.send_getUserSpecificResource(authzToken, projectId)
        return self.recv_getUserSpecificResource()

    def send_getUserSpecificResource(self, authzToken, projectId):
        self._oprot.writeMessageBegin('getUserSpecificResource', TMessageType.CALL, self._seqid)
        args = getUserSpecificResource_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserSpecificResource failed: unknown result")

    def updateUserSpecificResource(self, authzToken, projectId, listUserSpecificResource):
        """
        <p>API method to update specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - listUserSpecificResource
        """
        self.send_updateUserSpecificResource(authzToken, projectId, listUserSpecificResource)
        return self.recv_updateUserSpecificResource()

    def send_updateUserSpecificResource(self, authzToken, projectId, listUserSpecificResource):
        self._oprot.writeMessageBegin('updateUserSpecificResource', TMessageType.CALL, self._seqid)
        args = updateUserSpecificResource_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.listUserSpecificResource = listUserSpecificResource
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateUserSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateUserSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUserSpecificResource failed: unknown result")

    def getAllRequestsForAdmin(self, authzToken, userName):
        """
        <p>API method to get all allocation requests for admin</p>

        Parameters:
         - authzToken
         - userName
        """
        self.send_getAllRequestsForAdmin(authzToken, userName)
        return self.recv_getAllRequestsForAdmin()

    def send_getAllRequestsForAdmin(self, authzToken, userName):
        self._oprot.writeMessageBegin('getAllRequestsForAdmin', TMessageType.CALL, self._seqid)
        args = getAllRequestsForAdmin_args()
        args.authzToken = authzToken
        args.userName = userName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllRequestsForAdmin(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllRequestsForAdmin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllRequestsForAdmin failed: unknown result")

    def assignReviewers(self, authzToken, projectId, reviewerId, adminId):
        """
        <p>API method to assign reviewers</p>

        Parameters:
         - authzToken
         - projectId
         - reviewerId
         - adminId
        """
        self.send_assignReviewers(authzToken, projectId, reviewerId, adminId)
        return self.recv_assignReviewers()

    def send_assignReviewers(self, authzToken, projectId, reviewerId, adminId):
        self._oprot.writeMessageBegin('assignReviewers', TMessageType.CALL, self._seqid)
        args = assignReviewers_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.reviewerId = reviewerId
        args.adminId = adminId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_assignReviewers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = assignReviewers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "assignReviewers failed: unknown result")

    def updateRequestByReviewer(self, authzToken, reviewerAllocationDetail):
        """
        <p>API method to update request submitted by reviewer</p>

        Parameters:
         - authzToken
         - reviewerAllocationDetail
        """
        self.send_updateRequestByReviewer(authzToken, reviewerAllocationDetail)
        return self.recv_updateRequestByReviewer()

    def send_updateRequestByReviewer(self, authzToken, reviewerAllocationDetail):
        self._oprot.writeMessageBegin('updateRequestByReviewer', TMessageType.CALL, self._seqid)
        args = updateRequestByReviewer_args()
        args.authzToken = authzToken
        args.reviewerAllocationDetail = reviewerAllocationDetail
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateRequestByReviewer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateRequestByReviewer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateRequestByReviewer failed: unknown result")

    def getAllRequestsForReviewers(self, authzToken, userName):
        """
        <p>API method to get all requests assigned to the reviewers</p>

        Parameters:
         - authzToken
         - userName
        """
        self.send_getAllRequestsForReviewers(authzToken, userName)
        return self.recv_getAllRequestsForReviewers()

    def send_getAllRequestsForReviewers(self, authzToken, userName):
        self._oprot.writeMessageBegin('getAllRequestsForReviewers', TMessageType.CALL, self._seqid)
        args = getAllRequestsForReviewers_args()
        args.authzToken = authzToken
        args.userName = userName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllRequestsForReviewers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllRequestsForReviewers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllRequestsForReviewers failed: unknown result")

    def getAllReviewsForARequest(self, authzToken, projectId):
        """
        <p>API method to get all the reviews for a request</p>

        Parameters:
         - authzToken
         - projectId
        """
        self.send_getAllReviewsForARequest(authzToken, projectId)
        return self.recv_getAllReviewsForARequest()

    def send_getAllReviewsForARequest(self, authzToken, projectId):
        self._oprot.writeMessageBegin('getAllReviewsForARequest', TMessageType.CALL, self._seqid)
        args = getAllReviewsForARequest_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllReviewsForARequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllReviewsForARequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllReviewsForARequest failed: unknown result")

    def createReviewerSpecificResource(self, authzToken, allocDetail):
        """
        <p>API method to create new specific resource requests</p>

        Parameters:
         - authzToken
         - allocDetail
        """
        self.send_createReviewerSpecificResource(authzToken, allocDetail)
        return self.recv_createReviewerSpecificResource()

    def send_createReviewerSpecificResource(self, authzToken, allocDetail):
        self._oprot.writeMessageBegin('createReviewerSpecificResource', TMessageType.CALL, self._seqid)
        args = createReviewerSpecificResource_args()
        args.authzToken = authzToken
        args.allocDetail = allocDetail
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createReviewerSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createReviewerSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createReviewerSpecificResource failed: unknown result")

    def deleteReviewerSpecificResource(self, authzToken, projectId, specificResource):
        """
        <p>API method to delete specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - specificResource
        """
        self.send_deleteReviewerSpecificResource(authzToken, projectId, specificResource)
        return self.recv_deleteReviewerSpecificResource()

    def send_deleteReviewerSpecificResource(self, authzToken, projectId, specificResource):
        self._oprot.writeMessageBegin('deleteReviewerSpecificResource', TMessageType.CALL, self._seqid)
        args = deleteReviewerSpecificResource_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.specificResource = specificResource
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteReviewerSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteReviewerSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteReviewerSpecificResource failed: unknown result")

    def getReviewerSpecificResource(self, authzToken, projectId):
        """
        <p>API method to get specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
        """
        self.send_getReviewerSpecificResource(authzToken, projectId)
        return self.recv_getReviewerSpecificResource()

    def send_getReviewerSpecificResource(self, authzToken, projectId):
        self._oprot.writeMessageBegin('getReviewerSpecificResource', TMessageType.CALL, self._seqid)
        args = getReviewerSpecificResource_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getReviewerSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getReviewerSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getReviewerSpecificResource failed: unknown result")

    def updateReviewerSpecificResource(self, authzToken, projectId, listReviewerSpecificResource):
        """
        <p>API method to update specific resource requests</p>

        Parameters:
         - authzToken
         - projectId
         - listReviewerSpecificResource
        """
        self.send_updateReviewerSpecificResource(authzToken, projectId, listReviewerSpecificResource)
        return self.recv_updateReviewerSpecificResource()

    def send_updateReviewerSpecificResource(self, authzToken, projectId, listReviewerSpecificResource):
        self._oprot.writeMessageBegin('updateReviewerSpecificResource', TMessageType.CALL, self._seqid)
        args = updateReviewerSpecificResource_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.listReviewerSpecificResource = listReviewerSpecificResource
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateReviewerSpecificResource(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateReviewerSpecificResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateReviewerSpecificResource failed: unknown result")

    def getAllAssignedReviewersForRequest(self, authzToken, projectId):
        """
        <p>API method to get all unassigned reviewers for a request</p>

        Parameters:
         - authzToken
         - projectId
        """
        self.send_getAllAssignedReviewersForRequest(authzToken, projectId)
        return self.recv_getAllAssignedReviewersForRequest()

    def send_getAllAssignedReviewersForRequest(self, authzToken, projectId):
        self._oprot.writeMessageBegin('getAllAssignedReviewersForRequest', TMessageType.CALL, self._seqid)
        args = getAllAssignedReviewersForRequest_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllAssignedReviewersForRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllAssignedReviewersForRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllAssignedReviewersForRequest failed: unknown result")

    def approveRequest(self, authzToken, projectId, adminId, startDate, endDate, awardAllocation, specificResourceName):
        """
        <p>API method to approve a request</p>

        Parameters:
         - authzToken
         - projectId
         - adminId
         - startDate
         - endDate
         - awardAllocation
         - specificResourceName
        """
        self.send_approveRequest(authzToken, projectId, adminId, startDate, endDate, awardAllocation, specificResourceName)
        return self.recv_approveRequest()

    def send_approveRequest(self, authzToken, projectId, adminId, startDate, endDate, awardAllocation, specificResourceName):
        self._oprot.writeMessageBegin('approveRequest', TMessageType.CALL, self._seqid)
        args = approveRequest_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.adminId = adminId
        args.startDate = startDate
        args.endDate = endDate
        args.awardAllocation = awardAllocation
        args.specificResourceName = specificResourceName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_approveRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = approveRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "approveRequest failed: unknown result")

    def rejectRequest(self, authzToken, projectId, adminId, rejectionReason, specificResourceName):
        """
        <p>API method to reject a request</p>

        Parameters:
         - authzToken
         - projectId
         - adminId
         - rejectionReason
         - specificResourceName
        """
        self.send_rejectRequest(authzToken, projectId, adminId, rejectionReason, specificResourceName)
        return self.recv_rejectRequest()

    def send_rejectRequest(self, authzToken, projectId, adminId, rejectionReason, specificResourceName):
        self._oprot.writeMessageBegin('rejectRequest', TMessageType.CALL, self._seqid)
        args = rejectRequest_args()
        args.authzToken = authzToken
        args.projectId = projectId
        args.adminId = adminId
        args.rejectionReason = rejectionReason
        args.specificResourceName = specificResourceName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_rejectRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = rejectRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "rejectRequest failed: unknown result")

    def getRemainingAllocationUnits(self, authzToken, specificResource):
        """
        <p>API method to get the remaining allocation units</p>

        Parameters:
         - authzToken
         - specificResource
        """
        self.send_getRemainingAllocationUnits(authzToken, specificResource)
        return self.recv_getRemainingAllocationUnits()

    def send_getRemainingAllocationUnits(self, authzToken, specificResource):
        self._oprot.writeMessageBegin('getRemainingAllocationUnits', TMessageType.CALL, self._seqid)
        args = getRemainingAllocationUnits_args()
        args.authzToken = authzToken
        args.specificResource = specificResource
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRemainingAllocationUnits(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRemainingAllocationUnits_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRemainingAllocationUnits failed: unknown result")

    def deductAllocationUnits(self, authzToken, specificResource, allocationUnits):
        """
        <p>API method to deduct the used allocation units</p>

        Parameters:
         - authzToken
         - specificResource
         - allocationUnits
        """
        self.send_deductAllocationUnits(authzToken, specificResource, allocationUnits)
        return self.recv_deductAllocationUnits()

    def send_deductAllocationUnits(self, authzToken, specificResource, allocationUnits):
        self._oprot.writeMessageBegin('deductAllocationUnits', TMessageType.CALL, self._seqid)
        args = deductAllocationUnits_args()
        args.authzToken = authzToken
        args.specificResource = specificResource
        args.allocationUnits = allocationUnits
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deductAllocationUnits(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deductAllocationUnits_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ame is not None:
            raise result.ame
        if result.ae is not None:
            raise result.ae
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deductAllocationUnits failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["createAllocationRequest"] = Processor.process_createAllocationRequest
        self._processMap["deleteAllocationRequest"] = Processor.process_deleteAllocationRequest
        self._processMap["getAllocationRequest"] = Processor.process_getAllocationRequest
        self._processMap["updateAllocationRequest"] = Processor.process_updateAllocationRequest
        self._processMap["createUserSpecificResource"] = Processor.process_createUserSpecificResource
        self._processMap["deleteUserSpecificResource"] = Processor.process_deleteUserSpecificResource
        self._processMap["getUserSpecificResource"] = Processor.process_getUserSpecificResource
        self._processMap["updateUserSpecificResource"] = Processor.process_updateUserSpecificResource
        self._processMap["getAllRequestsForAdmin"] = Processor.process_getAllRequestsForAdmin
        self._processMap["assignReviewers"] = Processor.process_assignReviewers
        self._processMap["updateRequestByReviewer"] = Processor.process_updateRequestByReviewer
        self._processMap["getAllRequestsForReviewers"] = Processor.process_getAllRequestsForReviewers
        self._processMap["getAllReviewsForARequest"] = Processor.process_getAllReviewsForARequest
        self._processMap["createReviewerSpecificResource"] = Processor.process_createReviewerSpecificResource
        self._processMap["deleteReviewerSpecificResource"] = Processor.process_deleteReviewerSpecificResource
        self._processMap["getReviewerSpecificResource"] = Processor.process_getReviewerSpecificResource
        self._processMap["updateReviewerSpecificResource"] = Processor.process_updateReviewerSpecificResource
        self._processMap["getAllAssignedReviewersForRequest"] = Processor.process_getAllAssignedReviewersForRequest
        self._processMap["approveRequest"] = Processor.process_approveRequest
        self._processMap["rejectRequest"] = Processor.process_rejectRequest
        self._processMap["getRemainingAllocationUnits"] = Processor.process_getRemainingAllocationUnits
        self._processMap["deductAllocationUnits"] = Processor.process_deductAllocationUnits

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_createAllocationRequest(self, seqid, iprot, oprot):
        args = createAllocationRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createAllocationRequest_result()
        try:
            result.success = self._handler.createAllocationRequest(args.authzToken, args.allocDetail)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createAllocationRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteAllocationRequest(self, seqid, iprot, oprot):
        args = deleteAllocationRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteAllocationRequest_result()
        try:
            result.success = self._handler.deleteAllocationRequest(args.authzToken, args.projectId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteAllocationRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllocationRequest(self, seqid, iprot, oprot):
        args = getAllocationRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllocationRequest_result()
        try:
            result.success = self._handler.getAllocationRequest(args.authzToken, args.projectId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllocationRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateAllocationRequest(self, seqid, iprot, oprot):
        args = updateAllocationRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateAllocationRequest_result()
        try:
            result.success = self._handler.updateAllocationRequest(args.authzToken, args.allocDetail)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateAllocationRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createUserSpecificResource(self, seqid, iprot, oprot):
        args = createUserSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createUserSpecificResource_result()
        try:
            result.success = self._handler.createUserSpecificResource(args.authzToken, args.allocDetail)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createUserSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteUserSpecificResource(self, seqid, iprot, oprot):
        args = deleteUserSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteUserSpecificResource_result()
        try:
            result.success = self._handler.deleteUserSpecificResource(args.authzToken, args.projectId, args.specificResource)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteUserSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUserSpecificResource(self, seqid, iprot, oprot):
        args = getUserSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUserSpecificResource_result()
        try:
            result.success = self._handler.getUserSpecificResource(args.authzToken, args.projectId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUserSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateUserSpecificResource(self, seqid, iprot, oprot):
        args = updateUserSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateUserSpecificResource_result()
        try:
            result.success = self._handler.updateUserSpecificResource(args.authzToken, args.projectId, args.listUserSpecificResource)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateUserSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllRequestsForAdmin(self, seqid, iprot, oprot):
        args = getAllRequestsForAdmin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllRequestsForAdmin_result()
        try:
            result.success = self._handler.getAllRequestsForAdmin(args.authzToken, args.userName)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllRequestsForAdmin", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_assignReviewers(self, seqid, iprot, oprot):
        args = assignReviewers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = assignReviewers_result()
        try:
            result.success = self._handler.assignReviewers(args.authzToken, args.projectId, args.reviewerId, args.adminId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("assignReviewers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateRequestByReviewer(self, seqid, iprot, oprot):
        args = updateRequestByReviewer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateRequestByReviewer_result()
        try:
            result.success = self._handler.updateRequestByReviewer(args.authzToken, args.reviewerAllocationDetail)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateRequestByReviewer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllRequestsForReviewers(self, seqid, iprot, oprot):
        args = getAllRequestsForReviewers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllRequestsForReviewers_result()
        try:
            result.success = self._handler.getAllRequestsForReviewers(args.authzToken, args.userName)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllRequestsForReviewers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllReviewsForARequest(self, seqid, iprot, oprot):
        args = getAllReviewsForARequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllReviewsForARequest_result()
        try:
            result.success = self._handler.getAllReviewsForARequest(args.authzToken, args.projectId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllReviewsForARequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createReviewerSpecificResource(self, seqid, iprot, oprot):
        args = createReviewerSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createReviewerSpecificResource_result()
        try:
            result.success = self._handler.createReviewerSpecificResource(args.authzToken, args.allocDetail)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createReviewerSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteReviewerSpecificResource(self, seqid, iprot, oprot):
        args = deleteReviewerSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteReviewerSpecificResource_result()
        try:
            result.success = self._handler.deleteReviewerSpecificResource(args.authzToken, args.projectId, args.specificResource)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteReviewerSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getReviewerSpecificResource(self, seqid, iprot, oprot):
        args = getReviewerSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getReviewerSpecificResource_result()
        try:
            result.success = self._handler.getReviewerSpecificResource(args.authzToken, args.projectId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getReviewerSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateReviewerSpecificResource(self, seqid, iprot, oprot):
        args = updateReviewerSpecificResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateReviewerSpecificResource_result()
        try:
            result.success = self._handler.updateReviewerSpecificResource(args.authzToken, args.projectId, args.listReviewerSpecificResource)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateReviewerSpecificResource", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllAssignedReviewersForRequest(self, seqid, iprot, oprot):
        args = getAllAssignedReviewersForRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllAssignedReviewersForRequest_result()
        try:
            result.success = self._handler.getAllAssignedReviewersForRequest(args.authzToken, args.projectId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllAssignedReviewersForRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_approveRequest(self, seqid, iprot, oprot):
        args = approveRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = approveRequest_result()
        try:
            result.success = self._handler.approveRequest(args.authzToken, args.projectId, args.adminId, args.startDate, args.endDate, args.awardAllocation, args.specificResourceName)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("approveRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_rejectRequest(self, seqid, iprot, oprot):
        args = rejectRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = rejectRequest_result()
        try:
            result.success = self._handler.rejectRequest(args.authzToken, args.projectId, args.adminId, args.rejectionReason, args.specificResourceName)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("rejectRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRemainingAllocationUnits(self, seqid, iprot, oprot):
        args = getRemainingAllocationUnits_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRemainingAllocationUnits_result()
        try:
            result.success = self._handler.getRemainingAllocationUnits(args.authzToken, args.specificResource)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRemainingAllocationUnits", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deductAllocationUnits(self, seqid, iprot, oprot):
        args = deductAllocationUnits_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deductAllocationUnits_result()
        try:
            result.success = self._handler.deductAllocationUnits(args.authzToken, args.specificResource, args.allocationUnits)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except allocation_manager_models.ttypes.AllocationManagerException as ame:
            msg_type = TMessageType.REPLY
            result.ame = ame
        except airavata.api.error.ttypes.AuthorizationException as ae:
            msg_type = TMessageType.REPLY
            result.ae = ae
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deductAllocationUnits", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class createAllocationRequest_args(object):
    """
    Attributes:
     - authzToken
     - allocDetail
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'allocDetail', (allocation_manager_models.ttypes.UserAllocationDetail, allocation_manager_models.ttypes.UserAllocationDetail.thrift_spec), None, ),  # 2
    )

    def __init__(self, authzToken=None, allocDetail=None,):
        self.authzToken = authzToken
        self.allocDetail = allocDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.allocDetail = allocation_manager_models.ttypes.UserAllocationDetail()
                    self.allocDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createAllocationRequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.allocDetail is not None:
            oprot.writeFieldBegin('allocDetail', TType.STRUCT, 2)
            self.allocDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.allocDetail is None:
            raise TProtocolException(message='Required field allocDetail is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createAllocationRequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.I64, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createAllocationRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteAllocationRequest_args(object):
    """
    Attributes:
     - authzToken
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
    )

    def __init__(self, authzToken=None, projectId=None,):
        self.authzToken = authzToken
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteAllocationRequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteAllocationRequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteAllocationRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllocationRequest_args(object):
    """
    Attributes:
     - authzToken
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
    )

    def __init__(self, authzToken=None, projectId=None,):
        self.authzToken = authzToken
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllocationRequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllocationRequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (allocation_manager_models.ttypes.UserAllocationDetail, allocation_manager_models.ttypes.UserAllocationDetail.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = allocation_manager_models.ttypes.UserAllocationDetail()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllocationRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateAllocationRequest_args(object):
    """
    Attributes:
     - authzToken
     - allocDetail
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'allocDetail', (allocation_manager_models.ttypes.UserAllocationDetail, allocation_manager_models.ttypes.UserAllocationDetail.thrift_spec), None, ),  # 2
    )

    def __init__(self, authzToken=None, allocDetail=None,):
        self.authzToken = authzToken
        self.allocDetail = allocDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.allocDetail = allocation_manager_models.ttypes.UserAllocationDetail()
                    self.allocDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateAllocationRequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.allocDetail is not None:
            oprot.writeFieldBegin('allocDetail', TType.STRUCT, 2)
            self.allocDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.allocDetail is None:
            raise TProtocolException(message='Required field allocDetail is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateAllocationRequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateAllocationRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createUserSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - allocDetail
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'allocDetail', (allocation_manager_models.ttypes.UserSpecificResourceDetail, allocation_manager_models.ttypes.UserSpecificResourceDetail.thrift_spec), None, ),  # 2
    )

    def __init__(self, authzToken=None, allocDetail=None,):
        self.authzToken = authzToken
        self.allocDetail = allocDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.allocDetail = allocation_manager_models.ttypes.UserSpecificResourceDetail()
                    self.allocDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createUserSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.allocDetail is not None:
            oprot.writeFieldBegin('allocDetail', TType.STRUCT, 2)
            self.allocDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.allocDetail is None:
            raise TProtocolException(message='Required field allocDetail is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createUserSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.I64, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createUserSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteUserSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - projectId
     - specificResource
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.STRING, 'specificResource', 'UTF8', None, ),  # 3
    )

    def __init__(self, authzToken=None, projectId=None, specificResource=None,):
        self.authzToken = authzToken
        self.projectId = projectId
        self.specificResource = specificResource

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.specificResource = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteUserSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.specificResource is not None:
            oprot.writeFieldBegin('specificResource', TType.STRING, 3)
            oprot.writeString(self.specificResource.encode('utf-8') if sys.version_info[0] == 2 else self.specificResource)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        if self.specificResource is None:
            raise TProtocolException(message='Required field specificResource is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteUserSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteUserSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUserSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
    )

    def __init__(self, authzToken=None, projectId=None,):
        self.authzToken = authzToken
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUserSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (allocation_manager_models.ttypes.UserSpecificResourceDetail, allocation_manager_models.ttypes.UserSpecificResourceDetail.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = allocation_manager_models.ttypes.UserSpecificResourceDetail()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateUserSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - projectId
     - listUserSpecificResource
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.LIST, 'listUserSpecificResource', (TType.STRUCT, (allocation_manager_models.ttypes.UserSpecificResourceDetail, allocation_manager_models.ttypes.UserSpecificResourceDetail.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, authzToken=None, projectId=None, listUserSpecificResource=None,):
        self.authzToken = authzToken
        self.projectId = projectId
        self.listUserSpecificResource = listUserSpecificResource

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.listUserSpecificResource = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = allocation_manager_models.ttypes.UserSpecificResourceDetail()
                        _elem12.read(iprot)
                        self.listUserSpecificResource.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateUserSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.listUserSpecificResource is not None:
            oprot.writeFieldBegin('listUserSpecificResource', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.listUserSpecificResource))
            for iter13 in self.listUserSpecificResource:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        if self.listUserSpecificResource is None:
            raise TProtocolException(message='Required field listUserSpecificResource is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateUserSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateUserSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllRequestsForAdmin_args(object):
    """
    Attributes:
     - authzToken
     - userName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'userName', 'UTF8', None, ),  # 2
    )

    def __init__(self, authzToken=None, userName=None,):
        self.authzToken = authzToken
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllRequestsForAdmin_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 2)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.userName is None:
            raise TProtocolException(message='Required field userName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllRequestsForAdmin_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (allocation_manager_models.ttypes.UserAllocationDetail, allocation_manager_models.ttypes.UserAllocationDetail.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = allocation_manager_models.ttypes.UserAllocationDetail()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllRequestsForAdmin_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class assignReviewers_args(object):
    """
    Attributes:
     - authzToken
     - projectId
     - reviewerId
     - adminId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.STRING, 'reviewerId', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'adminId', 'UTF8', None, ),  # 4
    )

    def __init__(self, authzToken=None, projectId=None, reviewerId=None, adminId=None,):
        self.authzToken = authzToken
        self.projectId = projectId
        self.reviewerId = reviewerId
        self.adminId = adminId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.reviewerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.adminId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('assignReviewers_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.reviewerId is not None:
            oprot.writeFieldBegin('reviewerId', TType.STRING, 3)
            oprot.writeString(self.reviewerId.encode('utf-8') if sys.version_info[0] == 2 else self.reviewerId)
            oprot.writeFieldEnd()
        if self.adminId is not None:
            oprot.writeFieldBegin('adminId', TType.STRING, 4)
            oprot.writeString(self.adminId.encode('utf-8') if sys.version_info[0] == 2 else self.adminId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        if self.reviewerId is None:
            raise TProtocolException(message='Required field reviewerId is unset!')
        if self.adminId is None:
            raise TProtocolException(message='Required field adminId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class assignReviewers_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('assignReviewers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateRequestByReviewer_args(object):
    """
    Attributes:
     - authzToken
     - reviewerAllocationDetail
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'reviewerAllocationDetail', (allocation_manager_models.ttypes.ReviewerAllocationDetail, allocation_manager_models.ttypes.ReviewerAllocationDetail.thrift_spec), None, ),  # 2
    )

    def __init__(self, authzToken=None, reviewerAllocationDetail=None,):
        self.authzToken = authzToken
        self.reviewerAllocationDetail = reviewerAllocationDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.reviewerAllocationDetail = allocation_manager_models.ttypes.ReviewerAllocationDetail()
                    self.reviewerAllocationDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateRequestByReviewer_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.reviewerAllocationDetail is not None:
            oprot.writeFieldBegin('reviewerAllocationDetail', TType.STRUCT, 2)
            self.reviewerAllocationDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.reviewerAllocationDetail is None:
            raise TProtocolException(message='Required field reviewerAllocationDetail is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateRequestByReviewer_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateRequestByReviewer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllRequestsForReviewers_args(object):
    """
    Attributes:
     - authzToken
     - userName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'userName', 'UTF8', None, ),  # 2
    )

    def __init__(self, authzToken=None, userName=None,):
        self.authzToken = authzToken
        self.userName = userName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllRequestsForReviewers_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 2)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.userName is None:
            raise TProtocolException(message='Required field userName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllRequestsForReviewers_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (allocation_manager_models.ttypes.UserAllocationDetail, allocation_manager_models.ttypes.UserAllocationDetail.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = allocation_manager_models.ttypes.UserAllocationDetail()
                        _elem26.read(iprot)
                        self.success.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllRequestsForReviewers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter27 in self.success:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllReviewsForARequest_args(object):
    """
    Attributes:
     - authzToken
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
    )

    def __init__(self, authzToken=None, projectId=None,):
        self.authzToken = authzToken
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllReviewsForARequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllReviewsForARequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (allocation_manager_models.ttypes.ReviewerAllocationDetail, allocation_manager_models.ttypes.ReviewerAllocationDetail.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = allocation_manager_models.ttypes.ReviewerAllocationDetail()
                        _elem33.read(iprot)
                        self.success.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllReviewsForARequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter34 in self.success:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createReviewerSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - allocDetail
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'allocDetail', (allocation_manager_models.ttypes.ReviewerSpecificResourceDetail, allocation_manager_models.ttypes.ReviewerSpecificResourceDetail.thrift_spec), None, ),  # 2
    )

    def __init__(self, authzToken=None, allocDetail=None,):
        self.authzToken = authzToken
        self.allocDetail = allocDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.allocDetail = allocation_manager_models.ttypes.ReviewerSpecificResourceDetail()
                    self.allocDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createReviewerSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.allocDetail is not None:
            oprot.writeFieldBegin('allocDetail', TType.STRUCT, 2)
            self.allocDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.allocDetail is None:
            raise TProtocolException(message='Required field allocDetail is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createReviewerSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.I64, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createReviewerSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteReviewerSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - projectId
     - specificResource
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.STRING, 'specificResource', 'UTF8', None, ),  # 3
    )

    def __init__(self, authzToken=None, projectId=None, specificResource=None,):
        self.authzToken = authzToken
        self.projectId = projectId
        self.specificResource = specificResource

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.specificResource = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteReviewerSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.specificResource is not None:
            oprot.writeFieldBegin('specificResource', TType.STRING, 3)
            oprot.writeString(self.specificResource.encode('utf-8') if sys.version_info[0] == 2 else self.specificResource)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        if self.specificResource is None:
            raise TProtocolException(message='Required field specificResource is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteReviewerSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteReviewerSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getReviewerSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
    )

    def __init__(self, authzToken=None, projectId=None,):
        self.authzToken = authzToken
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getReviewerSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getReviewerSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (allocation_manager_models.ttypes.ReviewerSpecificResourceDetail, allocation_manager_models.ttypes.ReviewerSpecificResourceDetail.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = allocation_manager_models.ttypes.ReviewerSpecificResourceDetail()
                        _elem40.read(iprot)
                        self.success.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getReviewerSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter41 in self.success:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateReviewerSpecificResource_args(object):
    """
    Attributes:
     - authzToken
     - projectId
     - listReviewerSpecificResource
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.LIST, 'listReviewerSpecificResource', (TType.STRUCT, (allocation_manager_models.ttypes.ReviewerSpecificResourceDetail, allocation_manager_models.ttypes.ReviewerSpecificResourceDetail.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, authzToken=None, projectId=None, listReviewerSpecificResource=None,):
        self.authzToken = authzToken
        self.projectId = projectId
        self.listReviewerSpecificResource = listReviewerSpecificResource

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.listReviewerSpecificResource = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = allocation_manager_models.ttypes.ReviewerSpecificResourceDetail()
                        _elem47.read(iprot)
                        self.listReviewerSpecificResource.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateReviewerSpecificResource_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.listReviewerSpecificResource is not None:
            oprot.writeFieldBegin('listReviewerSpecificResource', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.listReviewerSpecificResource))
            for iter48 in self.listReviewerSpecificResource:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        if self.listReviewerSpecificResource is None:
            raise TProtocolException(message='Required field listReviewerSpecificResource is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateReviewerSpecificResource_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateReviewerSpecificResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllAssignedReviewersForRequest_args(object):
    """
    Attributes:
     - authzToken
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
    )

    def __init__(self, authzToken=None, projectId=None,):
        self.authzToken = authzToken
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllAssignedReviewersForRequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllAssignedReviewersForRequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (allocation_manager_models.ttypes.ProjectReviewer, allocation_manager_models.ttypes.ProjectReviewer.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = allocation_manager_models.ttypes.ProjectReviewer()
                        _elem54.read(iprot)
                        self.success.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllAssignedReviewersForRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter55 in self.success:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class approveRequest_args(object):
    """
    Attributes:
     - authzToken
     - projectId
     - adminId
     - startDate
     - endDate
     - awardAllocation
     - specificResourceName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.STRING, 'adminId', 'UTF8', None, ),  # 3
        (4, TType.I64, 'startDate', None, None, ),  # 4
        (5, TType.I64, 'endDate', None, None, ),  # 5
        (6, TType.I64, 'awardAllocation', None, None, ),  # 6
        (7, TType.STRING, 'specificResourceName', 'UTF8', None, ),  # 7
    )

    def __init__(self, authzToken=None, projectId=None, adminId=None, startDate=None, endDate=None, awardAllocation=None, specificResourceName=None,):
        self.authzToken = authzToken
        self.projectId = projectId
        self.adminId = adminId
        self.startDate = startDate
        self.endDate = endDate
        self.awardAllocation = awardAllocation
        self.specificResourceName = specificResourceName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.adminId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.endDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.awardAllocation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.specificResourceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('approveRequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.adminId is not None:
            oprot.writeFieldBegin('adminId', TType.STRING, 3)
            oprot.writeString(self.adminId.encode('utf-8') if sys.version_info[0] == 2 else self.adminId)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 4)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.I64, 5)
            oprot.writeI64(self.endDate)
            oprot.writeFieldEnd()
        if self.awardAllocation is not None:
            oprot.writeFieldBegin('awardAllocation', TType.I64, 6)
            oprot.writeI64(self.awardAllocation)
            oprot.writeFieldEnd()
        if self.specificResourceName is not None:
            oprot.writeFieldBegin('specificResourceName', TType.STRING, 7)
            oprot.writeString(self.specificResourceName.encode('utf-8') if sys.version_info[0] == 2 else self.specificResourceName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        if self.adminId is None:
            raise TProtocolException(message='Required field adminId is unset!')
        if self.startDate is None:
            raise TProtocolException(message='Required field startDate is unset!')
        if self.endDate is None:
            raise TProtocolException(message='Required field endDate is unset!')
        if self.awardAllocation is None:
            raise TProtocolException(message='Required field awardAllocation is unset!')
        if self.specificResourceName is None:
            raise TProtocolException(message='Required field specificResourceName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class approveRequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('approveRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class rejectRequest_args(object):
    """
    Attributes:
     - authzToken
     - projectId
     - adminId
     - rejectionReason
     - specificResourceName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.STRING, 'adminId', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'rejectionReason', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'specificResourceName', 'UTF8', None, ),  # 5
    )

    def __init__(self, authzToken=None, projectId=None, adminId=None, rejectionReason=None, specificResourceName=None,):
        self.authzToken = authzToken
        self.projectId = projectId
        self.adminId = adminId
        self.rejectionReason = rejectionReason
        self.specificResourceName = specificResourceName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.adminId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rejectionReason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.specificResourceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('rejectRequest_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.adminId is not None:
            oprot.writeFieldBegin('adminId', TType.STRING, 3)
            oprot.writeString(self.adminId.encode('utf-8') if sys.version_info[0] == 2 else self.adminId)
            oprot.writeFieldEnd()
        if self.rejectionReason is not None:
            oprot.writeFieldBegin('rejectionReason', TType.STRING, 4)
            oprot.writeString(self.rejectionReason.encode('utf-8') if sys.version_info[0] == 2 else self.rejectionReason)
            oprot.writeFieldEnd()
        if self.specificResourceName is not None:
            oprot.writeFieldBegin('specificResourceName', TType.STRING, 5)
            oprot.writeString(self.specificResourceName.encode('utf-8') if sys.version_info[0] == 2 else self.specificResourceName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.projectId is None:
            raise TProtocolException(message='Required field projectId is unset!')
        if self.adminId is None:
            raise TProtocolException(message='Required field adminId is unset!')
        if self.rejectionReason is None:
            raise TProtocolException(message='Required field rejectionReason is unset!')
        if self.specificResourceName is None:
            raise TProtocolException(message='Required field specificResourceName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class rejectRequest_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('rejectRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRemainingAllocationUnits_args(object):
    """
    Attributes:
     - authzToken
     - specificResource
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'specificResource', 'UTF8', None, ),  # 2
    )

    def __init__(self, authzToken=None, specificResource=None,):
        self.authzToken = authzToken
        self.specificResource = specificResource

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.specificResource = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRemainingAllocationUnits_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.specificResource is not None:
            oprot.writeFieldBegin('specificResource', TType.STRING, 2)
            oprot.writeString(self.specificResource.encode('utf-8') if sys.version_info[0] == 2 else self.specificResource)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.specificResource is None:
            raise TProtocolException(message='Required field specificResource is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRemainingAllocationUnits_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.I64, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRemainingAllocationUnits_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deductAllocationUnits_args(object):
    """
    Attributes:
     - authzToken
     - specificResource
     - allocationUnits
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'authzToken', (airavata.model.security.ttypes.AuthzToken, airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'specificResource', 'UTF8', None, ),  # 2
        (3, TType.I64, 'allocationUnits', None, None, ),  # 3
    )

    def __init__(self, authzToken=None, specificResource=None, allocationUnits=None,):
        self.authzToken = authzToken
        self.specificResource = specificResource
        self.allocationUnits = allocationUnits

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authzToken = airavata.model.security.ttypes.AuthzToken()
                    self.authzToken.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.specificResource = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.allocationUnits = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deductAllocationUnits_args')
        if self.authzToken is not None:
            oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
            self.authzToken.write(oprot)
            oprot.writeFieldEnd()
        if self.specificResource is not None:
            oprot.writeFieldBegin('specificResource', TType.STRING, 2)
            oprot.writeString(self.specificResource.encode('utf-8') if sys.version_info[0] == 2 else self.specificResource)
            oprot.writeFieldEnd()
        if self.allocationUnits is not None:
            oprot.writeFieldBegin('allocationUnits', TType.I64, 3)
            oprot.writeI64(self.allocationUnits)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.authzToken is None:
            raise TProtocolException(message='Required field authzToken is unset!')
        if self.specificResource is None:
            raise TProtocolException(message='Required field specificResource is unset!')
        if self.allocationUnits is None:
            raise TProtocolException(message='Required field allocationUnits is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deductAllocationUnits_result(object):
    """
    Attributes:
     - success
     - ame
     - ae
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ame', (allocation_manager_models.ttypes.AllocationManagerException, allocation_manager_models.ttypes.AllocationManagerException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'ae', (airavata.api.error.ttypes.AuthorizationException, airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, ame=None, ae=None,):
        self.success = success
        self.ame = ame
        self.ae = ae

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ame = allocation_manager_models.ttypes.AllocationManagerException()
                    self.ame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ae = airavata.api.error.ttypes.AuthorizationException()
                    self.ae.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deductAllocationUnits_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ame is not None:
            oprot.writeFieldBegin('ame', TType.STRUCT, 1)
            self.ame.write(oprot)
            oprot.writeFieldEnd()
        if self.ae is not None:
            oprot.writeFieldBegin('ae', TType.STRUCT, 2)
            self.ae.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
