#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from allocation_manager_cpi import AllocationRegistryService
from allocation_manager_cpi.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i64 createAllocationRequest(AuthzToken authzToken, UserAllocationDetail allocDetail)')
    print('  bool deleteAllocationRequest(AuthzToken authzToken, i64 projectId)')
    print('  UserAllocationDetail getAllocationRequest(AuthzToken authzToken, i64 projectId)')
    print('  bool updateAllocationRequest(AuthzToken authzToken, UserAllocationDetail allocDetail)')
    print('  i64 createUserSpecificResource(AuthzToken authzToken, UserSpecificResourceDetail allocDetail)')
    print('  bool deleteUserSpecificResource(AuthzToken authzToken, i64 projectId, string specificResource)')
    print('   getUserSpecificResource(AuthzToken authzToken, i64 projectId)')
    print('  bool updateUserSpecificResource(AuthzToken authzToken, i64 projectId,  listUserSpecificResource)')
    print('   getAllRequestsForAdmin(AuthzToken authzToken, string userName)')
    print('  bool assignReviewers(AuthzToken authzToken, i64 projectId, string reviewerId, string adminId)')
    print('  bool updateRequestByReviewer(AuthzToken authzToken, ReviewerAllocationDetail reviewerAllocationDetail)')
    print('   getAllRequestsForReviewers(AuthzToken authzToken, string userName)')
    print('   getAllReviewsForARequest(AuthzToken authzToken, i64 projectId)')
    print('  i64 createReviewerSpecificResource(AuthzToken authzToken, ReviewerSpecificResourceDetail allocDetail)')
    print('  bool deleteReviewerSpecificResource(AuthzToken authzToken, i64 projectId, string specificResource)')
    print('   getReviewerSpecificResource(AuthzToken authzToken, i64 projectId)')
    print('  bool updateReviewerSpecificResource(AuthzToken authzToken, i64 projectId,  listReviewerSpecificResource)')
    print('   getAllAssignedReviewersForRequest(AuthzToken authzToken, i64 projectId)')
    print('  bool approveRequest(AuthzToken authzToken, i64 projectId, string adminId, i64 startDate, i64 endDate, i64 awardAllocation, string specificResourceName)')
    print('  bool rejectRequest(AuthzToken authzToken, i64 projectId, string adminId, string rejectionReason, string specificResourceName)')
    print('  i64 getRemainingAllocationUnits(AuthzToken authzToken, string specificResource)')
    print('  bool deductAllocationUnits(AuthzToken authzToken, string specificResource, i64 allocationUnits)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = AllocationRegistryService.Client(protocol)
transport.open()

if cmd == 'createAllocationRequest':
    if len(args) != 2:
        print('createAllocationRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.createAllocationRequest(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteAllocationRequest':
    if len(args) != 2:
        print('deleteAllocationRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteAllocationRequest(eval(args[0]), eval(args[1]),))

elif cmd == 'getAllocationRequest':
    if len(args) != 2:
        print('getAllocationRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllocationRequest(eval(args[0]), eval(args[1]),))

elif cmd == 'updateAllocationRequest':
    if len(args) != 2:
        print('updateAllocationRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateAllocationRequest(eval(args[0]), eval(args[1]),))

elif cmd == 'createUserSpecificResource':
    if len(args) != 2:
        print('createUserSpecificResource requires 2 args')
        sys.exit(1)
    pp.pprint(client.createUserSpecificResource(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteUserSpecificResource':
    if len(args) != 3:
        print('deleteUserSpecificResource requires 3 args')
        sys.exit(1)
    pp.pprint(client.deleteUserSpecificResource(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getUserSpecificResource':
    if len(args) != 2:
        print('getUserSpecificResource requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUserSpecificResource(eval(args[0]), eval(args[1]),))

elif cmd == 'updateUserSpecificResource':
    if len(args) != 3:
        print('updateUserSpecificResource requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateUserSpecificResource(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAllRequestsForAdmin':
    if len(args) != 2:
        print('getAllRequestsForAdmin requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllRequestsForAdmin(eval(args[0]), args[1],))

elif cmd == 'assignReviewers':
    if len(args) != 4:
        print('assignReviewers requires 4 args')
        sys.exit(1)
    pp.pprint(client.assignReviewers(eval(args[0]), eval(args[1]), args[2], args[3],))

elif cmd == 'updateRequestByReviewer':
    if len(args) != 2:
        print('updateRequestByReviewer requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateRequestByReviewer(eval(args[0]), eval(args[1]),))

elif cmd == 'getAllRequestsForReviewers':
    if len(args) != 2:
        print('getAllRequestsForReviewers requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllRequestsForReviewers(eval(args[0]), args[1],))

elif cmd == 'getAllReviewsForARequest':
    if len(args) != 2:
        print('getAllReviewsForARequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllReviewsForARequest(eval(args[0]), eval(args[1]),))

elif cmd == 'createReviewerSpecificResource':
    if len(args) != 2:
        print('createReviewerSpecificResource requires 2 args')
        sys.exit(1)
    pp.pprint(client.createReviewerSpecificResource(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteReviewerSpecificResource':
    if len(args) != 3:
        print('deleteReviewerSpecificResource requires 3 args')
        sys.exit(1)
    pp.pprint(client.deleteReviewerSpecificResource(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getReviewerSpecificResource':
    if len(args) != 2:
        print('getReviewerSpecificResource requires 2 args')
        sys.exit(1)
    pp.pprint(client.getReviewerSpecificResource(eval(args[0]), eval(args[1]),))

elif cmd == 'updateReviewerSpecificResource':
    if len(args) != 3:
        print('updateReviewerSpecificResource requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateReviewerSpecificResource(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAllAssignedReviewersForRequest':
    if len(args) != 2:
        print('getAllAssignedReviewersForRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllAssignedReviewersForRequest(eval(args[0]), eval(args[1]),))

elif cmd == 'approveRequest':
    if len(args) != 7:
        print('approveRequest requires 7 args')
        sys.exit(1)
    pp.pprint(client.approveRequest(eval(args[0]), eval(args[1]), args[2], eval(args[3]), eval(args[4]), eval(args[5]), args[6],))

elif cmd == 'rejectRequest':
    if len(args) != 5:
        print('rejectRequest requires 5 args')
        sys.exit(1)
    pp.pprint(client.rejectRequest(eval(args[0]), eval(args[1]), args[2], args[3], args[4],))

elif cmd == 'getRemainingAllocationUnits':
    if len(args) != 2:
        print('getRemainingAllocationUnits requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRemainingAllocationUnits(eval(args[0]), args[1],))

elif cmd == 'deductAllocationUnits':
    if len(args) != 3:
        print('deductAllocationUnits requires 3 args')
        sys.exit(1)
    pp.pprint(client.deductAllocationUnits(eval(args[0]), args[1], eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
