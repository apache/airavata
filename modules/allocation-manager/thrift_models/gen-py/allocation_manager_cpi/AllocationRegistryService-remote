#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from allocation_manager_cpi import AllocationRegistryService
from allocation_manager_cpi.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string createAllocationRequest(UserAllocationDetail allocDetail)')
    print('  bool deleteAllocationRequest(string projectId)')
    print('  UserAllocationDetail getAllocationRequest(string projectId)')
    print('  bool updateAllocationRequest(UserAllocationDetail allocDetail)')
    print('  string getAllocationRequestStatus(string projectId)')
    print('  string getAllocationRequestUserEmail(string userName)')
    print('  string getAllocationManagerAdminEmail(string userType)')
    print('  string getAllocationRequestUserName(string projectId)')
    print('   getAllRequestsForAdmin(string userName)')
    print('  bool assignReviewers(string projectId, string reviewerId, string adminId)')
    print('  bool updateRequestByReviewer(ReviewerAllocationDetail reviewerAllocationDetail)')
    print('  bool isAdmin(string userName)')
    print('  bool isReviewer(string userName)')
    print('   getAllRequestsForReviewers(string userName)')
    print('  UserDetail getUserDetails(string userName)')
    print('   getAllReviewsForARequest(string projectId)')
    print('   getAllReviewers()')
    print('   getAllUnassignedReviewersForRequest(string projectId)')
    print('  bool approveRequest(string projectId, string adminId, i64 startDate, i64 endDate, i64 awardAllocation)')
    print('  bool rejectRequest(string projectId, string adminId)')
    print('  bool createUser(UserDetail userDetail)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = AllocationRegistryService.Client(protocol)
transport.open()

if cmd == 'createAllocationRequest':
    if len(args) != 1:
        print('createAllocationRequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.createAllocationRequest(eval(args[0]),))

elif cmd == 'deleteAllocationRequest':
    if len(args) != 1:
        print('deleteAllocationRequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteAllocationRequest(args[0],))

elif cmd == 'getAllocationRequest':
    if len(args) != 1:
        print('getAllocationRequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllocationRequest(args[0],))

elif cmd == 'updateAllocationRequest':
    if len(args) != 1:
        print('updateAllocationRequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateAllocationRequest(eval(args[0]),))

elif cmd == 'getAllocationRequestStatus':
    if len(args) != 1:
        print('getAllocationRequestStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllocationRequestStatus(args[0],))

elif cmd == 'getAllocationRequestUserEmail':
    if len(args) != 1:
        print('getAllocationRequestUserEmail requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllocationRequestUserEmail(args[0],))

elif cmd == 'getAllocationManagerAdminEmail':
    if len(args) != 1:
        print('getAllocationManagerAdminEmail requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllocationManagerAdminEmail(args[0],))

elif cmd == 'getAllocationRequestUserName':
    if len(args) != 1:
        print('getAllocationRequestUserName requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllocationRequestUserName(args[0],))

elif cmd == 'getAllRequestsForAdmin':
    if len(args) != 1:
        print('getAllRequestsForAdmin requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllRequestsForAdmin(args[0],))

elif cmd == 'assignReviewers':
    if len(args) != 3:
        print('assignReviewers requires 3 args')
        sys.exit(1)
    pp.pprint(client.assignReviewers(args[0], args[1], args[2],))

elif cmd == 'updateRequestByReviewer':
    if len(args) != 1:
        print('updateRequestByReviewer requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateRequestByReviewer(eval(args[0]),))

elif cmd == 'isAdmin':
    if len(args) != 1:
        print('isAdmin requires 1 args')
        sys.exit(1)
    pp.pprint(client.isAdmin(args[0],))

elif cmd == 'isReviewer':
    if len(args) != 1:
        print('isReviewer requires 1 args')
        sys.exit(1)
    pp.pprint(client.isReviewer(args[0],))

elif cmd == 'getAllRequestsForReviewers':
    if len(args) != 1:
        print('getAllRequestsForReviewers requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllRequestsForReviewers(args[0],))

elif cmd == 'getUserDetails':
    if len(args) != 1:
        print('getUserDetails requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserDetails(args[0],))

elif cmd == 'getAllReviewsForARequest':
    if len(args) != 1:
        print('getAllReviewsForARequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllReviewsForARequest(args[0],))

elif cmd == 'getAllReviewers':
    if len(args) != 0:
        print('getAllReviewers requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAllReviewers())

elif cmd == 'getAllUnassignedReviewersForRequest':
    if len(args) != 1:
        print('getAllUnassignedReviewersForRequest requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllUnassignedReviewersForRequest(args[0],))

elif cmd == 'approveRequest':
    if len(args) != 5:
        print('approveRequest requires 5 args')
        sys.exit(1)
    pp.pprint(client.approveRequest(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'rejectRequest':
    if len(args) != 2:
        print('rejectRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.rejectRequest(args[0], args[1],))

elif cmd == 'createUser':
    if len(args) != 1:
        print('createUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.createUser(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
