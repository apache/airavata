#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class UserAllocationDetail(object):
    """
    <p>Required allocation request details</p>
    <li>projectId : (primary key) Ask the user to assign project ID, but this project should unique, we will need an API endpoint to check whether this ID is not used by other projects and the username</li>
    <li>allocationStatus : Overall status of the allocation</li>
    <li>diskUsageRangePerJob : An optional field to help reviewer and PI for allocation approval</li>
    <li>documents : Resume, CV, PIâ€™s portfolio etc</li>
    <li>fieldOfScience :An optional field to help reviewer and PI for allocation approval</li>
    <li>keywords : Keyword will be helpful in search</li>
    <li>maxMemoryPerCpu :An optional field to help reviewer and PI for allocation approval</li>
    <li>numberOfCpuPerJob : An optional field to help reviewer and PI for allocation approval</li>
    <li>projectDescription :(Eg: Hypothesis, Model Systems, Methods, and Analysis)</li>
    <li>projectReviewedAndFundedBy : (Eg., NSF, NIH, DOD, DOE, None etc...). An optional field to help reviewer and PI for allocation approval</li>
    <li>requestedDate: The date the allocation was requested</li>
    <li>serviceUnits : 1 SU is approximately 1 workstation CPU hour, if the user fails to give a value, default value will be chosen.</li>
    <li>specificResourceSelection : This list will be fetched from resource discovery module, in case of community allocation, the request is subject to reviewers, PI discretion and availability</li>
    <li>title : Assign a title to allocation request</li>
    <li>typeOfAllocation : If the User has an exclusive allocation with third party organization and wants to use airavata middleware to manage jobs.</li>
    <li>typicalSuPerJob :  An optional field to help reviewer and PI for allocation approval</li>


    Attributes:
     - projectId
     - allocationStatus
     - comments
     - diskUsageRangePerJob
     - documents
     - keywords
     - maxMemoryPerCpu
     - numberOfCpuPerJob
     - projectDescription
     - requestedDate
     - title
     - typicalSuPerJob
     - username
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'projectId', None, None, ),  # 1
        (2, TType.STRING, 'allocationStatus', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'comments', 'UTF8', None, ),  # 3
        (4, TType.I64, 'diskUsageRangePerJob', None, None, ),  # 4
        (5, TType.STRING, 'documents', 'BINARY', None, ),  # 5
        (6, TType.STRING, 'keywords', 'UTF8', None, ),  # 6
        (7, TType.I64, 'maxMemoryPerCpu', None, None, ),  # 7
        (8, TType.I64, 'numberOfCpuPerJob', None, None, ),  # 8
        (9, TType.STRING, 'projectDescription', 'UTF8', None, ),  # 9
        (10, TType.I64, 'requestedDate', None, None, ),  # 10
        (11, TType.STRING, 'title', 'UTF8', None, ),  # 11
        (12, TType.I64, 'typicalSuPerJob', None, None, ),  # 12
        (13, TType.STRING, 'username', 'UTF8', None, ),  # 13
    )

    def __init__(self, projectId=None, allocationStatus=None, comments=None, diskUsageRangePerJob=None, documents=None, keywords=None, maxMemoryPerCpu=None, numberOfCpuPerJob=None, projectDescription=None, requestedDate=None, title=None, typicalSuPerJob=None, username=None,):
        self.projectId = projectId
        self.allocationStatus = allocationStatus
        self.comments = comments
        self.diskUsageRangePerJob = diskUsageRangePerJob
        self.documents = documents
        self.keywords = keywords
        self.maxMemoryPerCpu = maxMemoryPerCpu
        self.numberOfCpuPerJob = numberOfCpuPerJob
        self.projectDescription = projectDescription
        self.requestedDate = requestedDate
        self.title = title
        self.typicalSuPerJob = typicalSuPerJob
        self.username = username

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.allocationStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.comments = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.diskUsageRangePerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.documents = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.keywords = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.maxMemoryPerCpu = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.numberOfCpuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.projectDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.requestedDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.typicalSuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserAllocationDetail')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 1)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.allocationStatus is not None:
            oprot.writeFieldBegin('allocationStatus', TType.STRING, 2)
            oprot.writeString(self.allocationStatus.encode('utf-8') if sys.version_info[0] == 2 else self.allocationStatus)
            oprot.writeFieldEnd()
        if self.comments is not None:
            oprot.writeFieldBegin('comments', TType.STRING, 3)
            oprot.writeString(self.comments.encode('utf-8') if sys.version_info[0] == 2 else self.comments)
            oprot.writeFieldEnd()
        if self.diskUsageRangePerJob is not None:
            oprot.writeFieldBegin('diskUsageRangePerJob', TType.I64, 4)
            oprot.writeI64(self.diskUsageRangePerJob)
            oprot.writeFieldEnd()
        if self.documents is not None:
            oprot.writeFieldBegin('documents', TType.STRING, 5)
            oprot.writeBinary(self.documents)
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.STRING, 6)
            oprot.writeString(self.keywords.encode('utf-8') if sys.version_info[0] == 2 else self.keywords)
            oprot.writeFieldEnd()
        if self.maxMemoryPerCpu is not None:
            oprot.writeFieldBegin('maxMemoryPerCpu', TType.I64, 7)
            oprot.writeI64(self.maxMemoryPerCpu)
            oprot.writeFieldEnd()
        if self.numberOfCpuPerJob is not None:
            oprot.writeFieldBegin('numberOfCpuPerJob', TType.I64, 8)
            oprot.writeI64(self.numberOfCpuPerJob)
            oprot.writeFieldEnd()
        if self.projectDescription is not None:
            oprot.writeFieldBegin('projectDescription', TType.STRING, 9)
            oprot.writeString(self.projectDescription.encode('utf-8') if sys.version_info[0] == 2 else self.projectDescription)
            oprot.writeFieldEnd()
        if self.requestedDate is not None:
            oprot.writeFieldBegin('requestedDate', TType.I64, 10)
            oprot.writeI64(self.requestedDate)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 11)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.typicalSuPerJob is not None:
            oprot.writeFieldBegin('typicalSuPerJob', TType.I64, 12)
            oprot.writeI64(self.typicalSuPerJob)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 13)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserSpecificResourceDetail(object):
    """
    <p>User Specific Resource Detail</p>
    <li>Id: Unique id</li>
    <li>allocatedServiceUnits: Allocation requested by the user</li>
    <li>applicationsToBeUsed: Applications to be used</li>
    <li>endDate: End date updated by the admin</li>
    <li>projectId: Unique id of the project</li>
    <li>rejectionReason: Rejection reason updated by the admin</li>
    <li>resourceType: Resource type for the request</li>
    <li>specificResource: Specific resource for the request</li>
    <li>startDate: Start date of the allocation updated by the admin</li>
    <li>subStatus: Status of the specific resource</li>


    Attributes:
     - id
     - allocatedServiceUnits
     - applicationsToBeUsed
     - endDate
     - projectId
     - rejectionReason
     - requestedServiceUnits
     - resourceType
     - specificResource
     - startDate
     - subStatus
     - usedServiceUnits
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'id', None, None, ),  # 1
        (2, TType.I64, 'allocatedServiceUnits', None, None, ),  # 2
        (3, TType.STRING, 'applicationsToBeUsed', 'UTF8', None, ),  # 3
        (4, TType.I64, 'endDate', None, None, ),  # 4
        (5, TType.I64, 'projectId', None, None, ),  # 5
        (6, TType.STRING, 'rejectionReason', 'UTF8', None, ),  # 6
        (7, TType.I64, 'requestedServiceUnits', None, None, ),  # 7
        (8, TType.STRING, 'resourceType', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'specificResource', 'UTF8', None, ),  # 9
        (10, TType.I64, 'startDate', None, None, ),  # 10
        (11, TType.STRING, 'subStatus', 'UTF8', None, ),  # 11
        (12, TType.I64, 'usedServiceUnits', None, None, ),  # 12
    )

    def __init__(self, id=None, allocatedServiceUnits=None, applicationsToBeUsed=None, endDate=None, projectId=None, rejectionReason=None, requestedServiceUnits=None, resourceType=None, specificResource=None, startDate=None, subStatus=None, usedServiceUnits=None,):
        self.id = id
        self.allocatedServiceUnits = allocatedServiceUnits
        self.applicationsToBeUsed = applicationsToBeUsed
        self.endDate = endDate
        self.projectId = projectId
        self.rejectionReason = rejectionReason
        self.requestedServiceUnits = requestedServiceUnits
        self.resourceType = resourceType
        self.specificResource = specificResource
        self.startDate = startDate
        self.subStatus = subStatus
        self.usedServiceUnits = usedServiceUnits

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.allocatedServiceUnits = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.applicationsToBeUsed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.rejectionReason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.requestedServiceUnits = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.resourceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.specificResource = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.subStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.usedServiceUnits = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserSpecificResourceDetail')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.allocatedServiceUnits is not None:
            oprot.writeFieldBegin('allocatedServiceUnits', TType.I64, 2)
            oprot.writeI64(self.allocatedServiceUnits)
            oprot.writeFieldEnd()
        if self.applicationsToBeUsed is not None:
            oprot.writeFieldBegin('applicationsToBeUsed', TType.STRING, 3)
            oprot.writeString(self.applicationsToBeUsed.encode('utf-8') if sys.version_info[0] == 2 else self.applicationsToBeUsed)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.I64, 4)
            oprot.writeI64(self.endDate)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 5)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.rejectionReason is not None:
            oprot.writeFieldBegin('rejectionReason', TType.STRING, 6)
            oprot.writeString(self.rejectionReason.encode('utf-8') if sys.version_info[0] == 2 else self.rejectionReason)
            oprot.writeFieldEnd()
        if self.requestedServiceUnits is not None:
            oprot.writeFieldBegin('requestedServiceUnits', TType.I64, 7)
            oprot.writeI64(self.requestedServiceUnits)
            oprot.writeFieldEnd()
        if self.resourceType is not None:
            oprot.writeFieldBegin('resourceType', TType.STRING, 8)
            oprot.writeString(self.resourceType.encode('utf-8') if sys.version_info[0] == 2 else self.resourceType)
            oprot.writeFieldEnd()
        if self.specificResource is not None:
            oprot.writeFieldBegin('specificResource', TType.STRING, 9)
            oprot.writeString(self.specificResource.encode('utf-8') if sys.version_info[0] == 2 else self.specificResource)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 10)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.subStatus is not None:
            oprot.writeFieldBegin('subStatus', TType.STRING, 11)
            oprot.writeString(self.subStatus.encode('utf-8') if sys.version_info[0] == 2 else self.subStatus)
            oprot.writeFieldEnd()
        if self.usedServiceUnits is not None:
            oprot.writeFieldBegin('usedServiceUnits', TType.I64, 12)
            oprot.writeI64(self.usedServiceUnits)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReviewerAllocationDetail(object):
    """
    <p>Allocation Request status details</p>
    <li>projectId: Unique id of the project</li>
    <li>awardAllocation: Allocation awarded</li>
    <li>endDate: End date of the request</li>
    <li>reviewers: reviewers of the request</li>
    <li>startDate: Start date of the allocation</li>
    <li>status: Status of the allocation request</li>


    Attributes:
     - id
     - projectId
     - diskUsageRangePerJob
     - documents
     - maxMemoryPerCpu
     - numberOfCpuPerJob
     - reviewDate
     - typicalSuPerJob
     - username
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'id', None, None, ),  # 1
        (2, TType.I64, 'projectId', None, None, ),  # 2
        (3, TType.I64, 'diskUsageRangePerJob', None, None, ),  # 3
        (4, TType.STRING, 'documents', 'BINARY', None, ),  # 4
        (5, TType.I64, 'maxMemoryPerCpu', None, None, ),  # 5
        (6, TType.I64, 'numberOfCpuPerJob', None, None, ),  # 6
        (7, TType.I64, 'reviewDate', None, None, ),  # 7
        (8, TType.I64, 'typicalSuPerJob', None, None, ),  # 8
        (9, TType.STRING, 'username', 'UTF8', None, ),  # 9
    )

    def __init__(self, id=None, projectId=None, diskUsageRangePerJob=None, documents=None, maxMemoryPerCpu=None, numberOfCpuPerJob=None, reviewDate=None, typicalSuPerJob=None, username=None,):
        self.id = id
        self.projectId = projectId
        self.diskUsageRangePerJob = diskUsageRangePerJob
        self.documents = documents
        self.maxMemoryPerCpu = maxMemoryPerCpu
        self.numberOfCpuPerJob = numberOfCpuPerJob
        self.reviewDate = reviewDate
        self.typicalSuPerJob = typicalSuPerJob
        self.username = username

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.diskUsageRangePerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.documents = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.maxMemoryPerCpu = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.numberOfCpuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.reviewDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.typicalSuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ReviewerAllocationDetail')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 2)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.diskUsageRangePerJob is not None:
            oprot.writeFieldBegin('diskUsageRangePerJob', TType.I64, 3)
            oprot.writeI64(self.diskUsageRangePerJob)
            oprot.writeFieldEnd()
        if self.documents is not None:
            oprot.writeFieldBegin('documents', TType.STRING, 4)
            oprot.writeBinary(self.documents)
            oprot.writeFieldEnd()
        if self.maxMemoryPerCpu is not None:
            oprot.writeFieldBegin('maxMemoryPerCpu', TType.I64, 5)
            oprot.writeI64(self.maxMemoryPerCpu)
            oprot.writeFieldEnd()
        if self.numberOfCpuPerJob is not None:
            oprot.writeFieldBegin('numberOfCpuPerJob', TType.I64, 6)
            oprot.writeI64(self.numberOfCpuPerJob)
            oprot.writeFieldEnd()
        if self.reviewDate is not None:
            oprot.writeFieldBegin('reviewDate', TType.I64, 7)
            oprot.writeI64(self.reviewDate)
            oprot.writeFieldEnd()
        if self.typicalSuPerJob is not None:
            oprot.writeFieldBegin('typicalSuPerJob', TType.I64, 8)
            oprot.writeI64(self.typicalSuPerJob)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 9)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReviewerSpecificResourceDetail(object):
    """
    <p>Allocation Request status details</p>
    <li>projectId: Unique id of the project</li>
    <li>awardAllocation: Allocation awarded</li>
    <li>endDate: End date of the request</li>
    <li>reviewers: reviewers of the request</li>
    <li>startDate: Start date of the allocation</li>
    <li>status: Status of the allocation request</li>


    Attributes:
     - id
     - applicationsToBeUsed
     - comments
     - projectId
     - resourceType
     - reviewedServiceUnits
     - specificResource
     - username
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'id', None, None, ),  # 1
        (2, TType.STRING, 'applicationsToBeUsed', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'comments', 'UTF8', None, ),  # 3
        (4, TType.I64, 'projectId', None, None, ),  # 4
        (5, TType.STRING, 'resourceType', 'UTF8', None, ),  # 5
        (6, TType.I64, 'reviewedServiceUnits', None, None, ),  # 6
        (7, TType.STRING, 'specificResource', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'username', 'UTF8', None, ),  # 8
    )

    def __init__(self, id=None, applicationsToBeUsed=None, comments=None, projectId=None, resourceType=None, reviewedServiceUnits=None, specificResource=None, username=None,):
        self.id = id
        self.applicationsToBeUsed = applicationsToBeUsed
        self.comments = comments
        self.projectId = projectId
        self.resourceType = resourceType
        self.reviewedServiceUnits = reviewedServiceUnits
        self.specificResource = specificResource
        self.username = username

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.applicationsToBeUsed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.comments = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.resourceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.reviewedServiceUnits = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.specificResource = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ReviewerSpecificResourceDetail')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.applicationsToBeUsed is not None:
            oprot.writeFieldBegin('applicationsToBeUsed', TType.STRING, 2)
            oprot.writeString(self.applicationsToBeUsed.encode('utf-8') if sys.version_info[0] == 2 else self.applicationsToBeUsed)
            oprot.writeFieldEnd()
        if self.comments is not None:
            oprot.writeFieldBegin('comments', TType.STRING, 3)
            oprot.writeString(self.comments.encode('utf-8') if sys.version_info[0] == 2 else self.comments)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 4)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.resourceType is not None:
            oprot.writeFieldBegin('resourceType', TType.STRING, 5)
            oprot.writeString(self.resourceType.encode('utf-8') if sys.version_info[0] == 2 else self.resourceType)
            oprot.writeFieldEnd()
        if self.reviewedServiceUnits is not None:
            oprot.writeFieldBegin('reviewedServiceUnits', TType.I64, 6)
            oprot.writeI64(self.reviewedServiceUnits)
            oprot.writeFieldEnd()
        if self.specificResource is not None:
            oprot.writeFieldBegin('specificResource', TType.STRING, 7)
            oprot.writeString(self.specificResource.encode('utf-8') if sys.version_info[0] == 2 else self.specificResource)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 8)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProjectReviewer(object):
    """
    <p>Allocation Request status details</p>
    <li>projectId: Unique id of the project</li>
    <li>awardAllocation: Allocation awarded</li>
    <li>endDate: End date of the request</li>
    <li>reviewers: reviewers of the request</li>
    <li>startDate: Start date of the allocation</li>
    <li>status: Status of the allocation request</li>


    Attributes:
     - projectId
     - reviewerUsername
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'projectId', None, None, ),  # 1
        (2, TType.STRING, 'reviewerUsername', 'UTF8', None, ),  # 2
        (3, TType.I64, 'id', None, None, ),  # 3
    )

    def __init__(self, projectId=None, reviewerUsername=None, id=None,):
        self.projectId = projectId
        self.reviewerUsername = reviewerUsername
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.projectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reviewerUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProjectReviewer')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I64, 1)
            oprot.writeI64(self.projectId)
            oprot.writeFieldEnd()
        if self.reviewerUsername is not None:
            oprot.writeFieldBegin('reviewerUsername', TType.STRING, 2)
            oprot.writeString(self.reviewerUsername.encode('utf-8') if sys.version_info[0] == 2 else self.reviewerUsername)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 3)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AllocationManagerException(TException):
    """
    <p>Exception model used in the allocation manager service</p>


    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AllocationManagerException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
