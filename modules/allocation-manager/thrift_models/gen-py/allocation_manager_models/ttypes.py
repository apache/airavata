#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class UserAllocationDetail(object):
    """
    <p>Required allocation request details</p>
    <li>id : (primary key) Ask the user to assign project ID, but this project should unique, we will need an API endpoint to check whether this ID is not used by other projects and the username</li>
    <li>applicationsToBeUsed : Select the application that the user intends to use, according to application chosen here, resources that can be allocable will be fetch from resource discovery module. User will not be restricted to these application upon allocation grant, provided the resources allocated support the application.</li>
    <li>diskUsageRangePerJob : An optional field to help reviewer and PI for allocation approval</li>
    <li>documents : Resume, CV, PIâ€™s portfolio etc</li>
    <li>fieldOfScience :An optional field to help reviewer and PI for allocation approval</li>
    <li>keywords : Keyword will be helpful in search</li>
    <li>maxMemoryPerCpu :An optional field to help reviewer and PI for allocation approval</li>
    <li>numberOfCpuPerJob : An optional field to help reviewer and PI for allocation approval</li>
    <li>projectDescription :(Eg: Hypothesis, Model Systems, Methods, and Analysis)</li>
    <li>projectReviewedAndFundedBy : (Eg., NSF, NIH, DOD, DOE, None etc...). An optional field to help reviewer and PI for allocation approval</li>
    <li>requestedDate: The date the allocation was requested</li>
    <li>serviceUnits : 1 SU is approximately 1 workstation CPU hour, if the user fails to give a value, default value will be chosen.</li>
    <li>specificResourceSelection : This list will be fetched from resource discovery module, in case of community allocation, the request is subject to reviewers, PI discretion and availability</li>
    <li>title : Assign a title to allocation request</li>
    <li>typeOfAllocation : If the User has an exclusive allocation with third party organization and wants to use airavata middleware to manage jobs.</li>
    <li>typicalSuPerJob :  An optional field to help reviewer and PI for allocation approval</li>


    Attributes:
     - projectId
     - applicationsToBeUsed
     - diskUsageRangePerJob
     - documents
     - fieldOfScience
     - keywords
     - maxMemoryPerCpu
     - numberOfCpuPerJob
     - projectDescription
     - projectReviewedAndFundedBy
     - requestedDate
     - serviceUnits
     - specificResourceSelection
     - title
     - typeOfAllocation
     - typicalSuPerJob
     - awardAllocation
     - startDate
     - endDate
     - status
     - username
    """


    def __init__(self, projectId=None, applicationsToBeUsed=None, diskUsageRangePerJob=None, documents=None, fieldOfScience=None, keywords=None, maxMemoryPerCpu=None, numberOfCpuPerJob=None, projectDescription=None, projectReviewedAndFundedBy=None, requestedDate=None, serviceUnits=None, specificResourceSelection=None, title=None, typeOfAllocation=None, typicalSuPerJob=None, awardAllocation=None, startDate=None, endDate=None, status=None, username=None,):
        self.projectId = projectId
        self.applicationsToBeUsed = applicationsToBeUsed
        self.diskUsageRangePerJob = diskUsageRangePerJob
        self.documents = documents
        self.fieldOfScience = fieldOfScience
        self.keywords = keywords
        self.maxMemoryPerCpu = maxMemoryPerCpu
        self.numberOfCpuPerJob = numberOfCpuPerJob
        self.projectDescription = projectDescription
        self.projectReviewedAndFundedBy = projectReviewedAndFundedBy
        self.requestedDate = requestedDate
        self.serviceUnits = serviceUnits
        self.specificResourceSelection = specificResourceSelection
        self.title = title
        self.typeOfAllocation = typeOfAllocation
        self.typicalSuPerJob = typicalSuPerJob
        self.awardAllocation = awardAllocation
        self.startDate = startDate
        self.endDate = endDate
        self.status = status
        self.username = username

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.projectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.applicationsToBeUsed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.diskUsageRangePerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.documents = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.fieldOfScience = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.keywords = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.maxMemoryPerCpu = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.numberOfCpuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.projectDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.projectReviewedAndFundedBy = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.requestedDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.serviceUnits = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.specificResourceSelection = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.typeOfAllocation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.typicalSuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.awardAllocation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.endDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserAllocationDetail')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.STRING, 1)
            oprot.writeString(self.projectId.encode('utf-8') if sys.version_info[0] == 2 else self.projectId)
            oprot.writeFieldEnd()
        if self.applicationsToBeUsed is not None:
            oprot.writeFieldBegin('applicationsToBeUsed', TType.STRING, 2)
            oprot.writeString(self.applicationsToBeUsed.encode('utf-8') if sys.version_info[0] == 2 else self.applicationsToBeUsed)
            oprot.writeFieldEnd()
        if self.diskUsageRangePerJob is not None:
            oprot.writeFieldBegin('diskUsageRangePerJob', TType.I64, 3)
            oprot.writeI64(self.diskUsageRangePerJob)
            oprot.writeFieldEnd()
        if self.documents is not None:
            oprot.writeFieldBegin('documents', TType.STRING, 4)
            oprot.writeBinary(self.documents)
            oprot.writeFieldEnd()
        if self.fieldOfScience is not None:
            oprot.writeFieldBegin('fieldOfScience', TType.STRING, 5)
            oprot.writeString(self.fieldOfScience.encode('utf-8') if sys.version_info[0] == 2 else self.fieldOfScience)
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.STRING, 6)
            oprot.writeString(self.keywords.encode('utf-8') if sys.version_info[0] == 2 else self.keywords)
            oprot.writeFieldEnd()
        if self.maxMemoryPerCpu is not None:
            oprot.writeFieldBegin('maxMemoryPerCpu', TType.I64, 7)
            oprot.writeI64(self.maxMemoryPerCpu)
            oprot.writeFieldEnd()
        if self.numberOfCpuPerJob is not None:
            oprot.writeFieldBegin('numberOfCpuPerJob', TType.I64, 8)
            oprot.writeI64(self.numberOfCpuPerJob)
            oprot.writeFieldEnd()
        if self.projectDescription is not None:
            oprot.writeFieldBegin('projectDescription', TType.STRING, 9)
            oprot.writeString(self.projectDescription.encode('utf-8') if sys.version_info[0] == 2 else self.projectDescription)
            oprot.writeFieldEnd()
        if self.projectReviewedAndFundedBy is not None:
            oprot.writeFieldBegin('projectReviewedAndFundedBy', TType.STRING, 10)
            oprot.writeString(self.projectReviewedAndFundedBy.encode('utf-8') if sys.version_info[0] == 2 else self.projectReviewedAndFundedBy)
            oprot.writeFieldEnd()
        if self.requestedDate is not None:
            oprot.writeFieldBegin('requestedDate', TType.I64, 11)
            oprot.writeI64(self.requestedDate)
            oprot.writeFieldEnd()
        if self.serviceUnits is not None:
            oprot.writeFieldBegin('serviceUnits', TType.I64, 12)
            oprot.writeI64(self.serviceUnits)
            oprot.writeFieldEnd()
        if self.specificResourceSelection is not None:
            oprot.writeFieldBegin('specificResourceSelection', TType.STRING, 13)
            oprot.writeString(self.specificResourceSelection.encode('utf-8') if sys.version_info[0] == 2 else self.specificResourceSelection)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 14)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.typeOfAllocation is not None:
            oprot.writeFieldBegin('typeOfAllocation', TType.STRING, 15)
            oprot.writeString(self.typeOfAllocation.encode('utf-8') if sys.version_info[0] == 2 else self.typeOfAllocation)
            oprot.writeFieldEnd()
        if self.typicalSuPerJob is not None:
            oprot.writeFieldBegin('typicalSuPerJob', TType.I64, 16)
            oprot.writeI64(self.typicalSuPerJob)
            oprot.writeFieldEnd()
        if self.awardAllocation is not None:
            oprot.writeFieldBegin('awardAllocation', TType.I64, 17)
            oprot.writeI64(self.awardAllocation)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 18)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.I64, 19)
            oprot.writeI64(self.endDate)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 20)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 21)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReviewerAllocationDetail(object):
    """
    Attributes:
     - projectId
     - applicationsToBeUsed
     - diskUsageRangePerJob
     - documents
     - fieldOfScience
     - keywords
     - maxMemoryPerCpu
     - numberOfCpuPerJob
     - projectDescription
     - projectReviewedAndFundedBy
     - requestedDate
     - serviceUnits
     - specificResourceSelection
     - title
     - typeOfAllocation
     - typicalSuPerJob
     - awardAllocation
     - startDate
     - endDate
     - status
     - username
     - id
    """


    def __init__(self, projectId=None, applicationsToBeUsed=None, diskUsageRangePerJob=None, documents=None, fieldOfScience=None, keywords=None, maxMemoryPerCpu=None, numberOfCpuPerJob=None, projectDescription=None, projectReviewedAndFundedBy=None, requestedDate=None, serviceUnits=None, specificResourceSelection=None, title=None, typeOfAllocation=None, typicalSuPerJob=None, awardAllocation=None, startDate=None, endDate=None, status=None, username=None, id=None,):
        self.projectId = projectId
        self.applicationsToBeUsed = applicationsToBeUsed
        self.diskUsageRangePerJob = diskUsageRangePerJob
        self.documents = documents
        self.fieldOfScience = fieldOfScience
        self.keywords = keywords
        self.maxMemoryPerCpu = maxMemoryPerCpu
        self.numberOfCpuPerJob = numberOfCpuPerJob
        self.projectDescription = projectDescription
        self.projectReviewedAndFundedBy = projectReviewedAndFundedBy
        self.requestedDate = requestedDate
        self.serviceUnits = serviceUnits
        self.specificResourceSelection = specificResourceSelection
        self.title = title
        self.typeOfAllocation = typeOfAllocation
        self.typicalSuPerJob = typicalSuPerJob
        self.awardAllocation = awardAllocation
        self.startDate = startDate
        self.endDate = endDate
        self.status = status
        self.username = username
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.projectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.applicationsToBeUsed = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.diskUsageRangePerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.documents = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.fieldOfScience = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.keywords = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.maxMemoryPerCpu = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.numberOfCpuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.projectDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.projectReviewedAndFundedBy = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.requestedDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.serviceUnits = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.specificResourceSelection = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.typeOfAllocation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.typicalSuPerJob = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.awardAllocation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I64:
                    self.startDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.endDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReviewerAllocationDetail')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.STRING, 1)
            oprot.writeString(self.projectId.encode('utf-8') if sys.version_info[0] == 2 else self.projectId)
            oprot.writeFieldEnd()
        if self.applicationsToBeUsed is not None:
            oprot.writeFieldBegin('applicationsToBeUsed', TType.STRING, 2)
            oprot.writeString(self.applicationsToBeUsed.encode('utf-8') if sys.version_info[0] == 2 else self.applicationsToBeUsed)
            oprot.writeFieldEnd()
        if self.diskUsageRangePerJob is not None:
            oprot.writeFieldBegin('diskUsageRangePerJob', TType.I64, 3)
            oprot.writeI64(self.diskUsageRangePerJob)
            oprot.writeFieldEnd()
        if self.documents is not None:
            oprot.writeFieldBegin('documents', TType.STRING, 4)
            oprot.writeBinary(self.documents)
            oprot.writeFieldEnd()
        if self.fieldOfScience is not None:
            oprot.writeFieldBegin('fieldOfScience', TType.STRING, 5)
            oprot.writeString(self.fieldOfScience.encode('utf-8') if sys.version_info[0] == 2 else self.fieldOfScience)
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.STRING, 6)
            oprot.writeString(self.keywords.encode('utf-8') if sys.version_info[0] == 2 else self.keywords)
            oprot.writeFieldEnd()
        if self.maxMemoryPerCpu is not None:
            oprot.writeFieldBegin('maxMemoryPerCpu', TType.I64, 7)
            oprot.writeI64(self.maxMemoryPerCpu)
            oprot.writeFieldEnd()
        if self.numberOfCpuPerJob is not None:
            oprot.writeFieldBegin('numberOfCpuPerJob', TType.I64, 8)
            oprot.writeI64(self.numberOfCpuPerJob)
            oprot.writeFieldEnd()
        if self.projectDescription is not None:
            oprot.writeFieldBegin('projectDescription', TType.STRING, 9)
            oprot.writeString(self.projectDescription.encode('utf-8') if sys.version_info[0] == 2 else self.projectDescription)
            oprot.writeFieldEnd()
        if self.projectReviewedAndFundedBy is not None:
            oprot.writeFieldBegin('projectReviewedAndFundedBy', TType.STRING, 10)
            oprot.writeString(self.projectReviewedAndFundedBy.encode('utf-8') if sys.version_info[0] == 2 else self.projectReviewedAndFundedBy)
            oprot.writeFieldEnd()
        if self.requestedDate is not None:
            oprot.writeFieldBegin('requestedDate', TType.I64, 11)
            oprot.writeI64(self.requestedDate)
            oprot.writeFieldEnd()
        if self.serviceUnits is not None:
            oprot.writeFieldBegin('serviceUnits', TType.I64, 12)
            oprot.writeI64(self.serviceUnits)
            oprot.writeFieldEnd()
        if self.specificResourceSelection is not None:
            oprot.writeFieldBegin('specificResourceSelection', TType.STRING, 13)
            oprot.writeString(self.specificResourceSelection.encode('utf-8') if sys.version_info[0] == 2 else self.specificResourceSelection)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 14)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.typeOfAllocation is not None:
            oprot.writeFieldBegin('typeOfAllocation', TType.STRING, 15)
            oprot.writeString(self.typeOfAllocation.encode('utf-8') if sys.version_info[0] == 2 else self.typeOfAllocation)
            oprot.writeFieldEnd()
        if self.typicalSuPerJob is not None:
            oprot.writeFieldBegin('typicalSuPerJob', TType.I64, 16)
            oprot.writeI64(self.typicalSuPerJob)
            oprot.writeFieldEnd()
        if self.awardAllocation is not None:
            oprot.writeFieldBegin('awardAllocation', TType.I64, 17)
            oprot.writeI64(self.awardAllocation)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.I64, 18)
            oprot.writeI64(self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.I64, 19)
            oprot.writeI64(self.endDate)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 20)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 21)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 22)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProjectReviewer(object):
    """
    <p>Allocation Request status details</p>
    <li>projectId: Unique id of the project</li>
    <li>awardAllocation: Allocation awarded</li>
    <li>endDate: End date of the request</li>
    <li>reviewers: reviewers of the request</li>
    <li>startDate: Start date of the allocation</li>
    <li>status: Status of the allocation request</li>


    Attributes:
     - projectId
     - reviewer
     - id
    """


    def __init__(self, projectId=None, reviewer=None, id=None,):
        self.projectId = projectId
        self.reviewer = reviewer
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.projectId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reviewer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProjectReviewer')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.STRING, 1)
            oprot.writeString(self.projectId.encode('utf-8') if sys.version_info[0] == 2 else self.projectId)
            oprot.writeFieldEnd()
        if self.reviewer is not None:
            oprot.writeFieldBegin('reviewer', TType.STRING, 2)
            oprot.writeString(self.reviewer.encode('utf-8') if sys.version_info[0] == 2 else self.reviewer)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 3)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserDetail(object):
    """
    <p>A user should have an account with airavata to request an allocation</p>
    <li>username : Login Username</li>
    <li>email :Login email</li>
    <li>fullName: Full name of the user</li>
    <li>Password: Password of the user</li>
    <li>userType: Type of the user</li>


    Attributes:
     - username
     - email
     - fullName
     - password
     - userType
    """


    def __init__(self, username=None, email=None, fullName=None, password=None, userType=None,):
        self.username = username
        self.email = email
        self.fullName = fullName
        self.password = password
        self.userType = userType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fullName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.userType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserDetail')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.fullName is not None:
            oprot.writeFieldBegin('fullName', TType.STRING, 3)
            oprot.writeString(self.fullName.encode('utf-8') if sys.version_info[0] == 2 else self.fullName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.userType is not None:
            oprot.writeFieldBegin('userType', TType.STRING, 5)
            oprot.writeString(self.userType.encode('utf-8') if sys.version_info[0] == 2 else self.userType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AllocationManagerException(TException):
    """
    <p>Exception model used in the allocation manager service</p>


    Attributes:
     - message
    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AllocationManagerException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UserAllocationDetail)
UserAllocationDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'projectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'applicationsToBeUsed', 'UTF8', None, ),  # 2
    (3, TType.I64, 'diskUsageRangePerJob', None, None, ),  # 3
    (4, TType.STRING, 'documents', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'fieldOfScience', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'keywords', 'UTF8', None, ),  # 6
    (7, TType.I64, 'maxMemoryPerCpu', None, None, ),  # 7
    (8, TType.I64, 'numberOfCpuPerJob', None, None, ),  # 8
    (9, TType.STRING, 'projectDescription', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'projectReviewedAndFundedBy', 'UTF8', None, ),  # 10
    (11, TType.I64, 'requestedDate', None, None, ),  # 11
    (12, TType.I64, 'serviceUnits', None, None, ),  # 12
    (13, TType.STRING, 'specificResourceSelection', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'title', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'typeOfAllocation', 'UTF8', None, ),  # 15
    (16, TType.I64, 'typicalSuPerJob', None, None, ),  # 16
    (17, TType.I64, 'awardAllocation', None, None, ),  # 17
    (18, TType.I64, 'startDate', None, None, ),  # 18
    (19, TType.I64, 'endDate', None, None, ),  # 19
    (20, TType.STRING, 'status', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'username', 'UTF8', None, ),  # 21
)
all_structs.append(ReviewerAllocationDetail)
ReviewerAllocationDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'projectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'applicationsToBeUsed', 'UTF8', None, ),  # 2
    (3, TType.I64, 'diskUsageRangePerJob', None, None, ),  # 3
    (4, TType.STRING, 'documents', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'fieldOfScience', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'keywords', 'UTF8', None, ),  # 6
    (7, TType.I64, 'maxMemoryPerCpu', None, None, ),  # 7
    (8, TType.I64, 'numberOfCpuPerJob', None, None, ),  # 8
    (9, TType.STRING, 'projectDescription', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'projectReviewedAndFundedBy', 'UTF8', None, ),  # 10
    (11, TType.I64, 'requestedDate', None, None, ),  # 11
    (12, TType.I64, 'serviceUnits', None, None, ),  # 12
    (13, TType.STRING, 'specificResourceSelection', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'title', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'typeOfAllocation', 'UTF8', None, ),  # 15
    (16, TType.I64, 'typicalSuPerJob', None, None, ),  # 16
    (17, TType.I64, 'awardAllocation', None, None, ),  # 17
    (18, TType.I64, 'startDate', None, None, ),  # 18
    (19, TType.I64, 'endDate', None, None, ),  # 19
    (20, TType.STRING, 'status', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'username', 'UTF8', None, ),  # 21
    (22, TType.I64, 'id', None, None, ),  # 22
)
all_structs.append(ProjectReviewer)
ProjectReviewer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'projectId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'reviewer', 'UTF8', None, ),  # 2
    (3, TType.I64, 'id', None, None, ),  # 3
)
all_structs.append(UserDetail)
UserDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'email', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fullName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'userType', 'UTF8', None, ),  # 5
)
all_structs.append(AllocationManagerException)
AllocationManagerException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
fix_spec(all_structs)
del all_structs
