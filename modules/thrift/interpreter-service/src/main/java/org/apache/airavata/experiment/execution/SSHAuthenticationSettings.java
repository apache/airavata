/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.experiment.execution;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SSHAuthenticationSettings implements org.apache.thrift.TBase<SSHAuthenticationSettings, SSHAuthenticationSettings._Fields>, java.io.Serializable, Cloneable, Comparable<SSHAuthenticationSettings> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SSHAuthenticationSettings");

    private static final org.apache.thrift.protocol.TField ACCESS_KEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKeyID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECRET_ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretAccessKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new SSHAuthenticationSettingsStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SSHAuthenticationSettingsTupleSchemeFactory());
    }

    public String accessKeyID; // optional
    public String secretAccessKey; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ACCESS_KEY_ID((short)1, "accessKeyID"),
        SECRET_ACCESS_KEY((short)2, "secretAccessKey");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // ACCESS_KEY_ID
                    return ACCESS_KEY_ID;
                case 2: // SECRET_ACCESS_KEY
                    return SECRET_ACCESS_KEY;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private _Fields optionals[] = {_Fields.ACCESS_KEY_ID,_Fields.SECRET_ACCESS_KEY};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ACCESS_KEY_ID, new org.apache.thrift.meta_data.FieldMetaData("accessKeyID", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SECRET_ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretAccessKey", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SSHAuthenticationSettings.class, metaDataMap);
    }

    public SSHAuthenticationSettings() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SSHAuthenticationSettings(SSHAuthenticationSettings other) {
        if (other.isSetAccessKeyID()) {
            this.accessKeyID = other.accessKeyID;
        }
        if (other.isSetSecretAccessKey()) {
            this.secretAccessKey = other.secretAccessKey;
        }
    }

    public SSHAuthenticationSettings deepCopy() {
        return new SSHAuthenticationSettings(this);
    }

    @Override
    public void clear() {
        this.accessKeyID = null;
        this.secretAccessKey = null;
    }

    public String getAccessKeyID() {
        return this.accessKeyID;
    }

    public SSHAuthenticationSettings setAccessKeyID(String accessKeyID) {
        this.accessKeyID = accessKeyID;
        return this;
    }

    public void unsetAccessKeyID() {
        this.accessKeyID = null;
    }

    /** Returns true if field accessKeyID is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessKeyID() {
        return this.accessKeyID != null;
    }

    public void setAccessKeyIDIsSet(boolean value) {
        if (!value) {
            this.accessKeyID = null;
        }
    }

    public String getSecretAccessKey() {
        return this.secretAccessKey;
    }

    public SSHAuthenticationSettings setSecretAccessKey(String secretAccessKey) {
        this.secretAccessKey = secretAccessKey;
        return this;
    }

    public void unsetSecretAccessKey() {
        this.secretAccessKey = null;
    }

    /** Returns true if field secretAccessKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSecretAccessKey() {
        return this.secretAccessKey != null;
    }

    public void setSecretAccessKeyIsSet(boolean value) {
        if (!value) {
            this.secretAccessKey = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case ACCESS_KEY_ID:
                if (value == null) {
                    unsetAccessKeyID();
                } else {
                    setAccessKeyID((String)value);
                }
                break;

            case SECRET_ACCESS_KEY:
                if (value == null) {
                    unsetSecretAccessKey();
                } else {
                    setSecretAccessKey((String)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case ACCESS_KEY_ID:
                return getAccessKeyID();

            case SECRET_ACCESS_KEY:
                return getSecretAccessKey();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case ACCESS_KEY_ID:
                return isSetAccessKeyID();
            case SECRET_ACCESS_KEY:
                return isSetSecretAccessKey();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SSHAuthenticationSettings)
            return this.equals((SSHAuthenticationSettings)that);
        return false;
    }

    public boolean equals(SSHAuthenticationSettings that) {
        if (that == null)
            return false;

        boolean this_present_accessKeyID = true && this.isSetAccessKeyID();
        boolean that_present_accessKeyID = true && that.isSetAccessKeyID();
        if (this_present_accessKeyID || that_present_accessKeyID) {
            if (!(this_present_accessKeyID && that_present_accessKeyID))
                return false;
            if (!this.accessKeyID.equals(that.accessKeyID))
                return false;
        }

        boolean this_present_secretAccessKey = true && this.isSetSecretAccessKey();
        boolean that_present_secretAccessKey = true && that.isSetSecretAccessKey();
        if (this_present_secretAccessKey || that_present_secretAccessKey) {
            if (!(this_present_secretAccessKey && that_present_secretAccessKey))
                return false;
            if (!this.secretAccessKey.equals(that.secretAccessKey))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(SSHAuthenticationSettings other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAccessKeyID()).compareTo(other.isSetAccessKeyID());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAccessKeyID()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKeyID, other.accessKeyID);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSecretAccessKey()).compareTo(other.isSetSecretAccessKey());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSecretAccessKey()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretAccessKey, other.secretAccessKey);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SSHAuthenticationSettings(");
        boolean first = true;

        if (isSetAccessKeyID()) {
            sb.append("accessKeyID:");
            if (this.accessKeyID == null) {
                sb.append("null");
            } else {
                sb.append(this.accessKeyID);
            }
            first = false;
        }
        if (isSetSecretAccessKey()) {
            if (!first) sb.append(", ");
            sb.append("secretAccessKey:");
            if (this.secretAccessKey == null) {
                sb.append("null");
            } else {
                sb.append(this.secretAccessKey);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SSHAuthenticationSettingsStandardSchemeFactory implements SchemeFactory {
        public SSHAuthenticationSettingsStandardScheme getScheme() {
            return new SSHAuthenticationSettingsStandardScheme();
        }
    }

    private static class SSHAuthenticationSettingsStandardScheme extends StandardScheme<SSHAuthenticationSettings> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SSHAuthenticationSettings struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ACCESS_KEY_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.accessKeyID = iprot.readString();
                            struct.setAccessKeyIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SECRET_ACCESS_KEY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.secretAccessKey = iprot.readString();
                            struct.setSecretAccessKeyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SSHAuthenticationSettings struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.accessKeyID != null) {
                if (struct.isSetAccessKeyID()) {
                    oprot.writeFieldBegin(ACCESS_KEY_ID_FIELD_DESC);
                    oprot.writeString(struct.accessKeyID);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.secretAccessKey != null) {
                if (struct.isSetSecretAccessKey()) {
                    oprot.writeFieldBegin(SECRET_ACCESS_KEY_FIELD_DESC);
                    oprot.writeString(struct.secretAccessKey);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SSHAuthenticationSettingsTupleSchemeFactory implements SchemeFactory {
        public SSHAuthenticationSettingsTupleScheme getScheme() {
            return new SSHAuthenticationSettingsTupleScheme();
        }
    }

    private static class SSHAuthenticationSettingsTupleScheme extends TupleScheme<SSHAuthenticationSettings> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SSHAuthenticationSettings struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetAccessKeyID()) {
                optionals.set(0);
            }
            if (struct.isSetSecretAccessKey()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetAccessKeyID()) {
                oprot.writeString(struct.accessKeyID);
            }
            if (struct.isSetSecretAccessKey()) {
                oprot.writeString(struct.secretAccessKey);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SSHAuthenticationSettings struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.accessKeyID = iprot.readString();
                struct.setAccessKeyIDIsSet(true);
            }
            if (incoming.get(1)) {
                struct.secretAccessKey = iprot.readString();
                struct.setSecretAccessKeyIsSet(true);
            }
        }
    }

}

