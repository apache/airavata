/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.experiment.execution;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NodeSettings implements org.apache.thrift.TBase<NodeSettings, NodeSettings._Fields>, java.io.Serializable, Cloneable, Comparable<NodeSettings> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeSettings");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_SCHEDULING_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostSchedulingSettings", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField HPC_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("hpcSettings", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_VALUE_PAIR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nameValuePairList", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeSettingsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeSettingsTupleSchemeFactory());
  }

  public String nodeId; // required
  public String serviceId; // required
  public HostSchedulingSettings hostSchedulingSettings; // required
  public HPCSettings hpcSettings; // required
  public List<NameValuePairType> nameValuePairList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    SERVICE_ID((short)2, "serviceId"),
    HOST_SCHEDULING_SETTINGS((short)3, "hostSchedulingSettings"),
    HPC_SETTINGS((short)4, "hpcSettings"),
    NAME_VALUE_PAIR_LIST((short)5, "nameValuePairList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // SERVICE_ID
          return SERVICE_ID;
        case 3: // HOST_SCHEDULING_SETTINGS
          return HOST_SCHEDULING_SETTINGS;
        case 4: // HPC_SETTINGS
          return HPC_SETTINGS;
        case 5: // NAME_VALUE_PAIR_LIST
          return NAME_VALUE_PAIR_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_SCHEDULING_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("hostSchedulingSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostSchedulingSettings.class)));
    tmpMap.put(_Fields.HPC_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("hpcSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HPCSettings.class)));
    tmpMap.put(_Fields.NAME_VALUE_PAIR_LIST, new org.apache.thrift.meta_data.FieldMetaData("nameValuePairList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NameValuePairType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeSettings.class, metaDataMap);
  }

  public NodeSettings() {
  }

  public NodeSettings(
    String nodeId,
    String serviceId,
    HostSchedulingSettings hostSchedulingSettings,
    HPCSettings hpcSettings,
    List<NameValuePairType> nameValuePairList)
  {
    this();
    this.nodeId = nodeId;
    this.serviceId = serviceId;
    this.hostSchedulingSettings = hostSchedulingSettings;
    this.hpcSettings = hpcSettings;
    this.nameValuePairList = nameValuePairList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeSettings(NodeSettings other) {
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetServiceId()) {
      this.serviceId = other.serviceId;
    }
    if (other.isSetHostSchedulingSettings()) {
      this.hostSchedulingSettings = new HostSchedulingSettings(other.hostSchedulingSettings);
    }
    if (other.isSetHpcSettings()) {
      this.hpcSettings = new HPCSettings(other.hpcSettings);
    }
    if (other.isSetNameValuePairList()) {
      List<NameValuePairType> __this__nameValuePairList = new ArrayList<NameValuePairType>(other.nameValuePairList.size());
      for (NameValuePairType other_element : other.nameValuePairList) {
        __this__nameValuePairList.add(new NameValuePairType(other_element));
      }
      this.nameValuePairList = __this__nameValuePairList;
    }
  }

  public NodeSettings deepCopy() {
    return new NodeSettings(this);
  }

  @Override
  public void clear() {
    this.nodeId = null;
    this.serviceId = null;
    this.hostSchedulingSettings = null;
    this.hpcSettings = null;
    this.nameValuePairList = null;
  }

  public String getNodeId() {
    return this.nodeId;
  }

  public NodeSettings setNodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  public String getServiceId() {
    return this.serviceId;
  }

  public NodeSettings setServiceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  public void unsetServiceId() {
    this.serviceId = null;
  }

  /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceId() {
    return this.serviceId != null;
  }

  public void setServiceIdIsSet(boolean value) {
    if (!value) {
      this.serviceId = null;
    }
  }

  public HostSchedulingSettings getHostSchedulingSettings() {
    return this.hostSchedulingSettings;
  }

  public NodeSettings setHostSchedulingSettings(HostSchedulingSettings hostSchedulingSettings) {
    this.hostSchedulingSettings = hostSchedulingSettings;
    return this;
  }

  public void unsetHostSchedulingSettings() {
    this.hostSchedulingSettings = null;
  }

  /** Returns true if field hostSchedulingSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetHostSchedulingSettings() {
    return this.hostSchedulingSettings != null;
  }

  public void setHostSchedulingSettingsIsSet(boolean value) {
    if (!value) {
      this.hostSchedulingSettings = null;
    }
  }

  public HPCSettings getHpcSettings() {
    return this.hpcSettings;
  }

  public NodeSettings setHpcSettings(HPCSettings hpcSettings) {
    this.hpcSettings = hpcSettings;
    return this;
  }

  public void unsetHpcSettings() {
    this.hpcSettings = null;
  }

  /** Returns true if field hpcSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetHpcSettings() {
    return this.hpcSettings != null;
  }

  public void setHpcSettingsIsSet(boolean value) {
    if (!value) {
      this.hpcSettings = null;
    }
  }

  public int getNameValuePairListSize() {
    return (this.nameValuePairList == null) ? 0 : this.nameValuePairList.size();
  }

  public java.util.Iterator<NameValuePairType> getNameValuePairListIterator() {
    return (this.nameValuePairList == null) ? null : this.nameValuePairList.iterator();
  }

  public void addToNameValuePairList(NameValuePairType elem) {
    if (this.nameValuePairList == null) {
      this.nameValuePairList = new ArrayList<NameValuePairType>();
    }
    this.nameValuePairList.add(elem);
  }

  public List<NameValuePairType> getNameValuePairList() {
    return this.nameValuePairList;
  }

  public NodeSettings setNameValuePairList(List<NameValuePairType> nameValuePairList) {
    this.nameValuePairList = nameValuePairList;
    return this;
  }

  public void unsetNameValuePairList() {
    this.nameValuePairList = null;
  }

  /** Returns true if field nameValuePairList is set (has been assigned a value) and false otherwise */
  public boolean isSetNameValuePairList() {
    return this.nameValuePairList != null;
  }

  public void setNameValuePairListIsSet(boolean value) {
    if (!value) {
      this.nameValuePairList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((String)value);
      }
      break;

    case SERVICE_ID:
      if (value == null) {
        unsetServiceId();
      } else {
        setServiceId((String)value);
      }
      break;

    case HOST_SCHEDULING_SETTINGS:
      if (value == null) {
        unsetHostSchedulingSettings();
      } else {
        setHostSchedulingSettings((HostSchedulingSettings)value);
      }
      break;

    case HPC_SETTINGS:
      if (value == null) {
        unsetHpcSettings();
      } else {
        setHpcSettings((HPCSettings)value);
      }
      break;

    case NAME_VALUE_PAIR_LIST:
      if (value == null) {
        unsetNameValuePairList();
      } else {
        setNameValuePairList((List<NameValuePairType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case SERVICE_ID:
      return getServiceId();

    case HOST_SCHEDULING_SETTINGS:
      return getHostSchedulingSettings();

    case HPC_SETTINGS:
      return getHpcSettings();

    case NAME_VALUE_PAIR_LIST:
      return getNameValuePairList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case SERVICE_ID:
      return isSetServiceId();
    case HOST_SCHEDULING_SETTINGS:
      return isSetHostSchedulingSettings();
    case HPC_SETTINGS:
      return isSetHpcSettings();
    case NAME_VALUE_PAIR_LIST:
      return isSetNameValuePairList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeSettings)
      return this.equals((NodeSettings)that);
    return false;
  }

  public boolean equals(NodeSettings that) {
    if (that == null)
      return false;

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_serviceId = true && this.isSetServiceId();
    boolean that_present_serviceId = true && that.isSetServiceId();
    if (this_present_serviceId || that_present_serviceId) {
      if (!(this_present_serviceId && that_present_serviceId))
        return false;
      if (!this.serviceId.equals(that.serviceId))
        return false;
    }

    boolean this_present_hostSchedulingSettings = true && this.isSetHostSchedulingSettings();
    boolean that_present_hostSchedulingSettings = true && that.isSetHostSchedulingSettings();
    if (this_present_hostSchedulingSettings || that_present_hostSchedulingSettings) {
      if (!(this_present_hostSchedulingSettings && that_present_hostSchedulingSettings))
        return false;
      if (!this.hostSchedulingSettings.equals(that.hostSchedulingSettings))
        return false;
    }

    boolean this_present_hpcSettings = true && this.isSetHpcSettings();
    boolean that_present_hpcSettings = true && that.isSetHpcSettings();
    if (this_present_hpcSettings || that_present_hpcSettings) {
      if (!(this_present_hpcSettings && that_present_hpcSettings))
        return false;
      if (!this.hpcSettings.equals(that.hpcSettings))
        return false;
    }

    boolean this_present_nameValuePairList = true && this.isSetNameValuePairList();
    boolean that_present_nameValuePairList = true && that.isSetNameValuePairList();
    if (this_present_nameValuePairList || that_present_nameValuePairList) {
      if (!(this_present_nameValuePairList && that_present_nameValuePairList))
        return false;
      if (!this.nameValuePairList.equals(that.nameValuePairList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(NodeSettings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostSchedulingSettings()).compareTo(other.isSetHostSchedulingSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostSchedulingSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostSchedulingSettings, other.hostSchedulingSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHpcSettings()).compareTo(other.isSetHpcSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHpcSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hpcSettings, other.hpcSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameValuePairList()).compareTo(other.isSetNameValuePairList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameValuePairList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameValuePairList, other.nameValuePairList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeSettings(");
    boolean first = true;

    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceId:");
    if (this.serviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostSchedulingSettings:");
    if (this.hostSchedulingSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.hostSchedulingSettings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hpcSettings:");
    if (this.hpcSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.hpcSettings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameValuePairList:");
    if (this.nameValuePairList == null) {
      sb.append("null");
    } else {
      sb.append(this.nameValuePairList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hostSchedulingSettings != null) {
      hostSchedulingSettings.validate();
    }
    if (hpcSettings != null) {
      hpcSettings.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeSettingsStandardSchemeFactory implements SchemeFactory {
    public NodeSettingsStandardScheme getScheme() {
      return new NodeSettingsStandardScheme();
    }
  }

  private static class NodeSettingsStandardScheme extends StandardScheme<NodeSettings> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeSettings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceId = iprot.readString();
              struct.setServiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_SCHEDULING_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hostSchedulingSettings = new HostSchedulingSettings();
              struct.hostSchedulingSettings.read(iprot);
              struct.setHostSchedulingSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HPC_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hpcSettings = new HPCSettings();
              struct.hpcSettings.read(iprot);
              struct.setHpcSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME_VALUE_PAIR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.nameValuePairList = new ArrayList<NameValuePairType>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  NameValuePairType _elem2;
                  _elem2 = new NameValuePairType();
                  _elem2.read(iprot);
                  struct.nameValuePairList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setNameValuePairListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeSettings struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(struct.nodeId);
        oprot.writeFieldEnd();
      }
      if (struct.serviceId != null) {
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeString(struct.serviceId);
        oprot.writeFieldEnd();
      }
      if (struct.hostSchedulingSettings != null) {
        oprot.writeFieldBegin(HOST_SCHEDULING_SETTINGS_FIELD_DESC);
        struct.hostSchedulingSettings.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.hpcSettings != null) {
        oprot.writeFieldBegin(HPC_SETTINGS_FIELD_DESC);
        struct.hpcSettings.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.nameValuePairList != null) {
        oprot.writeFieldBegin(NAME_VALUE_PAIR_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nameValuePairList.size()));
          for (NameValuePairType _iter3 : struct.nameValuePairList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeSettingsTupleSchemeFactory implements SchemeFactory {
    public NodeSettingsTupleScheme getScheme() {
      return new NodeSettingsTupleScheme();
    }
  }

  private static class NodeSettingsTupleScheme extends TupleScheme<NodeSettings> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNodeId()) {
        optionals.set(0);
      }
      if (struct.isSetServiceId()) {
        optionals.set(1);
      }
      if (struct.isSetHostSchedulingSettings()) {
        optionals.set(2);
      }
      if (struct.isSetHpcSettings()) {
        optionals.set(3);
      }
      if (struct.isSetNameValuePairList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNodeId()) {
        oprot.writeString(struct.nodeId);
      }
      if (struct.isSetServiceId()) {
        oprot.writeString(struct.serviceId);
      }
      if (struct.isSetHostSchedulingSettings()) {
        struct.hostSchedulingSettings.write(oprot);
      }
      if (struct.isSetHpcSettings()) {
        struct.hpcSettings.write(oprot);
      }
      if (struct.isSetNameValuePairList()) {
        {
          oprot.writeI32(struct.nameValuePairList.size());
          for (NameValuePairType _iter4 : struct.nameValuePairList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.nodeId = iprot.readString();
        struct.setNodeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serviceId = iprot.readString();
        struct.setServiceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostSchedulingSettings = new HostSchedulingSettings();
        struct.hostSchedulingSettings.read(iprot);
        struct.setHostSchedulingSettingsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hpcSettings = new HPCSettings();
        struct.hpcSettings.read(iprot);
        struct.setHpcSettingsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nameValuePairList = new ArrayList<NameValuePairType>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            NameValuePairType _elem7;
            _elem7 = new NameValuePairType();
            _elem7.read(iprot);
            struct.nameValuePairList.add(_elem7);
          }
        }
        struct.setNameValuePairListIsSet(true);
      }
    }
  }

}

