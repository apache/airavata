/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.experiment.execution;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OutputDataSettings implements org.apache.thrift.TBase<OutputDataSettings, OutputDataSettings._Fields>, java.io.Serializable, Cloneable, Comparable<OutputDataSettings> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputDataSettings");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUTDATA_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("outputdataDir", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_REG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("dataRegURL", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ISDATA_PERSISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isdataPersisted", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new OutputDataSettingsStandardSchemeFactory());
        schemes.put(TupleScheme.class, new OutputDataSettingsTupleSchemeFactory());
    }

    public String nodeID; // optional
    public String outputdataDir; // optional
    public String dataRegURL; // optional
    public boolean isdataPersisted; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        NODE_ID((short)1, "nodeID"),
        OUTPUTDATA_DIR((short)2, "outputdataDir"),
        DATA_REG_URL((short)3, "dataRegURL"),
        ISDATA_PERSISTED((short)4, "isdataPersisted");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // NODE_ID
                    return NODE_ID;
                case 2: // OUTPUTDATA_DIR
                    return OUTPUTDATA_DIR;
                case 3: // DATA_REG_URL
                    return DATA_REG_URL;
                case 4: // ISDATA_PERSISTED
                    return ISDATA_PERSISTED;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ISDATAPERSISTED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = {_Fields.NODE_ID,_Fields.OUTPUTDATA_DIR,_Fields.DATA_REG_URL,_Fields.ISDATA_PERSISTED};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeID", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.OUTPUTDATA_DIR, new org.apache.thrift.meta_data.FieldMetaData("outputdataDir", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DATA_REG_URL, new org.apache.thrift.meta_data.FieldMetaData("dataRegURL", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ISDATA_PERSISTED, new org.apache.thrift.meta_data.FieldMetaData("isdataPersisted", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OutputDataSettings.class, metaDataMap);
    }

    public OutputDataSettings() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OutputDataSettings(OutputDataSettings other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetNodeID()) {
            this.nodeID = other.nodeID;
        }
        if (other.isSetOutputdataDir()) {
            this.outputdataDir = other.outputdataDir;
        }
        if (other.isSetDataRegURL()) {
            this.dataRegURL = other.dataRegURL;
        }
        this.isdataPersisted = other.isdataPersisted;
    }

    public OutputDataSettings deepCopy() {
        return new OutputDataSettings(this);
    }

    @Override
    public void clear() {
        this.nodeID = null;
        this.outputdataDir = null;
        this.dataRegURL = null;
        setIsdataPersistedIsSet(false);
        this.isdataPersisted = false;
    }

    public String getNodeID() {
        return this.nodeID;
    }

    public OutputDataSettings setNodeID(String nodeID) {
        this.nodeID = nodeID;
        return this;
    }

    public void unsetNodeID() {
        this.nodeID = null;
    }

    /** Returns true if field nodeID is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeID() {
        return this.nodeID != null;
    }

    public void setNodeIDIsSet(boolean value) {
        if (!value) {
            this.nodeID = null;
        }
    }

    public String getOutputdataDir() {
        return this.outputdataDir;
    }

    public OutputDataSettings setOutputdataDir(String outputdataDir) {
        this.outputdataDir = outputdataDir;
        return this;
    }

    public void unsetOutputdataDir() {
        this.outputdataDir = null;
    }

    /** Returns true if field outputdataDir is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputdataDir() {
        return this.outputdataDir != null;
    }

    public void setOutputdataDirIsSet(boolean value) {
        if (!value) {
            this.outputdataDir = null;
        }
    }

    public String getDataRegURL() {
        return this.dataRegURL;
    }

    public OutputDataSettings setDataRegURL(String dataRegURL) {
        this.dataRegURL = dataRegURL;
        return this;
    }

    public void unsetDataRegURL() {
        this.dataRegURL = null;
    }

    /** Returns true if field dataRegURL is set (has been assigned a value) and false otherwise */
    public boolean isSetDataRegURL() {
        return this.dataRegURL != null;
    }

    public void setDataRegURLIsSet(boolean value) {
        if (!value) {
            this.dataRegURL = null;
        }
    }

    public boolean isIsdataPersisted() {
        return this.isdataPersisted;
    }

    public OutputDataSettings setIsdataPersisted(boolean isdataPersisted) {
        this.isdataPersisted = isdataPersisted;
        setIsdataPersistedIsSet(true);
        return this;
    }

    public void unsetIsdataPersisted() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDATAPERSISTED_ISSET_ID);
    }

    /** Returns true if field isdataPersisted is set (has been assigned a value) and false otherwise */
    public boolean isSetIsdataPersisted() {
        return EncodingUtils.testBit(__isset_bitfield, __ISDATAPERSISTED_ISSET_ID);
    }

    public void setIsdataPersistedIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDATAPERSISTED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case NODE_ID:
                if (value == null) {
                    unsetNodeID();
                } else {
                    setNodeID((String)value);
                }
                break;

            case OUTPUTDATA_DIR:
                if (value == null) {
                    unsetOutputdataDir();
                } else {
                    setOutputdataDir((String)value);
                }
                break;

            case DATA_REG_URL:
                if (value == null) {
                    unsetDataRegURL();
                } else {
                    setDataRegURL((String)value);
                }
                break;

            case ISDATA_PERSISTED:
                if (value == null) {
                    unsetIsdataPersisted();
                } else {
                    setIsdataPersisted((Boolean)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case NODE_ID:
                return getNodeID();

            case OUTPUTDATA_DIR:
                return getOutputdataDir();

            case DATA_REG_URL:
                return getDataRegURL();

            case ISDATA_PERSISTED:
                return Boolean.valueOf(isIsdataPersisted());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case NODE_ID:
                return isSetNodeID();
            case OUTPUTDATA_DIR:
                return isSetOutputdataDir();
            case DATA_REG_URL:
                return isSetDataRegURL();
            case ISDATA_PERSISTED:
                return isSetIsdataPersisted();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof OutputDataSettings)
            return this.equals((OutputDataSettings)that);
        return false;
    }

    public boolean equals(OutputDataSettings that) {
        if (that == null)
            return false;

        boolean this_present_nodeID = true && this.isSetNodeID();
        boolean that_present_nodeID = true && that.isSetNodeID();
        if (this_present_nodeID || that_present_nodeID) {
            if (!(this_present_nodeID && that_present_nodeID))
                return false;
            if (!this.nodeID.equals(that.nodeID))
                return false;
        }

        boolean this_present_outputdataDir = true && this.isSetOutputdataDir();
        boolean that_present_outputdataDir = true && that.isSetOutputdataDir();
        if (this_present_outputdataDir || that_present_outputdataDir) {
            if (!(this_present_outputdataDir && that_present_outputdataDir))
                return false;
            if (!this.outputdataDir.equals(that.outputdataDir))
                return false;
        }

        boolean this_present_dataRegURL = true && this.isSetDataRegURL();
        boolean that_present_dataRegURL = true && that.isSetDataRegURL();
        if (this_present_dataRegURL || that_present_dataRegURL) {
            if (!(this_present_dataRegURL && that_present_dataRegURL))
                return false;
            if (!this.dataRegURL.equals(that.dataRegURL))
                return false;
        }

        boolean this_present_isdataPersisted = true && this.isSetIsdataPersisted();
        boolean that_present_isdataPersisted = true && that.isSetIsdataPersisted();
        if (this_present_isdataPersisted || that_present_isdataPersisted) {
            if (!(this_present_isdataPersisted && that_present_isdataPersisted))
                return false;
            if (this.isdataPersisted != that.isdataPersisted)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(OutputDataSettings other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetNodeID()).compareTo(other.isSetNodeID());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNodeID()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeID, other.nodeID);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOutputdataDir()).compareTo(other.isSetOutputdataDir());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOutputdataDir()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputdataDir, other.outputdataDir);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDataRegURL()).compareTo(other.isSetDataRegURL());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDataRegURL()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataRegURL, other.dataRegURL);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetIsdataPersisted()).compareTo(other.isSetIsdataPersisted());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIsdataPersisted()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isdataPersisted, other.isdataPersisted);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OutputDataSettings(");
        boolean first = true;

        if (isSetNodeID()) {
            sb.append("nodeID:");
            if (this.nodeID == null) {
                sb.append("null");
            } else {
                sb.append(this.nodeID);
            }
            first = false;
        }
        if (isSetOutputdataDir()) {
            if (!first) sb.append(", ");
            sb.append("outputdataDir:");
            if (this.outputdataDir == null) {
                sb.append("null");
            } else {
                sb.append(this.outputdataDir);
            }
            first = false;
        }
        if (isSetDataRegURL()) {
            if (!first) sb.append(", ");
            sb.append("dataRegURL:");
            if (this.dataRegURL == null) {
                sb.append("null");
            } else {
                sb.append(this.dataRegURL);
            }
            first = false;
        }
        if (isSetIsdataPersisted()) {
            if (!first) sb.append(", ");
            sb.append("isdataPersisted:");
            sb.append(this.isdataPersisted);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class OutputDataSettingsStandardSchemeFactory implements SchemeFactory {
        public OutputDataSettingsStandardScheme getScheme() {
            return new OutputDataSettingsStandardScheme();
        }
    }

    private static class OutputDataSettingsStandardScheme extends StandardScheme<OutputDataSettings> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, OutputDataSettings struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // NODE_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.nodeID = iprot.readString();
                            struct.setNodeIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // OUTPUTDATA_DIR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.outputdataDir = iprot.readString();
                            struct.setOutputdataDirIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DATA_REG_URL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.dataRegURL = iprot.readString();
                            struct.setDataRegURLIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // ISDATA_PERSISTED
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.isdataPersisted = iprot.readBool();
                            struct.setIsdataPersistedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, OutputDataSettings struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.nodeID != null) {
                if (struct.isSetNodeID()) {
                    oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
                    oprot.writeString(struct.nodeID);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.outputdataDir != null) {
                if (struct.isSetOutputdataDir()) {
                    oprot.writeFieldBegin(OUTPUTDATA_DIR_FIELD_DESC);
                    oprot.writeString(struct.outputdataDir);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.dataRegURL != null) {
                if (struct.isSetDataRegURL()) {
                    oprot.writeFieldBegin(DATA_REG_URL_FIELD_DESC);
                    oprot.writeString(struct.dataRegURL);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetIsdataPersisted()) {
                oprot.writeFieldBegin(ISDATA_PERSISTED_FIELD_DESC);
                oprot.writeBool(struct.isdataPersisted);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class OutputDataSettingsTupleSchemeFactory implements SchemeFactory {
        public OutputDataSettingsTupleScheme getScheme() {
            return new OutputDataSettingsTupleScheme();
        }
    }

    private static class OutputDataSettingsTupleScheme extends TupleScheme<OutputDataSettings> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, OutputDataSettings struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetNodeID()) {
                optionals.set(0);
            }
            if (struct.isSetOutputdataDir()) {
                optionals.set(1);
            }
            if (struct.isSetDataRegURL()) {
                optionals.set(2);
            }
            if (struct.isSetIsdataPersisted()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetNodeID()) {
                oprot.writeString(struct.nodeID);
            }
            if (struct.isSetOutputdataDir()) {
                oprot.writeString(struct.outputdataDir);
            }
            if (struct.isSetDataRegURL()) {
                oprot.writeString(struct.dataRegURL);
            }
            if (struct.isSetIsdataPersisted()) {
                oprot.writeBool(struct.isdataPersisted);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, OutputDataSettings struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.nodeID = iprot.readString();
                struct.setNodeIDIsSet(true);
            }
            if (incoming.get(1)) {
                struct.outputdataDir = iprot.readString();
                struct.setOutputdataDirIsSet(true);
            }
            if (incoming.get(2)) {
                struct.dataRegURL = iprot.readString();
                struct.setDataRegURLIsSet(true);
            }
            if (incoming.get(3)) {
                struct.isdataPersisted = iprot.readBool();
                struct.setIsdataPersistedIsSet(true);
            }
        }
    }

}

