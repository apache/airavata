/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.sharing.registry.models;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <p>Required allocation request details</p>
 * <li>projectId : 	Ask the user to assign project ID, but this project should unique, we will need an API endpoint to check whether this ID is not used by other projects</li>
 * <li>applicationsToBeUsed : Select the application that the user intends to use, according to application chosen here, resources that can be allocable will be fetch from resource discovery module. User will not be restricted to these application upon allocation grant, provided the resources allocated support the application.</li>
 * <li>diskUsageRangePerJob : An optional field to help reviewer and PI for allocation approval</li>
 * <li>documents : Resume, CV, PIâ€™s portfolio etc</li>
 * <li>externalAllocationAccessMechanisms :  Mechanism to use for job scheduling (Eg: ssh, 2FA etc)</li>
 * <li>externalAllocationAccountPassword :external Login Password</li>
 * <li>externalAllocationAccountUsername : external Login Username</li>
 * <li>externalAllocationOrganizationName : Name of organization where the user has allocation, can be a list of supported once, still to decide</li>
 * <li>externalAllocationProjectId : A chargeable project ID recognised by the the third party organization.</li>
 * <li><b>externalAllocationResourceName</b> : Allocated resource</li>
 * <li>fieldOfScience :An optional field to help reviewer and PI for allocation approval</li>* <li>allocationType : Community, Campus, Specific Resource (Paid), User with exclusive allocation : Only use airavata to manage jobs.</li>
 * <li>keywords : Keyword will be helpful in search</li>* <li>principalInvestigator : In case of Gridchem, only PI can request allocations, but here one suggestion is to allow user with organization affiliation like (staff, postdoctoral, etc) and not students - Name: can be self, Email: To notify the PI about allocation request</li>
 * <li>maxMemoryPerCpu :An optional field to help reviewer and PI for allocation approval</li>
 * <li>numberOfCpuPerJob : An optional field to help reviewer and PI for allocation approval</li>
 * <li>principalInvistigatorEmail :Principal Investigator email</li>
 * <li>principalInvistigatorName : Principal Investigator name</li>
 * <li>projectDescription :(Eg: Hypothesis, Model Systems, Methods, and Analysis)</li>
 * <li>projectReviewedAndFundedBy : (Eg., NSF, NIH, DOD, DOE, None etc...). An optional field to help reviewer and PI for allocation approval</li>
 * <li>serviceUnits : 1 SU is approximately 1 workstation CPU hour, if the user fails to give a value, default value will be chosen.</li>
 * <li>specificResourceSelection : This list will be fetched from resource discovery module, in case of community allocation, the request is subject to reviewers, PI discretion and availability</li>
 * <li>title : Assign a title to allocation request</li>
 * <li>typeOfAllocation : If the User has an exclusive allocation with third party organization and wants to use airavata middleware to manage jobs.</li>
 * <li>typicalSuPerJob :  An optional field to help reviewer and PI for allocation approval</li>
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class UserAllocationDetails implements org.apache.thrift.TBase<UserAllocationDetails, UserAllocationDetails._Fields>, java.io.Serializable, Cloneable, Comparable<UserAllocationDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserAllocationDetails");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATIONS_TO_BE_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationsToBeUsed", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DISK_USAGE_RANGE_PER_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("diskUsageRangePerJob", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ALLOCATION_ACCESS_MECHANISMS_FIELD_DESC = new org.apache.thrift.protocol.TField("externalAllocationAccessMechanisms", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("externalAllocationAccountPassword", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ALLOCATION_ACCOUNT_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("externalAllocationAccountUsername", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ALLOCATION_ORGANIZATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("externalAllocationOrganizationName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ALLOCATION_PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("externalAllocationProjectId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ALLOCATION_RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("externalAllocationResourceName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FIELD_OF_SCIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldOfScience", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MAX_MEMORY_PER_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMemoryPerCpu", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_CPU_PER_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfCpuPerJob", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_INVISTIGATOR_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("principalInvistigatorEmail", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_INVISTIGATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("principalInvistigatorName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PROJECT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("projectDescription", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PROJECT_REVIEWED_AND_FUNDED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("projectReviewedAndFundedBy", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SERVICE_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceUnits", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField SPECIFIC_RESOURCE_SELECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("specificResourceSelection", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TYPE_OF_ALLOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("typeOfAllocation", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TYPICAL_SU_PER_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("typicalSuPerJob", org.apache.thrift.protocol.TType.I64, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserAllocationDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserAllocationDetailsTupleSchemeFactory();

  public java.lang.String projectId; // optional
  public java.lang.String applicationsToBeUsed; // optional
  public long diskUsageRangePerJob; // optional
  public java.nio.ByteBuffer documents; // optional
  public java.lang.String externalAllocationAccessMechanisms; // optional
  public java.lang.String externalAllocationAccountPassword; // optional
  public java.lang.String externalAllocationAccountUsername; // optional
  public java.lang.String externalAllocationOrganizationName; // optional
  public java.lang.String externalAllocationProjectId; // optional
  public java.lang.String externalAllocationResourceName; // optional
  public java.lang.String fieldOfScience; // optional
  public java.lang.String keywords; // optional
  public long maxMemoryPerCpu; // optional
  public long numberOfCpuPerJob; // optional
  public java.lang.String principalInvistigatorEmail; // optional
  public java.lang.String principalInvistigatorName; // optional
  public java.lang.String projectDescription; // optional
  public java.lang.String projectReviewedAndFundedBy; // optional
  public long serviceUnits; // optional
  public java.lang.String specificResourceSelection; // optional
  public java.lang.String title; // optional
  public java.lang.String typeOfAllocation; // optional
  public long typicalSuPerJob; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    APPLICATIONS_TO_BE_USED((short)2, "applicationsToBeUsed"),
    DISK_USAGE_RANGE_PER_JOB((short)3, "diskUsageRangePerJob"),
    DOCUMENTS((short)4, "documents"),
    EXTERNAL_ALLOCATION_ACCESS_MECHANISMS((short)5, "externalAllocationAccessMechanisms"),
    EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD((short)6, "externalAllocationAccountPassword"),
    EXTERNAL_ALLOCATION_ACCOUNT_USERNAME((short)7, "externalAllocationAccountUsername"),
    EXTERNAL_ALLOCATION_ORGANIZATION_NAME((short)8, "externalAllocationOrganizationName"),
    EXTERNAL_ALLOCATION_PROJECT_ID((short)9, "externalAllocationProjectId"),
    EXTERNAL_ALLOCATION_RESOURCE_NAME((short)10, "externalAllocationResourceName"),
    FIELD_OF_SCIENCE((short)11, "fieldOfScience"),
    KEYWORDS((short)12, "keywords"),
    MAX_MEMORY_PER_CPU((short)13, "maxMemoryPerCpu"),
    NUMBER_OF_CPU_PER_JOB((short)14, "numberOfCpuPerJob"),
    PRINCIPAL_INVISTIGATOR_EMAIL((short)15, "principalInvistigatorEmail"),
    PRINCIPAL_INVISTIGATOR_NAME((short)16, "principalInvistigatorName"),
    PROJECT_DESCRIPTION((short)17, "projectDescription"),
    PROJECT_REVIEWED_AND_FUNDED_BY((short)18, "projectReviewedAndFundedBy"),
    SERVICE_UNITS((short)19, "serviceUnits"),
    SPECIFIC_RESOURCE_SELECTION((short)20, "specificResourceSelection"),
    TITLE((short)21, "title"),
    TYPE_OF_ALLOCATION((short)22, "typeOfAllocation"),
    TYPICAL_SU_PER_JOB((short)23, "typicalSuPerJob");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // APPLICATIONS_TO_BE_USED
          return APPLICATIONS_TO_BE_USED;
        case 3: // DISK_USAGE_RANGE_PER_JOB
          return DISK_USAGE_RANGE_PER_JOB;
        case 4: // DOCUMENTS
          return DOCUMENTS;
        case 5: // EXTERNAL_ALLOCATION_ACCESS_MECHANISMS
          return EXTERNAL_ALLOCATION_ACCESS_MECHANISMS;
        case 6: // EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD
          return EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD;
        case 7: // EXTERNAL_ALLOCATION_ACCOUNT_USERNAME
          return EXTERNAL_ALLOCATION_ACCOUNT_USERNAME;
        case 8: // EXTERNAL_ALLOCATION_ORGANIZATION_NAME
          return EXTERNAL_ALLOCATION_ORGANIZATION_NAME;
        case 9: // EXTERNAL_ALLOCATION_PROJECT_ID
          return EXTERNAL_ALLOCATION_PROJECT_ID;
        case 10: // EXTERNAL_ALLOCATION_RESOURCE_NAME
          return EXTERNAL_ALLOCATION_RESOURCE_NAME;
        case 11: // FIELD_OF_SCIENCE
          return FIELD_OF_SCIENCE;
        case 12: // KEYWORDS
          return KEYWORDS;
        case 13: // MAX_MEMORY_PER_CPU
          return MAX_MEMORY_PER_CPU;
        case 14: // NUMBER_OF_CPU_PER_JOB
          return NUMBER_OF_CPU_PER_JOB;
        case 15: // PRINCIPAL_INVISTIGATOR_EMAIL
          return PRINCIPAL_INVISTIGATOR_EMAIL;
        case 16: // PRINCIPAL_INVISTIGATOR_NAME
          return PRINCIPAL_INVISTIGATOR_NAME;
        case 17: // PROJECT_DESCRIPTION
          return PROJECT_DESCRIPTION;
        case 18: // PROJECT_REVIEWED_AND_FUNDED_BY
          return PROJECT_REVIEWED_AND_FUNDED_BY;
        case 19: // SERVICE_UNITS
          return SERVICE_UNITS;
        case 20: // SPECIFIC_RESOURCE_SELECTION
          return SPECIFIC_RESOURCE_SELECTION;
        case 21: // TITLE
          return TITLE;
        case 22: // TYPE_OF_ALLOCATION
          return TYPE_OF_ALLOCATION;
        case 23: // TYPICAL_SU_PER_JOB
          return TYPICAL_SU_PER_JOB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISKUSAGERANGEPERJOB_ISSET_ID = 0;
  private static final int __MAXMEMORYPERCPU_ISSET_ID = 1;
  private static final int __NUMBEROFCPUPERJOB_ISSET_ID = 2;
  private static final int __SERVICEUNITS_ISSET_ID = 3;
  private static final int __TYPICALSUPERJOB_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROJECT_ID,_Fields.APPLICATIONS_TO_BE_USED,_Fields.DISK_USAGE_RANGE_PER_JOB,_Fields.DOCUMENTS,_Fields.EXTERNAL_ALLOCATION_ACCESS_MECHANISMS,_Fields.EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD,_Fields.EXTERNAL_ALLOCATION_ACCOUNT_USERNAME,_Fields.EXTERNAL_ALLOCATION_ORGANIZATION_NAME,_Fields.EXTERNAL_ALLOCATION_PROJECT_ID,_Fields.EXTERNAL_ALLOCATION_RESOURCE_NAME,_Fields.FIELD_OF_SCIENCE,_Fields.KEYWORDS,_Fields.MAX_MEMORY_PER_CPU,_Fields.NUMBER_OF_CPU_PER_JOB,_Fields.PRINCIPAL_INVISTIGATOR_EMAIL,_Fields.PRINCIPAL_INVISTIGATOR_NAME,_Fields.PROJECT_DESCRIPTION,_Fields.PROJECT_REVIEWED_AND_FUNDED_BY,_Fields.SERVICE_UNITS,_Fields.SPECIFIC_RESOURCE_SELECTION,_Fields.TITLE,_Fields.TYPE_OF_ALLOCATION,_Fields.TYPICAL_SU_PER_JOB};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATIONS_TO_BE_USED, new org.apache.thrift.meta_data.FieldMetaData("applicationsToBeUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISK_USAGE_RANGE_PER_JOB, new org.apache.thrift.meta_data.FieldMetaData("diskUsageRangePerJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXTERNAL_ALLOCATION_ACCESS_MECHANISMS, new org.apache.thrift.meta_data.FieldMetaData("externalAllocationAccessMechanisms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("externalAllocationAccountPassword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_ALLOCATION_ACCOUNT_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("externalAllocationAccountUsername", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_ALLOCATION_ORGANIZATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("externalAllocationOrganizationName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_ALLOCATION_PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("externalAllocationProjectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_ALLOCATION_RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("externalAllocationResourceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_OF_SCIENCE, new org.apache.thrift.meta_data.FieldMetaData("fieldOfScience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_MEMORY_PER_CPU, new org.apache.thrift.meta_data.FieldMetaData("maxMemoryPerCpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUMBER_OF_CPU_PER_JOB, new org.apache.thrift.meta_data.FieldMetaData("numberOfCpuPerJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRINCIPAL_INVISTIGATOR_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("principalInvistigatorEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL_INVISTIGATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("principalInvistigatorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("projectDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_REVIEWED_AND_FUNDED_BY, new org.apache.thrift.meta_data.FieldMetaData("projectReviewedAndFundedBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_UNITS, new org.apache.thrift.meta_data.FieldMetaData("serviceUnits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPECIFIC_RESOURCE_SELECTION, new org.apache.thrift.meta_data.FieldMetaData("specificResourceSelection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE_OF_ALLOCATION, new org.apache.thrift.meta_data.FieldMetaData("typeOfAllocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPICAL_SU_PER_JOB, new org.apache.thrift.meta_data.FieldMetaData("typicalSuPerJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserAllocationDetails.class, metaDataMap);
  }

  public UserAllocationDetails() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserAllocationDetails(UserAllocationDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetApplicationsToBeUsed()) {
      this.applicationsToBeUsed = other.applicationsToBeUsed;
    }
    this.diskUsageRangePerJob = other.diskUsageRangePerJob;
    if (other.isSetDocuments()) {
      this.documents = org.apache.thrift.TBaseHelper.copyBinary(other.documents);
    }
    if (other.isSetExternalAllocationAccessMechanisms()) {
      this.externalAllocationAccessMechanisms = other.externalAllocationAccessMechanisms;
    }
    if (other.isSetExternalAllocationAccountPassword()) {
      this.externalAllocationAccountPassword = other.externalAllocationAccountPassword;
    }
    if (other.isSetExternalAllocationAccountUsername()) {
      this.externalAllocationAccountUsername = other.externalAllocationAccountUsername;
    }
    if (other.isSetExternalAllocationOrganizationName()) {
      this.externalAllocationOrganizationName = other.externalAllocationOrganizationName;
    }
    if (other.isSetExternalAllocationProjectId()) {
      this.externalAllocationProjectId = other.externalAllocationProjectId;
    }
    if (other.isSetExternalAllocationResourceName()) {
      this.externalAllocationResourceName = other.externalAllocationResourceName;
    }
    if (other.isSetFieldOfScience()) {
      this.fieldOfScience = other.fieldOfScience;
    }
    if (other.isSetKeywords()) {
      this.keywords = other.keywords;
    }
    this.maxMemoryPerCpu = other.maxMemoryPerCpu;
    this.numberOfCpuPerJob = other.numberOfCpuPerJob;
    if (other.isSetPrincipalInvistigatorEmail()) {
      this.principalInvistigatorEmail = other.principalInvistigatorEmail;
    }
    if (other.isSetPrincipalInvistigatorName()) {
      this.principalInvistigatorName = other.principalInvistigatorName;
    }
    if (other.isSetProjectDescription()) {
      this.projectDescription = other.projectDescription;
    }
    if (other.isSetProjectReviewedAndFundedBy()) {
      this.projectReviewedAndFundedBy = other.projectReviewedAndFundedBy;
    }
    this.serviceUnits = other.serviceUnits;
    if (other.isSetSpecificResourceSelection()) {
      this.specificResourceSelection = other.specificResourceSelection;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetTypeOfAllocation()) {
      this.typeOfAllocation = other.typeOfAllocation;
    }
    this.typicalSuPerJob = other.typicalSuPerJob;
  }

  public UserAllocationDetails deepCopy() {
    return new UserAllocationDetails(this);
  }

  @Override
  public void clear() {
    this.projectId = null;
    this.applicationsToBeUsed = null;
    setDiskUsageRangePerJobIsSet(false);
    this.diskUsageRangePerJob = 0;
    this.documents = null;
    this.externalAllocationAccessMechanisms = null;
    this.externalAllocationAccountPassword = null;
    this.externalAllocationAccountUsername = null;
    this.externalAllocationOrganizationName = null;
    this.externalAllocationProjectId = null;
    this.externalAllocationResourceName = null;
    this.fieldOfScience = null;
    this.keywords = null;
    setMaxMemoryPerCpuIsSet(false);
    this.maxMemoryPerCpu = 0;
    setNumberOfCpuPerJobIsSet(false);
    this.numberOfCpuPerJob = 0;
    this.principalInvistigatorEmail = null;
    this.principalInvistigatorName = null;
    this.projectDescription = null;
    this.projectReviewedAndFundedBy = null;
    setServiceUnitsIsSet(false);
    this.serviceUnits = 0;
    this.specificResourceSelection = null;
    this.title = null;
    this.typeOfAllocation = null;
    setTypicalSuPerJobIsSet(false);
    this.typicalSuPerJob = 0;
  }

  public java.lang.String getProjectId() {
    return this.projectId;
  }

  public UserAllocationDetails setProjectId(java.lang.String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public java.lang.String getApplicationsToBeUsed() {
    return this.applicationsToBeUsed;
  }

  public UserAllocationDetails setApplicationsToBeUsed(java.lang.String applicationsToBeUsed) {
    this.applicationsToBeUsed = applicationsToBeUsed;
    return this;
  }

  public void unsetApplicationsToBeUsed() {
    this.applicationsToBeUsed = null;
  }

  /** Returns true if field applicationsToBeUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationsToBeUsed() {
    return this.applicationsToBeUsed != null;
  }

  public void setApplicationsToBeUsedIsSet(boolean value) {
    if (!value) {
      this.applicationsToBeUsed = null;
    }
  }

  public long getDiskUsageRangePerJob() {
    return this.diskUsageRangePerJob;
  }

  public UserAllocationDetails setDiskUsageRangePerJob(long diskUsageRangePerJob) {
    this.diskUsageRangePerJob = diskUsageRangePerJob;
    setDiskUsageRangePerJobIsSet(true);
    return this;
  }

  public void unsetDiskUsageRangePerJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISKUSAGERANGEPERJOB_ISSET_ID);
  }

  /** Returns true if field diskUsageRangePerJob is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskUsageRangePerJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISKUSAGERANGEPERJOB_ISSET_ID);
  }

  public void setDiskUsageRangePerJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISKUSAGERANGEPERJOB_ISSET_ID, value);
  }

  public byte[] getDocuments() {
    setDocuments(org.apache.thrift.TBaseHelper.rightSize(documents));
    return documents == null ? null : documents.array();
  }

  public java.nio.ByteBuffer bufferForDocuments() {
    return org.apache.thrift.TBaseHelper.copyBinary(documents);
  }

  public UserAllocationDetails setDocuments(byte[] documents) {
    this.documents = documents == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(documents.clone());
    return this;
  }

  public UserAllocationDetails setDocuments(java.nio.ByteBuffer documents) {
    this.documents = org.apache.thrift.TBaseHelper.copyBinary(documents);
    return this;
  }

  public void unsetDocuments() {
    this.documents = null;
  }

  /** Returns true if field documents is set (has been assigned a value) and false otherwise */
  public boolean isSetDocuments() {
    return this.documents != null;
  }

  public void setDocumentsIsSet(boolean value) {
    if (!value) {
      this.documents = null;
    }
  }

  public java.lang.String getExternalAllocationAccessMechanisms() {
    return this.externalAllocationAccessMechanisms;
  }

  public UserAllocationDetails setExternalAllocationAccessMechanisms(java.lang.String externalAllocationAccessMechanisms) {
    this.externalAllocationAccessMechanisms = externalAllocationAccessMechanisms;
    return this;
  }

  public void unsetExternalAllocationAccessMechanisms() {
    this.externalAllocationAccessMechanisms = null;
  }

  /** Returns true if field externalAllocationAccessMechanisms is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAllocationAccessMechanisms() {
    return this.externalAllocationAccessMechanisms != null;
  }

  public void setExternalAllocationAccessMechanismsIsSet(boolean value) {
    if (!value) {
      this.externalAllocationAccessMechanisms = null;
    }
  }

  public java.lang.String getExternalAllocationAccountPassword() {
    return this.externalAllocationAccountPassword;
  }

  public UserAllocationDetails setExternalAllocationAccountPassword(java.lang.String externalAllocationAccountPassword) {
    this.externalAllocationAccountPassword = externalAllocationAccountPassword;
    return this;
  }

  public void unsetExternalAllocationAccountPassword() {
    this.externalAllocationAccountPassword = null;
  }

  /** Returns true if field externalAllocationAccountPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAllocationAccountPassword() {
    return this.externalAllocationAccountPassword != null;
  }

  public void setExternalAllocationAccountPasswordIsSet(boolean value) {
    if (!value) {
      this.externalAllocationAccountPassword = null;
    }
  }

  public java.lang.String getExternalAllocationAccountUsername() {
    return this.externalAllocationAccountUsername;
  }

  public UserAllocationDetails setExternalAllocationAccountUsername(java.lang.String externalAllocationAccountUsername) {
    this.externalAllocationAccountUsername = externalAllocationAccountUsername;
    return this;
  }

  public void unsetExternalAllocationAccountUsername() {
    this.externalAllocationAccountUsername = null;
  }

  /** Returns true if field externalAllocationAccountUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAllocationAccountUsername() {
    return this.externalAllocationAccountUsername != null;
  }

  public void setExternalAllocationAccountUsernameIsSet(boolean value) {
    if (!value) {
      this.externalAllocationAccountUsername = null;
    }
  }

  public java.lang.String getExternalAllocationOrganizationName() {
    return this.externalAllocationOrganizationName;
  }

  public UserAllocationDetails setExternalAllocationOrganizationName(java.lang.String externalAllocationOrganizationName) {
    this.externalAllocationOrganizationName = externalAllocationOrganizationName;
    return this;
  }

  public void unsetExternalAllocationOrganizationName() {
    this.externalAllocationOrganizationName = null;
  }

  /** Returns true if field externalAllocationOrganizationName is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAllocationOrganizationName() {
    return this.externalAllocationOrganizationName != null;
  }

  public void setExternalAllocationOrganizationNameIsSet(boolean value) {
    if (!value) {
      this.externalAllocationOrganizationName = null;
    }
  }

  public java.lang.String getExternalAllocationProjectId() {
    return this.externalAllocationProjectId;
  }

  public UserAllocationDetails setExternalAllocationProjectId(java.lang.String externalAllocationProjectId) {
    this.externalAllocationProjectId = externalAllocationProjectId;
    return this;
  }

  public void unsetExternalAllocationProjectId() {
    this.externalAllocationProjectId = null;
  }

  /** Returns true if field externalAllocationProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAllocationProjectId() {
    return this.externalAllocationProjectId != null;
  }

  public void setExternalAllocationProjectIdIsSet(boolean value) {
    if (!value) {
      this.externalAllocationProjectId = null;
    }
  }

  public java.lang.String getExternalAllocationResourceName() {
    return this.externalAllocationResourceName;
  }

  public UserAllocationDetails setExternalAllocationResourceName(java.lang.String externalAllocationResourceName) {
    this.externalAllocationResourceName = externalAllocationResourceName;
    return this;
  }

  public void unsetExternalAllocationResourceName() {
    this.externalAllocationResourceName = null;
  }

  /** Returns true if field externalAllocationResourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAllocationResourceName() {
    return this.externalAllocationResourceName != null;
  }

  public void setExternalAllocationResourceNameIsSet(boolean value) {
    if (!value) {
      this.externalAllocationResourceName = null;
    }
  }

  public java.lang.String getFieldOfScience() {
    return this.fieldOfScience;
  }

  public UserAllocationDetails setFieldOfScience(java.lang.String fieldOfScience) {
    this.fieldOfScience = fieldOfScience;
    return this;
  }

  public void unsetFieldOfScience() {
    this.fieldOfScience = null;
  }

  /** Returns true if field fieldOfScience is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldOfScience() {
    return this.fieldOfScience != null;
  }

  public void setFieldOfScienceIsSet(boolean value) {
    if (!value) {
      this.fieldOfScience = null;
    }
  }

  public java.lang.String getKeywords() {
    return this.keywords;
  }

  public UserAllocationDetails setKeywords(java.lang.String keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public long getMaxMemoryPerCpu() {
    return this.maxMemoryPerCpu;
  }

  public UserAllocationDetails setMaxMemoryPerCpu(long maxMemoryPerCpu) {
    this.maxMemoryPerCpu = maxMemoryPerCpu;
    setMaxMemoryPerCpuIsSet(true);
    return this;
  }

  public void unsetMaxMemoryPerCpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXMEMORYPERCPU_ISSET_ID);
  }

  /** Returns true if field maxMemoryPerCpu is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMemoryPerCpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXMEMORYPERCPU_ISSET_ID);
  }

  public void setMaxMemoryPerCpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXMEMORYPERCPU_ISSET_ID, value);
  }

  public long getNumberOfCpuPerJob() {
    return this.numberOfCpuPerJob;
  }

  public UserAllocationDetails setNumberOfCpuPerJob(long numberOfCpuPerJob) {
    this.numberOfCpuPerJob = numberOfCpuPerJob;
    setNumberOfCpuPerJobIsSet(true);
    return this;
  }

  public void unsetNumberOfCpuPerJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFCPUPERJOB_ISSET_ID);
  }

  /** Returns true if field numberOfCpuPerJob is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfCpuPerJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFCPUPERJOB_ISSET_ID);
  }

  public void setNumberOfCpuPerJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFCPUPERJOB_ISSET_ID, value);
  }

  public java.lang.String getPrincipalInvistigatorEmail() {
    return this.principalInvistigatorEmail;
  }

  public UserAllocationDetails setPrincipalInvistigatorEmail(java.lang.String principalInvistigatorEmail) {
    this.principalInvistigatorEmail = principalInvistigatorEmail;
    return this;
  }

  public void unsetPrincipalInvistigatorEmail() {
    this.principalInvistigatorEmail = null;
  }

  /** Returns true if field principalInvistigatorEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalInvistigatorEmail() {
    return this.principalInvistigatorEmail != null;
  }

  public void setPrincipalInvistigatorEmailIsSet(boolean value) {
    if (!value) {
      this.principalInvistigatorEmail = null;
    }
  }

  public java.lang.String getPrincipalInvistigatorName() {
    return this.principalInvistigatorName;
  }

  public UserAllocationDetails setPrincipalInvistigatorName(java.lang.String principalInvistigatorName) {
    this.principalInvistigatorName = principalInvistigatorName;
    return this;
  }

  public void unsetPrincipalInvistigatorName() {
    this.principalInvistigatorName = null;
  }

  /** Returns true if field principalInvistigatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalInvistigatorName() {
    return this.principalInvistigatorName != null;
  }

  public void setPrincipalInvistigatorNameIsSet(boolean value) {
    if (!value) {
      this.principalInvistigatorName = null;
    }
  }

  public java.lang.String getProjectDescription() {
    return this.projectDescription;
  }

  public UserAllocationDetails setProjectDescription(java.lang.String projectDescription) {
    this.projectDescription = projectDescription;
    return this;
  }

  public void unsetProjectDescription() {
    this.projectDescription = null;
  }

  /** Returns true if field projectDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectDescription() {
    return this.projectDescription != null;
  }

  public void setProjectDescriptionIsSet(boolean value) {
    if (!value) {
      this.projectDescription = null;
    }
  }

  public java.lang.String getProjectReviewedAndFundedBy() {
    return this.projectReviewedAndFundedBy;
  }

  public UserAllocationDetails setProjectReviewedAndFundedBy(java.lang.String projectReviewedAndFundedBy) {
    this.projectReviewedAndFundedBy = projectReviewedAndFundedBy;
    return this;
  }

  public void unsetProjectReviewedAndFundedBy() {
    this.projectReviewedAndFundedBy = null;
  }

  /** Returns true if field projectReviewedAndFundedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectReviewedAndFundedBy() {
    return this.projectReviewedAndFundedBy != null;
  }

  public void setProjectReviewedAndFundedByIsSet(boolean value) {
    if (!value) {
      this.projectReviewedAndFundedBy = null;
    }
  }

  public long getServiceUnits() {
    return this.serviceUnits;
  }

  public UserAllocationDetails setServiceUnits(long serviceUnits) {
    this.serviceUnits = serviceUnits;
    setServiceUnitsIsSet(true);
    return this;
  }

  public void unsetServiceUnits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICEUNITS_ISSET_ID);
  }

  /** Returns true if field serviceUnits is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceUnits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICEUNITS_ISSET_ID);
  }

  public void setServiceUnitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICEUNITS_ISSET_ID, value);
  }

  public java.lang.String getSpecificResourceSelection() {
    return this.specificResourceSelection;
  }

  public UserAllocationDetails setSpecificResourceSelection(java.lang.String specificResourceSelection) {
    this.specificResourceSelection = specificResourceSelection;
    return this;
  }

  public void unsetSpecificResourceSelection() {
    this.specificResourceSelection = null;
  }

  /** Returns true if field specificResourceSelection is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecificResourceSelection() {
    return this.specificResourceSelection != null;
  }

  public void setSpecificResourceSelectionIsSet(boolean value) {
    if (!value) {
      this.specificResourceSelection = null;
    }
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public UserAllocationDetails setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getTypeOfAllocation() {
    return this.typeOfAllocation;
  }

  public UserAllocationDetails setTypeOfAllocation(java.lang.String typeOfAllocation) {
    this.typeOfAllocation = typeOfAllocation;
    return this;
  }

  public void unsetTypeOfAllocation() {
    this.typeOfAllocation = null;
  }

  /** Returns true if field typeOfAllocation is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeOfAllocation() {
    return this.typeOfAllocation != null;
  }

  public void setTypeOfAllocationIsSet(boolean value) {
    if (!value) {
      this.typeOfAllocation = null;
    }
  }

  public long getTypicalSuPerJob() {
    return this.typicalSuPerJob;
  }

  public UserAllocationDetails setTypicalSuPerJob(long typicalSuPerJob) {
    this.typicalSuPerJob = typicalSuPerJob;
    setTypicalSuPerJobIsSet(true);
    return this;
  }

  public void unsetTypicalSuPerJob() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPICALSUPERJOB_ISSET_ID);
  }

  /** Returns true if field typicalSuPerJob is set (has been assigned a value) and false otherwise */
  public boolean isSetTypicalSuPerJob() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPICALSUPERJOB_ISSET_ID);
  }

  public void setTypicalSuPerJobIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPICALSUPERJOB_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((java.lang.String)value);
      }
      break;

    case APPLICATIONS_TO_BE_USED:
      if (value == null) {
        unsetApplicationsToBeUsed();
      } else {
        setApplicationsToBeUsed((java.lang.String)value);
      }
      break;

    case DISK_USAGE_RANGE_PER_JOB:
      if (value == null) {
        unsetDiskUsageRangePerJob();
      } else {
        setDiskUsageRangePerJob((java.lang.Long)value);
      }
      break;

    case DOCUMENTS:
      if (value == null) {
        unsetDocuments();
      } else {
        if (value instanceof byte[]) {
          setDocuments((byte[])value);
        } else {
          setDocuments((java.nio.ByteBuffer)value);
        }
      }
      break;

    case EXTERNAL_ALLOCATION_ACCESS_MECHANISMS:
      if (value == null) {
        unsetExternalAllocationAccessMechanisms();
      } else {
        setExternalAllocationAccessMechanisms((java.lang.String)value);
      }
      break;

    case EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD:
      if (value == null) {
        unsetExternalAllocationAccountPassword();
      } else {
        setExternalAllocationAccountPassword((java.lang.String)value);
      }
      break;

    case EXTERNAL_ALLOCATION_ACCOUNT_USERNAME:
      if (value == null) {
        unsetExternalAllocationAccountUsername();
      } else {
        setExternalAllocationAccountUsername((java.lang.String)value);
      }
      break;

    case EXTERNAL_ALLOCATION_ORGANIZATION_NAME:
      if (value == null) {
        unsetExternalAllocationOrganizationName();
      } else {
        setExternalAllocationOrganizationName((java.lang.String)value);
      }
      break;

    case EXTERNAL_ALLOCATION_PROJECT_ID:
      if (value == null) {
        unsetExternalAllocationProjectId();
      } else {
        setExternalAllocationProjectId((java.lang.String)value);
      }
      break;

    case EXTERNAL_ALLOCATION_RESOURCE_NAME:
      if (value == null) {
        unsetExternalAllocationResourceName();
      } else {
        setExternalAllocationResourceName((java.lang.String)value);
      }
      break;

    case FIELD_OF_SCIENCE:
      if (value == null) {
        unsetFieldOfScience();
      } else {
        setFieldOfScience((java.lang.String)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((java.lang.String)value);
      }
      break;

    case MAX_MEMORY_PER_CPU:
      if (value == null) {
        unsetMaxMemoryPerCpu();
      } else {
        setMaxMemoryPerCpu((java.lang.Long)value);
      }
      break;

    case NUMBER_OF_CPU_PER_JOB:
      if (value == null) {
        unsetNumberOfCpuPerJob();
      } else {
        setNumberOfCpuPerJob((java.lang.Long)value);
      }
      break;

    case PRINCIPAL_INVISTIGATOR_EMAIL:
      if (value == null) {
        unsetPrincipalInvistigatorEmail();
      } else {
        setPrincipalInvistigatorEmail((java.lang.String)value);
      }
      break;

    case PRINCIPAL_INVISTIGATOR_NAME:
      if (value == null) {
        unsetPrincipalInvistigatorName();
      } else {
        setPrincipalInvistigatorName((java.lang.String)value);
      }
      break;

    case PROJECT_DESCRIPTION:
      if (value == null) {
        unsetProjectDescription();
      } else {
        setProjectDescription((java.lang.String)value);
      }
      break;

    case PROJECT_REVIEWED_AND_FUNDED_BY:
      if (value == null) {
        unsetProjectReviewedAndFundedBy();
      } else {
        setProjectReviewedAndFundedBy((java.lang.String)value);
      }
      break;

    case SERVICE_UNITS:
      if (value == null) {
        unsetServiceUnits();
      } else {
        setServiceUnits((java.lang.Long)value);
      }
      break;

    case SPECIFIC_RESOURCE_SELECTION:
      if (value == null) {
        unsetSpecificResourceSelection();
      } else {
        setSpecificResourceSelection((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case TYPE_OF_ALLOCATION:
      if (value == null) {
        unsetTypeOfAllocation();
      } else {
        setTypeOfAllocation((java.lang.String)value);
      }
      break;

    case TYPICAL_SU_PER_JOB:
      if (value == null) {
        unsetTypicalSuPerJob();
      } else {
        setTypicalSuPerJob((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return getProjectId();

    case APPLICATIONS_TO_BE_USED:
      return getApplicationsToBeUsed();

    case DISK_USAGE_RANGE_PER_JOB:
      return getDiskUsageRangePerJob();

    case DOCUMENTS:
      return getDocuments();

    case EXTERNAL_ALLOCATION_ACCESS_MECHANISMS:
      return getExternalAllocationAccessMechanisms();

    case EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD:
      return getExternalAllocationAccountPassword();

    case EXTERNAL_ALLOCATION_ACCOUNT_USERNAME:
      return getExternalAllocationAccountUsername();

    case EXTERNAL_ALLOCATION_ORGANIZATION_NAME:
      return getExternalAllocationOrganizationName();

    case EXTERNAL_ALLOCATION_PROJECT_ID:
      return getExternalAllocationProjectId();

    case EXTERNAL_ALLOCATION_RESOURCE_NAME:
      return getExternalAllocationResourceName();

    case FIELD_OF_SCIENCE:
      return getFieldOfScience();

    case KEYWORDS:
      return getKeywords();

    case MAX_MEMORY_PER_CPU:
      return getMaxMemoryPerCpu();

    case NUMBER_OF_CPU_PER_JOB:
      return getNumberOfCpuPerJob();

    case PRINCIPAL_INVISTIGATOR_EMAIL:
      return getPrincipalInvistigatorEmail();

    case PRINCIPAL_INVISTIGATOR_NAME:
      return getPrincipalInvistigatorName();

    case PROJECT_DESCRIPTION:
      return getProjectDescription();

    case PROJECT_REVIEWED_AND_FUNDED_BY:
      return getProjectReviewedAndFundedBy();

    case SERVICE_UNITS:
      return getServiceUnits();

    case SPECIFIC_RESOURCE_SELECTION:
      return getSpecificResourceSelection();

    case TITLE:
      return getTitle();

    case TYPE_OF_ALLOCATION:
      return getTypeOfAllocation();

    case TYPICAL_SU_PER_JOB:
      return getTypicalSuPerJob();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case APPLICATIONS_TO_BE_USED:
      return isSetApplicationsToBeUsed();
    case DISK_USAGE_RANGE_PER_JOB:
      return isSetDiskUsageRangePerJob();
    case DOCUMENTS:
      return isSetDocuments();
    case EXTERNAL_ALLOCATION_ACCESS_MECHANISMS:
      return isSetExternalAllocationAccessMechanisms();
    case EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD:
      return isSetExternalAllocationAccountPassword();
    case EXTERNAL_ALLOCATION_ACCOUNT_USERNAME:
      return isSetExternalAllocationAccountUsername();
    case EXTERNAL_ALLOCATION_ORGANIZATION_NAME:
      return isSetExternalAllocationOrganizationName();
    case EXTERNAL_ALLOCATION_PROJECT_ID:
      return isSetExternalAllocationProjectId();
    case EXTERNAL_ALLOCATION_RESOURCE_NAME:
      return isSetExternalAllocationResourceName();
    case FIELD_OF_SCIENCE:
      return isSetFieldOfScience();
    case KEYWORDS:
      return isSetKeywords();
    case MAX_MEMORY_PER_CPU:
      return isSetMaxMemoryPerCpu();
    case NUMBER_OF_CPU_PER_JOB:
      return isSetNumberOfCpuPerJob();
    case PRINCIPAL_INVISTIGATOR_EMAIL:
      return isSetPrincipalInvistigatorEmail();
    case PRINCIPAL_INVISTIGATOR_NAME:
      return isSetPrincipalInvistigatorName();
    case PROJECT_DESCRIPTION:
      return isSetProjectDescription();
    case PROJECT_REVIEWED_AND_FUNDED_BY:
      return isSetProjectReviewedAndFundedBy();
    case SERVICE_UNITS:
      return isSetServiceUnits();
    case SPECIFIC_RESOURCE_SELECTION:
      return isSetSpecificResourceSelection();
    case TITLE:
      return isSetTitle();
    case TYPE_OF_ALLOCATION:
      return isSetTypeOfAllocation();
    case TYPICAL_SU_PER_JOB:
      return isSetTypicalSuPerJob();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserAllocationDetails)
      return this.equals((UserAllocationDetails)that);
    return false;
  }

  public boolean equals(UserAllocationDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_applicationsToBeUsed = true && this.isSetApplicationsToBeUsed();
    boolean that_present_applicationsToBeUsed = true && that.isSetApplicationsToBeUsed();
    if (this_present_applicationsToBeUsed || that_present_applicationsToBeUsed) {
      if (!(this_present_applicationsToBeUsed && that_present_applicationsToBeUsed))
        return false;
      if (!this.applicationsToBeUsed.equals(that.applicationsToBeUsed))
        return false;
    }

    boolean this_present_diskUsageRangePerJob = true && this.isSetDiskUsageRangePerJob();
    boolean that_present_diskUsageRangePerJob = true && that.isSetDiskUsageRangePerJob();
    if (this_present_diskUsageRangePerJob || that_present_diskUsageRangePerJob) {
      if (!(this_present_diskUsageRangePerJob && that_present_diskUsageRangePerJob))
        return false;
      if (this.diskUsageRangePerJob != that.diskUsageRangePerJob)
        return false;
    }

    boolean this_present_documents = true && this.isSetDocuments();
    boolean that_present_documents = true && that.isSetDocuments();
    if (this_present_documents || that_present_documents) {
      if (!(this_present_documents && that_present_documents))
        return false;
      if (!this.documents.equals(that.documents))
        return false;
    }

    boolean this_present_externalAllocationAccessMechanisms = true && this.isSetExternalAllocationAccessMechanisms();
    boolean that_present_externalAllocationAccessMechanisms = true && that.isSetExternalAllocationAccessMechanisms();
    if (this_present_externalAllocationAccessMechanisms || that_present_externalAllocationAccessMechanisms) {
      if (!(this_present_externalAllocationAccessMechanisms && that_present_externalAllocationAccessMechanisms))
        return false;
      if (!this.externalAllocationAccessMechanisms.equals(that.externalAllocationAccessMechanisms))
        return false;
    }

    boolean this_present_externalAllocationAccountPassword = true && this.isSetExternalAllocationAccountPassword();
    boolean that_present_externalAllocationAccountPassword = true && that.isSetExternalAllocationAccountPassword();
    if (this_present_externalAllocationAccountPassword || that_present_externalAllocationAccountPassword) {
      if (!(this_present_externalAllocationAccountPassword && that_present_externalAllocationAccountPassword))
        return false;
      if (!this.externalAllocationAccountPassword.equals(that.externalAllocationAccountPassword))
        return false;
    }

    boolean this_present_externalAllocationAccountUsername = true && this.isSetExternalAllocationAccountUsername();
    boolean that_present_externalAllocationAccountUsername = true && that.isSetExternalAllocationAccountUsername();
    if (this_present_externalAllocationAccountUsername || that_present_externalAllocationAccountUsername) {
      if (!(this_present_externalAllocationAccountUsername && that_present_externalAllocationAccountUsername))
        return false;
      if (!this.externalAllocationAccountUsername.equals(that.externalAllocationAccountUsername))
        return false;
    }

    boolean this_present_externalAllocationOrganizationName = true && this.isSetExternalAllocationOrganizationName();
    boolean that_present_externalAllocationOrganizationName = true && that.isSetExternalAllocationOrganizationName();
    if (this_present_externalAllocationOrganizationName || that_present_externalAllocationOrganizationName) {
      if (!(this_present_externalAllocationOrganizationName && that_present_externalAllocationOrganizationName))
        return false;
      if (!this.externalAllocationOrganizationName.equals(that.externalAllocationOrganizationName))
        return false;
    }

    boolean this_present_externalAllocationProjectId = true && this.isSetExternalAllocationProjectId();
    boolean that_present_externalAllocationProjectId = true && that.isSetExternalAllocationProjectId();
    if (this_present_externalAllocationProjectId || that_present_externalAllocationProjectId) {
      if (!(this_present_externalAllocationProjectId && that_present_externalAllocationProjectId))
        return false;
      if (!this.externalAllocationProjectId.equals(that.externalAllocationProjectId))
        return false;
    }

    boolean this_present_externalAllocationResourceName = true && this.isSetExternalAllocationResourceName();
    boolean that_present_externalAllocationResourceName = true && that.isSetExternalAllocationResourceName();
    if (this_present_externalAllocationResourceName || that_present_externalAllocationResourceName) {
      if (!(this_present_externalAllocationResourceName && that_present_externalAllocationResourceName))
        return false;
      if (!this.externalAllocationResourceName.equals(that.externalAllocationResourceName))
        return false;
    }

    boolean this_present_fieldOfScience = true && this.isSetFieldOfScience();
    boolean that_present_fieldOfScience = true && that.isSetFieldOfScience();
    if (this_present_fieldOfScience || that_present_fieldOfScience) {
      if (!(this_present_fieldOfScience && that_present_fieldOfScience))
        return false;
      if (!this.fieldOfScience.equals(that.fieldOfScience))
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_maxMemoryPerCpu = true && this.isSetMaxMemoryPerCpu();
    boolean that_present_maxMemoryPerCpu = true && that.isSetMaxMemoryPerCpu();
    if (this_present_maxMemoryPerCpu || that_present_maxMemoryPerCpu) {
      if (!(this_present_maxMemoryPerCpu && that_present_maxMemoryPerCpu))
        return false;
      if (this.maxMemoryPerCpu != that.maxMemoryPerCpu)
        return false;
    }

    boolean this_present_numberOfCpuPerJob = true && this.isSetNumberOfCpuPerJob();
    boolean that_present_numberOfCpuPerJob = true && that.isSetNumberOfCpuPerJob();
    if (this_present_numberOfCpuPerJob || that_present_numberOfCpuPerJob) {
      if (!(this_present_numberOfCpuPerJob && that_present_numberOfCpuPerJob))
        return false;
      if (this.numberOfCpuPerJob != that.numberOfCpuPerJob)
        return false;
    }

    boolean this_present_principalInvistigatorEmail = true && this.isSetPrincipalInvistigatorEmail();
    boolean that_present_principalInvistigatorEmail = true && that.isSetPrincipalInvistigatorEmail();
    if (this_present_principalInvistigatorEmail || that_present_principalInvistigatorEmail) {
      if (!(this_present_principalInvistigatorEmail && that_present_principalInvistigatorEmail))
        return false;
      if (!this.principalInvistigatorEmail.equals(that.principalInvistigatorEmail))
        return false;
    }

    boolean this_present_principalInvistigatorName = true && this.isSetPrincipalInvistigatorName();
    boolean that_present_principalInvistigatorName = true && that.isSetPrincipalInvistigatorName();
    if (this_present_principalInvistigatorName || that_present_principalInvistigatorName) {
      if (!(this_present_principalInvistigatorName && that_present_principalInvistigatorName))
        return false;
      if (!this.principalInvistigatorName.equals(that.principalInvistigatorName))
        return false;
    }

    boolean this_present_projectDescription = true && this.isSetProjectDescription();
    boolean that_present_projectDescription = true && that.isSetProjectDescription();
    if (this_present_projectDescription || that_present_projectDescription) {
      if (!(this_present_projectDescription && that_present_projectDescription))
        return false;
      if (!this.projectDescription.equals(that.projectDescription))
        return false;
    }

    boolean this_present_projectReviewedAndFundedBy = true && this.isSetProjectReviewedAndFundedBy();
    boolean that_present_projectReviewedAndFundedBy = true && that.isSetProjectReviewedAndFundedBy();
    if (this_present_projectReviewedAndFundedBy || that_present_projectReviewedAndFundedBy) {
      if (!(this_present_projectReviewedAndFundedBy && that_present_projectReviewedAndFundedBy))
        return false;
      if (!this.projectReviewedAndFundedBy.equals(that.projectReviewedAndFundedBy))
        return false;
    }

    boolean this_present_serviceUnits = true && this.isSetServiceUnits();
    boolean that_present_serviceUnits = true && that.isSetServiceUnits();
    if (this_present_serviceUnits || that_present_serviceUnits) {
      if (!(this_present_serviceUnits && that_present_serviceUnits))
        return false;
      if (this.serviceUnits != that.serviceUnits)
        return false;
    }

    boolean this_present_specificResourceSelection = true && this.isSetSpecificResourceSelection();
    boolean that_present_specificResourceSelection = true && that.isSetSpecificResourceSelection();
    if (this_present_specificResourceSelection || that_present_specificResourceSelection) {
      if (!(this_present_specificResourceSelection && that_present_specificResourceSelection))
        return false;
      if (!this.specificResourceSelection.equals(that.specificResourceSelection))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_typeOfAllocation = true && this.isSetTypeOfAllocation();
    boolean that_present_typeOfAllocation = true && that.isSetTypeOfAllocation();
    if (this_present_typeOfAllocation || that_present_typeOfAllocation) {
      if (!(this_present_typeOfAllocation && that_present_typeOfAllocation))
        return false;
      if (!this.typeOfAllocation.equals(that.typeOfAllocation))
        return false;
    }

    boolean this_present_typicalSuPerJob = true && this.isSetTypicalSuPerJob();
    boolean that_present_typicalSuPerJob = true && that.isSetTypicalSuPerJob();
    if (this_present_typicalSuPerJob || that_present_typicalSuPerJob) {
      if (!(this_present_typicalSuPerJob && that_present_typicalSuPerJob))
        return false;
      if (this.typicalSuPerJob != that.typicalSuPerJob)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProjectId()) ? 131071 : 524287);
    if (isSetProjectId())
      hashCode = hashCode * 8191 + projectId.hashCode();

    hashCode = hashCode * 8191 + ((isSetApplicationsToBeUsed()) ? 131071 : 524287);
    if (isSetApplicationsToBeUsed())
      hashCode = hashCode * 8191 + applicationsToBeUsed.hashCode();

    hashCode = hashCode * 8191 + ((isSetDiskUsageRangePerJob()) ? 131071 : 524287);
    if (isSetDiskUsageRangePerJob())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(diskUsageRangePerJob);

    hashCode = hashCode * 8191 + ((isSetDocuments()) ? 131071 : 524287);
    if (isSetDocuments())
      hashCode = hashCode * 8191 + documents.hashCode();

    hashCode = hashCode * 8191 + ((isSetExternalAllocationAccessMechanisms()) ? 131071 : 524287);
    if (isSetExternalAllocationAccessMechanisms())
      hashCode = hashCode * 8191 + externalAllocationAccessMechanisms.hashCode();

    hashCode = hashCode * 8191 + ((isSetExternalAllocationAccountPassword()) ? 131071 : 524287);
    if (isSetExternalAllocationAccountPassword())
      hashCode = hashCode * 8191 + externalAllocationAccountPassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetExternalAllocationAccountUsername()) ? 131071 : 524287);
    if (isSetExternalAllocationAccountUsername())
      hashCode = hashCode * 8191 + externalAllocationAccountUsername.hashCode();

    hashCode = hashCode * 8191 + ((isSetExternalAllocationOrganizationName()) ? 131071 : 524287);
    if (isSetExternalAllocationOrganizationName())
      hashCode = hashCode * 8191 + externalAllocationOrganizationName.hashCode();

    hashCode = hashCode * 8191 + ((isSetExternalAllocationProjectId()) ? 131071 : 524287);
    if (isSetExternalAllocationProjectId())
      hashCode = hashCode * 8191 + externalAllocationProjectId.hashCode();

    hashCode = hashCode * 8191 + ((isSetExternalAllocationResourceName()) ? 131071 : 524287);
    if (isSetExternalAllocationResourceName())
      hashCode = hashCode * 8191 + externalAllocationResourceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFieldOfScience()) ? 131071 : 524287);
    if (isSetFieldOfScience())
      hashCode = hashCode * 8191 + fieldOfScience.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeywords()) ? 131071 : 524287);
    if (isSetKeywords())
      hashCode = hashCode * 8191 + keywords.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxMemoryPerCpu()) ? 131071 : 524287);
    if (isSetMaxMemoryPerCpu())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxMemoryPerCpu);

    hashCode = hashCode * 8191 + ((isSetNumberOfCpuPerJob()) ? 131071 : 524287);
    if (isSetNumberOfCpuPerJob())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberOfCpuPerJob);

    hashCode = hashCode * 8191 + ((isSetPrincipalInvistigatorEmail()) ? 131071 : 524287);
    if (isSetPrincipalInvistigatorEmail())
      hashCode = hashCode * 8191 + principalInvistigatorEmail.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrincipalInvistigatorName()) ? 131071 : 524287);
    if (isSetPrincipalInvistigatorName())
      hashCode = hashCode * 8191 + principalInvistigatorName.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectDescription()) ? 131071 : 524287);
    if (isSetProjectDescription())
      hashCode = hashCode * 8191 + projectDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectReviewedAndFundedBy()) ? 131071 : 524287);
    if (isSetProjectReviewedAndFundedBy())
      hashCode = hashCode * 8191 + projectReviewedAndFundedBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceUnits()) ? 131071 : 524287);
    if (isSetServiceUnits())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(serviceUnits);

    hashCode = hashCode * 8191 + ((isSetSpecificResourceSelection()) ? 131071 : 524287);
    if (isSetSpecificResourceSelection())
      hashCode = hashCode * 8191 + specificResourceSelection.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetTypeOfAllocation()) ? 131071 : 524287);
    if (isSetTypeOfAllocation())
      hashCode = hashCode * 8191 + typeOfAllocation.hashCode();

    hashCode = hashCode * 8191 + ((isSetTypicalSuPerJob()) ? 131071 : 524287);
    if (isSetTypicalSuPerJob())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(typicalSuPerJob);

    return hashCode;
  }

  @Override
  public int compareTo(UserAllocationDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplicationsToBeUsed()).compareTo(other.isSetApplicationsToBeUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationsToBeUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationsToBeUsed, other.applicationsToBeUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiskUsageRangePerJob()).compareTo(other.isSetDiskUsageRangePerJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskUsageRangePerJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskUsageRangePerJob, other.diskUsageRangePerJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocuments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternalAllocationAccessMechanisms()).compareTo(other.isSetExternalAllocationAccessMechanisms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAllocationAccessMechanisms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalAllocationAccessMechanisms, other.externalAllocationAccessMechanisms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternalAllocationAccountPassword()).compareTo(other.isSetExternalAllocationAccountPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAllocationAccountPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalAllocationAccountPassword, other.externalAllocationAccountPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternalAllocationAccountUsername()).compareTo(other.isSetExternalAllocationAccountUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAllocationAccountUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalAllocationAccountUsername, other.externalAllocationAccountUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternalAllocationOrganizationName()).compareTo(other.isSetExternalAllocationOrganizationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAllocationOrganizationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalAllocationOrganizationName, other.externalAllocationOrganizationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternalAllocationProjectId()).compareTo(other.isSetExternalAllocationProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAllocationProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalAllocationProjectId, other.externalAllocationProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternalAllocationResourceName()).compareTo(other.isSetExternalAllocationResourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAllocationResourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalAllocationResourceName, other.externalAllocationResourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFieldOfScience()).compareTo(other.isSetFieldOfScience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldOfScience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldOfScience, other.fieldOfScience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxMemoryPerCpu()).compareTo(other.isSetMaxMemoryPerCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMemoryPerCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMemoryPerCpu, other.maxMemoryPerCpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfCpuPerJob()).compareTo(other.isSetNumberOfCpuPerJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfCpuPerJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfCpuPerJob, other.numberOfCpuPerJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrincipalInvistigatorEmail()).compareTo(other.isSetPrincipalInvistigatorEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalInvistigatorEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalInvistigatorEmail, other.principalInvistigatorEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrincipalInvistigatorName()).compareTo(other.isSetPrincipalInvistigatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalInvistigatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalInvistigatorName, other.principalInvistigatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectDescription()).compareTo(other.isSetProjectDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectDescription, other.projectDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectReviewedAndFundedBy()).compareTo(other.isSetProjectReviewedAndFundedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectReviewedAndFundedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectReviewedAndFundedBy, other.projectReviewedAndFundedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceUnits()).compareTo(other.isSetServiceUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceUnits, other.serviceUnits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpecificResourceSelection()).compareTo(other.isSetSpecificResourceSelection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecificResourceSelection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificResourceSelection, other.specificResourceSelection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTypeOfAllocation()).compareTo(other.isSetTypeOfAllocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeOfAllocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeOfAllocation, other.typeOfAllocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTypicalSuPerJob()).compareTo(other.isSetTypicalSuPerJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypicalSuPerJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typicalSuPerJob, other.typicalSuPerJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserAllocationDetails(");
    boolean first = true;

    if (isSetProjectId()) {
      sb.append("projectId:");
      if (this.projectId == null) {
        sb.append("null");
      } else {
        sb.append(this.projectId);
      }
      first = false;
    }
    if (isSetApplicationsToBeUsed()) {
      if (!first) sb.append(", ");
      sb.append("applicationsToBeUsed:");
      if (this.applicationsToBeUsed == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationsToBeUsed);
      }
      first = false;
    }
    if (isSetDiskUsageRangePerJob()) {
      if (!first) sb.append(", ");
      sb.append("diskUsageRangePerJob:");
      sb.append(this.diskUsageRangePerJob);
      first = false;
    }
    if (isSetDocuments()) {
      if (!first) sb.append(", ");
      sb.append("documents:");
      if (this.documents == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.documents, sb);
      }
      first = false;
    }
    if (isSetExternalAllocationAccessMechanisms()) {
      if (!first) sb.append(", ");
      sb.append("externalAllocationAccessMechanisms:");
      if (this.externalAllocationAccessMechanisms == null) {
        sb.append("null");
      } else {
        sb.append(this.externalAllocationAccessMechanisms);
      }
      first = false;
    }
    if (isSetExternalAllocationAccountPassword()) {
      if (!first) sb.append(", ");
      sb.append("externalAllocationAccountPassword:");
      if (this.externalAllocationAccountPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.externalAllocationAccountPassword);
      }
      first = false;
    }
    if (isSetExternalAllocationAccountUsername()) {
      if (!first) sb.append(", ");
      sb.append("externalAllocationAccountUsername:");
      if (this.externalAllocationAccountUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.externalAllocationAccountUsername);
      }
      first = false;
    }
    if (isSetExternalAllocationOrganizationName()) {
      if (!first) sb.append(", ");
      sb.append("externalAllocationOrganizationName:");
      if (this.externalAllocationOrganizationName == null) {
        sb.append("null");
      } else {
        sb.append(this.externalAllocationOrganizationName);
      }
      first = false;
    }
    if (isSetExternalAllocationProjectId()) {
      if (!first) sb.append(", ");
      sb.append("externalAllocationProjectId:");
      if (this.externalAllocationProjectId == null) {
        sb.append("null");
      } else {
        sb.append(this.externalAllocationProjectId);
      }
      first = false;
    }
    if (isSetExternalAllocationResourceName()) {
      if (!first) sb.append(", ");
      sb.append("externalAllocationResourceName:");
      if (this.externalAllocationResourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.externalAllocationResourceName);
      }
      first = false;
    }
    if (isSetFieldOfScience()) {
      if (!first) sb.append(", ");
      sb.append("fieldOfScience:");
      if (this.fieldOfScience == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldOfScience);
      }
      first = false;
    }
    if (isSetKeywords()) {
      if (!first) sb.append(", ");
      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
    }
    if (isSetMaxMemoryPerCpu()) {
      if (!first) sb.append(", ");
      sb.append("maxMemoryPerCpu:");
      sb.append(this.maxMemoryPerCpu);
      first = false;
    }
    if (isSetNumberOfCpuPerJob()) {
      if (!first) sb.append(", ");
      sb.append("numberOfCpuPerJob:");
      sb.append(this.numberOfCpuPerJob);
      first = false;
    }
    if (isSetPrincipalInvistigatorEmail()) {
      if (!first) sb.append(", ");
      sb.append("principalInvistigatorEmail:");
      if (this.principalInvistigatorEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.principalInvistigatorEmail);
      }
      first = false;
    }
    if (isSetPrincipalInvistigatorName()) {
      if (!first) sb.append(", ");
      sb.append("principalInvistigatorName:");
      if (this.principalInvistigatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.principalInvistigatorName);
      }
      first = false;
    }
    if (isSetProjectDescription()) {
      if (!first) sb.append(", ");
      sb.append("projectDescription:");
      if (this.projectDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.projectDescription);
      }
      first = false;
    }
    if (isSetProjectReviewedAndFundedBy()) {
      if (!first) sb.append(", ");
      sb.append("projectReviewedAndFundedBy:");
      if (this.projectReviewedAndFundedBy == null) {
        sb.append("null");
      } else {
        sb.append(this.projectReviewedAndFundedBy);
      }
      first = false;
    }
    if (isSetServiceUnits()) {
      if (!first) sb.append(", ");
      sb.append("serviceUnits:");
      sb.append(this.serviceUnits);
      first = false;
    }
    if (isSetSpecificResourceSelection()) {
      if (!first) sb.append(", ");
      sb.append("specificResourceSelection:");
      if (this.specificResourceSelection == null) {
        sb.append("null");
      } else {
        sb.append(this.specificResourceSelection);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetTypeOfAllocation()) {
      if (!first) sb.append(", ");
      sb.append("typeOfAllocation:");
      if (this.typeOfAllocation == null) {
        sb.append("null");
      } else {
        sb.append(this.typeOfAllocation);
      }
      first = false;
    }
    if (isSetTypicalSuPerJob()) {
      if (!first) sb.append(", ");
      sb.append("typicalSuPerJob:");
      sb.append(this.typicalSuPerJob);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserAllocationDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserAllocationDetailsStandardScheme getScheme() {
      return new UserAllocationDetailsStandardScheme();
    }
  }

  private static class UserAllocationDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserAllocationDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserAllocationDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATIONS_TO_BE_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationsToBeUsed = iprot.readString();
              struct.setApplicationsToBeUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISK_USAGE_RANGE_PER_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.diskUsageRangePerJob = iprot.readI64();
              struct.setDiskUsageRangePerJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOCUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.documents = iprot.readBinary();
              struct.setDocumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTERNAL_ALLOCATION_ACCESS_MECHANISMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalAllocationAccessMechanisms = iprot.readString();
              struct.setExternalAllocationAccessMechanismsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalAllocationAccountPassword = iprot.readString();
              struct.setExternalAllocationAccountPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXTERNAL_ALLOCATION_ACCOUNT_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalAllocationAccountUsername = iprot.readString();
              struct.setExternalAllocationAccountUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXTERNAL_ALLOCATION_ORGANIZATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalAllocationOrganizationName = iprot.readString();
              struct.setExternalAllocationOrganizationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTERNAL_ALLOCATION_PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalAllocationProjectId = iprot.readString();
              struct.setExternalAllocationProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTERNAL_ALLOCATION_RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalAllocationResourceName = iprot.readString();
              struct.setExternalAllocationResourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIELD_OF_SCIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldOfScience = iprot.readString();
              struct.setFieldOfScienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keywords = iprot.readString();
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAX_MEMORY_PER_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxMemoryPerCpu = iprot.readI64();
              struct.setMaxMemoryPerCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NUMBER_OF_CPU_PER_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numberOfCpuPerJob = iprot.readI64();
              struct.setNumberOfCpuPerJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRINCIPAL_INVISTIGATOR_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principalInvistigatorEmail = iprot.readString();
              struct.setPrincipalInvistigatorEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRINCIPAL_INVISTIGATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principalInvistigatorName = iprot.readString();
              struct.setPrincipalInvistigatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROJECT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectDescription = iprot.readString();
              struct.setProjectDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROJECT_REVIEWED_AND_FUNDED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectReviewedAndFundedBy = iprot.readString();
              struct.setProjectReviewedAndFundedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SERVICE_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serviceUnits = iprot.readI64();
              struct.setServiceUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SPECIFIC_RESOURCE_SELECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specificResourceSelection = iprot.readString();
              struct.setSpecificResourceSelectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TYPE_OF_ALLOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeOfAllocation = iprot.readString();
              struct.setTypeOfAllocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TYPICAL_SU_PER_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.typicalSuPerJob = iprot.readI64();
              struct.setTypicalSuPerJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserAllocationDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.projectId != null) {
        if (struct.isSetProjectId()) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.projectId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.applicationsToBeUsed != null) {
        if (struct.isSetApplicationsToBeUsed()) {
          oprot.writeFieldBegin(APPLICATIONS_TO_BE_USED_FIELD_DESC);
          oprot.writeString(struct.applicationsToBeUsed);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDiskUsageRangePerJob()) {
        oprot.writeFieldBegin(DISK_USAGE_RANGE_PER_JOB_FIELD_DESC);
        oprot.writeI64(struct.diskUsageRangePerJob);
        oprot.writeFieldEnd();
      }
      if (struct.documents != null) {
        if (struct.isSetDocuments()) {
          oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
          oprot.writeBinary(struct.documents);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalAllocationAccessMechanisms != null) {
        if (struct.isSetExternalAllocationAccessMechanisms()) {
          oprot.writeFieldBegin(EXTERNAL_ALLOCATION_ACCESS_MECHANISMS_FIELD_DESC);
          oprot.writeString(struct.externalAllocationAccessMechanisms);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalAllocationAccountPassword != null) {
        if (struct.isSetExternalAllocationAccountPassword()) {
          oprot.writeFieldBegin(EXTERNAL_ALLOCATION_ACCOUNT_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.externalAllocationAccountPassword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalAllocationAccountUsername != null) {
        if (struct.isSetExternalAllocationAccountUsername()) {
          oprot.writeFieldBegin(EXTERNAL_ALLOCATION_ACCOUNT_USERNAME_FIELD_DESC);
          oprot.writeString(struct.externalAllocationAccountUsername);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalAllocationOrganizationName != null) {
        if (struct.isSetExternalAllocationOrganizationName()) {
          oprot.writeFieldBegin(EXTERNAL_ALLOCATION_ORGANIZATION_NAME_FIELD_DESC);
          oprot.writeString(struct.externalAllocationOrganizationName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalAllocationProjectId != null) {
        if (struct.isSetExternalAllocationProjectId()) {
          oprot.writeFieldBegin(EXTERNAL_ALLOCATION_PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.externalAllocationProjectId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalAllocationResourceName != null) {
        if (struct.isSetExternalAllocationResourceName()) {
          oprot.writeFieldBegin(EXTERNAL_ALLOCATION_RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.externalAllocationResourceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldOfScience != null) {
        if (struct.isSetFieldOfScience()) {
          oprot.writeFieldBegin(FIELD_OF_SCIENCE_FIELD_DESC);
          oprot.writeString(struct.fieldOfScience);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keywords != null) {
        if (struct.isSetKeywords()) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          oprot.writeString(struct.keywords);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxMemoryPerCpu()) {
        oprot.writeFieldBegin(MAX_MEMORY_PER_CPU_FIELD_DESC);
        oprot.writeI64(struct.maxMemoryPerCpu);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumberOfCpuPerJob()) {
        oprot.writeFieldBegin(NUMBER_OF_CPU_PER_JOB_FIELD_DESC);
        oprot.writeI64(struct.numberOfCpuPerJob);
        oprot.writeFieldEnd();
      }
      if (struct.principalInvistigatorEmail != null) {
        if (struct.isSetPrincipalInvistigatorEmail()) {
          oprot.writeFieldBegin(PRINCIPAL_INVISTIGATOR_EMAIL_FIELD_DESC);
          oprot.writeString(struct.principalInvistigatorEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.principalInvistigatorName != null) {
        if (struct.isSetPrincipalInvistigatorName()) {
          oprot.writeFieldBegin(PRINCIPAL_INVISTIGATOR_NAME_FIELD_DESC);
          oprot.writeString(struct.principalInvistigatorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.projectDescription != null) {
        if (struct.isSetProjectDescription()) {
          oprot.writeFieldBegin(PROJECT_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.projectDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.projectReviewedAndFundedBy != null) {
        if (struct.isSetProjectReviewedAndFundedBy()) {
          oprot.writeFieldBegin(PROJECT_REVIEWED_AND_FUNDED_BY_FIELD_DESC);
          oprot.writeString(struct.projectReviewedAndFundedBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetServiceUnits()) {
        oprot.writeFieldBegin(SERVICE_UNITS_FIELD_DESC);
        oprot.writeI64(struct.serviceUnits);
        oprot.writeFieldEnd();
      }
      if (struct.specificResourceSelection != null) {
        if (struct.isSetSpecificResourceSelection()) {
          oprot.writeFieldBegin(SPECIFIC_RESOURCE_SELECTION_FIELD_DESC);
          oprot.writeString(struct.specificResourceSelection);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.typeOfAllocation != null) {
        if (struct.isSetTypeOfAllocation()) {
          oprot.writeFieldBegin(TYPE_OF_ALLOCATION_FIELD_DESC);
          oprot.writeString(struct.typeOfAllocation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTypicalSuPerJob()) {
        oprot.writeFieldBegin(TYPICAL_SU_PER_JOB_FIELD_DESC);
        oprot.writeI64(struct.typicalSuPerJob);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserAllocationDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserAllocationDetailsTupleScheme getScheme() {
      return new UserAllocationDetailsTupleScheme();
    }
  }

  private static class UserAllocationDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserAllocationDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserAllocationDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationsToBeUsed()) {
        optionals.set(1);
      }
      if (struct.isSetDiskUsageRangePerJob()) {
        optionals.set(2);
      }
      if (struct.isSetDocuments()) {
        optionals.set(3);
      }
      if (struct.isSetExternalAllocationAccessMechanisms()) {
        optionals.set(4);
      }
      if (struct.isSetExternalAllocationAccountPassword()) {
        optionals.set(5);
      }
      if (struct.isSetExternalAllocationAccountUsername()) {
        optionals.set(6);
      }
      if (struct.isSetExternalAllocationOrganizationName()) {
        optionals.set(7);
      }
      if (struct.isSetExternalAllocationProjectId()) {
        optionals.set(8);
      }
      if (struct.isSetExternalAllocationResourceName()) {
        optionals.set(9);
      }
      if (struct.isSetFieldOfScience()) {
        optionals.set(10);
      }
      if (struct.isSetKeywords()) {
        optionals.set(11);
      }
      if (struct.isSetMaxMemoryPerCpu()) {
        optionals.set(12);
      }
      if (struct.isSetNumberOfCpuPerJob()) {
        optionals.set(13);
      }
      if (struct.isSetPrincipalInvistigatorEmail()) {
        optionals.set(14);
      }
      if (struct.isSetPrincipalInvistigatorName()) {
        optionals.set(15);
      }
      if (struct.isSetProjectDescription()) {
        optionals.set(16);
      }
      if (struct.isSetProjectReviewedAndFundedBy()) {
        optionals.set(17);
      }
      if (struct.isSetServiceUnits()) {
        optionals.set(18);
      }
      if (struct.isSetSpecificResourceSelection()) {
        optionals.set(19);
      }
      if (struct.isSetTitle()) {
        optionals.set(20);
      }
      if (struct.isSetTypeOfAllocation()) {
        optionals.set(21);
      }
      if (struct.isSetTypicalSuPerJob()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetApplicationsToBeUsed()) {
        oprot.writeString(struct.applicationsToBeUsed);
      }
      if (struct.isSetDiskUsageRangePerJob()) {
        oprot.writeI64(struct.diskUsageRangePerJob);
      }
      if (struct.isSetDocuments()) {
        oprot.writeBinary(struct.documents);
      }
      if (struct.isSetExternalAllocationAccessMechanisms()) {
        oprot.writeString(struct.externalAllocationAccessMechanisms);
      }
      if (struct.isSetExternalAllocationAccountPassword()) {
        oprot.writeString(struct.externalAllocationAccountPassword);
      }
      if (struct.isSetExternalAllocationAccountUsername()) {
        oprot.writeString(struct.externalAllocationAccountUsername);
      }
      if (struct.isSetExternalAllocationOrganizationName()) {
        oprot.writeString(struct.externalAllocationOrganizationName);
      }
      if (struct.isSetExternalAllocationProjectId()) {
        oprot.writeString(struct.externalAllocationProjectId);
      }
      if (struct.isSetExternalAllocationResourceName()) {
        oprot.writeString(struct.externalAllocationResourceName);
      }
      if (struct.isSetFieldOfScience()) {
        oprot.writeString(struct.fieldOfScience);
      }
      if (struct.isSetKeywords()) {
        oprot.writeString(struct.keywords);
      }
      if (struct.isSetMaxMemoryPerCpu()) {
        oprot.writeI64(struct.maxMemoryPerCpu);
      }
      if (struct.isSetNumberOfCpuPerJob()) {
        oprot.writeI64(struct.numberOfCpuPerJob);
      }
      if (struct.isSetPrincipalInvistigatorEmail()) {
        oprot.writeString(struct.principalInvistigatorEmail);
      }
      if (struct.isSetPrincipalInvistigatorName()) {
        oprot.writeString(struct.principalInvistigatorName);
      }
      if (struct.isSetProjectDescription()) {
        oprot.writeString(struct.projectDescription);
      }
      if (struct.isSetProjectReviewedAndFundedBy()) {
        oprot.writeString(struct.projectReviewedAndFundedBy);
      }
      if (struct.isSetServiceUnits()) {
        oprot.writeI64(struct.serviceUnits);
      }
      if (struct.isSetSpecificResourceSelection()) {
        oprot.writeString(struct.specificResourceSelection);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetTypeOfAllocation()) {
        oprot.writeString(struct.typeOfAllocation);
      }
      if (struct.isSetTypicalSuPerJob()) {
        oprot.writeI64(struct.typicalSuPerJob);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserAllocationDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applicationsToBeUsed = iprot.readString();
        struct.setApplicationsToBeUsedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.diskUsageRangePerJob = iprot.readI64();
        struct.setDiskUsageRangePerJobIsSet(true);
      }
      if (incoming.get(3)) {
        struct.documents = iprot.readBinary();
        struct.setDocumentsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.externalAllocationAccessMechanisms = iprot.readString();
        struct.setExternalAllocationAccessMechanismsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.externalAllocationAccountPassword = iprot.readString();
        struct.setExternalAllocationAccountPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.externalAllocationAccountUsername = iprot.readString();
        struct.setExternalAllocationAccountUsernameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.externalAllocationOrganizationName = iprot.readString();
        struct.setExternalAllocationOrganizationNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.externalAllocationProjectId = iprot.readString();
        struct.setExternalAllocationProjectIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.externalAllocationResourceName = iprot.readString();
        struct.setExternalAllocationResourceNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fieldOfScience = iprot.readString();
        struct.setFieldOfScienceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.keywords = iprot.readString();
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.maxMemoryPerCpu = iprot.readI64();
        struct.setMaxMemoryPerCpuIsSet(true);
      }
      if (incoming.get(13)) {
        struct.numberOfCpuPerJob = iprot.readI64();
        struct.setNumberOfCpuPerJobIsSet(true);
      }
      if (incoming.get(14)) {
        struct.principalInvistigatorEmail = iprot.readString();
        struct.setPrincipalInvistigatorEmailIsSet(true);
      }
      if (incoming.get(15)) {
        struct.principalInvistigatorName = iprot.readString();
        struct.setPrincipalInvistigatorNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.projectDescription = iprot.readString();
        struct.setProjectDescriptionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.projectReviewedAndFundedBy = iprot.readString();
        struct.setProjectReviewedAndFundedByIsSet(true);
      }
      if (incoming.get(18)) {
        struct.serviceUnits = iprot.readI64();
        struct.setServiceUnitsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.specificResourceSelection = iprot.readString();
        struct.setSpecificResourceSelectionIsSet(true);
      }
      if (incoming.get(20)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(21)) {
        struct.typeOfAllocation = iprot.readString();
        struct.setTypeOfAllocationIsSet(true);
      }
      if (incoming.get(22)) {
        struct.typicalSuPerJob = iprot.readI64();
        struct.setTypicalSuPerJobIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

