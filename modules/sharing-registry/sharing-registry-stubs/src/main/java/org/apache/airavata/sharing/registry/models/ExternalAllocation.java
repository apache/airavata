/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.sharing.registry.models;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <p>If the User has an exclusive allocation with third party organization and wants to use airavata middleware to manage jobs.</p>
 * <li>organization : Name of organization where the user has allocation, can be a list of supported once, still to decide</li>
 * <li><b>resourceName</b> : Allocated resource</li>
 * <li>projectId : A chargeable project ID recognised by the the third party organization.</li>
 * <li>accountDetails : details needed for verification (Username, Password)</li>
 * <li>accessMech :  Mechanism to use for job scheduling (Eg: ssh, 2FA etc)</li>
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ExternalAllocation implements org.apache.thrift.TBase<ExternalAllocation, ExternalAllocation._Fields>, java.io.Serializable, Cloneable, Comparable<ExternalAllocation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExternalAllocation");

  private static final org.apache.thrift.protocol.TField ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("organization", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("accountDetails", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ACCESS_MECH_FIELD_DESC = new org.apache.thrift.protocol.TField("accessMech", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExternalAllocationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExternalAllocationTupleSchemeFactory();

  public java.lang.String organization; // optional
  public java.lang.String resourceName; // optional
  public java.lang.String projectId; // optional
  public UserDetails accountDetails; // optional
  public java.util.List<java.lang.String> accessMech; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORGANIZATION((short)1, "organization"),
    RESOURCE_NAME((short)2, "resourceName"),
    PROJECT_ID((short)3, "projectId"),
    ACCOUNT_DETAILS((short)4, "accountDetails"),
    ACCESS_MECH((short)5, "accessMech");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORGANIZATION
          return ORGANIZATION;
        case 2: // RESOURCE_NAME
          return RESOURCE_NAME;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // ACCOUNT_DETAILS
          return ACCOUNT_DETAILS;
        case 5: // ACCESS_MECH
          return ACCESS_MECH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ORGANIZATION,_Fields.RESOURCE_NAME,_Fields.PROJECT_ID,_Fields.ACCOUNT_DETAILS,_Fields.ACCESS_MECH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("organization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("accountDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserDetails.class)));
    tmpMap.put(_Fields.ACCESS_MECH, new org.apache.thrift.meta_data.FieldMetaData("accessMech", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExternalAllocation.class, metaDataMap);
  }

  public ExternalAllocation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExternalAllocation(ExternalAllocation other) {
    if (other.isSetOrganization()) {
      this.organization = other.organization;
    }
    if (other.isSetResourceName()) {
      this.resourceName = other.resourceName;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetAccountDetails()) {
      this.accountDetails = new UserDetails(other.accountDetails);
    }
    if (other.isSetAccessMech()) {
      java.util.List<java.lang.String> __this__accessMech = new java.util.ArrayList<java.lang.String>(other.accessMech);
      this.accessMech = __this__accessMech;
    }
  }

  public ExternalAllocation deepCopy() {
    return new ExternalAllocation(this);
  }

  @Override
  public void clear() {
    this.organization = null;
    this.resourceName = null;
    this.projectId = null;
    this.accountDetails = null;
    this.accessMech = null;
  }

  public java.lang.String getOrganization() {
    return this.organization;
  }

  public ExternalAllocation setOrganization(java.lang.String organization) {
    this.organization = organization;
    return this;
  }

  public void unsetOrganization() {
    this.organization = null;
  }

  /** Returns true if field organization is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganization() {
    return this.organization != null;
  }

  public void setOrganizationIsSet(boolean value) {
    if (!value) {
      this.organization = null;
    }
  }

  public java.lang.String getResourceName() {
    return this.resourceName;
  }

  public ExternalAllocation setResourceName(java.lang.String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  public void unsetResourceName() {
    this.resourceName = null;
  }

  /** Returns true if field resourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceName() {
    return this.resourceName != null;
  }

  public void setResourceNameIsSet(boolean value) {
    if (!value) {
      this.resourceName = null;
    }
  }

  public java.lang.String getProjectId() {
    return this.projectId;
  }

  public ExternalAllocation setProjectId(java.lang.String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public UserDetails getAccountDetails() {
    return this.accountDetails;
  }

  public ExternalAllocation setAccountDetails(UserDetails accountDetails) {
    this.accountDetails = accountDetails;
    return this;
  }

  public void unsetAccountDetails() {
    this.accountDetails = null;
  }

  /** Returns true if field accountDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountDetails() {
    return this.accountDetails != null;
  }

  public void setAccountDetailsIsSet(boolean value) {
    if (!value) {
      this.accountDetails = null;
    }
  }

  public int getAccessMechSize() {
    return (this.accessMech == null) ? 0 : this.accessMech.size();
  }

  public java.util.Iterator<java.lang.String> getAccessMechIterator() {
    return (this.accessMech == null) ? null : this.accessMech.iterator();
  }

  public void addToAccessMech(java.lang.String elem) {
    if (this.accessMech == null) {
      this.accessMech = new java.util.ArrayList<java.lang.String>();
    }
    this.accessMech.add(elem);
  }

  public java.util.List<java.lang.String> getAccessMech() {
    return this.accessMech;
  }

  public ExternalAllocation setAccessMech(java.util.List<java.lang.String> accessMech) {
    this.accessMech = accessMech;
    return this;
  }

  public void unsetAccessMech() {
    this.accessMech = null;
  }

  /** Returns true if field accessMech is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessMech() {
    return this.accessMech != null;
  }

  public void setAccessMechIsSet(boolean value) {
    if (!value) {
      this.accessMech = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORGANIZATION:
      if (value == null) {
        unsetOrganization();
      } else {
        setOrganization((java.lang.String)value);
      }
      break;

    case RESOURCE_NAME:
      if (value == null) {
        unsetResourceName();
      } else {
        setResourceName((java.lang.String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((java.lang.String)value);
      }
      break;

    case ACCOUNT_DETAILS:
      if (value == null) {
        unsetAccountDetails();
      } else {
        setAccountDetails((UserDetails)value);
      }
      break;

    case ACCESS_MECH:
      if (value == null) {
        unsetAccessMech();
      } else {
        setAccessMech((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORGANIZATION:
      return getOrganization();

    case RESOURCE_NAME:
      return getResourceName();

    case PROJECT_ID:
      return getProjectId();

    case ACCOUNT_DETAILS:
      return getAccountDetails();

    case ACCESS_MECH:
      return getAccessMech();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORGANIZATION:
      return isSetOrganization();
    case RESOURCE_NAME:
      return isSetResourceName();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCOUNT_DETAILS:
      return isSetAccountDetails();
    case ACCESS_MECH:
      return isSetAccessMech();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExternalAllocation)
      return this.equals((ExternalAllocation)that);
    return false;
  }

  public boolean equals(ExternalAllocation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_organization = true && this.isSetOrganization();
    boolean that_present_organization = true && that.isSetOrganization();
    if (this_present_organization || that_present_organization) {
      if (!(this_present_organization && that_present_organization))
        return false;
      if (!this.organization.equals(that.organization))
        return false;
    }

    boolean this_present_resourceName = true && this.isSetResourceName();
    boolean that_present_resourceName = true && that.isSetResourceName();
    if (this_present_resourceName || that_present_resourceName) {
      if (!(this_present_resourceName && that_present_resourceName))
        return false;
      if (!this.resourceName.equals(that.resourceName))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_accountDetails = true && this.isSetAccountDetails();
    boolean that_present_accountDetails = true && that.isSetAccountDetails();
    if (this_present_accountDetails || that_present_accountDetails) {
      if (!(this_present_accountDetails && that_present_accountDetails))
        return false;
      if (!this.accountDetails.equals(that.accountDetails))
        return false;
    }

    boolean this_present_accessMech = true && this.isSetAccessMech();
    boolean that_present_accessMech = true && that.isSetAccessMech();
    if (this_present_accessMech || that_present_accessMech) {
      if (!(this_present_accessMech && that_present_accessMech))
        return false;
      if (!this.accessMech.equals(that.accessMech))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrganization()) ? 131071 : 524287);
    if (isSetOrganization())
      hashCode = hashCode * 8191 + organization.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceName()) ? 131071 : 524287);
    if (isSetResourceName())
      hashCode = hashCode * 8191 + resourceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectId()) ? 131071 : 524287);
    if (isSetProjectId())
      hashCode = hashCode * 8191 + projectId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccountDetails()) ? 131071 : 524287);
    if (isSetAccountDetails())
      hashCode = hashCode * 8191 + accountDetails.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccessMech()) ? 131071 : 524287);
    if (isSetAccessMech())
      hashCode = hashCode * 8191 + accessMech.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExternalAllocation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrganization()).compareTo(other.isSetOrganization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organization, other.organization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceName()).compareTo(other.isSetResourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceName, other.resourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccountDetails()).compareTo(other.isSetAccountDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountDetails, other.accountDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessMech()).compareTo(other.isSetAccessMech());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessMech()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessMech, other.accessMech);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExternalAllocation(");
    boolean first = true;

    if (isSetOrganization()) {
      sb.append("organization:");
      if (this.organization == null) {
        sb.append("null");
      } else {
        sb.append(this.organization);
      }
      first = false;
    }
    if (isSetResourceName()) {
      if (!first) sb.append(", ");
      sb.append("resourceName:");
      if (this.resourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceName);
      }
      first = false;
    }
    if (isSetProjectId()) {
      if (!first) sb.append(", ");
      sb.append("projectId:");
      if (this.projectId == null) {
        sb.append("null");
      } else {
        sb.append(this.projectId);
      }
      first = false;
    }
    if (isSetAccountDetails()) {
      if (!first) sb.append(", ");
      sb.append("accountDetails:");
      if (this.accountDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.accountDetails);
      }
      first = false;
    }
    if (isSetAccessMech()) {
      if (!first) sb.append(", ");
      sb.append("accessMech:");
      if (this.accessMech == null) {
        sb.append("null");
      } else {
        sb.append(this.accessMech);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (accountDetails != null) {
      accountDetails.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExternalAllocationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExternalAllocationStandardScheme getScheme() {
      return new ExternalAllocationStandardScheme();
    }
  }

  private static class ExternalAllocationStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExternalAllocation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExternalAllocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORGANIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organization = iprot.readString();
              struct.setOrganizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceName = iprot.readString();
              struct.setResourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.accountDetails = new UserDetails();
              struct.accountDetails.read(iprot);
              struct.setAccountDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCESS_MECH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.accessMech = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.accessMech.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAccessMechIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExternalAllocation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.organization != null) {
        if (struct.isSetOrganization()) {
          oprot.writeFieldBegin(ORGANIZATION_FIELD_DESC);
          oprot.writeString(struct.organization);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceName != null) {
        if (struct.isSetResourceName()) {
          oprot.writeFieldBegin(RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.resourceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.projectId != null) {
        if (struct.isSetProjectId()) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.projectId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountDetails != null) {
        if (struct.isSetAccountDetails()) {
          oprot.writeFieldBegin(ACCOUNT_DETAILS_FIELD_DESC);
          struct.accountDetails.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accessMech != null) {
        if (struct.isSetAccessMech()) {
          oprot.writeFieldBegin(ACCESS_MECH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.accessMech.size()));
            for (java.lang.String _iter3 : struct.accessMech)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExternalAllocationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExternalAllocationTupleScheme getScheme() {
      return new ExternalAllocationTupleScheme();
    }
  }

  private static class ExternalAllocationTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExternalAllocation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExternalAllocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrganization()) {
        optionals.set(0);
      }
      if (struct.isSetResourceName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetAccountDetails()) {
        optionals.set(3);
      }
      if (struct.isSetAccessMech()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrganization()) {
        oprot.writeString(struct.organization);
      }
      if (struct.isSetResourceName()) {
        oprot.writeString(struct.resourceName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetAccountDetails()) {
        struct.accountDetails.write(oprot);
      }
      if (struct.isSetAccessMech()) {
        {
          oprot.writeI32(struct.accessMech.size());
          for (java.lang.String _iter4 : struct.accessMech)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExternalAllocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.organization = iprot.readString();
        struct.setOrganizationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceName = iprot.readString();
        struct.setResourceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accountDetails = new UserDetails();
        struct.accountDetails.read(iprot);
        struct.setAccountDetailsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.accessMech = new java.util.ArrayList<java.lang.String>(_list5.size);
          java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.accessMech.add(_elem6);
          }
        }
        struct.setAccessMechIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

