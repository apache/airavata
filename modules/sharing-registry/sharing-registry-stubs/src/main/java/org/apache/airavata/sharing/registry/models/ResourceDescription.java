/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.sharing.registry.models;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * <p>Resource discovery module will help allocation manager service to know the list of resource which are open for allocation. This data should to initialized and maintained by Admin.</p>
 * <li>resourceId : Id of the resource</li>
 * <li><b>hostName</b> : Hostname</li>
 * <li>resourceDesc :Brief description of the resource. </li>
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ResourceDescription implements org.apache.thrift.TBase<ResourceDescription, ResourceDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceDescription");

  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceDesc", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceDescriptionTupleSchemeFactory();

  public java.lang.String resourceId; // optional
  public java.lang.String hostName; // optional
  public java.lang.String resourceDesc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOURCE_ID((short)1, "resourceId"),
    HOST_NAME((short)2, "hostName"),
    RESOURCE_DESC((short)3, "resourceDesc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE_ID
          return RESOURCE_ID;
        case 2: // HOST_NAME
          return HOST_NAME;
        case 3: // RESOURCE_DESC
          return RESOURCE_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RESOURCE_ID,_Fields.HOST_NAME,_Fields.RESOURCE_DESC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_DESC, new org.apache.thrift.meta_data.FieldMetaData("resourceDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceDescription.class, metaDataMap);
  }

  public ResourceDescription() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceDescription(ResourceDescription other) {
    if (other.isSetResourceId()) {
      this.resourceId = other.resourceId;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    if (other.isSetResourceDesc()) {
      this.resourceDesc = other.resourceDesc;
    }
  }

  public ResourceDescription deepCopy() {
    return new ResourceDescription(this);
  }

  @Override
  public void clear() {
    this.resourceId = null;
    this.hostName = null;
    this.resourceDesc = null;
  }

  public java.lang.String getResourceId() {
    return this.resourceId;
  }

  public ResourceDescription setResourceId(java.lang.String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  public void unsetResourceId() {
    this.resourceId = null;
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return this.resourceId != null;
  }

  public void setResourceIdIsSet(boolean value) {
    if (!value) {
      this.resourceId = null;
    }
  }

  public java.lang.String getHostName() {
    return this.hostName;
  }

  public ResourceDescription setHostName(java.lang.String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public java.lang.String getResourceDesc() {
    return this.resourceDesc;
  }

  public ResourceDescription setResourceDesc(java.lang.String resourceDesc) {
    this.resourceDesc = resourceDesc;
    return this;
  }

  public void unsetResourceDesc() {
    this.resourceDesc = null;
  }

  /** Returns true if field resourceDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceDesc() {
    return this.resourceDesc != null;
  }

  public void setResourceDescIsSet(boolean value) {
    if (!value) {
      this.resourceDesc = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((java.lang.String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((java.lang.String)value);
      }
      break;

    case RESOURCE_DESC:
      if (value == null) {
        unsetResourceDesc();
      } else {
        setResourceDesc((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE_ID:
      return getResourceId();

    case HOST_NAME:
      return getHostName();

    case RESOURCE_DESC:
      return getResourceDesc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE_ID:
      return isSetResourceId();
    case HOST_NAME:
      return isSetHostName();
    case RESOURCE_DESC:
      return isSetResourceDesc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourceDescription)
      return this.equals((ResourceDescription)that);
    return false;
  }

  public boolean equals(ResourceDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (!this.resourceId.equals(that.resourceId))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_resourceDesc = true && this.isSetResourceDesc();
    boolean that_present_resourceDesc = true && that.isSetResourceDesc();
    if (this_present_resourceDesc || that_present_resourceDesc) {
      if (!(this_present_resourceDesc && that_present_resourceDesc))
        return false;
      if (!this.resourceDesc.equals(that.resourceDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResourceId()) ? 131071 : 524287);
    if (isSetResourceId())
      hashCode = hashCode * 8191 + resourceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
    if (isSetHostName())
      hashCode = hashCode * 8191 + hostName.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceDesc()) ? 131071 : 524287);
    if (isSetResourceDesc())
      hashCode = hashCode * 8191 + resourceDesc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ResourceDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceDesc()).compareTo(other.isSetResourceDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceDesc, other.resourceDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceDescription(");
    boolean first = true;

    if (isSetResourceId()) {
      sb.append("resourceId:");
      if (this.resourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceId);
      }
      first = false;
    }
    if (isSetHostName()) {
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
    }
    if (isSetResourceDesc()) {
      if (!first) sb.append(", ");
      sb.append("resourceDesc:");
      if (this.resourceDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceDesc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResourceDescriptionStandardScheme getScheme() {
      return new ResourceDescriptionStandardScheme();
    }
  }

  private static class ResourceDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceId = iprot.readString();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOURCE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceDesc = iprot.readString();
              struct.setResourceDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resourceId != null) {
        if (struct.isSetResourceId()) {
          oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.resourceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostName != null) {
        if (struct.isSetHostName()) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceDesc != null) {
        if (struct.isSetResourceDesc()) {
          oprot.writeFieldBegin(RESOURCE_DESC_FIELD_DESC);
          oprot.writeString(struct.resourceDesc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResourceDescriptionTupleScheme getScheme() {
      return new ResourceDescriptionTupleScheme();
    }
  }

  private static class ResourceDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResourceId()) {
        optionals.set(0);
      }
      if (struct.isSetHostName()) {
        optionals.set(1);
      }
      if (struct.isSetResourceDesc()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResourceId()) {
        oprot.writeString(struct.resourceId);
      }
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetResourceDesc()) {
        oprot.writeString(struct.resourceDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.resourceId = iprot.readString();
        struct.setResourceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceDesc = iprot.readString();
        struct.setResourceDescIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

