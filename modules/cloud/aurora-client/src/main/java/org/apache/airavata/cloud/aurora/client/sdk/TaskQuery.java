/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.cloud.aurora.client.sdk;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Contains a set of restrictions on matching tasks where all restrictions must be met
 * (terms are AND'ed together).
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-21")
public class TaskQuery implements org.apache.thrift.TBase<TaskQuery, TaskQuery._Fields>, java.io.Serializable, Cloneable, Comparable<TaskQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskQuery");

  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("environment", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField JOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField INSTANCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceIds", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField SLAVE_HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("slaveHosts", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField JOB_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobKeys", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskQueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskQueryTupleSchemeFactory());
  }

  public String role; // required
  public String environment; // required
  public String jobName; // required
  public Set<String> taskIds; // required
  public Set<ScheduleStatus> statuses; // required
  public Set<Integer> instanceIds; // required
  public Set<String> slaveHosts; // required
  public Set<JobKey> jobKeys; // required
  public int offset; // required
  public int limit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROLE((short)14, "role"),
    ENVIRONMENT((short)9, "environment"),
    JOB_NAME((short)2, "jobName"),
    TASK_IDS((short)4, "taskIds"),
    STATUSES((short)5, "statuses"),
    INSTANCE_IDS((short)7, "instanceIds"),
    SLAVE_HOSTS((short)10, "slaveHosts"),
    JOB_KEYS((short)11, "jobKeys"),
    OFFSET((short)12, "offset"),
    LIMIT((short)13, "limit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 14: // ROLE
          return ROLE;
        case 9: // ENVIRONMENT
          return ENVIRONMENT;
        case 2: // JOB_NAME
          return JOB_NAME;
        case 4: // TASK_IDS
          return TASK_IDS;
        case 5: // STATUSES
          return STATUSES;
        case 7: // INSTANCE_IDS
          return INSTANCE_IDS;
        case 10: // SLAVE_HOSTS
          return SLAVE_HOSTS;
        case 11: // JOB_KEYS
          return JOB_KEYS;
        case 12: // OFFSET
          return OFFSET;
        case 13: // LIMIT
          return LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __LIMIT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENVIRONMENT, new org.apache.thrift.meta_data.FieldMetaData("environment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ScheduleStatus.class))));
    tmpMap.put(_Fields.INSTANCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("instanceIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SLAVE_HOSTS, new org.apache.thrift.meta_data.FieldMetaData("slaveHosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.JOB_KEYS, new org.apache.thrift.meta_data.FieldMetaData("jobKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobKey.class))));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskQuery.class, metaDataMap);
  }

  public TaskQuery() {
  }

  public TaskQuery(
    String role,
    String environment,
    String jobName,
    Set<String> taskIds,
    Set<ScheduleStatus> statuses,
    Set<Integer> instanceIds,
    Set<String> slaveHosts,
    Set<JobKey> jobKeys,
    int offset,
    int limit)
  {
    this();
    this.role = role;
    this.environment = environment;
    this.jobName = jobName;
    this.taskIds = taskIds;
    this.statuses = statuses;
    this.instanceIds = instanceIds;
    this.slaveHosts = slaveHosts;
    this.jobKeys = jobKeys;
    this.offset = offset;
    setOffsetIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskQuery(TaskQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRole()) {
      this.role = other.role;
    }
    if (other.isSetEnvironment()) {
      this.environment = other.environment;
    }
    if (other.isSetJobName()) {
      this.jobName = other.jobName;
    }
    if (other.isSetTaskIds()) {
      Set<String> __this__taskIds = new HashSet<String>(other.taskIds);
      this.taskIds = __this__taskIds;
    }
    if (other.isSetStatuses()) {
      Set<ScheduleStatus> __this__statuses = new HashSet<ScheduleStatus>(other.statuses.size());
      for (ScheduleStatus other_element : other.statuses) {
        __this__statuses.add(other_element);
      }
      this.statuses = __this__statuses;
    }
    if (other.isSetInstanceIds()) {
      Set<Integer> __this__instanceIds = new HashSet<Integer>(other.instanceIds);
      this.instanceIds = __this__instanceIds;
    }
    if (other.isSetSlaveHosts()) {
      Set<String> __this__slaveHosts = new HashSet<String>(other.slaveHosts);
      this.slaveHosts = __this__slaveHosts;
    }
    if (other.isSetJobKeys()) {
      Set<JobKey> __this__jobKeys = new HashSet<JobKey>(other.jobKeys.size());
      for (JobKey other_element : other.jobKeys) {
        __this__jobKeys.add(new JobKey(other_element));
      }
      this.jobKeys = __this__jobKeys;
    }
    this.offset = other.offset;
    this.limit = other.limit;
  }

  public TaskQuery deepCopy() {
    return new TaskQuery(this);
  }

  @Override
  public void clear() {
    this.role = null;
    this.environment = null;
    this.jobName = null;
    this.taskIds = null;
    this.statuses = null;
    this.instanceIds = null;
    this.slaveHosts = null;
    this.jobKeys = null;
    setOffsetIsSet(false);
    this.offset = 0;
    setLimitIsSet(false);
    this.limit = 0;
  }

  public String getRole() {
    return this.role;
  }

  public TaskQuery setRole(String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public String getEnvironment() {
    return this.environment;
  }

  public TaskQuery setEnvironment(String environment) {
    this.environment = environment;
    return this;
  }

  public void unsetEnvironment() {
    this.environment = null;
  }

  /** Returns true if field environment is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvironment() {
    return this.environment != null;
  }

  public void setEnvironmentIsSet(boolean value) {
    if (!value) {
      this.environment = null;
    }
  }

  public String getJobName() {
    return this.jobName;
  }

  public TaskQuery setJobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  public void unsetJobName() {
    this.jobName = null;
  }

  /** Returns true if field jobName is set (has been assigned a value) and false otherwise */
  public boolean isSetJobName() {
    return this.jobName != null;
  }

  public void setJobNameIsSet(boolean value) {
    if (!value) {
      this.jobName = null;
    }
  }

  public int getTaskIdsSize() {
    return (this.taskIds == null) ? 0 : this.taskIds.size();
  }

  public java.util.Iterator<String> getTaskIdsIterator() {
    return (this.taskIds == null) ? null : this.taskIds.iterator();
  }

  public void addToTaskIds(String elem) {
    if (this.taskIds == null) {
      this.taskIds = new HashSet<String>();
    }
    this.taskIds.add(elem);
  }

  public Set<String> getTaskIds() {
    return this.taskIds;
  }

  public TaskQuery setTaskIds(Set<String> taskIds) {
    this.taskIds = taskIds;
    return this;
  }

  public void unsetTaskIds() {
    this.taskIds = null;
  }

  /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskIds() {
    return this.taskIds != null;
  }

  public void setTaskIdsIsSet(boolean value) {
    if (!value) {
      this.taskIds = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  public java.util.Iterator<ScheduleStatus> getStatusesIterator() {
    return (this.statuses == null) ? null : this.statuses.iterator();
  }

  public void addToStatuses(ScheduleStatus elem) {
    if (this.statuses == null) {
      this.statuses = new HashSet<ScheduleStatus>();
    }
    this.statuses.add(elem);
  }

  public Set<ScheduleStatus> getStatuses() {
    return this.statuses;
  }

  public TaskQuery setStatuses(Set<ScheduleStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  public int getInstanceIdsSize() {
    return (this.instanceIds == null) ? 0 : this.instanceIds.size();
  }

  public java.util.Iterator<Integer> getInstanceIdsIterator() {
    return (this.instanceIds == null) ? null : this.instanceIds.iterator();
  }

  public void addToInstanceIds(int elem) {
    if (this.instanceIds == null) {
      this.instanceIds = new HashSet<Integer>();
    }
    this.instanceIds.add(elem);
  }

  public Set<Integer> getInstanceIds() {
    return this.instanceIds;
  }

  public TaskQuery setInstanceIds(Set<Integer> instanceIds) {
    this.instanceIds = instanceIds;
    return this;
  }

  public void unsetInstanceIds() {
    this.instanceIds = null;
  }

  /** Returns true if field instanceIds is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceIds() {
    return this.instanceIds != null;
  }

  public void setInstanceIdsIsSet(boolean value) {
    if (!value) {
      this.instanceIds = null;
    }
  }

  public int getSlaveHostsSize() {
    return (this.slaveHosts == null) ? 0 : this.slaveHosts.size();
  }

  public java.util.Iterator<String> getSlaveHostsIterator() {
    return (this.slaveHosts == null) ? null : this.slaveHosts.iterator();
  }

  public void addToSlaveHosts(String elem) {
    if (this.slaveHosts == null) {
      this.slaveHosts = new HashSet<String>();
    }
    this.slaveHosts.add(elem);
  }

  public Set<String> getSlaveHosts() {
    return this.slaveHosts;
  }

  public TaskQuery setSlaveHosts(Set<String> slaveHosts) {
    this.slaveHosts = slaveHosts;
    return this;
  }

  public void unsetSlaveHosts() {
    this.slaveHosts = null;
  }

  /** Returns true if field slaveHosts is set (has been assigned a value) and false otherwise */
  public boolean isSetSlaveHosts() {
    return this.slaveHosts != null;
  }

  public void setSlaveHostsIsSet(boolean value) {
    if (!value) {
      this.slaveHosts = null;
    }
  }

  public int getJobKeysSize() {
    return (this.jobKeys == null) ? 0 : this.jobKeys.size();
  }

  public java.util.Iterator<JobKey> getJobKeysIterator() {
    return (this.jobKeys == null) ? null : this.jobKeys.iterator();
  }

  public void addToJobKeys(JobKey elem) {
    if (this.jobKeys == null) {
      this.jobKeys = new HashSet<JobKey>();
    }
    this.jobKeys.add(elem);
  }

  public Set<JobKey> getJobKeys() {
    return this.jobKeys;
  }

  public TaskQuery setJobKeys(Set<JobKey> jobKeys) {
    this.jobKeys = jobKeys;
    return this;
  }

  public void unsetJobKeys() {
    this.jobKeys = null;
  }

  /** Returns true if field jobKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetJobKeys() {
    return this.jobKeys != null;
  }

  public void setJobKeysIsSet(boolean value) {
    if (!value) {
      this.jobKeys = null;
    }
  }

  public int getOffset() {
    return this.offset;
  }

  public TaskQuery setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public TaskQuery setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((String)value);
      }
      break;

    case ENVIRONMENT:
      if (value == null) {
        unsetEnvironment();
      } else {
        setEnvironment((String)value);
      }
      break;

    case JOB_NAME:
      if (value == null) {
        unsetJobName();
      } else {
        setJobName((String)value);
      }
      break;

    case TASK_IDS:
      if (value == null) {
        unsetTaskIds();
      } else {
        setTaskIds((Set<String>)value);
      }
      break;

    case STATUSES:
      if (value == null) {
        unsetStatuses();
      } else {
        setStatuses((Set<ScheduleStatus>)value);
      }
      break;

    case INSTANCE_IDS:
      if (value == null) {
        unsetInstanceIds();
      } else {
        setInstanceIds((Set<Integer>)value);
      }
      break;

    case SLAVE_HOSTS:
      if (value == null) {
        unsetSlaveHosts();
      } else {
        setSlaveHosts((Set<String>)value);
      }
      break;

    case JOB_KEYS:
      if (value == null) {
        unsetJobKeys();
      } else {
        setJobKeys((Set<JobKey>)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROLE:
      return getRole();

    case ENVIRONMENT:
      return getEnvironment();

    case JOB_NAME:
      return getJobName();

    case TASK_IDS:
      return getTaskIds();

    case STATUSES:
      return getStatuses();

    case INSTANCE_IDS:
      return getInstanceIds();

    case SLAVE_HOSTS:
      return getSlaveHosts();

    case JOB_KEYS:
      return getJobKeys();

    case OFFSET:
      return getOffset();

    case LIMIT:
      return getLimit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROLE:
      return isSetRole();
    case ENVIRONMENT:
      return isSetEnvironment();
    case JOB_NAME:
      return isSetJobName();
    case TASK_IDS:
      return isSetTaskIds();
    case STATUSES:
      return isSetStatuses();
    case INSTANCE_IDS:
      return isSetInstanceIds();
    case SLAVE_HOSTS:
      return isSetSlaveHosts();
    case JOB_KEYS:
      return isSetJobKeys();
    case OFFSET:
      return isSetOffset();
    case LIMIT:
      return isSetLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskQuery)
      return this.equals((TaskQuery)that);
    return false;
  }

  public boolean equals(TaskQuery that) {
    if (that == null)
      return false;

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_environment = true && this.isSetEnvironment();
    boolean that_present_environment = true && that.isSetEnvironment();
    if (this_present_environment || that_present_environment) {
      if (!(this_present_environment && that_present_environment))
        return false;
      if (!this.environment.equals(that.environment))
        return false;
    }

    boolean this_present_jobName = true && this.isSetJobName();
    boolean that_present_jobName = true && that.isSetJobName();
    if (this_present_jobName || that_present_jobName) {
      if (!(this_present_jobName && that_present_jobName))
        return false;
      if (!this.jobName.equals(that.jobName))
        return false;
    }

    boolean this_present_taskIds = true && this.isSetTaskIds();
    boolean that_present_taskIds = true && that.isSetTaskIds();
    if (this_present_taskIds || that_present_taskIds) {
      if (!(this_present_taskIds && that_present_taskIds))
        return false;
      if (!this.taskIds.equals(that.taskIds))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    boolean this_present_instanceIds = true && this.isSetInstanceIds();
    boolean that_present_instanceIds = true && that.isSetInstanceIds();
    if (this_present_instanceIds || that_present_instanceIds) {
      if (!(this_present_instanceIds && that_present_instanceIds))
        return false;
      if (!this.instanceIds.equals(that.instanceIds))
        return false;
    }

    boolean this_present_slaveHosts = true && this.isSetSlaveHosts();
    boolean that_present_slaveHosts = true && that.isSetSlaveHosts();
    if (this_present_slaveHosts || that_present_slaveHosts) {
      if (!(this_present_slaveHosts && that_present_slaveHosts))
        return false;
      if (!this.slaveHosts.equals(that.slaveHosts))
        return false;
    }

    boolean this_present_jobKeys = true && this.isSetJobKeys();
    boolean that_present_jobKeys = true && that.isSetJobKeys();
    if (this_present_jobKeys || that_present_jobKeys) {
      if (!(this_present_jobKeys && that_present_jobKeys))
        return false;
      if (!this.jobKeys.equals(that.jobKeys))
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_role = true && (isSetRole());
    list.add(present_role);
    if (present_role)
      list.add(role);

    boolean present_environment = true && (isSetEnvironment());
    list.add(present_environment);
    if (present_environment)
      list.add(environment);

    boolean present_jobName = true && (isSetJobName());
    list.add(present_jobName);
    if (present_jobName)
      list.add(jobName);

    boolean present_taskIds = true && (isSetTaskIds());
    list.add(present_taskIds);
    if (present_taskIds)
      list.add(taskIds);

    boolean present_statuses = true && (isSetStatuses());
    list.add(present_statuses);
    if (present_statuses)
      list.add(statuses);

    boolean present_instanceIds = true && (isSetInstanceIds());
    list.add(present_instanceIds);
    if (present_instanceIds)
      list.add(instanceIds);

    boolean present_slaveHosts = true && (isSetSlaveHosts());
    list.add(present_slaveHosts);
    if (present_slaveHosts)
      list.add(slaveHosts);

    boolean present_jobKeys = true && (isSetJobKeys());
    list.add(present_jobKeys);
    if (present_jobKeys)
      list.add(jobKeys);

    boolean present_offset = true;
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_limit = true;
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvironment()).compareTo(other.isSetEnvironment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvironment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environment, other.environment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobName()).compareTo(other.isSetJobName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobName, other.jobName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskIds()).compareTo(other.isSetTaskIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIds, other.taskIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceIds()).compareTo(other.isSetInstanceIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceIds, other.instanceIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlaveHosts()).compareTo(other.isSetSlaveHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlaveHosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slaveHosts, other.slaveHosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobKeys()).compareTo(other.isSetJobKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobKeys, other.jobKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskQuery(");
    boolean first = true;

    sb.append("role:");
    if (this.role == null) {
      sb.append("null");
    } else {
      sb.append(this.role);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("environment:");
    if (this.environment == null) {
      sb.append("null");
    } else {
      sb.append(this.environment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobName:");
    if (this.jobName == null) {
      sb.append("null");
    } else {
      sb.append(this.jobName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskIds:");
    if (this.taskIds == null) {
      sb.append("null");
    } else {
      sb.append(this.taskIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statuses:");
    if (this.statuses == null) {
      sb.append("null");
    } else {
      sb.append(this.statuses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instanceIds:");
    if (this.instanceIds == null) {
      sb.append("null");
    } else {
      sb.append(this.instanceIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("slaveHosts:");
    if (this.slaveHosts == null) {
      sb.append("null");
    } else {
      sb.append(this.slaveHosts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobKeys:");
    if (this.jobKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.jobKeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskQueryStandardSchemeFactory implements SchemeFactory {
    public TaskQueryStandardScheme getScheme() {
      return new TaskQueryStandardScheme();
    }
  }

  private static class TaskQueryStandardScheme extends StandardScheme<TaskQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 14: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENVIRONMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.environment = iprot.readString();
              struct.setEnvironmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobName = iprot.readString();
              struct.setJobNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set142 = iprot.readSetBegin();
                struct.taskIds = new HashSet<String>(2*_set142.size);
                String _elem143;
                for (int _i144 = 0; _i144 < _set142.size; ++_i144)
                {
                  _elem143 = iprot.readString();
                  struct.taskIds.add(_elem143);
                }
                iprot.readSetEnd();
              }
              struct.setTaskIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set145 = iprot.readSetBegin();
                struct.statuses = new HashSet<ScheduleStatus>(2*_set145.size);
                ScheduleStatus _elem146;
                for (int _i147 = 0; _i147 < _set145.size; ++_i147)
                {
                  _elem146 = org.apache.airavata.cloud.aurora.client.sdk.ScheduleStatus.findByValue(iprot.readI32());
                  struct.statuses.add(_elem146);
                }
                iprot.readSetEnd();
              }
              struct.setStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INSTANCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set148 = iprot.readSetBegin();
                struct.instanceIds = new HashSet<Integer>(2*_set148.size);
                int _elem149;
                for (int _i150 = 0; _i150 < _set148.size; ++_i150)
                {
                  _elem149 = iprot.readI32();
                  struct.instanceIds.add(_elem149);
                }
                iprot.readSetEnd();
              }
              struct.setInstanceIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SLAVE_HOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set151 = iprot.readSetBegin();
                struct.slaveHosts = new HashSet<String>(2*_set151.size);
                String _elem152;
                for (int _i153 = 0; _i153 < _set151.size; ++_i153)
                {
                  _elem152 = iprot.readString();
                  struct.slaveHosts.add(_elem152);
                }
                iprot.readSetEnd();
              }
              struct.setSlaveHostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JOB_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set154 = iprot.readSetBegin();
                struct.jobKeys = new HashSet<JobKey>(2*_set154.size);
                JobKey _elem155;
                for (int _i156 = 0; _i156 < _set154.size; ++_i156)
                {
                  _elem155 = new JobKey();
                  _elem155.read(iprot);
                  struct.jobKeys.add(_elem155);
                }
                iprot.readSetEnd();
              }
              struct.setJobKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobName != null) {
        oprot.writeFieldBegin(JOB_NAME_FIELD_DESC);
        oprot.writeString(struct.jobName);
        oprot.writeFieldEnd();
      }
      if (struct.taskIds != null) {
        oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.taskIds.size()));
          for (String _iter157 : struct.taskIds)
          {
            oprot.writeString(_iter157);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statuses != null) {
        oprot.writeFieldBegin(STATUSES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
          for (ScheduleStatus _iter158 : struct.statuses)
          {
            oprot.writeI32(_iter158.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.instanceIds != null) {
        oprot.writeFieldBegin(INSTANCE_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.instanceIds.size()));
          for (int _iter159 : struct.instanceIds)
          {
            oprot.writeI32(_iter159);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.environment != null) {
        oprot.writeFieldBegin(ENVIRONMENT_FIELD_DESC);
        oprot.writeString(struct.environment);
        oprot.writeFieldEnd();
      }
      if (struct.slaveHosts != null) {
        oprot.writeFieldBegin(SLAVE_HOSTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.slaveHosts.size()));
          for (String _iter160 : struct.slaveHosts)
          {
            oprot.writeString(_iter160);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jobKeys != null) {
        oprot.writeFieldBegin(JOB_KEYS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.jobKeys.size()));
          for (JobKey _iter161 : struct.jobKeys)
          {
            _iter161.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      if (struct.role != null) {
        oprot.writeFieldBegin(ROLE_FIELD_DESC);
        oprot.writeString(struct.role);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskQueryTupleSchemeFactory implements SchemeFactory {
    public TaskQueryTupleScheme getScheme() {
      return new TaskQueryTupleScheme();
    }
  }

  private static class TaskQueryTupleScheme extends TupleScheme<TaskQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRole()) {
        optionals.set(0);
      }
      if (struct.isSetEnvironment()) {
        optionals.set(1);
      }
      if (struct.isSetJobName()) {
        optionals.set(2);
      }
      if (struct.isSetTaskIds()) {
        optionals.set(3);
      }
      if (struct.isSetStatuses()) {
        optionals.set(4);
      }
      if (struct.isSetInstanceIds()) {
        optionals.set(5);
      }
      if (struct.isSetSlaveHosts()) {
        optionals.set(6);
      }
      if (struct.isSetJobKeys()) {
        optionals.set(7);
      }
      if (struct.isSetOffset()) {
        optionals.set(8);
      }
      if (struct.isSetLimit()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
      if (struct.isSetEnvironment()) {
        oprot.writeString(struct.environment);
      }
      if (struct.isSetJobName()) {
        oprot.writeString(struct.jobName);
      }
      if (struct.isSetTaskIds()) {
        {
          oprot.writeI32(struct.taskIds.size());
          for (String _iter162 : struct.taskIds)
          {
            oprot.writeString(_iter162);
          }
        }
      }
      if (struct.isSetStatuses()) {
        {
          oprot.writeI32(struct.statuses.size());
          for (ScheduleStatus _iter163 : struct.statuses)
          {
            oprot.writeI32(_iter163.getValue());
          }
        }
      }
      if (struct.isSetInstanceIds()) {
        {
          oprot.writeI32(struct.instanceIds.size());
          for (int _iter164 : struct.instanceIds)
          {
            oprot.writeI32(_iter164);
          }
        }
      }
      if (struct.isSetSlaveHosts()) {
        {
          oprot.writeI32(struct.slaveHosts.size());
          for (String _iter165 : struct.slaveHosts)
          {
            oprot.writeString(_iter165);
          }
        }
      }
      if (struct.isSetJobKeys()) {
        {
          oprot.writeI32(struct.jobKeys.size());
          for (JobKey _iter166 : struct.jobKeys)
          {
            _iter166.write(oprot);
          }
        }
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.environment = iprot.readString();
        struct.setEnvironmentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jobName = iprot.readString();
        struct.setJobNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set167 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.taskIds = new HashSet<String>(2*_set167.size);
          String _elem168;
          for (int _i169 = 0; _i169 < _set167.size; ++_i169)
          {
            _elem168 = iprot.readString();
            struct.taskIds.add(_elem168);
          }
        }
        struct.setTaskIdsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set170 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statuses = new HashSet<ScheduleStatus>(2*_set170.size);
          ScheduleStatus _elem171;
          for (int _i172 = 0; _i172 < _set170.size; ++_i172)
          {
            _elem171 = org.apache.airavata.cloud.aurora.client.sdk.ScheduleStatus.findByValue(iprot.readI32());
            struct.statuses.add(_elem171);
          }
        }
        struct.setStatusesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set173 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.instanceIds = new HashSet<Integer>(2*_set173.size);
          int _elem174;
          for (int _i175 = 0; _i175 < _set173.size; ++_i175)
          {
            _elem174 = iprot.readI32();
            struct.instanceIds.add(_elem174);
          }
        }
        struct.setInstanceIdsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set176 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.slaveHosts = new HashSet<String>(2*_set176.size);
          String _elem177;
          for (int _i178 = 0; _i178 < _set176.size; ++_i178)
          {
            _elem177 = iprot.readString();
            struct.slaveHosts.add(_elem177);
          }
        }
        struct.setSlaveHostsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set179 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobKeys = new HashSet<JobKey>(2*_set179.size);
          JobKey _elem180;
          for (int _i181 = 0; _i181 < _set179.size; ++_i181)
          {
            _elem180 = new JobKey();
            _elem180.read(iprot);
            struct.jobKeys.add(_elem180);
          }
        }
        struct.setJobKeysIsSet(true);
      }
      if (incoming.get(8)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(9)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
    }
  }

}

