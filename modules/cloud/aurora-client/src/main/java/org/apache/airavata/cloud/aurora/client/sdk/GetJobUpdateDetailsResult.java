/**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.cloud.aurora.client.sdk;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Result of the getJobUpdateDetails call.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-21")
public class GetJobUpdateDetailsResult implements org.apache.thrift.TBase<GetJobUpdateDetailsResult, GetJobUpdateDetailsResult._Fields>, java.io.Serializable, Cloneable, Comparable<GetJobUpdateDetailsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetJobUpdateDetailsResult");

  private static final org.apache.thrift.protocol.TField DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("details", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DETAILS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("detailsList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetJobUpdateDetailsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetJobUpdateDetailsResultTupleSchemeFactory());
  }

  public JobUpdateDetails details; // required
  public List<JobUpdateDetails> detailsList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DETAILS((short)1, "details"),
    DETAILS_LIST((short)2, "detailsList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DETAILS
          return DETAILS;
        case 2: // DETAILS_LIST
          return DETAILS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DETAILS, new org.apache.thrift.meta_data.FieldMetaData("details", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobUpdateDetails.class)));
    tmpMap.put(_Fields.DETAILS_LIST, new org.apache.thrift.meta_data.FieldMetaData("detailsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobUpdateDetails.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetJobUpdateDetailsResult.class, metaDataMap);
  }

  public GetJobUpdateDetailsResult() {
  }

  public GetJobUpdateDetailsResult(
    JobUpdateDetails details,
    List<JobUpdateDetails> detailsList)
  {
    this();
    this.details = details;
    this.detailsList = detailsList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetJobUpdateDetailsResult(GetJobUpdateDetailsResult other) {
    if (other.isSetDetails()) {
      this.details = new JobUpdateDetails(other.details);
    }
    if (other.isSetDetailsList()) {
      List<JobUpdateDetails> __this__detailsList = new ArrayList<JobUpdateDetails>(other.detailsList.size());
      for (JobUpdateDetails other_element : other.detailsList) {
        __this__detailsList.add(new JobUpdateDetails(other_element));
      }
      this.detailsList = __this__detailsList;
    }
  }

  public GetJobUpdateDetailsResult deepCopy() {
    return new GetJobUpdateDetailsResult(this);
  }

  @Override
  public void clear() {
    this.details = null;
    this.detailsList = null;
  }

  public JobUpdateDetails getDetails() {
    return this.details;
  }

  public GetJobUpdateDetailsResult setDetails(JobUpdateDetails details) {
    this.details = details;
    return this;
  }

  public void unsetDetails() {
    this.details = null;
  }

  /** Returns true if field details is set (has been assigned a value) and false otherwise */
  public boolean isSetDetails() {
    return this.details != null;
  }

  public void setDetailsIsSet(boolean value) {
    if (!value) {
      this.details = null;
    }
  }

  public int getDetailsListSize() {
    return (this.detailsList == null) ? 0 : this.detailsList.size();
  }

  public java.util.Iterator<JobUpdateDetails> getDetailsListIterator() {
    return (this.detailsList == null) ? null : this.detailsList.iterator();
  }

  public void addToDetailsList(JobUpdateDetails elem) {
    if (this.detailsList == null) {
      this.detailsList = new ArrayList<JobUpdateDetails>();
    }
    this.detailsList.add(elem);
  }

  public List<JobUpdateDetails> getDetailsList() {
    return this.detailsList;
  }

  public GetJobUpdateDetailsResult setDetailsList(List<JobUpdateDetails> detailsList) {
    this.detailsList = detailsList;
    return this;
  }

  public void unsetDetailsList() {
    this.detailsList = null;
  }

  /** Returns true if field detailsList is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailsList() {
    return this.detailsList != null;
  }

  public void setDetailsListIsSet(boolean value) {
    if (!value) {
      this.detailsList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DETAILS:
      if (value == null) {
        unsetDetails();
      } else {
        setDetails((JobUpdateDetails)value);
      }
      break;

    case DETAILS_LIST:
      if (value == null) {
        unsetDetailsList();
      } else {
        setDetailsList((List<JobUpdateDetails>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DETAILS:
      return getDetails();

    case DETAILS_LIST:
      return getDetailsList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DETAILS:
      return isSetDetails();
    case DETAILS_LIST:
      return isSetDetailsList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetJobUpdateDetailsResult)
      return this.equals((GetJobUpdateDetailsResult)that);
    return false;
  }

  public boolean equals(GetJobUpdateDetailsResult that) {
    if (that == null)
      return false;

    boolean this_present_details = true && this.isSetDetails();
    boolean that_present_details = true && that.isSetDetails();
    if (this_present_details || that_present_details) {
      if (!(this_present_details && that_present_details))
        return false;
      if (!this.details.equals(that.details))
        return false;
    }

    boolean this_present_detailsList = true && this.isSetDetailsList();
    boolean that_present_detailsList = true && that.isSetDetailsList();
    if (this_present_detailsList || that_present_detailsList) {
      if (!(this_present_detailsList && that_present_detailsList))
        return false;
      if (!this.detailsList.equals(that.detailsList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_details = true && (isSetDetails());
    list.add(present_details);
    if (present_details)
      list.add(details);

    boolean present_detailsList = true && (isSetDetailsList());
    list.add(present_detailsList);
    if (present_detailsList)
      list.add(detailsList);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetJobUpdateDetailsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDetails()).compareTo(other.isSetDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.details, other.details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailsList()).compareTo(other.isSetDetailsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailsList, other.detailsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetJobUpdateDetailsResult(");
    boolean first = true;

    sb.append("details:");
    if (this.details == null) {
      sb.append("null");
    } else {
      sb.append(this.details);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailsList:");
    if (this.detailsList == null) {
      sb.append("null");
    } else {
      sb.append(this.detailsList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (details != null) {
      details.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetJobUpdateDetailsResultStandardSchemeFactory implements SchemeFactory {
    public GetJobUpdateDetailsResultStandardScheme getScheme() {
      return new GetJobUpdateDetailsResultStandardScheme();
    }
  }

  private static class GetJobUpdateDetailsResultStandardScheme extends StandardScheme<GetJobUpdateDetailsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetJobUpdateDetailsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.details = new JobUpdateDetails();
              struct.details.read(iprot);
              struct.setDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DETAILS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list334 = iprot.readListBegin();
                struct.detailsList = new ArrayList<JobUpdateDetails>(_list334.size);
                JobUpdateDetails _elem335;
                for (int _i336 = 0; _i336 < _list334.size; ++_i336)
                {
                  _elem335 = new JobUpdateDetails();
                  _elem335.read(iprot);
                  struct.detailsList.add(_elem335);
                }
                iprot.readListEnd();
              }
              struct.setDetailsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetJobUpdateDetailsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.details != null) {
        oprot.writeFieldBegin(DETAILS_FIELD_DESC);
        struct.details.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.detailsList != null) {
        oprot.writeFieldBegin(DETAILS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detailsList.size()));
          for (JobUpdateDetails _iter337 : struct.detailsList)
          {
            _iter337.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetJobUpdateDetailsResultTupleSchemeFactory implements SchemeFactory {
    public GetJobUpdateDetailsResultTupleScheme getScheme() {
      return new GetJobUpdateDetailsResultTupleScheme();
    }
  }

  private static class GetJobUpdateDetailsResultTupleScheme extends TupleScheme<GetJobUpdateDetailsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetJobUpdateDetailsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDetails()) {
        optionals.set(0);
      }
      if (struct.isSetDetailsList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDetails()) {
        struct.details.write(oprot);
      }
      if (struct.isSetDetailsList()) {
        {
          oprot.writeI32(struct.detailsList.size());
          for (JobUpdateDetails _iter338 : struct.detailsList)
          {
            _iter338.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetJobUpdateDetailsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.details = new JobUpdateDetails();
        struct.details.read(iprot);
        struct.setDetailsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list339 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.detailsList = new ArrayList<JobUpdateDetails>(_list339.size);
          JobUpdateDetails _elem340;
          for (int _i341 = 0; _i341 < _list339.size; ++_i341)
          {
            _elem340 = new JobUpdateDetails();
            _elem340.read(iprot);
            struct.detailsList.add(_elem340);
          }
        }
        struct.setDetailsListIsSet(true);
      }
    }
  }

}

