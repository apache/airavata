syntax = "proto3";

package org.apache.airavata.agent;

option java_multiple_files = true;
option java_package = "org.apache.airavata.agent";
option java_outer_classname = "AgentCommunicationProto";
option go_package = "protos/";

service AgentCommunicationService {
  rpc createMessageBus(stream AgentMessage) returns (stream ServerMessage);
}

// agent pinging the server
message AgentPing {
  string agentId = 1;
}

// server requesting the agent to shutdown
message ShutdownRequest {
  string agentId = 1;
}

// server requesting the agent to create a new agent subprocess
message CreateAgentRequest {
  string executionId = 1;
  string agentId = 2;
  string containerId = 3;
  string workingDir = 4;
  repeated string mounts = 5;
}
message CreateAgentResponse {
  string executionId = 1;
  string agentId = 2;
  string status = 3;
}

// server requesting the agent to terminate an agent subprocess
message TerminateAgentRequest {
  string executionId = 1;
  string agentId = 2;
}
message TerminateAgentResponse {
  string executionId = 1;
  string agentId = 2;
  string status = 3;
}

// server requesting the agent to setup an environment
message EnvSetupRequest {
  string executionId = 1;
  string envName = 2;
  repeated string libraries = 3;
  repeated string pip = 4;
}
message EnvSetupResponse {
  string executionId = 1;
  string status = 2;
}

// server requesting the agent to execute a shell command in the environment
message CommandExecutionRequest {
  string executionId = 1;
  string envName = 2;
  string workingDir = 3;
  repeated string arguments = 4;
}
message CommandExecutionResponse {
  string executionId = 1;
  string responseString = 2;
}

// server requesting the agent to execute a python script in the environment
message PythonExecutionRequest {
  string executionId = 1;
  string envName = 2;
  string workingDir = 3;
  string code = 4;
}
message PythonExecutionResponse {
  string executionId = 1;
  string responseString = 2;
}

// server requesting the agent to execute a jupyter notebook cell in the environment
message JupyterExecutionRequest {
  string executionId = 1;
  string envName = 2;
  string code = 3;
}
message JupyterExecutionResponse {
  string executionId = 1;
  string responseString = 2;
}

// server requesting the agent to restart a jupyter kernel
message KernelRestartRequest {
  string executionId = 1;
  string envName = 2;
}
message KernelRestartResponse {
  string executionId = 1;
  string status = 2;
}

// server requesting the agent to create a ssh tunnel
message TunnelCreationRequest {
  string executionId = 1;
  string destinationHost = 2;
  string destinationPort = 3;
  string sshUserName = 4;
  string sourcePort = 5;
  string sshKeyPath = 6;
  string password = 7;
}
message TunnelCreationResponse {
  string executionId = 1;
  string status = 2;
}

// server requesting the agent to terminate a ssh tunnel
message TunnelTerminationRequest {
  string destinationHost = 1;
  int32 destinationPort = 2;
  string sourcePort = 3;
}
message TunnelTerminationResponse {
  string executionId = 1;
  string status = 2;
}

message AgentMessage {
  oneof message {
    AgentPing agentPing = 1;
    CreateAgentResponse createAgentResponse = 2;
    TerminateAgentResponse terminateAgentResponse = 3;
    EnvSetupResponse envSetupResponse = 4;
    CommandExecutionResponse commandExecutionResponse = 5;
    PythonExecutionResponse pythonExecutionResponse = 6;
    JupyterExecutionResponse jupyterExecutionResponse = 7;
    KernelRestartResponse kernelRestartResponse = 8;
    TunnelCreationResponse tunnelCreationResponse = 9;
    TunnelTerminationResponse tunnelTerminationResponse = 10;
  }
}

message ServerMessage {
  oneof message {
    ShutdownRequest shutdownRequest = 1;
    CreateAgentRequest createAgentRequest = 2;
    TerminateAgentRequest terminateAgentRequest = 3;
    EnvSetupRequest envSetupRequest = 4;
    CommandExecutionRequest commandExecutionRequest = 5;
    PythonExecutionRequest pythonExecutionRequest = 6;
    JupyterExecutionRequest jupyterExecutionRequest = 7;
    KernelRestartRequest kernelRestartRequest = 8;
    TunnelCreationRequest tunnelCreationRequest = 9;
    TunnelTerminationRequest tunnelTerminationRequest = 10;
  }
}