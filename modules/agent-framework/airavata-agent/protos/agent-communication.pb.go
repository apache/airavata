// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: agent-communication.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AgentPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string `protobuf:"bytes,1,opt,name=agentId,proto3" json:"agentId,omitempty"`
}

func (x *AgentPing) Reset() {
	*x = AgentPing{}
	mi := &file_agent_communication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPing) ProtoMessage() {}

func (x *AgentPing) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPing.ProtoReflect.Descriptor instead.
func (*AgentPing) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{0}
}

func (x *AgentPing) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type CommandExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId    string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ResponseString string `protobuf:"bytes,2,opt,name=responseString,proto3" json:"responseString,omitempty"`
}

func (x *CommandExecutionResponse) Reset() {
	*x = CommandExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandExecutionResponse) ProtoMessage() {}

func (x *CommandExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandExecutionResponse.ProtoReflect.Descriptor instead.
func (*CommandExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{1}
}

func (x *CommandExecutionResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CommandExecutionResponse) GetResponseString() string {
	if x != nil {
		return x.ResponseString
	}
	return ""
}

type ContainerExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId    string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ResponseString string `protobuf:"bytes,2,opt,name=responseString,proto3" json:"responseString,omitempty"`
}

func (x *ContainerExecutionResponse) Reset() {
	*x = ContainerExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecutionResponse) ProtoMessage() {}

func (x *ContainerExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecutionResponse.ProtoReflect.Descriptor instead.
func (*ContainerExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerExecutionResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ContainerExecutionResponse) GetResponseString() string {
	if x != nil {
		return x.ResponseString
	}
	return ""
}

type JupyterExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId    string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	SessionId      string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	ResponseString string `protobuf:"bytes,3,opt,name=responseString,proto3" json:"responseString,omitempty"`
}

func (x *JupyterExecutionResponse) Reset() {
	*x = JupyterExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JupyterExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JupyterExecutionResponse) ProtoMessage() {}

func (x *JupyterExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JupyterExecutionResponse.ProtoReflect.Descriptor instead.
func (*JupyterExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{3}
}

func (x *JupyterExecutionResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *JupyterExecutionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JupyterExecutionResponse) GetResponseString() string {
	if x != nil {
		return x.ResponseString
	}
	return ""
}

type TerminateExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *TerminateExecutionResponse) Reset() {
	*x = TerminateExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateExecutionResponse) ProtoMessage() {}

func (x *TerminateExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateExecutionResponse.ProtoReflect.Descriptor instead.
func (*TerminateExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{4}
}

func (x *TerminateExecutionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TerminateExecutionResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type TunnelCreationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TunnelCreationResponse) Reset() {
	*x = TunnelCreationResponse{}
	mi := &file_agent_communication_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelCreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelCreationResponse) ProtoMessage() {}

func (x *TunnelCreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelCreationResponse.ProtoReflect.Descriptor instead.
func (*TunnelCreationResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{5}
}

func (x *TunnelCreationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TunnelTerminationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TunnelTerminationResponse) Reset() {
	*x = TunnelTerminationResponse{}
	mi := &file_agent_communication_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelTerminationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelTerminationResponse) ProtoMessage() {}

func (x *TunnelTerminationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelTerminationResponse.ProtoReflect.Descriptor instead.
func (*TunnelTerminationResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{6}
}

func (x *TunnelTerminationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AgentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*AgentMessage_AgentPing
	//	*AgentMessage_CommandExecutionResponse
	//	*AgentMessage_ContainerExecutionResponse
	//	*AgentMessage_TerminateExecutionResponse
	//	*AgentMessage_JupyterExecutionResponse
	//	*AgentMessage_StatFsReq
	//	*AgentMessage_FileInfoReq
	//	*AgentMessage_OpenDirReq
	//	*AgentMessage_OpenFileReq
	//	*AgentMessage_ReadDirReq
	//	*AgentMessage_ReadFileReq
	//	*AgentMessage_WriteFileReq
	//	*AgentMessage_SetInodeAttReq
	Message isAgentMessage_Message `protobuf_oneof:"message"`
}

func (x *AgentMessage) Reset() {
	*x = AgentMessage{}
	mi := &file_agent_communication_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMessage) ProtoMessage() {}

func (x *AgentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMessage.ProtoReflect.Descriptor instead.
func (*AgentMessage) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{7}
}

func (m *AgentMessage) GetMessage() isAgentMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *AgentMessage) GetAgentPing() *AgentPing {
	if x, ok := x.GetMessage().(*AgentMessage_AgentPing); ok {
		return x.AgentPing
	}
	return nil
}

func (x *AgentMessage) GetCommandExecutionResponse() *CommandExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_CommandExecutionResponse); ok {
		return x.CommandExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetContainerExecutionResponse() *ContainerExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_ContainerExecutionResponse); ok {
		return x.ContainerExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetTerminateExecutionResponse() *TerminateExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_TerminateExecutionResponse); ok {
		return x.TerminateExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetJupyterExecutionResponse() *JupyterExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_JupyterExecutionResponse); ok {
		return x.JupyterExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetStatFsReq() *StatFsReq {
	if x, ok := x.GetMessage().(*AgentMessage_StatFsReq); ok {
		return x.StatFsReq
	}
	return nil
}

func (x *AgentMessage) GetFileInfoReq() *FileInfoReq {
	if x, ok := x.GetMessage().(*AgentMessage_FileInfoReq); ok {
		return x.FileInfoReq
	}
	return nil
}

func (x *AgentMessage) GetOpenDirReq() *OpenDirReq {
	if x, ok := x.GetMessage().(*AgentMessage_OpenDirReq); ok {
		return x.OpenDirReq
	}
	return nil
}

func (x *AgentMessage) GetOpenFileReq() *OpenFileReq {
	if x, ok := x.GetMessage().(*AgentMessage_OpenFileReq); ok {
		return x.OpenFileReq
	}
	return nil
}

func (x *AgentMessage) GetReadDirReq() *ReadDirReq {
	if x, ok := x.GetMessage().(*AgentMessage_ReadDirReq); ok {
		return x.ReadDirReq
	}
	return nil
}

func (x *AgentMessage) GetReadFileReq() *ReadFileReq {
	if x, ok := x.GetMessage().(*AgentMessage_ReadFileReq); ok {
		return x.ReadFileReq
	}
	return nil
}

func (x *AgentMessage) GetWriteFileReq() *WriteFileReq {
	if x, ok := x.GetMessage().(*AgentMessage_WriteFileReq); ok {
		return x.WriteFileReq
	}
	return nil
}

func (x *AgentMessage) GetSetInodeAttReq() *SetInodeAttReq {
	if x, ok := x.GetMessage().(*AgentMessage_SetInodeAttReq); ok {
		return x.SetInodeAttReq
	}
	return nil
}

type isAgentMessage_Message interface {
	isAgentMessage_Message()
}

type AgentMessage_AgentPing struct {
	AgentPing *AgentPing `protobuf:"bytes,1,opt,name=agentPing,proto3,oneof"`
}

type AgentMessage_CommandExecutionResponse struct {
	CommandExecutionResponse *CommandExecutionResponse `protobuf:"bytes,2,opt,name=commandExecutionResponse,proto3,oneof"`
}

type AgentMessage_ContainerExecutionResponse struct {
	ContainerExecutionResponse *ContainerExecutionResponse `protobuf:"bytes,3,opt,name=containerExecutionResponse,proto3,oneof"`
}

type AgentMessage_TerminateExecutionResponse struct {
	TerminateExecutionResponse *TerminateExecutionResponse `protobuf:"bytes,4,opt,name=terminateExecutionResponse,proto3,oneof"`
}

type AgentMessage_JupyterExecutionResponse struct {
	JupyterExecutionResponse *JupyterExecutionResponse `protobuf:"bytes,5,opt,name=jupyterExecutionResponse,proto3,oneof"`
}

type AgentMessage_StatFsReq struct {
	StatFsReq *StatFsReq `protobuf:"bytes,6,opt,name=statFsReq,proto3,oneof"`
}

type AgentMessage_FileInfoReq struct {
	FileInfoReq *FileInfoReq `protobuf:"bytes,7,opt,name=fileInfoReq,proto3,oneof"`
}

type AgentMessage_OpenDirReq struct {
	OpenDirReq *OpenDirReq `protobuf:"bytes,8,opt,name=openDirReq,proto3,oneof"`
}

type AgentMessage_OpenFileReq struct {
	OpenFileReq *OpenFileReq `protobuf:"bytes,9,opt,name=openFileReq,proto3,oneof"`
}

type AgentMessage_ReadDirReq struct {
	ReadDirReq *ReadDirReq `protobuf:"bytes,10,opt,name=readDirReq,proto3,oneof"`
}

type AgentMessage_ReadFileReq struct {
	ReadFileReq *ReadFileReq `protobuf:"bytes,11,opt,name=readFileReq,proto3,oneof"`
}

type AgentMessage_WriteFileReq struct {
	WriteFileReq *WriteFileReq `protobuf:"bytes,12,opt,name=writeFileReq,proto3,oneof"`
}

type AgentMessage_SetInodeAttReq struct {
	SetInodeAttReq *SetInodeAttReq `protobuf:"bytes,13,opt,name=setInodeAttReq,proto3,oneof"`
}

func (*AgentMessage_AgentPing) isAgentMessage_Message() {}

func (*AgentMessage_CommandExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_ContainerExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_TerminateExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_JupyterExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_StatFsReq) isAgentMessage_Message() {}

func (*AgentMessage_FileInfoReq) isAgentMessage_Message() {}

func (*AgentMessage_OpenDirReq) isAgentMessage_Message() {}

func (*AgentMessage_OpenFileReq) isAgentMessage_Message() {}

func (*AgentMessage_ReadDirReq) isAgentMessage_Message() {}

func (*AgentMessage_ReadFileReq) isAgentMessage_Message() {}

func (*AgentMessage_WriteFileReq) isAgentMessage_Message() {}

func (*AgentMessage_SetInodeAttReq) isAgentMessage_Message() {}

type ContainerExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId   string   `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ContainerName string   `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty"`
	Arguments     []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	MountPath     string   `protobuf:"bytes,4,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
}

func (x *ContainerExecutionRequest) Reset() {
	*x = ContainerExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecutionRequest) ProtoMessage() {}

func (x *ContainerExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecutionRequest.ProtoReflect.Descriptor instead.
func (*ContainerExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{8}
}

func (x *ContainerExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ContainerExecutionRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerExecutionRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ContainerExecutionRequest) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

type TunnelCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationHost string `protobuf:"bytes,1,opt,name=destinationHost,proto3" json:"destinationHost,omitempty"`
	DestinationPort string `protobuf:"bytes,2,opt,name=destinationPort,proto3" json:"destinationPort,omitempty"`
	SshUserName     string `protobuf:"bytes,3,opt,name=sshUserName,proto3" json:"sshUserName,omitempty"`
	SourcePort      string `protobuf:"bytes,4,opt,name=sourcePort,proto3" json:"sourcePort,omitempty"`
	SshKeyPath      string `protobuf:"bytes,5,opt,name=sshKeyPath,proto3" json:"sshKeyPath,omitempty"`
	Password        string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *TunnelCreationRequest) Reset() {
	*x = TunnelCreationRequest{}
	mi := &file_agent_communication_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelCreationRequest) ProtoMessage() {}

func (x *TunnelCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelCreationRequest.ProtoReflect.Descriptor instead.
func (*TunnelCreationRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{9}
}

func (x *TunnelCreationRequest) GetDestinationHost() string {
	if x != nil {
		return x.DestinationHost
	}
	return ""
}

func (x *TunnelCreationRequest) GetDestinationPort() string {
	if x != nil {
		return x.DestinationPort
	}
	return ""
}

func (x *TunnelCreationRequest) GetSshUserName() string {
	if x != nil {
		return x.SshUserName
	}
	return ""
}

func (x *TunnelCreationRequest) GetSourcePort() string {
	if x != nil {
		return x.SourcePort
	}
	return ""
}

func (x *TunnelCreationRequest) GetSshKeyPath() string {
	if x != nil {
		return x.SshKeyPath
	}
	return ""
}

func (x *TunnelCreationRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type TunnelTerminationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationHost string `protobuf:"bytes,1,opt,name=destinationHost,proto3" json:"destinationHost,omitempty"`
	DestinationPort int32  `protobuf:"varint,2,opt,name=destinationPort,proto3" json:"destinationPort,omitempty"`
	SourcePort      string `protobuf:"bytes,3,opt,name=sourcePort,proto3" json:"sourcePort,omitempty"`
}

func (x *TunnelTerminationRequest) Reset() {
	*x = TunnelTerminationRequest{}
	mi := &file_agent_communication_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelTerminationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelTerminationRequest) ProtoMessage() {}

func (x *TunnelTerminationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelTerminationRequest.ProtoReflect.Descriptor instead.
func (*TunnelTerminationRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{10}
}

func (x *TunnelTerminationRequest) GetDestinationHost() string {
	if x != nil {
		return x.DestinationHost
	}
	return ""
}

func (x *TunnelTerminationRequest) GetDestinationPort() int32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *TunnelTerminationRequest) GetSourcePort() string {
	if x != nil {
		return x.SourcePort
	}
	return ""
}

type CommandExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string   `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Arguments   []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	WorkingDir  string   `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
}

func (x *CommandExecutionRequest) Reset() {
	*x = CommandExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandExecutionRequest) ProtoMessage() {}

func (x *CommandExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandExecutionRequest.ProtoReflect.Descriptor instead.
func (*CommandExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{11}
}

func (x *CommandExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CommandExecutionRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *CommandExecutionRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type JupyterExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	SessionId   string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	KeepAlive   bool   `protobuf:"varint,3,opt,name=keepAlive,proto3" json:"keepAlive,omitempty"`
	Code        string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *JupyterExecutionRequest) Reset() {
	*x = JupyterExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JupyterExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JupyterExecutionRequest) ProtoMessage() {}

func (x *JupyterExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JupyterExecutionRequest.ProtoReflect.Descriptor instead.
func (*JupyterExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{12}
}

func (x *JupyterExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *JupyterExecutionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JupyterExecutionRequest) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

func (x *JupyterExecutionRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type TerminateExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
}

func (x *TerminateExecutionRequest) Reset() {
	*x = TerminateExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateExecutionRequest) ProtoMessage() {}

func (x *TerminateExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateExecutionRequest.ProtoReflect.Descriptor instead.
func (*TerminateExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{13}
}

func (x *TerminateExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type KillAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *KillAgentRequest) Reset() {
	*x = KillAgentRequest{}
	mi := &file_agent_communication_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillAgentRequest) ProtoMessage() {}

func (x *KillAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillAgentRequest.ProtoReflect.Descriptor instead.
func (*KillAgentRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{14}
}

func (x *KillAgentRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ServerMessage_ContainerExecutionRequest
	//	*ServerMessage_CommandExecutionRequest
	//	*ServerMessage_TerminateExecutionRequest
	//	*ServerMessage_KillAgentRequest
	//	*ServerMessage_TunnelCreationRequest
	//	*ServerMessage_JupyterExecutionRequest
	//	*ServerMessage_StatFsRes
	//	*ServerMessage_FileInfoRes
	//	*ServerMessage_OpenDirRes
	//	*ServerMessage_OpenFileRes
	//	*ServerMessage_ReadDirRes
	//	*ServerMessage_ReadFileRes
	//	*ServerMessage_WriteFileRes
	//	*ServerMessage_SetInodeAttRes
	Message isServerMessage_Message `protobuf_oneof:"message"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	mi := &file_agent_communication_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{15}
}

func (m *ServerMessage) GetMessage() isServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerMessage) GetContainerExecutionRequest() *ContainerExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_ContainerExecutionRequest); ok {
		return x.ContainerExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetCommandExecutionRequest() *CommandExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_CommandExecutionRequest); ok {
		return x.CommandExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetTerminateExecutionRequest() *TerminateExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_TerminateExecutionRequest); ok {
		return x.TerminateExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetKillAgentRequest() *KillAgentRequest {
	if x, ok := x.GetMessage().(*ServerMessage_KillAgentRequest); ok {
		return x.KillAgentRequest
	}
	return nil
}

func (x *ServerMessage) GetTunnelCreationRequest() *TunnelCreationRequest {
	if x, ok := x.GetMessage().(*ServerMessage_TunnelCreationRequest); ok {
		return x.TunnelCreationRequest
	}
	return nil
}

func (x *ServerMessage) GetJupyterExecutionRequest() *JupyterExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_JupyterExecutionRequest); ok {
		return x.JupyterExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetStatFsRes() *StatFsRes {
	if x, ok := x.GetMessage().(*ServerMessage_StatFsRes); ok {
		return x.StatFsRes
	}
	return nil
}

func (x *ServerMessage) GetFileInfoRes() *FileInfoRes {
	if x, ok := x.GetMessage().(*ServerMessage_FileInfoRes); ok {
		return x.FileInfoRes
	}
	return nil
}

func (x *ServerMessage) GetOpenDirRes() *OpenDirRes {
	if x, ok := x.GetMessage().(*ServerMessage_OpenDirRes); ok {
		return x.OpenDirRes
	}
	return nil
}

func (x *ServerMessage) GetOpenFileRes() *OpenFileRes {
	if x, ok := x.GetMessage().(*ServerMessage_OpenFileRes); ok {
		return x.OpenFileRes
	}
	return nil
}

func (x *ServerMessage) GetReadDirRes() *ReadDirRes {
	if x, ok := x.GetMessage().(*ServerMessage_ReadDirRes); ok {
		return x.ReadDirRes
	}
	return nil
}

func (x *ServerMessage) GetReadFileRes() *ReadFileRes {
	if x, ok := x.GetMessage().(*ServerMessage_ReadFileRes); ok {
		return x.ReadFileRes
	}
	return nil
}

func (x *ServerMessage) GetWriteFileRes() *WriteFileRes {
	if x, ok := x.GetMessage().(*ServerMessage_WriteFileRes); ok {
		return x.WriteFileRes
	}
	return nil
}

func (x *ServerMessage) GetSetInodeAttRes() *SetInodeAttRes {
	if x, ok := x.GetMessage().(*ServerMessage_SetInodeAttRes); ok {
		return x.SetInodeAttRes
	}
	return nil
}

type isServerMessage_Message interface {
	isServerMessage_Message()
}

type ServerMessage_ContainerExecutionRequest struct {
	ContainerExecutionRequest *ContainerExecutionRequest `protobuf:"bytes,1,opt,name=containerExecutionRequest,proto3,oneof"`
}

type ServerMessage_CommandExecutionRequest struct {
	CommandExecutionRequest *CommandExecutionRequest `protobuf:"bytes,2,opt,name=commandExecutionRequest,proto3,oneof"`
}

type ServerMessage_TerminateExecutionRequest struct {
	TerminateExecutionRequest *TerminateExecutionRequest `protobuf:"bytes,3,opt,name=terminateExecutionRequest,proto3,oneof"`
}

type ServerMessage_KillAgentRequest struct {
	KillAgentRequest *KillAgentRequest `protobuf:"bytes,4,opt,name=killAgentRequest,proto3,oneof"`
}

type ServerMessage_TunnelCreationRequest struct {
	TunnelCreationRequest *TunnelCreationRequest `protobuf:"bytes,5,opt,name=tunnelCreationRequest,proto3,oneof"`
}

type ServerMessage_JupyterExecutionRequest struct {
	JupyterExecutionRequest *JupyterExecutionRequest `protobuf:"bytes,6,opt,name=jupyterExecutionRequest,proto3,oneof"`
}

type ServerMessage_StatFsRes struct {
	StatFsRes *StatFsRes `protobuf:"bytes,7,opt,name=statFsRes,proto3,oneof"`
}

type ServerMessage_FileInfoRes struct {
	FileInfoRes *FileInfoRes `protobuf:"bytes,8,opt,name=fileInfoRes,proto3,oneof"`
}

type ServerMessage_OpenDirRes struct {
	OpenDirRes *OpenDirRes `protobuf:"bytes,9,opt,name=openDirRes,proto3,oneof"`
}

type ServerMessage_OpenFileRes struct {
	OpenFileRes *OpenFileRes `protobuf:"bytes,10,opt,name=openFileRes,proto3,oneof"`
}

type ServerMessage_ReadDirRes struct {
	ReadDirRes *ReadDirRes `protobuf:"bytes,11,opt,name=readDirRes,proto3,oneof"`
}

type ServerMessage_ReadFileRes struct {
	ReadFileRes *ReadFileRes `protobuf:"bytes,12,opt,name=readFileRes,proto3,oneof"`
}

type ServerMessage_WriteFileRes struct {
	WriteFileRes *WriteFileRes `protobuf:"bytes,13,opt,name=writeFileRes,proto3,oneof"`
}

type ServerMessage_SetInodeAttRes struct {
	SetInodeAttRes *SetInodeAttRes `protobuf:"bytes,14,opt,name=setInodeAttRes,proto3,oneof"`
}

func (*ServerMessage_ContainerExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_CommandExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_TerminateExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_KillAgentRequest) isServerMessage_Message() {}

func (*ServerMessage_TunnelCreationRequest) isServerMessage_Message() {}

func (*ServerMessage_JupyterExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_StatFsRes) isServerMessage_Message() {}

func (*ServerMessage_FileInfoRes) isServerMessage_Message() {}

func (*ServerMessage_OpenDirRes) isServerMessage_Message() {}

func (*ServerMessage_OpenFileRes) isServerMessage_Message() {}

func (*ServerMessage_ReadDirRes) isServerMessage_Message() {}

func (*ServerMessage_ReadFileRes) isServerMessage_Message() {}

func (*ServerMessage_WriteFileRes) isServerMessage_Message() {}

func (*ServerMessage_SetInodeAttRes) isServerMessage_Message() {}

var File_agent_communication_proto protoreflect.FileDescriptor

var file_agent_communication_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2d, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x09, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x64, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x82, 0x01, 0x0a, 0x18, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x1a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a,
	0x16, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x33, 0x0a, 0x19, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x09, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77,
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x71, 0x0a, 0x18, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a,
	0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6a, 0x75, 0x70, 0x79, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x46, 0x73, 0x52, 0x65, 0x71,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x46, 0x73, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x46, 0x73, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75,
	0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69,
	0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x12, 0x49,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0c, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x52, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x52, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x73,
	0x68, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x79, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x22, 0x8b, 0x01, 0x0a, 0x17, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3d,
	0x0a, 0x19, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2a, 0x0a,
	0x10, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x83, 0x0a, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6e, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x74, 0x0a, 0x19, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61,
	0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x69,
	0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61,
	0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x17,
	0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x17, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x46, 0x73, 0x52, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x46,
	0x73, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x46, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69,
	0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x66, 0x75, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66,
	0x75, 0x73, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x52,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x66,
	0x75, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x52,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x74,
	0x74, 0x52, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x86, 0x01, 0x0a, 0x19, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x73, 0x12, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61,
	0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3f, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_agent_communication_proto_rawDescOnce sync.Once
	file_agent_communication_proto_rawDescData = file_agent_communication_proto_rawDesc
)

func file_agent_communication_proto_rawDescGZIP() []byte {
	file_agent_communication_proto_rawDescOnce.Do(func() {
		file_agent_communication_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_communication_proto_rawDescData)
	})
	return file_agent_communication_proto_rawDescData
}

var file_agent_communication_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_agent_communication_proto_goTypes = []any{
	(*AgentPing)(nil),                  // 0: org.apache.airavata.agent.AgentPing
	(*CommandExecutionResponse)(nil),   // 1: org.apache.airavata.agent.CommandExecutionResponse
	(*ContainerExecutionResponse)(nil), // 2: org.apache.airavata.agent.ContainerExecutionResponse
	(*JupyterExecutionResponse)(nil),   // 3: org.apache.airavata.agent.JupyterExecutionResponse
	(*TerminateExecutionResponse)(nil), // 4: org.apache.airavata.agent.TerminateExecutionResponse
	(*TunnelCreationResponse)(nil),     // 5: org.apache.airavata.agent.TunnelCreationResponse
	(*TunnelTerminationResponse)(nil),  // 6: org.apache.airavata.agent.TunnelTerminationResponse
	(*AgentMessage)(nil),               // 7: org.apache.airavata.agent.AgentMessage
	(*ContainerExecutionRequest)(nil),  // 8: org.apache.airavata.agent.ContainerExecutionRequest
	(*TunnelCreationRequest)(nil),      // 9: org.apache.airavata.agent.TunnelCreationRequest
	(*TunnelTerminationRequest)(nil),   // 10: org.apache.airavata.agent.TunnelTerminationRequest
	(*CommandExecutionRequest)(nil),    // 11: org.apache.airavata.agent.CommandExecutionRequest
	(*JupyterExecutionRequest)(nil),    // 12: org.apache.airavata.agent.JupyterExecutionRequest
	(*TerminateExecutionRequest)(nil),  // 13: org.apache.airavata.agent.TerminateExecutionRequest
	(*KillAgentRequest)(nil),           // 14: org.apache.airavata.agent.KillAgentRequest
	(*ServerMessage)(nil),              // 15: org.apache.airavata.agent.ServerMessage
	(*StatFsReq)(nil),                  // 16: org.apache.airavata.fuse.StatFsReq
	(*FileInfoReq)(nil),                // 17: org.apache.airavata.fuse.FileInfoReq
	(*OpenDirReq)(nil),                 // 18: org.apache.airavata.fuse.OpenDirReq
	(*OpenFileReq)(nil),                // 19: org.apache.airavata.fuse.OpenFileReq
	(*ReadDirReq)(nil),                 // 20: org.apache.airavata.fuse.ReadDirReq
	(*ReadFileReq)(nil),                // 21: org.apache.airavata.fuse.ReadFileReq
	(*WriteFileReq)(nil),               // 22: org.apache.airavata.fuse.WriteFileReq
	(*SetInodeAttReq)(nil),             // 23: org.apache.airavata.fuse.SetInodeAttReq
	(*StatFsRes)(nil),                  // 24: org.apache.airavata.fuse.StatFsRes
	(*FileInfoRes)(nil),                // 25: org.apache.airavata.fuse.FileInfoRes
	(*OpenDirRes)(nil),                 // 26: org.apache.airavata.fuse.OpenDirRes
	(*OpenFileRes)(nil),                // 27: org.apache.airavata.fuse.OpenFileRes
	(*ReadDirRes)(nil),                 // 28: org.apache.airavata.fuse.ReadDirRes
	(*ReadFileRes)(nil),                // 29: org.apache.airavata.fuse.ReadFileRes
	(*WriteFileRes)(nil),               // 30: org.apache.airavata.fuse.WriteFileRes
	(*SetInodeAttRes)(nil),             // 31: org.apache.airavata.fuse.SetInodeAttRes
}
var file_agent_communication_proto_depIdxs = []int32{
	0,  // 0: org.apache.airavata.agent.AgentMessage.agentPing:type_name -> org.apache.airavata.agent.AgentPing
	1,  // 1: org.apache.airavata.agent.AgentMessage.commandExecutionResponse:type_name -> org.apache.airavata.agent.CommandExecutionResponse
	2,  // 2: org.apache.airavata.agent.AgentMessage.containerExecutionResponse:type_name -> org.apache.airavata.agent.ContainerExecutionResponse
	4,  // 3: org.apache.airavata.agent.AgentMessage.terminateExecutionResponse:type_name -> org.apache.airavata.agent.TerminateExecutionResponse
	3,  // 4: org.apache.airavata.agent.AgentMessage.jupyterExecutionResponse:type_name -> org.apache.airavata.agent.JupyterExecutionResponse
	16, // 5: org.apache.airavata.agent.AgentMessage.statFsReq:type_name -> org.apache.airavata.fuse.StatFsReq
	17, // 6: org.apache.airavata.agent.AgentMessage.fileInfoReq:type_name -> org.apache.airavata.fuse.FileInfoReq
	18, // 7: org.apache.airavata.agent.AgentMessage.openDirReq:type_name -> org.apache.airavata.fuse.OpenDirReq
	19, // 8: org.apache.airavata.agent.AgentMessage.openFileReq:type_name -> org.apache.airavata.fuse.OpenFileReq
	20, // 9: org.apache.airavata.agent.AgentMessage.readDirReq:type_name -> org.apache.airavata.fuse.ReadDirReq
	21, // 10: org.apache.airavata.agent.AgentMessage.readFileReq:type_name -> org.apache.airavata.fuse.ReadFileReq
	22, // 11: org.apache.airavata.agent.AgentMessage.writeFileReq:type_name -> org.apache.airavata.fuse.WriteFileReq
	23, // 12: org.apache.airavata.agent.AgentMessage.setInodeAttReq:type_name -> org.apache.airavata.fuse.SetInodeAttReq
	8,  // 13: org.apache.airavata.agent.ServerMessage.containerExecutionRequest:type_name -> org.apache.airavata.agent.ContainerExecutionRequest
	11, // 14: org.apache.airavata.agent.ServerMessage.commandExecutionRequest:type_name -> org.apache.airavata.agent.CommandExecutionRequest
	13, // 15: org.apache.airavata.agent.ServerMessage.terminateExecutionRequest:type_name -> org.apache.airavata.agent.TerminateExecutionRequest
	14, // 16: org.apache.airavata.agent.ServerMessage.killAgentRequest:type_name -> org.apache.airavata.agent.KillAgentRequest
	9,  // 17: org.apache.airavata.agent.ServerMessage.tunnelCreationRequest:type_name -> org.apache.airavata.agent.TunnelCreationRequest
	12, // 18: org.apache.airavata.agent.ServerMessage.jupyterExecutionRequest:type_name -> org.apache.airavata.agent.JupyterExecutionRequest
	24, // 19: org.apache.airavata.agent.ServerMessage.statFsRes:type_name -> org.apache.airavata.fuse.StatFsRes
	25, // 20: org.apache.airavata.agent.ServerMessage.fileInfoRes:type_name -> org.apache.airavata.fuse.FileInfoRes
	26, // 21: org.apache.airavata.agent.ServerMessage.openDirRes:type_name -> org.apache.airavata.fuse.OpenDirRes
	27, // 22: org.apache.airavata.agent.ServerMessage.openFileRes:type_name -> org.apache.airavata.fuse.OpenFileRes
	28, // 23: org.apache.airavata.agent.ServerMessage.readDirRes:type_name -> org.apache.airavata.fuse.ReadDirRes
	29, // 24: org.apache.airavata.agent.ServerMessage.readFileRes:type_name -> org.apache.airavata.fuse.ReadFileRes
	30, // 25: org.apache.airavata.agent.ServerMessage.writeFileRes:type_name -> org.apache.airavata.fuse.WriteFileRes
	31, // 26: org.apache.airavata.agent.ServerMessage.setInodeAttRes:type_name -> org.apache.airavata.fuse.SetInodeAttRes
	7,  // 27: org.apache.airavata.agent.AgentCommunicationService.createMessageBus:input_type -> org.apache.airavata.agent.AgentMessage
	15, // 28: org.apache.airavata.agent.AgentCommunicationService.createMessageBus:output_type -> org.apache.airavata.agent.ServerMessage
	28, // [28:29] is the sub-list for method output_type
	27, // [27:28] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_agent_communication_proto_init() }
func file_agent_communication_proto_init() {
	if File_agent_communication_proto != nil {
		return
	}
	file_airavata_fuse_proto_init()
	file_agent_communication_proto_msgTypes[7].OneofWrappers = []any{
		(*AgentMessage_AgentPing)(nil),
		(*AgentMessage_CommandExecutionResponse)(nil),
		(*AgentMessage_ContainerExecutionResponse)(nil),
		(*AgentMessage_TerminateExecutionResponse)(nil),
		(*AgentMessage_JupyterExecutionResponse)(nil),
		(*AgentMessage_StatFsReq)(nil),
		(*AgentMessage_FileInfoReq)(nil),
		(*AgentMessage_OpenDirReq)(nil),
		(*AgentMessage_OpenFileReq)(nil),
		(*AgentMessage_ReadDirReq)(nil),
		(*AgentMessage_ReadFileReq)(nil),
		(*AgentMessage_WriteFileReq)(nil),
		(*AgentMessage_SetInodeAttReq)(nil),
	}
	file_agent_communication_proto_msgTypes[15].OneofWrappers = []any{
		(*ServerMessage_ContainerExecutionRequest)(nil),
		(*ServerMessage_CommandExecutionRequest)(nil),
		(*ServerMessage_TerminateExecutionRequest)(nil),
		(*ServerMessage_KillAgentRequest)(nil),
		(*ServerMessage_TunnelCreationRequest)(nil),
		(*ServerMessage_JupyterExecutionRequest)(nil),
		(*ServerMessage_StatFsRes)(nil),
		(*ServerMessage_FileInfoRes)(nil),
		(*ServerMessage_OpenDirRes)(nil),
		(*ServerMessage_OpenFileRes)(nil),
		(*ServerMessage_ReadDirRes)(nil),
		(*ServerMessage_ReadFileRes)(nil),
		(*ServerMessage_WriteFileRes)(nil),
		(*ServerMessage_SetInodeAttRes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_communication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_communication_proto_goTypes,
		DependencyIndexes: file_agent_communication_proto_depIdxs,
		MessageInfos:      file_agent_communication_proto_msgTypes,
	}.Build()
	File_agent_communication_proto = out.File
	file_agent_communication_proto_rawDesc = nil
	file_agent_communication_proto_goTypes = nil
	file_agent_communication_proto_depIdxs = nil
}
