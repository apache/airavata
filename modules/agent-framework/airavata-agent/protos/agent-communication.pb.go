//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: agent-communication.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// agent pinging the server
type AgentPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string `protobuf:"bytes,1,opt,name=agentId,proto3" json:"agentId,omitempty"`
}

func (x *AgentPing) Reset() {
	*x = AgentPing{}
	mi := &file_agent_communication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPing) ProtoMessage() {}

func (x *AgentPing) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPing.ProtoReflect.Descriptor instead.
func (*AgentPing) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{0}
}

func (x *AgentPing) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

// server requesting the agent to shutdown
type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string `protobuf:"bytes,1,opt,name=agentId,proto3" json:"agentId,omitempty"`
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_agent_communication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{1}
}

func (x *ShutdownRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

// server requesting the agent to create a new agent subprocess
type CreateAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string   `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	AgentId     string   `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
	ContainerId string   `protobuf:"bytes,3,opt,name=containerId,proto3" json:"containerId,omitempty"`
	WorkingDir  string   `protobuf:"bytes,4,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Mounts      []string `protobuf:"bytes,5,rep,name=mounts,proto3" json:"mounts,omitempty"`
}

func (x *CreateAgentRequest) Reset() {
	*x = CreateAgentRequest{}
	mi := &file_agent_communication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentRequest) ProtoMessage() {}

func (x *CreateAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentRequest.ProtoReflect.Descriptor instead.
func (*CreateAgentRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAgentRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CreateAgentRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *CreateAgentRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *CreateAgentRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *CreateAgentRequest) GetMounts() []string {
	if x != nil {
		return x.Mounts
	}
	return nil
}

type CreateAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	AgentId     string `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateAgentResponse) Reset() {
	*x = CreateAgentResponse{}
	mi := &file_agent_communication_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentResponse) ProtoMessage() {}

func (x *CreateAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentResponse.ProtoReflect.Descriptor instead.
func (*CreateAgentResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAgentResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CreateAgentResponse) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *CreateAgentResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// server requesting the agent to terminate an agent subprocess
type TerminateAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	AgentId     string `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
}

func (x *TerminateAgentRequest) Reset() {
	*x = TerminateAgentRequest{}
	mi := &file_agent_communication_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateAgentRequest) ProtoMessage() {}

func (x *TerminateAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateAgentRequest.ProtoReflect.Descriptor instead.
func (*TerminateAgentRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{4}
}

func (x *TerminateAgentRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TerminateAgentRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type TerminateAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	AgentId     string `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TerminateAgentResponse) Reset() {
	*x = TerminateAgentResponse{}
	mi := &file_agent_communication_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateAgentResponse) ProtoMessage() {}

func (x *TerminateAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateAgentResponse.ProtoReflect.Descriptor instead.
func (*TerminateAgentResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{5}
}

func (x *TerminateAgentResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TerminateAgentResponse) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TerminateAgentResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// server requesting the agent to setup an environment
type EnvSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string   `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	EnvName     string   `protobuf:"bytes,2,opt,name=envName,proto3" json:"envName,omitempty"`
	Libraries   []string `protobuf:"bytes,3,rep,name=libraries,proto3" json:"libraries,omitempty"`
	Pip         []string `protobuf:"bytes,4,rep,name=pip,proto3" json:"pip,omitempty"`
}

func (x *EnvSetupRequest) Reset() {
	*x = EnvSetupRequest{}
	mi := &file_agent_communication_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvSetupRequest) ProtoMessage() {}

func (x *EnvSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvSetupRequest.ProtoReflect.Descriptor instead.
func (*EnvSetupRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{6}
}

func (x *EnvSetupRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *EnvSetupRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *EnvSetupRequest) GetLibraries() []string {
	if x != nil {
		return x.Libraries
	}
	return nil
}

func (x *EnvSetupRequest) GetPip() []string {
	if x != nil {
		return x.Pip
	}
	return nil
}

type EnvSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EnvSetupResponse) Reset() {
	*x = EnvSetupResponse{}
	mi := &file_agent_communication_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvSetupResponse) ProtoMessage() {}

func (x *EnvSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvSetupResponse.ProtoReflect.Descriptor instead.
func (*EnvSetupResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{7}
}

func (x *EnvSetupResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *EnvSetupResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// server requesting the agent to execute a shell command in the environment
type CommandExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string   `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	EnvName     string   `protobuf:"bytes,2,opt,name=envName,proto3" json:"envName,omitempty"`
	WorkingDir  string   `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Arguments   []string `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *CommandExecutionRequest) Reset() {
	*x = CommandExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandExecutionRequest) ProtoMessage() {}

func (x *CommandExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandExecutionRequest.ProtoReflect.Descriptor instead.
func (*CommandExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{8}
}

func (x *CommandExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CommandExecutionRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *CommandExecutionRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *CommandExecutionRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type CommandExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId    string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ResponseString string `protobuf:"bytes,2,opt,name=responseString,proto3" json:"responseString,omitempty"`
}

func (x *CommandExecutionResponse) Reset() {
	*x = CommandExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandExecutionResponse) ProtoMessage() {}

func (x *CommandExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandExecutionResponse.ProtoReflect.Descriptor instead.
func (*CommandExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{9}
}

func (x *CommandExecutionResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CommandExecutionResponse) GetResponseString() string {
	if x != nil {
		return x.ResponseString
	}
	return ""
}

type AsyncCommandExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string   `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	EnvName     string   `protobuf:"bytes,2,opt,name=envName,proto3" json:"envName,omitempty"`
	WorkingDir  string   `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Arguments   []string `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *AsyncCommandExecutionRequest) Reset() {
	*x = AsyncCommandExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCommandExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCommandExecutionRequest) ProtoMessage() {}

func (x *AsyncCommandExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCommandExecutionRequest.ProtoReflect.Descriptor instead.
func (*AsyncCommandExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{10}
}

func (x *AsyncCommandExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *AsyncCommandExecutionRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *AsyncCommandExecutionRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *AsyncCommandExecutionRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type AsyncCommandExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId  string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ProcessId    int32  `protobuf:"varint,2,opt,name=processId,proto3" json:"processId,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *AsyncCommandExecutionResponse) Reset() {
	*x = AsyncCommandExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCommandExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCommandExecutionResponse) ProtoMessage() {}

func (x *AsyncCommandExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCommandExecutionResponse.ProtoReflect.Descriptor instead.
func (*AsyncCommandExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{11}
}

func (x *AsyncCommandExecutionResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *AsyncCommandExecutionResponse) GetProcessId() int32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *AsyncCommandExecutionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type AsyncCommandListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
}

func (x *AsyncCommandListRequest) Reset() {
	*x = AsyncCommandListRequest{}
	mi := &file_agent_communication_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCommandListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCommandListRequest) ProtoMessage() {}

func (x *AsyncCommandListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCommandListRequest.ProtoReflect.Descriptor instead.
func (*AsyncCommandListRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{12}
}

func (x *AsyncCommandListRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type AsyncCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId int32    `protobuf:"varint,1,opt,name=processId,proto3" json:"processId,omitempty"`
	Arguments []string `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *AsyncCommand) Reset() {
	*x = AsyncCommand{}
	mi := &file_agent_communication_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCommand) ProtoMessage() {}

func (x *AsyncCommand) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCommand.ProtoReflect.Descriptor instead.
func (*AsyncCommand) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{13}
}

func (x *AsyncCommand) GetProcessId() int32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *AsyncCommand) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type AsyncCommandListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string          `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Commands    []*AsyncCommand `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *AsyncCommandListResponse) Reset() {
	*x = AsyncCommandListResponse{}
	mi := &file_agent_communication_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCommandListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCommandListResponse) ProtoMessage() {}

func (x *AsyncCommandListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCommandListResponse.ProtoReflect.Descriptor instead.
func (*AsyncCommandListResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{14}
}

func (x *AsyncCommandListResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *AsyncCommandListResponse) GetCommands() []*AsyncCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

type AsyncCommandTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ProcessId   int32  `protobuf:"varint,2,opt,name=processId,proto3" json:"processId,omitempty"`
}

func (x *AsyncCommandTerminateRequest) Reset() {
	*x = AsyncCommandTerminateRequest{}
	mi := &file_agent_communication_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCommandTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCommandTerminateRequest) ProtoMessage() {}

func (x *AsyncCommandTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCommandTerminateRequest.ProtoReflect.Descriptor instead.
func (*AsyncCommandTerminateRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{15}
}

func (x *AsyncCommandTerminateRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *AsyncCommandTerminateRequest) GetProcessId() int32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

type AsyncCommandTerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AsyncCommandTerminateResponse) Reset() {
	*x = AsyncCommandTerminateResponse{}
	mi := &file_agent_communication_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncCommandTerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCommandTerminateResponse) ProtoMessage() {}

func (x *AsyncCommandTerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCommandTerminateResponse.ProtoReflect.Descriptor instead.
func (*AsyncCommandTerminateResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{16}
}

func (x *AsyncCommandTerminateResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *AsyncCommandTerminateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// server requesting the agent to execute a python script in the environment
type PythonExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	EnvName     string `protobuf:"bytes,2,opt,name=envName,proto3" json:"envName,omitempty"`
	WorkingDir  string `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Code        string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *PythonExecutionRequest) Reset() {
	*x = PythonExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PythonExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonExecutionRequest) ProtoMessage() {}

func (x *PythonExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonExecutionRequest.ProtoReflect.Descriptor instead.
func (*PythonExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{17}
}

func (x *PythonExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *PythonExecutionRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *PythonExecutionRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *PythonExecutionRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type PythonExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId    string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ResponseString string `protobuf:"bytes,2,opt,name=responseString,proto3" json:"responseString,omitempty"`
}

func (x *PythonExecutionResponse) Reset() {
	*x = PythonExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PythonExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonExecutionResponse) ProtoMessage() {}

func (x *PythonExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonExecutionResponse.ProtoReflect.Descriptor instead.
func (*PythonExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{18}
}

func (x *PythonExecutionResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *PythonExecutionResponse) GetResponseString() string {
	if x != nil {
		return x.ResponseString
	}
	return ""
}

// server requesting the agent to execute a jupyter notebook cell in the environment
type JupyterExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	EnvName     string `protobuf:"bytes,2,opt,name=envName,proto3" json:"envName,omitempty"`
	Code        string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *JupyterExecutionRequest) Reset() {
	*x = JupyterExecutionRequest{}
	mi := &file_agent_communication_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JupyterExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JupyterExecutionRequest) ProtoMessage() {}

func (x *JupyterExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JupyterExecutionRequest.ProtoReflect.Descriptor instead.
func (*JupyterExecutionRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{19}
}

func (x *JupyterExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *JupyterExecutionRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *JupyterExecutionRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type JupyterExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId    string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	ResponseString string `protobuf:"bytes,2,opt,name=responseString,proto3" json:"responseString,omitempty"`
}

func (x *JupyterExecutionResponse) Reset() {
	*x = JupyterExecutionResponse{}
	mi := &file_agent_communication_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JupyterExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JupyterExecutionResponse) ProtoMessage() {}

func (x *JupyterExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JupyterExecutionResponse.ProtoReflect.Descriptor instead.
func (*JupyterExecutionResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{20}
}

func (x *JupyterExecutionResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *JupyterExecutionResponse) GetResponseString() string {
	if x != nil {
		return x.ResponseString
	}
	return ""
}

// server requesting the agent to restart a jupyter kernel
type KernelRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	EnvName     string `protobuf:"bytes,2,opt,name=envName,proto3" json:"envName,omitempty"`
}

func (x *KernelRestartRequest) Reset() {
	*x = KernelRestartRequest{}
	mi := &file_agent_communication_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KernelRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelRestartRequest) ProtoMessage() {}

func (x *KernelRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelRestartRequest.ProtoReflect.Descriptor instead.
func (*KernelRestartRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{21}
}

func (x *KernelRestartRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *KernelRestartRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

type KernelRestartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KernelRestartResponse) Reset() {
	*x = KernelRestartResponse{}
	mi := &file_agent_communication_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KernelRestartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelRestartResponse) ProtoMessage() {}

func (x *KernelRestartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelRestartResponse.ProtoReflect.Descriptor instead.
func (*KernelRestartResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{22}
}

func (x *KernelRestartResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *KernelRestartResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// server requesting the agent to create a ssh tunnel
type TunnelCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId        string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	LocalPort          int32  `protobuf:"varint,2,opt,name=localPort,proto3" json:"localPort,omitempty"`
	LocalBindHost      string `protobuf:"bytes,3,opt,name=localBindHost,proto3" json:"localBindHost,omitempty"`
	TunnelServerHost   string `protobuf:"bytes,4,opt,name=tunnelServerHost,proto3" json:"tunnelServerHost,omitempty"`
	TunnelServerPort   int32  `protobuf:"varint,5,opt,name=tunnelServerPort,proto3" json:"tunnelServerPort,omitempty"`
	TunnelServerApiUrl string `protobuf:"bytes,6,opt,name=tunnelServerApiUrl,proto3" json:"tunnelServerApiUrl,omitempty"`
	TunnelServerToken  string `protobuf:"bytes,7,opt,name=tunnelServerToken,proto3" json:"tunnelServerToken,omitempty"`
}

func (x *TunnelCreationRequest) Reset() {
	*x = TunnelCreationRequest{}
	mi := &file_agent_communication_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelCreationRequest) ProtoMessage() {}

func (x *TunnelCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelCreationRequest.ProtoReflect.Descriptor instead.
func (*TunnelCreationRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{23}
}

func (x *TunnelCreationRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TunnelCreationRequest) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *TunnelCreationRequest) GetLocalBindHost() string {
	if x != nil {
		return x.LocalBindHost
	}
	return ""
}

func (x *TunnelCreationRequest) GetTunnelServerHost() string {
	if x != nil {
		return x.TunnelServerHost
	}
	return ""
}

func (x *TunnelCreationRequest) GetTunnelServerPort() int32 {
	if x != nil {
		return x.TunnelServerPort
	}
	return 0
}

func (x *TunnelCreationRequest) GetTunnelServerApiUrl() string {
	if x != nil {
		return x.TunnelServerApiUrl
	}
	return ""
}

func (x *TunnelCreationRequest) GetTunnelServerToken() string {
	if x != nil {
		return x.TunnelServerToken
	}
	return ""
}

type TunnelCreationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	TunnelHost  string `protobuf:"bytes,3,opt,name=tunnelHost,proto3" json:"tunnelHost,omitempty"`
	TunnelPort  int32  `protobuf:"varint,4,opt,name=tunnelPort,proto3" json:"tunnelPort,omitempty"`
	TunnelId    string `protobuf:"bytes,5,opt,name=tunnelId,proto3" json:"tunnelId,omitempty"`
}

func (x *TunnelCreationResponse) Reset() {
	*x = TunnelCreationResponse{}
	mi := &file_agent_communication_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelCreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelCreationResponse) ProtoMessage() {}

func (x *TunnelCreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelCreationResponse.ProtoReflect.Descriptor instead.
func (*TunnelCreationResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{24}
}

func (x *TunnelCreationResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TunnelCreationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TunnelCreationResponse) GetTunnelHost() string {
	if x != nil {
		return x.TunnelHost
	}
	return ""
}

func (x *TunnelCreationResponse) GetTunnelPort() int32 {
	if x != nil {
		return x.TunnelPort
	}
	return 0
}

func (x *TunnelCreationResponse) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

// server requesting the agent to terminate a ssh tunnel
type TunnelTerminationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	TunnelId    string `protobuf:"bytes,2,opt,name=tunnelId,proto3" json:"tunnelId,omitempty"`
}

func (x *TunnelTerminationRequest) Reset() {
	*x = TunnelTerminationRequest{}
	mi := &file_agent_communication_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelTerminationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelTerminationRequest) ProtoMessage() {}

func (x *TunnelTerminationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelTerminationRequest.ProtoReflect.Descriptor instead.
func (*TunnelTerminationRequest) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{25}
}

func (x *TunnelTerminationRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TunnelTerminationRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type TunnelTerminationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionId string `protobuf:"bytes,1,opt,name=executionId,proto3" json:"executionId,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TunnelTerminationResponse) Reset() {
	*x = TunnelTerminationResponse{}
	mi := &file_agent_communication_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelTerminationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelTerminationResponse) ProtoMessage() {}

func (x *TunnelTerminationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelTerminationResponse.ProtoReflect.Descriptor instead.
func (*TunnelTerminationResponse) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{26}
}

func (x *TunnelTerminationResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TunnelTerminationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Agent requesting the next job unit from the Job Workload
type RequestNextJobUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *RequestNextJobUnit) Reset() {
	*x = RequestNextJobUnit{}
	mi := &file_agent_communication_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestNextJobUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNextJobUnit) ProtoMessage() {}

func (x *RequestNextJobUnit) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNextJobUnit.ProtoReflect.Descriptor instead.
func (*RequestNextJobUnit) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{27}
}

func (x *RequestNextJobUnit) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

// Agent letting know the job unit is completed
type JobUnitCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobUnitId string `protobuf:"bytes,1,opt,name=job_unit_id,json=jobUnitId,proto3" json:"job_unit_id,omitempty"`
	ExitCode  int32  `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *JobUnitCompleted) Reset() {
	*x = JobUnitCompleted{}
	mi := &file_agent_communication_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobUnitCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobUnitCompleted) ProtoMessage() {}

func (x *JobUnitCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobUnitCompleted.ProtoReflect.Descriptor instead.
func (*JobUnitCompleted) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{28}
}

func (x *JobUnitCompleted) GetJobUnitId() string {
	if x != nil {
		return x.JobUnitId
	}
	return ""
}

func (x *JobUnitCompleted) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

// Server assigning the job unit with the resolved command
type AssignJobUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobUnitId       string `protobuf:"bytes,1,opt,name=job_unit_id,json=jobUnitId,proto3" json:"job_unit_id,omitempty"`
	ResolvedCommand string `protobuf:"bytes,2,opt,name=resolved_command,json=resolvedCommand,proto3" json:"resolved_command,omitempty"`
}

func (x *AssignJobUnit) Reset() {
	*x = AssignJobUnit{}
	mi := &file_agent_communication_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignJobUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignJobUnit) ProtoMessage() {}

func (x *AssignJobUnit) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignJobUnit.ProtoReflect.Descriptor instead.
func (*AssignJobUnit) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{29}
}

func (x *AssignJobUnit) GetJobUnitId() string {
	if x != nil {
		return x.JobUnitId
	}
	return ""
}

func (x *AssignJobUnit) GetResolvedCommand() string {
	if x != nil {
		return x.ResolvedCommand
	}
	return ""
}

// Server indicating the agent that there are no job units to be consumed
type NoJobUnitAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"` // "EMPTY" | "PREPARING"
}

func (x *NoJobUnitAvailable) Reset() {
	*x = NoJobUnitAvailable{}
	mi := &file_agent_communication_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoJobUnitAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoJobUnitAvailable) ProtoMessage() {}

func (x *NoJobUnitAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoJobUnitAvailable.ProtoReflect.Descriptor instead.
func (*NoJobUnitAvailable) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{30}
}

func (x *NoJobUnitAvailable) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AgentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*AgentMessage_AgentPing
	//	*AgentMessage_CreateAgentResponse
	//	*AgentMessage_TerminateAgentResponse
	//	*AgentMessage_EnvSetupResponse
	//	*AgentMessage_CommandExecutionResponse
	//	*AgentMessage_PythonExecutionResponse
	//	*AgentMessage_JupyterExecutionResponse
	//	*AgentMessage_KernelRestartResponse
	//	*AgentMessage_TunnelCreationResponse
	//	*AgentMessage_TunnelTerminationResponse
	//	*AgentMessage_AsyncCommandExecutionResponse
	//	*AgentMessage_AsyncCommandListResponse
	//	*AgentMessage_AsyncCommandTerminateResponse
	//	*AgentMessage_RequestNextJobUnit
	//	*AgentMessage_JobUnitCompleted
	Message isAgentMessage_Message `protobuf_oneof:"message"`
}

func (x *AgentMessage) Reset() {
	*x = AgentMessage{}
	mi := &file_agent_communication_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMessage) ProtoMessage() {}

func (x *AgentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMessage.ProtoReflect.Descriptor instead.
func (*AgentMessage) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{31}
}

func (m *AgentMessage) GetMessage() isAgentMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *AgentMessage) GetAgentPing() *AgentPing {
	if x, ok := x.GetMessage().(*AgentMessage_AgentPing); ok {
		return x.AgentPing
	}
	return nil
}

func (x *AgentMessage) GetCreateAgentResponse() *CreateAgentResponse {
	if x, ok := x.GetMessage().(*AgentMessage_CreateAgentResponse); ok {
		return x.CreateAgentResponse
	}
	return nil
}

func (x *AgentMessage) GetTerminateAgentResponse() *TerminateAgentResponse {
	if x, ok := x.GetMessage().(*AgentMessage_TerminateAgentResponse); ok {
		return x.TerminateAgentResponse
	}
	return nil
}

func (x *AgentMessage) GetEnvSetupResponse() *EnvSetupResponse {
	if x, ok := x.GetMessage().(*AgentMessage_EnvSetupResponse); ok {
		return x.EnvSetupResponse
	}
	return nil
}

func (x *AgentMessage) GetCommandExecutionResponse() *CommandExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_CommandExecutionResponse); ok {
		return x.CommandExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetPythonExecutionResponse() *PythonExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_PythonExecutionResponse); ok {
		return x.PythonExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetJupyterExecutionResponse() *JupyterExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_JupyterExecutionResponse); ok {
		return x.JupyterExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetKernelRestartResponse() *KernelRestartResponse {
	if x, ok := x.GetMessage().(*AgentMessage_KernelRestartResponse); ok {
		return x.KernelRestartResponse
	}
	return nil
}

func (x *AgentMessage) GetTunnelCreationResponse() *TunnelCreationResponse {
	if x, ok := x.GetMessage().(*AgentMessage_TunnelCreationResponse); ok {
		return x.TunnelCreationResponse
	}
	return nil
}

func (x *AgentMessage) GetTunnelTerminationResponse() *TunnelTerminationResponse {
	if x, ok := x.GetMessage().(*AgentMessage_TunnelTerminationResponse); ok {
		return x.TunnelTerminationResponse
	}
	return nil
}

func (x *AgentMessage) GetAsyncCommandExecutionResponse() *AsyncCommandExecutionResponse {
	if x, ok := x.GetMessage().(*AgentMessage_AsyncCommandExecutionResponse); ok {
		return x.AsyncCommandExecutionResponse
	}
	return nil
}

func (x *AgentMessage) GetAsyncCommandListResponse() *AsyncCommandListResponse {
	if x, ok := x.GetMessage().(*AgentMessage_AsyncCommandListResponse); ok {
		return x.AsyncCommandListResponse
	}
	return nil
}

func (x *AgentMessage) GetAsyncCommandTerminateResponse() *AsyncCommandTerminateResponse {
	if x, ok := x.GetMessage().(*AgentMessage_AsyncCommandTerminateResponse); ok {
		return x.AsyncCommandTerminateResponse
	}
	return nil
}

func (x *AgentMessage) GetRequestNextJobUnit() *RequestNextJobUnit {
	if x, ok := x.GetMessage().(*AgentMessage_RequestNextJobUnit); ok {
		return x.RequestNextJobUnit
	}
	return nil
}

func (x *AgentMessage) GetJobUnitCompleted() *JobUnitCompleted {
	if x, ok := x.GetMessage().(*AgentMessage_JobUnitCompleted); ok {
		return x.JobUnitCompleted
	}
	return nil
}

type isAgentMessage_Message interface {
	isAgentMessage_Message()
}

type AgentMessage_AgentPing struct {
	AgentPing *AgentPing `protobuf:"bytes,1,opt,name=agentPing,proto3,oneof"`
}

type AgentMessage_CreateAgentResponse struct {
	CreateAgentResponse *CreateAgentResponse `protobuf:"bytes,2,opt,name=createAgentResponse,proto3,oneof"`
}

type AgentMessage_TerminateAgentResponse struct {
	TerminateAgentResponse *TerminateAgentResponse `protobuf:"bytes,3,opt,name=terminateAgentResponse,proto3,oneof"`
}

type AgentMessage_EnvSetupResponse struct {
	EnvSetupResponse *EnvSetupResponse `protobuf:"bytes,4,opt,name=envSetupResponse,proto3,oneof"`
}

type AgentMessage_CommandExecutionResponse struct {
	CommandExecutionResponse *CommandExecutionResponse `protobuf:"bytes,5,opt,name=commandExecutionResponse,proto3,oneof"`
}

type AgentMessage_PythonExecutionResponse struct {
	PythonExecutionResponse *PythonExecutionResponse `protobuf:"bytes,6,opt,name=pythonExecutionResponse,proto3,oneof"`
}

type AgentMessage_JupyterExecutionResponse struct {
	JupyterExecutionResponse *JupyterExecutionResponse `protobuf:"bytes,7,opt,name=jupyterExecutionResponse,proto3,oneof"`
}

type AgentMessage_KernelRestartResponse struct {
	KernelRestartResponse *KernelRestartResponse `protobuf:"bytes,8,opt,name=kernelRestartResponse,proto3,oneof"`
}

type AgentMessage_TunnelCreationResponse struct {
	TunnelCreationResponse *TunnelCreationResponse `protobuf:"bytes,9,opt,name=tunnelCreationResponse,proto3,oneof"`
}

type AgentMessage_TunnelTerminationResponse struct {
	TunnelTerminationResponse *TunnelTerminationResponse `protobuf:"bytes,10,opt,name=tunnelTerminationResponse,proto3,oneof"`
}

type AgentMessage_AsyncCommandExecutionResponse struct {
	AsyncCommandExecutionResponse *AsyncCommandExecutionResponse `protobuf:"bytes,11,opt,name=asyncCommandExecutionResponse,proto3,oneof"`
}

type AgentMessage_AsyncCommandListResponse struct {
	AsyncCommandListResponse *AsyncCommandListResponse `protobuf:"bytes,12,opt,name=asyncCommandListResponse,proto3,oneof"`
}

type AgentMessage_AsyncCommandTerminateResponse struct {
	AsyncCommandTerminateResponse *AsyncCommandTerminateResponse `protobuf:"bytes,13,opt,name=asyncCommandTerminateResponse,proto3,oneof"`
}

type AgentMessage_RequestNextJobUnit struct {
	RequestNextJobUnit *RequestNextJobUnit `protobuf:"bytes,20,opt,name=requestNextJobUnit,proto3,oneof"`
}

type AgentMessage_JobUnitCompleted struct {
	JobUnitCompleted *JobUnitCompleted `protobuf:"bytes,21,opt,name=jobUnitCompleted,proto3,oneof"`
}

func (*AgentMessage_AgentPing) isAgentMessage_Message() {}

func (*AgentMessage_CreateAgentResponse) isAgentMessage_Message() {}

func (*AgentMessage_TerminateAgentResponse) isAgentMessage_Message() {}

func (*AgentMessage_EnvSetupResponse) isAgentMessage_Message() {}

func (*AgentMessage_CommandExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_PythonExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_JupyterExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_KernelRestartResponse) isAgentMessage_Message() {}

func (*AgentMessage_TunnelCreationResponse) isAgentMessage_Message() {}

func (*AgentMessage_TunnelTerminationResponse) isAgentMessage_Message() {}

func (*AgentMessage_AsyncCommandExecutionResponse) isAgentMessage_Message() {}

func (*AgentMessage_AsyncCommandListResponse) isAgentMessage_Message() {}

func (*AgentMessage_AsyncCommandTerminateResponse) isAgentMessage_Message() {}

func (*AgentMessage_RequestNextJobUnit) isAgentMessage_Message() {}

func (*AgentMessage_JobUnitCompleted) isAgentMessage_Message() {}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ServerMessage_ShutdownRequest
	//	*ServerMessage_CreateAgentRequest
	//	*ServerMessage_TerminateAgentRequest
	//	*ServerMessage_EnvSetupRequest
	//	*ServerMessage_CommandExecutionRequest
	//	*ServerMessage_PythonExecutionRequest
	//	*ServerMessage_JupyterExecutionRequest
	//	*ServerMessage_KernelRestartRequest
	//	*ServerMessage_TunnelCreationRequest
	//	*ServerMessage_TunnelTerminationRequest
	//	*ServerMessage_AsyncCommandExecutionRequest
	//	*ServerMessage_AsyncCommandListRequest
	//	*ServerMessage_AsyncCommandTerminateRequest
	//	*ServerMessage_AssignJobUnit
	//	*ServerMessage_NoJobUnitAvailable
	Message isServerMessage_Message `protobuf_oneof:"message"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	mi := &file_agent_communication_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_agent_communication_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_agent_communication_proto_rawDescGZIP(), []int{32}
}

func (m *ServerMessage) GetMessage() isServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerMessage) GetShutdownRequest() *ShutdownRequest {
	if x, ok := x.GetMessage().(*ServerMessage_ShutdownRequest); ok {
		return x.ShutdownRequest
	}
	return nil
}

func (x *ServerMessage) GetCreateAgentRequest() *CreateAgentRequest {
	if x, ok := x.GetMessage().(*ServerMessage_CreateAgentRequest); ok {
		return x.CreateAgentRequest
	}
	return nil
}

func (x *ServerMessage) GetTerminateAgentRequest() *TerminateAgentRequest {
	if x, ok := x.GetMessage().(*ServerMessage_TerminateAgentRequest); ok {
		return x.TerminateAgentRequest
	}
	return nil
}

func (x *ServerMessage) GetEnvSetupRequest() *EnvSetupRequest {
	if x, ok := x.GetMessage().(*ServerMessage_EnvSetupRequest); ok {
		return x.EnvSetupRequest
	}
	return nil
}

func (x *ServerMessage) GetCommandExecutionRequest() *CommandExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_CommandExecutionRequest); ok {
		return x.CommandExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetPythonExecutionRequest() *PythonExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_PythonExecutionRequest); ok {
		return x.PythonExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetJupyterExecutionRequest() *JupyterExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_JupyterExecutionRequest); ok {
		return x.JupyterExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetKernelRestartRequest() *KernelRestartRequest {
	if x, ok := x.GetMessage().(*ServerMessage_KernelRestartRequest); ok {
		return x.KernelRestartRequest
	}
	return nil
}

func (x *ServerMessage) GetTunnelCreationRequest() *TunnelCreationRequest {
	if x, ok := x.GetMessage().(*ServerMessage_TunnelCreationRequest); ok {
		return x.TunnelCreationRequest
	}
	return nil
}

func (x *ServerMessage) GetTunnelTerminationRequest() *TunnelTerminationRequest {
	if x, ok := x.GetMessage().(*ServerMessage_TunnelTerminationRequest); ok {
		return x.TunnelTerminationRequest
	}
	return nil
}

func (x *ServerMessage) GetAsyncCommandExecutionRequest() *AsyncCommandExecutionRequest {
	if x, ok := x.GetMessage().(*ServerMessage_AsyncCommandExecutionRequest); ok {
		return x.AsyncCommandExecutionRequest
	}
	return nil
}

func (x *ServerMessage) GetAsyncCommandListRequest() *AsyncCommandListRequest {
	if x, ok := x.GetMessage().(*ServerMessage_AsyncCommandListRequest); ok {
		return x.AsyncCommandListRequest
	}
	return nil
}

func (x *ServerMessage) GetAsyncCommandTerminateRequest() *AsyncCommandTerminateRequest {
	if x, ok := x.GetMessage().(*ServerMessage_AsyncCommandTerminateRequest); ok {
		return x.AsyncCommandTerminateRequest
	}
	return nil
}

func (x *ServerMessage) GetAssignJobUnit() *AssignJobUnit {
	if x, ok := x.GetMessage().(*ServerMessage_AssignJobUnit); ok {
		return x.AssignJobUnit
	}
	return nil
}

func (x *ServerMessage) GetNoJobUnitAvailable() *NoJobUnitAvailable {
	if x, ok := x.GetMessage().(*ServerMessage_NoJobUnitAvailable); ok {
		return x.NoJobUnitAvailable
	}
	return nil
}

type isServerMessage_Message interface {
	isServerMessage_Message()
}

type ServerMessage_ShutdownRequest struct {
	ShutdownRequest *ShutdownRequest `protobuf:"bytes,1,opt,name=shutdownRequest,proto3,oneof"`
}

type ServerMessage_CreateAgentRequest struct {
	CreateAgentRequest *CreateAgentRequest `protobuf:"bytes,2,opt,name=createAgentRequest,proto3,oneof"`
}

type ServerMessage_TerminateAgentRequest struct {
	TerminateAgentRequest *TerminateAgentRequest `protobuf:"bytes,3,opt,name=terminateAgentRequest,proto3,oneof"`
}

type ServerMessage_EnvSetupRequest struct {
	EnvSetupRequest *EnvSetupRequest `protobuf:"bytes,4,opt,name=envSetupRequest,proto3,oneof"`
}

type ServerMessage_CommandExecutionRequest struct {
	CommandExecutionRequest *CommandExecutionRequest `protobuf:"bytes,5,opt,name=commandExecutionRequest,proto3,oneof"`
}

type ServerMessage_PythonExecutionRequest struct {
	PythonExecutionRequest *PythonExecutionRequest `protobuf:"bytes,6,opt,name=pythonExecutionRequest,proto3,oneof"`
}

type ServerMessage_JupyterExecutionRequest struct {
	JupyterExecutionRequest *JupyterExecutionRequest `protobuf:"bytes,7,opt,name=jupyterExecutionRequest,proto3,oneof"`
}

type ServerMessage_KernelRestartRequest struct {
	KernelRestartRequest *KernelRestartRequest `protobuf:"bytes,8,opt,name=kernelRestartRequest,proto3,oneof"`
}

type ServerMessage_TunnelCreationRequest struct {
	TunnelCreationRequest *TunnelCreationRequest `protobuf:"bytes,9,opt,name=tunnelCreationRequest,proto3,oneof"`
}

type ServerMessage_TunnelTerminationRequest struct {
	TunnelTerminationRequest *TunnelTerminationRequest `protobuf:"bytes,10,opt,name=tunnelTerminationRequest,proto3,oneof"`
}

type ServerMessage_AsyncCommandExecutionRequest struct {
	AsyncCommandExecutionRequest *AsyncCommandExecutionRequest `protobuf:"bytes,11,opt,name=asyncCommandExecutionRequest,proto3,oneof"`
}

type ServerMessage_AsyncCommandListRequest struct {
	AsyncCommandListRequest *AsyncCommandListRequest `protobuf:"bytes,12,opt,name=asyncCommandListRequest,proto3,oneof"`
}

type ServerMessage_AsyncCommandTerminateRequest struct {
	AsyncCommandTerminateRequest *AsyncCommandTerminateRequest `protobuf:"bytes,13,opt,name=asyncCommandTerminateRequest,proto3,oneof"`
}

type ServerMessage_AssignJobUnit struct {
	AssignJobUnit *AssignJobUnit `protobuf:"bytes,20,opt,name=assignJobUnit,proto3,oneof"`
}

type ServerMessage_NoJobUnitAvailable struct {
	NoJobUnitAvailable *NoJobUnitAvailable `protobuf:"bytes,21,opt,name=noJobUnitAvailable,proto3,oneof"`
}

func (*ServerMessage_ShutdownRequest) isServerMessage_Message() {}

func (*ServerMessage_CreateAgentRequest) isServerMessage_Message() {}

func (*ServerMessage_TerminateAgentRequest) isServerMessage_Message() {}

func (*ServerMessage_EnvSetupRequest) isServerMessage_Message() {}

func (*ServerMessage_CommandExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_PythonExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_JupyterExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_KernelRestartRequest) isServerMessage_Message() {}

func (*ServerMessage_TunnelCreationRequest) isServerMessage_Message() {}

func (*ServerMessage_TunnelTerminationRequest) isServerMessage_Message() {}

func (*ServerMessage_AsyncCommandExecutionRequest) isServerMessage_Message() {}

func (*ServerMessage_AsyncCommandListRequest) isServerMessage_Message() {}

func (*ServerMessage_AsyncCommandTerminateRequest) isServerMessage_Message() {}

func (*ServerMessage_AssignJobUnit) isServerMessage_Message() {}

func (*ServerMessage_NoJobUnitAvailable) isServerMessage_Message() {}

var File_agent_communication_proto protoreflect.FileDescriptor

var file_agent_communication_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2b, 0x0a,
	0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x16, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x70, 0x22, 0x4c, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x98,
	0x01, 0x0a, 0x1c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3b, 0x0a, 0x17, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0c,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x1c,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1d,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x63, 0x0a, 0x17, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x17, 0x4a, 0x75, 0x70, 0x79, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x64, 0x0a, 0x18, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x52, 0x0a, 0x14, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x15,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xb3, 0x02, 0x0a, 0x15, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x55, 0x0a, 0x19, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6a, 0x6f,
	0x62, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x4e, 0x6f, 0x4a, 0x6f, 0x62, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xe3, 0x0c, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x13, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b,
	0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x65,
	0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x17, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x6a, 0x75, 0x70,
	0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x18, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61,
	0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x1d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6a, 0x6f,
	0x62, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc7, 0x0c, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x16, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x17, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6a, 0x75, 0x70, 0x79,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x14, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61,
	0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x18, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x1c, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x17, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x1c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a,
	0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4a,
	0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x5f, 0x0a, 0x12, 0x6e, 0x6f, 0x4a, 0x6f, 0x62,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x6f, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x69, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x86, 0x01, 0x0a, 0x19, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x69, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x28,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3f, 0x0a, 0x19,
	0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x61, 0x69, 0x72, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_communication_proto_rawDescOnce sync.Once
	file_agent_communication_proto_rawDescData = file_agent_communication_proto_rawDesc
)

func file_agent_communication_proto_rawDescGZIP() []byte {
	file_agent_communication_proto_rawDescOnce.Do(func() {
		file_agent_communication_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_communication_proto_rawDescData)
	})
	return file_agent_communication_proto_rawDescData
}

var file_agent_communication_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_agent_communication_proto_goTypes = []any{
	(*AgentPing)(nil),                     // 0: org.apache.airavata.agent.AgentPing
	(*ShutdownRequest)(nil),               // 1: org.apache.airavata.agent.ShutdownRequest
	(*CreateAgentRequest)(nil),            // 2: org.apache.airavata.agent.CreateAgentRequest
	(*CreateAgentResponse)(nil),           // 3: org.apache.airavata.agent.CreateAgentResponse
	(*TerminateAgentRequest)(nil),         // 4: org.apache.airavata.agent.TerminateAgentRequest
	(*TerminateAgentResponse)(nil),        // 5: org.apache.airavata.agent.TerminateAgentResponse
	(*EnvSetupRequest)(nil),               // 6: org.apache.airavata.agent.EnvSetupRequest
	(*EnvSetupResponse)(nil),              // 7: org.apache.airavata.agent.EnvSetupResponse
	(*CommandExecutionRequest)(nil),       // 8: org.apache.airavata.agent.CommandExecutionRequest
	(*CommandExecutionResponse)(nil),      // 9: org.apache.airavata.agent.CommandExecutionResponse
	(*AsyncCommandExecutionRequest)(nil),  // 10: org.apache.airavata.agent.AsyncCommandExecutionRequest
	(*AsyncCommandExecutionResponse)(nil), // 11: org.apache.airavata.agent.AsyncCommandExecutionResponse
	(*AsyncCommandListRequest)(nil),       // 12: org.apache.airavata.agent.AsyncCommandListRequest
	(*AsyncCommand)(nil),                  // 13: org.apache.airavata.agent.AsyncCommand
	(*AsyncCommandListResponse)(nil),      // 14: org.apache.airavata.agent.AsyncCommandListResponse
	(*AsyncCommandTerminateRequest)(nil),  // 15: org.apache.airavata.agent.AsyncCommandTerminateRequest
	(*AsyncCommandTerminateResponse)(nil), // 16: org.apache.airavata.agent.AsyncCommandTerminateResponse
	(*PythonExecutionRequest)(nil),        // 17: org.apache.airavata.agent.PythonExecutionRequest
	(*PythonExecutionResponse)(nil),       // 18: org.apache.airavata.agent.PythonExecutionResponse
	(*JupyterExecutionRequest)(nil),       // 19: org.apache.airavata.agent.JupyterExecutionRequest
	(*JupyterExecutionResponse)(nil),      // 20: org.apache.airavata.agent.JupyterExecutionResponse
	(*KernelRestartRequest)(nil),          // 21: org.apache.airavata.agent.KernelRestartRequest
	(*KernelRestartResponse)(nil),         // 22: org.apache.airavata.agent.KernelRestartResponse
	(*TunnelCreationRequest)(nil),         // 23: org.apache.airavata.agent.TunnelCreationRequest
	(*TunnelCreationResponse)(nil),        // 24: org.apache.airavata.agent.TunnelCreationResponse
	(*TunnelTerminationRequest)(nil),      // 25: org.apache.airavata.agent.TunnelTerminationRequest
	(*TunnelTerminationResponse)(nil),     // 26: org.apache.airavata.agent.TunnelTerminationResponse
	(*RequestNextJobUnit)(nil),            // 27: org.apache.airavata.agent.RequestNextJobUnit
	(*JobUnitCompleted)(nil),              // 28: org.apache.airavata.agent.JobUnitCompleted
	(*AssignJobUnit)(nil),                 // 29: org.apache.airavata.agent.AssignJobUnit
	(*NoJobUnitAvailable)(nil),            // 30: org.apache.airavata.agent.NoJobUnitAvailable
	(*AgentMessage)(nil),                  // 31: org.apache.airavata.agent.AgentMessage
	(*ServerMessage)(nil),                 // 32: org.apache.airavata.agent.ServerMessage
}
var file_agent_communication_proto_depIdxs = []int32{
	13, // 0: org.apache.airavata.agent.AsyncCommandListResponse.commands:type_name -> org.apache.airavata.agent.AsyncCommand
	0,  // 1: org.apache.airavata.agent.AgentMessage.agentPing:type_name -> org.apache.airavata.agent.AgentPing
	3,  // 2: org.apache.airavata.agent.AgentMessage.createAgentResponse:type_name -> org.apache.airavata.agent.CreateAgentResponse
	5,  // 3: org.apache.airavata.agent.AgentMessage.terminateAgentResponse:type_name -> org.apache.airavata.agent.TerminateAgentResponse
	7,  // 4: org.apache.airavata.agent.AgentMessage.envSetupResponse:type_name -> org.apache.airavata.agent.EnvSetupResponse
	9,  // 5: org.apache.airavata.agent.AgentMessage.commandExecutionResponse:type_name -> org.apache.airavata.agent.CommandExecutionResponse
	18, // 6: org.apache.airavata.agent.AgentMessage.pythonExecutionResponse:type_name -> org.apache.airavata.agent.PythonExecutionResponse
	20, // 7: org.apache.airavata.agent.AgentMessage.jupyterExecutionResponse:type_name -> org.apache.airavata.agent.JupyterExecutionResponse
	22, // 8: org.apache.airavata.agent.AgentMessage.kernelRestartResponse:type_name -> org.apache.airavata.agent.KernelRestartResponse
	24, // 9: org.apache.airavata.agent.AgentMessage.tunnelCreationResponse:type_name -> org.apache.airavata.agent.TunnelCreationResponse
	26, // 10: org.apache.airavata.agent.AgentMessage.tunnelTerminationResponse:type_name -> org.apache.airavata.agent.TunnelTerminationResponse
	11, // 11: org.apache.airavata.agent.AgentMessage.asyncCommandExecutionResponse:type_name -> org.apache.airavata.agent.AsyncCommandExecutionResponse
	14, // 12: org.apache.airavata.agent.AgentMessage.asyncCommandListResponse:type_name -> org.apache.airavata.agent.AsyncCommandListResponse
	16, // 13: org.apache.airavata.agent.AgentMessage.asyncCommandTerminateResponse:type_name -> org.apache.airavata.agent.AsyncCommandTerminateResponse
	27, // 14: org.apache.airavata.agent.AgentMessage.requestNextJobUnit:type_name -> org.apache.airavata.agent.RequestNextJobUnit
	28, // 15: org.apache.airavata.agent.AgentMessage.jobUnitCompleted:type_name -> org.apache.airavata.agent.JobUnitCompleted
	1,  // 16: org.apache.airavata.agent.ServerMessage.shutdownRequest:type_name -> org.apache.airavata.agent.ShutdownRequest
	2,  // 17: org.apache.airavata.agent.ServerMessage.createAgentRequest:type_name -> org.apache.airavata.agent.CreateAgentRequest
	4,  // 18: org.apache.airavata.agent.ServerMessage.terminateAgentRequest:type_name -> org.apache.airavata.agent.TerminateAgentRequest
	6,  // 19: org.apache.airavata.agent.ServerMessage.envSetupRequest:type_name -> org.apache.airavata.agent.EnvSetupRequest
	8,  // 20: org.apache.airavata.agent.ServerMessage.commandExecutionRequest:type_name -> org.apache.airavata.agent.CommandExecutionRequest
	17, // 21: org.apache.airavata.agent.ServerMessage.pythonExecutionRequest:type_name -> org.apache.airavata.agent.PythonExecutionRequest
	19, // 22: org.apache.airavata.agent.ServerMessage.jupyterExecutionRequest:type_name -> org.apache.airavata.agent.JupyterExecutionRequest
	21, // 23: org.apache.airavata.agent.ServerMessage.kernelRestartRequest:type_name -> org.apache.airavata.agent.KernelRestartRequest
	23, // 24: org.apache.airavata.agent.ServerMessage.tunnelCreationRequest:type_name -> org.apache.airavata.agent.TunnelCreationRequest
	25, // 25: org.apache.airavata.agent.ServerMessage.tunnelTerminationRequest:type_name -> org.apache.airavata.agent.TunnelTerminationRequest
	10, // 26: org.apache.airavata.agent.ServerMessage.asyncCommandExecutionRequest:type_name -> org.apache.airavata.agent.AsyncCommandExecutionRequest
	12, // 27: org.apache.airavata.agent.ServerMessage.asyncCommandListRequest:type_name -> org.apache.airavata.agent.AsyncCommandListRequest
	15, // 28: org.apache.airavata.agent.ServerMessage.asyncCommandTerminateRequest:type_name -> org.apache.airavata.agent.AsyncCommandTerminateRequest
	29, // 29: org.apache.airavata.agent.ServerMessage.assignJobUnit:type_name -> org.apache.airavata.agent.AssignJobUnit
	30, // 30: org.apache.airavata.agent.ServerMessage.noJobUnitAvailable:type_name -> org.apache.airavata.agent.NoJobUnitAvailable
	31, // 31: org.apache.airavata.agent.AgentCommunicationService.createMessageBus:input_type -> org.apache.airavata.agent.AgentMessage
	32, // 32: org.apache.airavata.agent.AgentCommunicationService.createMessageBus:output_type -> org.apache.airavata.agent.ServerMessage
	32, // [32:33] is the sub-list for method output_type
	31, // [31:32] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_agent_communication_proto_init() }
func file_agent_communication_proto_init() {
	if File_agent_communication_proto != nil {
		return
	}
	file_agent_communication_proto_msgTypes[31].OneofWrappers = []any{
		(*AgentMessage_AgentPing)(nil),
		(*AgentMessage_CreateAgentResponse)(nil),
		(*AgentMessage_TerminateAgentResponse)(nil),
		(*AgentMessage_EnvSetupResponse)(nil),
		(*AgentMessage_CommandExecutionResponse)(nil),
		(*AgentMessage_PythonExecutionResponse)(nil),
		(*AgentMessage_JupyterExecutionResponse)(nil),
		(*AgentMessage_KernelRestartResponse)(nil),
		(*AgentMessage_TunnelCreationResponse)(nil),
		(*AgentMessage_TunnelTerminationResponse)(nil),
		(*AgentMessage_AsyncCommandExecutionResponse)(nil),
		(*AgentMessage_AsyncCommandListResponse)(nil),
		(*AgentMessage_AsyncCommandTerminateResponse)(nil),
		(*AgentMessage_RequestNextJobUnit)(nil),
		(*AgentMessage_JobUnitCompleted)(nil),
	}
	file_agent_communication_proto_msgTypes[32].OneofWrappers = []any{
		(*ServerMessage_ShutdownRequest)(nil),
		(*ServerMessage_CreateAgentRequest)(nil),
		(*ServerMessage_TerminateAgentRequest)(nil),
		(*ServerMessage_EnvSetupRequest)(nil),
		(*ServerMessage_CommandExecutionRequest)(nil),
		(*ServerMessage_PythonExecutionRequest)(nil),
		(*ServerMessage_JupyterExecutionRequest)(nil),
		(*ServerMessage_KernelRestartRequest)(nil),
		(*ServerMessage_TunnelCreationRequest)(nil),
		(*ServerMessage_TunnelTerminationRequest)(nil),
		(*ServerMessage_AsyncCommandExecutionRequest)(nil),
		(*ServerMessage_AsyncCommandListRequest)(nil),
		(*ServerMessage_AsyncCommandTerminateRequest)(nil),
		(*ServerMessage_AssignJobUnit)(nil),
		(*ServerMessage_NoJobUnitAvailable)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_communication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_communication_proto_goTypes,
		DependencyIndexes: file_agent_communication_proto_depIdxs,
		MessageInfos:      file_agent_communication_proto_msgTypes,
	}.Build()
	File_agent_communication_proto = out.File
	file_agent_communication_proto_rawDesc = nil
	file_agent_communication_proto_goTypes = nil
	file_agent_communication_proto_depIdxs = nil
}
